<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里二面：如何定位&amp;避免死锁？连着两个面试问到了！</title>
      <link href="/article/javadeadlock.html"/>
      <url>/article/javadeadlock.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在面试过程中，死锁是必问的知识点，当然死锁也是我们日常开发中也会遇到的一个问题，同时一些业务场景例如库存扣减，银行转账等都需要去考虑如何避免死锁，一旦线上发生了死锁，那可能年终不保。。。。。下面我们就来聊一聊死锁如何定位，以及如何避免。</p><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>死锁（Deadlock）是指在操作系统里，两个或多个并发线程在执行过程中，因争夺资源而造成的一种互相等待的现象，且无外力干预的情况下，这些线程都无法进一步执行下去。每个线程至少持有一个资源并等待其他线程所持有的资源才能继续执行，从而形成了一个循环等待链，导致所有线程都被阻塞，无法顺利完成。</p><p>假设有两个仓库A和B，它们之间在进行商品调拨。线程T1负责将商品从仓库A调拨到仓库B，而线程T2负责将商品从仓库B调拨到仓库A。每个线程在执行调拨操作时，需要先获取调出仓库和调入仓库的锁，以保证调拨操作的原子性。现在，假设线程T1已经获取了仓库A的锁并且正在等待获取仓库B的锁，而线程T2已经获取了仓库B的锁并且正在等待获取仓库A的锁。这时，线程T1持有仓库A的锁并且等待仓库B的锁，线程T2持有仓库B的锁并且等待仓库A的锁。由于彼此都在等待对方持有的锁，因此两个线程都无法继续执行，导致了死锁的发生。</p><h3 id="死锁产生的条件"><a href="#死锁产生的条件" class="headerlink" title="死锁产生的条件"></a>死锁产生的条件</h3><p>死锁的产生必须满足以下四个条件。当这四个条件同时满足时，就可能发生死锁。</p><h4 id="互斥条件"><a href="#互斥条件" class="headerlink" title="互斥条件"></a>互斥条件</h4><p>资源不能同时被多个线程占用。如果一个资源被一个线程占用，其他线程必须等待释放。也就是所谓的互斥锁。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302161140.png" alt="互斥条件.png"></p><p>如上图线程T1已经持有了资源，那么该资源就不能再同时被线程T2持有，如果线程T2想要获取资源，就要一直等待（即线程T2阻塞），一直到线程T1释放资源。</p><h4 id="占有并且等待条件"><a href="#占有并且等待条件" class="headerlink" title="占有并且等待条件"></a>占有并且等待条件</h4><p>当前线程已经占有至少一个资源，此时还想请求其他线程占有的其他资源时就会造成等待，在这个等待过程中对已获得的资源也不会释放。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302162150.png" alt="占有并且等待条件.png"></p><p>如上图当线程T1已经持有了资源1，又想申请获取资源2，而资源2已经被线程T3持有了，所以线程T1就会处于等待状态，但是<strong>线程T1在等待资源2的同时并不会释放自己已经持有的资源1</strong>。</p><h4 id="不可抢占条件"><a href="#不可抢占条件" class="headerlink" title="不可抢占条件"></a>不可抢占条件</h4><p>当前已经被持有的资源只能由持有它的线程释放，其他线程不可以强行占有该资源。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302163122.png" alt="不可抢占条件.png"></p><p>如上图线程T1已经持有了资源 ，<strong>在自己使用完之前不能被其他线程获取</strong>，线程T2如果也想使用此资源，则只能在线程T1使用完并释放后才能获取。</p><h4 id="循环等待条件"><a href="#循环等待条件" class="headerlink" title="循环等待条件"></a>循环等待条件</h4><p>在发生死锁时，必然存在一个线程-资源的环形链，链中的每个线程正等待下一个线程所占用资源的释放。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302163949.png" alt="image.png"></p><p>如上图线程T1等待线程T2占有的资源，而线程T2等待线程T1占有的资源，两个线程互相等待，这样就形成了循环等待。</p><h3 id="模拟死锁"><a href="#模拟死锁" class="headerlink" title="模拟死锁"></a>模拟死锁</h3><p>以文章解释死锁概念的例子为例，我们使用代码模拟死锁。</p><p>我们先模拟调拨商品操作库存的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuStock</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String sku<span class="token punctuation">;</span>      <span class="token keyword">private</span> String warehouse<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer qty<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">SkuStock</span><span class="token punctuation">(</span>String sku<span class="token punctuation">,</span> String warehouse<span class="token punctuation">,</span> Integer qty<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>sku <span class="token operator">=</span> sku<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>warehouse <span class="token operator">=</span> warehouse<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">=</span> qty<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**    * 调拨库存，操作库存    */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>                <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>                targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在模拟线程T1进行仓库A向仓库B调拨商品，线程t2进行仓库B向仓库A调拨商品。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SkuStock skuStockA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuStock</span><span class="token punctuation">(</span><span class="token string">"SKU"</span><span class="token punctuation">,</span> <span class="token string">"WA"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SkuStock skuStockB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuStock</span><span class="token punctuation">(</span><span class="token string">"SKU"</span><span class="token punctuation">,</span> <span class="token string">"WB"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          skuStockA<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>skuStockB<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          skuStockB<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>skuStockA<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们运行代码，就会发现代码只打印了开始操作库存，没有结束操作的日志，此时就会发生了死锁。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302164735.png" alt="image.png"></p><h3 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h3><p>当我们的程序发生死锁时，我们需要排查，找出问题所在，关于死锁的排查工具，我们可以使用JDK自带的<code>jstack</code>工具，也可以使用一些可视化工具例如：<code>VisualVM</code>，<code>JConsole</code>等。</p><h4 id="jstack工具"><a href="#jstack工具" class="headerlink" title="jstack工具"></a>jstack工具</h4><p><code>jstack</code>是JDK自带的一款强大的故障诊断工具，主要用于获取Java应用程序的线程堆栈信息，这对于分析Java程序的运行状态、排查性能瓶颈、定位死锁、冻结线程以及其他多线程相关的问题具有非常重要的作用。<br>对于以上死锁程序，我们先使用<code>jps</code>工具列出当前系统中所有的Java进程的进程ID（PID）。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302172543.png" alt="image.png"></p><p>然后针对目标Java进程，使用<code>jstack</code>命令生成线程堆栈快照，它将输出Java进程中所有线程的详细堆栈信息。</p><pre class="line-numbers language-cmd"><code class="language-cmd">jstack 24749<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们可以看到输出的日志中，指明了应用程序发生死锁的原因。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302173007.png" alt="image.png"></p><p>可以看到对于线程T1等待着线程T2锁住的<code>0x000000070fd53c38</code>这个资源，同时锁住了<code>0x000000070fd53bc0</code>这个资源，而对于线程T2，它等待着线程T1锁住的<code>0x000000070fd53bc0</code>这个资源，同时锁住了<code>0x000000070fd53c38</code>这个资源，这样就发生了死锁。</p><p><code>jstack</code>输出中会包含有关线程等待锁的信息。如果存在死锁，你会看到线程在等待一个它自己或其他线程已经持有的锁，形成一个等待链条。死锁信息通常会明确指出哪些线程参与了死锁。</p><h4 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h4><p><code>VisualVM</code>是一款强大的Java性能分析和故障排除工具，它是Oracle开发并随JDK一起提供的一个综合性桌面应用程序。<code>VisualVM</code>整合了多个独立的JDK命令行工具的功能，如<code>jstat</code>、<code>jmap</code>、<code>jstack</code>、<code>jinfo</code>等，并且提供了丰富的图形用户界面，使开发者能够更容易地监控和分析Java应用程序的性能、内存消耗、线程行为、垃圾收集等各方面信息。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302173824.png" alt="image.png"></p><p>他会提示你发生了死锁了，进入<code>Thread Dump</code>中查看具体的信息。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302173917.png" alt="image.png"></p><p>效果等同于使用<code>jstack</code>命令输出的日志信息。</p><h3 id="如何避免死锁问题的发生"><a href="#如何避免死锁问题的发生" class="headerlink" title="如何避免死锁问题的发生"></a>如何避免死锁问题的发生</h3><p>前面我们提到，产生死锁的四个必要条件是：互斥条件、占有并等待条件、不可抢占条件、循环等待条件。那么避免死锁问题就只需要破环其中一个条件就可以。</p><h4 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h4><p>为避免死锁的发生，我们应该避免使用互斥锁，我们可以将其中的操作改为原子操作。<br>比如上述例子中，我们将发生死锁的库存操作的代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>    targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们不再使用<code>synchronized</code>关键字，而是通过<code>AtomicInteger</code>的<code>compareAndSet</code>方法（CAS操作）来实现并发下的库存扣减操作。这样做的好处是可以避免死锁，每次操作都是原子性的，不会出现持有锁的线程等待另一个线程释放锁的情况。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AtomicInteger qtyAtomic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo1</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>qtyAtomic<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>        targetSku<span class="token punctuation">.</span>qtyAtomic<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>transferTo1</code>方法重新执行程序，正常实现库存操作。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302175925.png" alt="image.png"></p><h4 id="破坏占有且等待条件"><a href="#破坏占有且等待条件" class="headerlink" title="破坏占有且等待条件"></a>破坏占有且等待条件</h4><p>对于占有且等待条件，线程持有资源我们是无法破坏的，既然无法破坏占有，那我们就破坏等待，我们不等待资源了。破坏占有且等待条件，可以采取的方法之一就是一次性获取所有需要的资源，而不是持有部分资源后再等待其他资源。在Java中，确实没有一种直接的方式允许一个线程一次性获取多个资源。但是，你可以使用一种类似资源管理器的方式来模拟一次性获取多个资源的情况。例如，你可以创建一个资源管理器对象，该对象负责管理所有需要的资源，并在需要时为线程提供这些资源。其他线程可以向资源管理器请求资源，如果资源可用，则立即返回，如果资源不可用，则进入等待状态。</p><p>针对上述示例，我们定义一个库存资源管理器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuAllocator</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> SkuAllocator skuAllocator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">SkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> SkuAllocator <span class="token function">getSkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> skuAllocator<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       *、一次性获取多个资源       * @param objs 资源       * @return 是否申请资源成功       */</span>      <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>objs<span class="token punctuation">)</span><span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>Object<span class="token operator">></span> containsList <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>containsList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 释放资源       * @param objs 资源       */</span>      <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>objs<span class="token punctuation">)</span><span class="token punctuation">{</span>          Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个资源管理器中，我们提供了两个方法<code>apply</code>以及<code>free</code>，其中<code>apply</code>用于将所有的资源放获取到，而<code>free</code>用于释放所有的资源。</p><p>然后我们改造操作库存时，线程执行操作库存，需要调用<code>apply</code>将所有的资源都拿到，然后执行后面的库存扣减，而其他线程在执行<code>apply</code>时，因为已经有现成获取到了资源，即资源管理器中<code>list</code>已存在资源，所以会返回<code>false</code>，这样其他的线程会一直等待下去，知道当前线程释放资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> SkuAllocator skuAllocator <span class="token operator">=</span> SkuAllocator<span class="token punctuation">.</span><span class="token function">getSkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo2</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 一次性申请库存增加以及扣减资源，如果线程可以拿到资源，即管理器中存在资源，  </span>    <span class="token comment" spellcheck="true">// while条件不成立就往下继续执行扣减库存，如果没有拿到资源，则while中是true，则while就一直自循环  </span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>skuAllocator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> targetSku<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>                <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>                targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 用完，则释放资源，让其他线程使用  </span>        skuAllocator<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> targetSku<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"释放资源..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用该方法，也会让库存扣减成功。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302201357.png" alt="image.png"></p><h4 id="破坏不可抢占条件"><a href="#破坏不可抢占条件" class="headerlink" title="破坏不可抢占条件"></a>破坏不可抢占条件</h4><p>对于不可抢占条件，我们无法抢占或者释放其他线程持有的资源，但是我们可以给线程设置资源持有的超时时间，如果超过这个时间还没有释放资源，则自动释放资源。这样其他的线程就有就会获取资源了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo3</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"当前线程 %s 获得对象锁 %s"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">try</span> <span class="token punctuation">{</span>                          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"当前线程 %s 获得对象锁 %s"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetSku<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>                        targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>                          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">break</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                          targetSku<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302205412.png" alt="image.png"></p><h4 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h4><p>对于循环等待条件，他因为交叉获取资源，导致形成了一个环形等待。破坏这个条件，我们可以采取顺序获取资源。确保所有的线程都按照相同的顺序获取资源。这样如果线程T1获取资源1，同时线程T2也来获取资源1时，会等待，知道线程T1释放之后再去获取资源1，同样然后获取资源2。</p><p>针对上述示例，我们对库存增加id或者库存操作创建时间，这样我们使用这个ID，对库存资源进行排序，然后按照这个顺序去占用资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo4</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      SkuStock firstSku <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">&lt;</span> targetSku<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> targetSku<span class="token punctuation">;</span>      SkuStock secondSku <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token operator">!=</span> firstSku <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> targetSku<span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>firstSku<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>secondSku<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>            <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>            targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302210756.png" alt="image.png"></p><p>在上述4种破坏死锁条件中，我们可以观察到，在为避免死锁时，除了第一种方案——使用原子操作代替互斥锁外，其余三种方案都会导致并发操作变为串行执行，在一定程度上会牺牲性能。因此，在某些情况下，我们不应过分追求破坏死锁的四个必要条件，因为即使这些条件被满足，死锁仍然有一定的几率发生。我们应该关注的是如何有效地避免死锁的发生，而不是完全消除死锁的可能性。因此，设计时应该考虑采取合适的措施来降低死锁的概率，并在发生死锁时能够及时恢复系统的正常运行状态。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>死锁问题的产生是由两个或者以上线程并行执行的时候，争夺资源而互相等待造成的。他必须同时满足互斥条件，占用且等待条件，不可抢占条件，循环等待条件这四个条件，才可能发生。在日常系统开发中，我们要避免死锁。避免死锁的方式通常有：</p><ol><li><p><strong>按顺序获取资源：</strong> 给资源编号，所有线程按照编号递增的顺序请求资源，释放资源时按照相反的顺序释放。这样可以避免循环等待条件的发生。</p></li><li><p><strong>加锁顺序统一：</strong> 确定所有线程加锁的顺序，要求所有线程都按照相同的顺序获取锁，这样可以避免占有且等待条件的发生。</p></li><li><p><strong>超时放弃：</strong> 当尝试获取资源失败时，设置超时时间，超过一定时间后放弃获取资源，并释放已占有的资源，以避免持续等待而导致的死锁。</p></li><li><p><strong>死锁检测和恢复：</strong> 定期检测系统中的死锁情况，一旦检测到死锁，采取相应的措施进行恢复，例如中断某些线程、回滚事务等。</p></li><li><p><strong>资源分配策略：</strong> 使用资源分配策略，确保资源的合理分配和使用，避免资源过度竞争和浪费，从而降低死锁的发生概率。</p></li><li><p><strong>避免嵌套锁：</strong> 尽量避免在持有一个锁的情况下去请求另一个锁，以减少死锁的可能性。</p></li><li><p><strong>使用并发库和工具：</strong> Java中可以使用<code>java.util.concurrent</code>包中的高级同步工具，如<code>Semaphore</code>、<code>ReentrantLock</code>（支持尝试获取锁及超时机制）、<code>StampedLock</code>（支持乐观读写）等，它们提供了比<code>synchronized</code>关键字更灵活的控制方式，有助于预防死锁。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团一面：Java中线程有哪几种状态？</title>
      <link href="/article/javathreadstate.html"/>
      <url>/article/javathreadstate.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java中，多线程是一种常常使用的技术手段，尤其是在需要处理并发性和异步操作的情况下。理解线程的状态对于编写可靠的多线程应用程序至关重要。本文将深入介绍Java线程的状态，探讨每种状态的含义、如何进行状态转换以及一些实用的技巧。</p><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>关于线程的状态，网上的描述有很多，几种常见的说法有5种，6种，7种，这几种说法都可以说是正确的。我们先从Java中的给定的线程状态看，即<code>Thread</code>下的<code>State</code>枚举中列出了6种状态：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>      NEW<span class="token punctuation">,</span>      RUNNABLE<span class="token punctuation">,</span>      BLOCKED<span class="token punctuation">,</span>      WAITING<span class="token punctuation">,</span>      TIMED_WAITING<span class="token punctuation">,</span>      TERMINATED<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各状态的说明：</p><ul><li><p>NEW（新建）：当通过<code>new Thread()</code>创建一个新的线程对象但还未调用其<code>start()</code>方法时，线程处于新建状态。此时线程对象已经存在，但是线程并没有真正开始执行。</p></li><li><p>RUNNABLE（运行状态）：运行状态指的是线程正在执行代码时的活动状态。在Java中，线程的运行状态通常称为RUNNABLE。当调用了线程对象的<code>start()</code>方法后，线程会进入就绪状态。就绪状态意味着线程具备了执行条件，但并不保证立即开始执行。在Java虚拟机中，就绪状态的线程可能会等待调度器的选中，然后分配CPU时间片，进入运行状态。此时，线程可以执行，但并不一定会立即执行。此外，就绪状态也包括了那些因为时间片用完或者被挂起而暂时让出CPU，但在没有阻塞的情况下能够立即恢复执行的线程。如果就绪状态的线程被操作系统调度程序选中并获得CPU执行权，那么线程就进入了运行状态。值得注意的是，即使处于运行状态，线程也可能因为操作系统的调度或其他因素而暂时被挂起，等待下一次获得CPU执行权。</p></li><li><p>BLOCKED（阻塞状态）：当线程试图获取某个对象的锁（例如进入synchronized代码块或方法），而该锁被其他线程持有时，该线程会进入阻塞状态（Blocked）。此时，线程会一直等待直到能够获取所需的锁才能继续执行。</p></li><li><p>WAITING（等待状态）：当调用<code>wait()</code>、<code>join()</code>方法，或者在<code>synchronized</code>代码块中调用了<code>Thread.sleep(long millis)</code>等方法时，线程会进入等待状态（Waiting）。在这种状态下，线程不会消耗CPU资源，并且需要等待其他线程显式地唤醒才能继续执行，例如执行<code>notify()</code>、<code>notifyAll()</code>。</p></li><li><p>TIMED_WAITING（超时等待状态）：类似于等待状态，但这种状态下线程会在指定的时间后自动唤醒，例如，调用<code>Thread.sleep(long millis)</code>指定了超时时间、<code>Object.wait(long timeout)</code>、<code>LockSupport.parkNanos(long nanos)</code>或<code>Condition.awaitNanos(long nanos)</code>等方法会让线程进入限期等待状态。</p></li><li><p>TERMINATED（终止状态）：线程执行完毕或者因异常退出<code>run()</code>方法后，线程就会变为终止状态。处于终止状态的线程无法再次被启动。</p></li></ul><p>而5种线程状态的说法是基于操作系统层面的说法，这种说法将<code>WAITING</code>和<code>TIMED_WAITING</code>两种状态合并在了一起，统称为<code>WAITING</code>即等待状态（操作系统会隐藏这两种状态）。而7种线程的说法是将<code>RUNNABLE</code>运行状态细化为<code>READY</code>（就绪状态）和<code>RUNNING</code>（运行状态），所以说无论是5种还是6种，7种线程状态的说法都是正确的，但是对于Java来说我们还是按照其文档中所述的6种。</p><h3 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h3><p>线程在生命周期内并不是在一个状态下固定不变，而是随着代码的执行在不同的状态之间切换。其各个状态的切换关系如图：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229233052.png" alt="image.png"></p><blockquote><p>此图来源于《Java并发编程艺术》。</p></blockquote><p>由上图可以看出：</p><p>线程创建之后它将处于<code>NEW</code>(新建)状态，调用<code>start()</code>方法后开始运行，线程这时候处于<code>READY</code>(可运行)状态。可运行状态的线程获得了<code>cpu</code> 时间片(<code>timeslice</code>)后就处于<code>RUNNING</code>(运行)状态。<br>当线程执行 <code>wait()</code>方法之后，线程进入<code>WAITING</code>(等待)状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而<code>TIME WAITING</code>(超时等待)状态相当于在等待状态的基础上增加了超时限制，比如通过<code>sleep(long millis)</code>方法或<code>wait(long millis)</code>方法可以将Java线程置于 <code>TIMED_WAITING</code>状态。当超时时间到达后Java线程将会返回到<code>RUNNABLE</code>状态。<br>当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到<code>BLOCKED</code>(阻寒)状态。<br>线程在执行<code>Runnable</code>的<code>run()</code>方法之后将会进入到<code>TERMINATED</code>(终止)状态。</p><h3 id="状态转换验证"><a href="#状态转换验证" class="headerlink" title="状态转换验证"></a>状态转换验证</h3><p>在Java中我们可以通过<code>Thread</code>类的<code>getState()</code>方法获取当前线程的状态。我们可以通过相关代码来验证Java中的线程状态。</p><ul><li>NEW<br>新创建线程，没有调用<code>start()</code>方法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-text"><code class="language-text">NEW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>RUNNABLE:<br>新创建的线程，在调用<code>start()</code>方法后，就进入到了<code>RUNNABLE</code>运行状态。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-text"><code class="language-text">RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>BLOCKED<br>当前线程没有获取到锁，即没有进入到<code>synchronized</code>代码块时，此时状态即为<code>BLOCKED</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//  thread未获取到锁</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 主线程获得锁</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>          thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>WAITING<br>当前线程在获得锁，执行代码块，如果此时调用<code>wait()</code>方法，线程状态就会变为<code>WAITIING</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TIMED_WAITING<br>如果当前线程中执行了<code>Thread.sleep()</code>，那么这个线程就会变为<code>TIMED_WAITING</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TERMINATED<br>即线程执行结束。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="由线程状态引出的一些注意事项"><a href="#由线程状态引出的一些注意事项" class="headerlink" title="由线程状态引出的一些注意事项"></a>由线程状态引出的一些注意事项</h3><ul><li><p><strong>妥善运用同步机制</strong>：<br>  为了防止线程因竞态条件而陷入BLOCKED状态，应明智地采用恰当的同步工具，例如<code>synchronized</code>关键字、<code>ReentrantLock</code>或其他并发库提供的锁机制来保证线程安全性。务必精细规划和最小化锁的范围，以减少线程阻塞的可能性。</p></li><li><p><strong>预防死锁的发生</strong>：<br>  在系统设计初期就要充分考虑线程间的资源依赖关系，尽量避免线程互相占用对方正在等待的资源，从而形成死循环，导致所有涉及的线程都无法继续执行。实施合理的锁顺序策略和超时设置有助于降低死锁风险。</p></li><li><p><strong>谨慎使用wait()和notify()方法</strong>：<br>  使用<code>wait()</code>和<code>notify()</code>进行线程间通信时需格外小心，确保在正确的上下文（如<code>synchronized</code>代码块内）调用，并遵循正确的通知和等待逻辑，以避免不必要或长时间的阻塞。在现代Java编程中，推荐优先使用<code>java.util.concurrent</code>包下的高级同步工具，如<code>Condition</code>类，它们提供了更强大的线程协调能力。</p></li><li><p><strong>注意设计线程间协作模式</strong>：<br>  根据业务需求设计清晰有效的线程间通信协议，可以使用诸如<code>CountDownLatch</code>、<code>Semaphore</code>、<code>CyclicBarrier</code>等并发工具，以及<code>BlockingQueue</code>等数据结构，确保线程按预定的流程有序执行任务。</p></li><li><p><strong>实时监控和调试</strong>：<br>  利用Java自带的监控工具（如JConsole、VisualVM等）定期检查和分析线程的状态，及时识别出可能导致性能瓶颈、死锁或其他问题的线程行为，进而采取相应的优化措施。此外，日志记录和堆栈跟踪也是定位多线程环境下问题的重要手段。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java线程的状态是多线程中的重要概念，对于编写高效、可靠的多线程应用程序至关重要。通过深入理解线程的生命周期和状态转换，以及采用适当的管理技巧，可以更好地控制和管理多线程应用程序的行为，从而提高应用程序的性能和可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程状态 </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转SpringBoot：SpringBoot的几种定时任务实现方式</title>
      <link href="/article/springbootscheduled.html"/>
      <url>/article/springbootscheduled.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在现代软件开发中，定时任务是一种常见的需求，用于执行周期性的任务或在特定的时间点执行任务。这些任务可能涉及数据同步、数据备份、报表生成、缓存刷新等方面，对系统的稳定性和可靠性有着重要的影响。<code>Spring Boot</code>提供了强大且简单的定时任务功能，使开发人员能够轻松地管理和执行这些任务。</p><p>本文将介绍 <code>Spring Boot</code>中定时任务的基本用法、高级特性以及最佳实践，帮助开发人员更好地理解和应用定时任务，提高系统的稳定性和可靠性。</p><h3 id="SpringBoot中的定时任务"><a href="#SpringBoot中的定时任务" class="headerlink" title="SpringBoot中的定时任务"></a>SpringBoot中的定时任务</h3><p><code>SpringBoot</code>中的定时任务主要通过<code>@Scheduled</code>注解以及<code>SchedulingConfigurer</code>接口实现。</p><h4 id="Scheduled注解"><a href="#Scheduled注解" class="headerlink" title="@Scheduled注解"></a>@Scheduled注解</h4><p><code>@Scheduled</code>注解是<code>Spring</code>提供的一个注解，用于标记方法作为定时任务执行。通过 <code>@Scheduled</code>注解，开发人员可以轻松地配置方法在指定的时间间隔或时间点执行，实现各种定时任务需求。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Documented</span>  <span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>Schedules<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Scheduled</span> <span class="token punctuation">{</span>    String <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上为<code>@Scheduled</code>源码中关键属性，各属性含义如下：</p><ul><li>cron: 接受标准的Unix Cron表达式，用于定义复杂的计划执行时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * cron属性可以设置指定时间执行，cron表达式跟linux一样  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 45 14 ? * *"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fixTimeExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fixedRate: 以固定的频率执行任务，指定两次执行之间的间隔时间（单位是毫秒）。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * fixedRate属性设置每隔固定时间执行  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每隔五秒执行一次"</span> <span class="token operator">+</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fixedDelay:在每次任务完成后等待一定的时间再进行下一次执行，指定连续执行之间的延迟时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 上一次任务执行完成之后10秒后在执行  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>initialDelay:首次执行前的延迟时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 初始延迟1秒后开始，然后每10秒执行一次  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> fixedDelay<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeWithInitialAndFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里要注意fixedRate与fixedDelay的区别：<code>fixedRate</code>是基于任务开始执行的时间点来计算下一次任务开始执行的时间，因此任务的执行时间间隔是相对固定的，不受到任务执行时间的影响。如果指定的时间间隔小于任务执行的实际时间，则任务可能会并发执行。而<code>fixedDelay</code>是基于任务执行完成的时间点来计算下一次任务开始执行的时间，因此任务的执行时间间隔是相对不规则的，受到任务执行时间的影响。</p></blockquote><p><code>SpringBoot</code>支持同时定义多个定时任务方法，每个方法可以使用不同的参数配置，以满足不同的定时任务需求。同时，我们必须在配置类中使用<code>@EnableScheduling</code>注解开启定时任务。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@EnableScheduling</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledTaskConfig</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span>  <span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplication</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootBaseApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在SpringBoot应用程序中，除了在代码中使用注解配置定时任务外，还可以通过配置文件来配置定时任务的执行规则。这种方式更加灵活，可以在不修改源代码的情况下，动态调整定时任务的执行规则。比如我们在<code>application.properties</code>中配置<code>@Scheduled</code>的属性：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">custom.scheduled.cron</span> <span class="token punctuation">=</span> <span class="token attr-value">0/5 * * * * ?  </span><span class="token attr-name">custom.scheduled.fixedRate</span><span class="token punctuation">=</span><span class="token attr-value">5000  </span><span class="token attr-name">custom.scheduled.fixedDelay</span><span class="token punctuation">=</span><span class="token attr-value">10000  </span><span class="token attr-name">custom.scheduled.initialDelay</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>@Scheduled</code>的方法使用属性配置定时任务执行频率。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoScheduledTaskService</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * fixedRate属性设置每隔固定时间执行       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRateString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.fixedRate}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每隔五秒执行一次"</span> <span class="token operator">+</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * cron属性可以设置指定时间执行，cron表达式跟linux一样       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"${custom.scheduled.cron}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fixTimeExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 上一次任务执行完成之后10秒后在执行       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelayString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.fixedDelay}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 初始延迟1秒后开始，然后每10秒执行一次       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelayString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.initialDelay}"</span><span class="token punctuation">,</span> fixedDelayString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.fixedDelay}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeWithInitialAndFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，这里使用属性来指定任务执行频率时，要通过@Scheduled的fixedRateString、fixedDelayString、initialDelayString三个可以指定字符串的值的属性去指定，效果等同于long类型的属性。</p></blockquote><p>通过配置文件配置定时任务具有很高的灵活性，可以在不重新编译和部署应用程序的情况下，随时调整定时任务的执行规则。同时，也可以根据不同的环境（例如开发、测试、生产）配置不同的定时任务规则，以满足不同环境下的需求。这种方式可以有效地解耦定时任务的配置和业务代码，提高系统的灵活性和可维护性。</p><p>另外，如果希望定时任务能够异步执行，不阻塞主线程，可以在方法上同时加上<code>@Async</code>注解，这样各任务就可以异步执行了。有关SpringBoot中使用<code>@Async</code>的讲解，请移步：</p><p>虽然 <code>@Scheduled</code> 注解是一个方便的方式来定义定时任务，但它也存在一些弊端。因为任务的执行计划（如cron表达式）在编译时被硬编码，因此无法在运行时动态修改，除非重新部署。此外，@Scheduled注解对于配置不同的调度策略（如使用不同的线程池）显得力不从心，而且默认情况下，@Scheduled任务在单线程环境下执行，可能出现任务堆积的情况，尤其在任务量大或任务执行时间长的情况下，而且这些任务可能会变得混乱和难以管理。定时任务的配置分散在各个任务方法中，不利于统一管理和维护。对于需要根据动态条件创建或销毁定时任务的情况，<code>@Scheduled</code>注解也无法满足需求。</p><p>为了解决这些问题，可以使用<code>SchedulingConfigurer</code>接口来动态地创建和管理定时任务。通过实现 <code>SchedulingConfigurer</code> 接口，我们可以编写代码来动态地注册和管理定时任务，从而实现灵活的任务调度需求。接下来，我们将介绍如何使用<code>SchedulingConfigurer</code>接口来创建定时任务。</p><h4 id="SchedulingConfigurer接口"><a href="#SchedulingConfigurer接口" class="headerlink" title="SchedulingConfigurer接口"></a>SchedulingConfigurer接口</h4><p><code>SchedulingConfigurer</code> 接口是 Spring 提供的一个用于定时任务配置的扩展接口，它允许开发人员更细粒度地控制定时任务的执行。通过实现<code>SchedulingConfigurer</code>接口，可以自定义任务调度器（<code>TaskScheduler</code>），配置线程池等参数，以满足不同场景下的定时任务需求。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@EnableScheduling</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSchedulingConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定时任务逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过实现<code>SchedulingConfigurer</code>接口，重写<code>configureTasks</code>方法，自定义任务调度器的配置。此外我们还可以配置线程池，用于控制定时任务执行时的线程数量、并发性等参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"shutdown"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ThreadPoolTaskScheduler <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ThreadPoolTaskScheduler scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      scheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程池大小  </span>    scheduler<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"scheduled-task-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程名称前缀  </span>    scheduler<span class="token punctuation">.</span><span class="token function">setAwaitTerminationSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置终止等待时间  </span>    <span class="token comment" spellcheck="true">// 设置处理拒绝执行的任务异常</span>    scheduler<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> executor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Task rejected"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理定时任务执行过程中抛出的未捕获异常</span>    scheduler<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error in scheduled task"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> scheduler<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将自定义的<code>ThreadPoolTaskScheduler</code>设置到<code>ScheduledTaskRegistrar</code>中去：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定时任务逻辑</span>    taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有关线程池的配置参数讲解，请移步：</p></blockquote><p>通过<code>SchedulingConfigurer</code>接口，可以更灵活地配置任务调度器和定时任务的执行规则，比如动态注册定时任务、动态修改任务执行规则等。</p><ul><li>动态添加定时任务<br>在<code>SchedulingConfigurer</code>的<code>configureTasks</code>方法中，我们可以根据业务需求，从数据库、配置文件或其它动态来源获取定时任务的信息（如Cron表达式、任务执行类等），然后创建对应的<code>Runnable</code>或<code>Callable</code>实例，并结合<code>Trigger</code>（如<code>CronTrigger</code>）将其添加到调度器中。相比<code>@Scheduled</code>注解，这种方式能够在应用运行时随时添加新的定时任务。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ThreadPoolTaskScheduler scheduler <span class="token operator">=</span> <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>CronTaskInfo<span class="token operator">></span> tasksFromDB <span class="token operator">=</span> <span class="token function">listTasksFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>CronTaskInfo task <span class="token operator">:</span> tasksFromDB<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Runnable taskRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTaskExecutor</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getTaskData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          CronTrigger cronTrigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>taskRunner<span class="token punctuation">,</span> cronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于这里在应用运行时，动态的添加新的任务，我们可以通过事件驱动，轮训检查，消息队列等多种方式，监听到数据库中或者配置文件中新增任务信息，然后通过<code>SchedulingConfigurer</code>接口动态创建定时任务。而这种方式是@Scheduled注解做不到的。</p></blockquote><ul><li>修改定时任务规则<br>当任务的执行规则需要动态变更时，同样可以在<code>configureTasks</code>方法中实现。例如，从数据库获取最新的Cron表达式，然后取消当前任务并重新添加新的任务实例。需要注意的是，取消已有任务通常需要持有对该任务的引用，例如使用<code>Scheduler</code>提供的<code>unschedule</code>方法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 假设我们有一个方法用于获取更新后的任务信息  </span>CronTaskInfo updatedTask <span class="token operator">=</span> <span class="token function">getUpdatedTaskInfoFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取消旧的任务（需要知道旧任务的TriggerKey）  </span>TriggerKey triggerKey <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取旧任务的TriggerKey  </span>scheduler<span class="token punctuation">.</span><span class="token function">unschedule</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建新任务并设置新的Cron表达式  </span>MyTaskExecutor taskExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTaskExecutor</span><span class="token punctuation">(</span>updatedTask<span class="token punctuation">.</span><span class="token function">getTaskData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CronTrigger updatedCronTrigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>updatedTask<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 重新调度新任务  </span>scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>taskRunner<span class="token punctuation">,</span> updatedCronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，我们还可以通过添加任务时对其排序或设置优先级等方式间接实现设置定时任务的执行顺序。</p><p>通过实现<code>SchedulingConfigurer</code>接口，我们可以拥有对定时任务调度的更多控制权，比如自定义线程池、动态添加任务以及调整任务执行策略。这种灵活性使得在复杂环境下，特别是需要动态管理定时任务时，<code>SchedulingConfigurer</code>成为了理想的选择。</p><h3 id="其他第三方任务调度框架"><a href="#其他第三方任务调度框架" class="headerlink" title="其他第三方任务调度框架"></a>其他第三方任务调度框架</h3><p>除了使用Spring框架提供的 <code>@Scheduled</code> 注解和<code>SchedulingConfigurer</code>接口外，还有许多第三方的任务调度库可供选择。这些库通常提供了更多的功能和灵活性，以满足各种复杂的任务调度需求。以下是一些常见的第三方任务调度库：</p><ol><li><p><strong>Quartz Scheduler</strong>：<br>  <code>Quartz</code>是一个功能强大且灵活的任务调度库，具有丰富的功能，如支持基于<code>cron</code>表达式的任务调度、集群支持、作业持久化等。它可以与<code>Spring</code>框架集成，并且被广泛应用于各种类型的任务调度应用程序中。</p></li><li><p><strong>Elastic Job</strong>：<br> <code>Elastic Job</code>是一个分布式任务调度框架，可以轻松实现分布式任务调度和作业执行。它提供了分布式任务执行、作业依赖关系、作业分片等功能，适用于大规模的分布式任务调度场景。</p></li><li><p><strong>xxl-job</strong>：<br>  <code>xxl-job</code>是一个分布式任务调度平台，提供了可视化的任务管理界面和多种任务调度方式，如单机任务、分布式任务、定时任务等。它支持任务执行日志、任务失败重试、动态调整任务执行策略等功能。</p></li><li><p><strong>PowerJob</strong>：<br>  <code>PowerJob</code>是一个开源的分布式任务调度框架，由阿里巴巴集团开发并开源。PowerJob 提供了分布式、高可用的任务调度能力，支持多种任务类型，如定时任务、延时任务、流程任务等。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>定时任务在现代软件开发中扮演着重要的角色，它们可以自动化执行各种重复性的任务，提高系统的效率和可靠性。SpringBoot提供了强大而灵活的定时任务功能，使我们能够轻松地管理和执行各种定时任务。通过<code>@Scheduled</code>注解和<code>SchedulingConfigurer</code>接口，我们可以根据需求配置定时任务的执行规则，实现各种复杂的定时任务调度需求。我们可以充分利用SpringBoot中的定时任务功能，提高系统的稳定性和可靠性，从而更好地满足业务需求。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升Spring Boot应用性能的秘密武器：揭秘@Async注解的实用技巧</title>
      <link href="/article/springbootasync.html"/>
      <url>/article/springbootasync.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在日常业务开发中，异步编程已成为应对并发挑战和提升应用程序性能的关键策略。传统的同步编程方式，由于会阻碍主线程执行后续任务直至程序代码执行结束，不可避免地降低了程序整体效率与响应速度。因此，为克服这一瓶颈，开发者广泛采用异步编程技术，将那些可能阻塞的长时间运行任务委派至后台线程处理，从而确保主线程始终保持高效和灵敏的响应能力。</p><p>而<code>SpringBoot</code>作为一款广受欢迎的应用开发框架，极大地简化了异步编程实践。其中，<code>@Async</code>注解是<code>SpringBoot</code>为实现异步编程提供的便捷工具之一。通过巧妙地应用<code>@Async</code>注解，开发者能够无缝地将方法调用转化为异步执行模式，进而增强系统的并发性能表现。</p><p>本文将深度剖析<code>SpringBoot</code>中的<code>@Async</code>注解，包括其内在原理、具体使用方法以及相关注意事项。我们将深入探讨<code>@Async</code>的工作机制，展示如何在实际的<code>SpringBoot</code>项目中有效运用该注解。</p><h3 id="Async的原理"><a href="#Async的原理" class="headerlink" title="@Async的原理"></a>@Async的原理</h3><p>在<code>SpringBoot</code>中，<code>@Async</code>注解的实现原理基于<code>Spring</code>框架的<code>AOP</code>和任务执行器（<code>Task Executor</code>）机制。</p><h4 id="Async的启用"><a href="#Async的启用" class="headerlink" title="@Async的启用"></a>@Async的启用</h4><p>开启对异步方法的支持需要在配置类上添加<code>@EnableAsync</code>注解，然后就可以激活了一个<code>Bean</code>后处理器：<code>AsyncConfigurationSelector</code>，它负责自动配置<code>AsyncConfigurer</code>，为异步方法提供所需的线程池。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227082503.png" alt="image.png"></p><p>而<code>AsyncConfigurationSelector</code>中默认使用<code>PROXY</code>的代理，即使用<code>ProxyAsyncConfiguration</code>，而<code>ProxyAsyncConfiguration</code>是用于配置Spring异步方法的代理模式的配置类。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227084444.png" alt="image.png"></p><blockquote><p>当然我们还可以指定使用另外一个代理模式：<code>AdviceMode.ASPECTJ</code>，以便使用AspectJ来进行更高级的拦截和处理。</p></blockquote><p>它继承至<code>AbstractAsyncConfiguration</code>，在<code>AbstractAsyncConfiguration</code>中配置<code>AsyncConfigurer</code>。<code>setConfigurers</code>方法用于设置异步任务执行器和异常处理器。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227090143.png" alt="image.png"></p><p><code>AsyncConfigurer</code>中提供了一种便捷的方式来配置异步方法的执行器（<code>AsyncTaskExecutor</code>）。通过实现<code>AsyncConfigurer</code>接口，可以自定义异步方法的执行策略、线程池等配置信息。默认情况下<code>Spring</code>会先搜索<code>TaskExecutor</code>类型的<code>bean</code>或者名字为<code>taskExecutor</code>的<code>Executor</code>类型的<code>bean</code>,都不存在使用<code>SimpleAsyncTaskExecutor</code>执行器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*    * 该方法用于获取一个AsyncTaskExecutor对象，用于执行异步方法。    * 可以在这个方法中创建并配置自定义的AsyncTaskExecutor，例如ThreadPoolTaskExecutor或SimpleAsyncTaskExecutor等。    */</span>    <span class="token annotation punctuation">@Nullable</span>      <span class="token keyword">default</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*    * 该方法用于获取一个AsyncUncaughtExceptionHandler对象，用于处理异步方法执行中未捕获的异常。如果异步方法执行过程中出现异常而没有被捕获，Spring会调用这个方法来处理异常。    * 可以在这个方法中返回自定义的AsyncUncaughtExceptionHandler实现，以实现对异步方法异常的处理逻辑。    */</span>    <span class="token annotation punctuation">@Nullable</span>      <span class="token keyword">default</span> AsyncUncaughtExceptionHandler <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时<code>ProxyAsyncConfiguration</code>中的<code>AsyncAnnotationBeanPostProcessor</code>会扫描应用上下文中的所有<code>Bean</code>，检查它们的方法是否标记了<code>@Async</code>注解。对于标记了<code>@Async</code>注解的方法，<code>AsyncAnnotationBeanPostProcessor</code>会创建一个代理对象，用于在调用该方法时启动一个新的线程或使用线程池执行该方法。这样就实现了异步执行的功能。同时它还负责处理<code>@Async</code>注解中的其他属性，例如设置异步方法的执行超时时间、指定线程池名称等。</p><h4 id="异步方法注解与代理"><a href="#异步方法注解与代理" class="headerlink" title="异步方法注解与代理"></a>异步方法注解与代理</h4><p>当服务类的方法被<code>@Async</code>注解修饰时，<code>Spring AOP</code>会检测到这个注解，并利用动态代理技术为该类创建一个代理对象。其他组件通过<code>Spring</code>容器调用带有<code>@Async</code>注解的方法时，实际上是调用了代理对象的方法。</p><p>一个带有<code>@Async</code>注解的方法被调用时，<code>Spring AOP</code>会拦截这个方法调用。此时就会触发处理异步调用的核心拦截器：<code>AsyncExecutionInterceptor</code>。它的主要任务是将被<code>@Async</code>修饰的方法封装成一个<code>Runnable</code>或者<code>Callable</code>任务，并将其提交给<code>TaskExecutor</code>管理的线程池去执行。这个过程确保了异步方法的执行不会阻塞调用者线程。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227185415.png" alt="image.png"></p><h4 id="TaskExecutor与线程池"><a href="#TaskExecutor与线程池" class="headerlink" title="TaskExecutor与线程池"></a>TaskExecutor与线程池</h4><p><code>TaskExecutor</code>是一个接口，定义了如何执行<code>Runnable</code>或<code>Callable</code>任务。<code>SpringBoot</code>提供了多种实现，如<code>SimpleAsyncTaskExecutor</code>、<code>ThreadPoolTaskExecutor</code>等。通常我们会自定义一个<code>ThreadPoolTaskExecutor</code>以满足特定需求，比如设置核心线程数、最大线程数、队列大小等参数，以确保异步任务能够高效并发执行。<code>AsyncExecutionInterceptor</code>将异步方法封装的任务提交给配置好的<code>TaskExecutor</code>管理的线程池执行。</p><h4 id="异步方法执行与结果返回"><a href="#异步方法执行与结果返回" class="headerlink" title="异步方法执行与结果返回"></a>异步方法执行与结果返回</h4><p>异步方法的实际执行在独立的线程中进行，不阻塞调用者线程。异步方法的返回类型可以是voi 或者具有返回值，如果异步方法有返回值，那么返回类型通常应该是<code>java.util.concurrent.Future</code>，这样调用者可以通过<code>Future</code>对象来检查异步任务是否完成以及获取最终的结果。</p><h3 id="Async使用"><a href="#Async使用" class="headerlink" title="@Async使用"></a>@Async使用</h3><p>在<code>SpringBoot</code>中，使用<code>@Async</code>注解可以轻松地将方法标记为异步执行。下面来看一下如何在<code>Spring Boot</code>项目中正确地使用<code>@Async</code>注解，包括配置方法和注意事项。</p><h4 id="在方法上添加-Async注解"><a href="#在方法上添加-Async注解" class="headerlink" title="在方法上添加@Async注解"></a>在方法上添加@Async注解</h4><p>要使用@Async注解，首先需要在要异步执行的方法上添加该注解。这样Spring就会在调用这个方法时将其封装为一个异步任务，并交给线程池执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskService</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 通过@Async 注解表明该方法是个异步方法，       * @param i       */</span>      <span class="token annotation punctuation">@Async</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAsyncTask</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 执行异步任务："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启用异步功能"><a href="#启用异步功能" class="headerlink" title="启用异步功能"></a>启用异步功能</h4><p>在<code>SpringBoot</code>应用中，需要在配置类上添加<code>@EnableAsync</code>注解来启用对异步方法的支持。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span>  <span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplication</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootBaseApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置线程池"><a href="#配置线程池" class="headerlink" title="配置线程池"></a>配置线程池</h4><p>默认情况下，<code>SpringBoot</code>会使用一个默认的线程池来执行异步任务（<code>SimpleAsyncTaskExecutor</code>）。但是，为了更好地控制线程池的行为，我们可以自定义<code>ThreadPoolTaskExecutor</code>，并通过<code>AsyncConfigurer</code>进行配置。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"MyAsyncThread-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> executor<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplicationTests</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> AsyncTaskService asyncTaskService<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            asyncTaskService<span class="token punctuation">.</span><span class="token function">executeAsyncTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227220046.png" alt="image.png"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p><code>@Async</code>必须配合<code>@EnableAsync</code>注解一起使用。两者缺一不可。</p></li><li><p>异步方法必须定义在<code>Spring Bean</code>中，因为<code>Spring AOP</code>是基于代理对象来实现的。假如我们把<code>AsyncTaskService</code>类中的<code>@Service</code>去掉。就不创建Bean。然后测试代码中修改为如下：</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      AsyncTaskService asyncTaskService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         asyncTaskService<span class="token punctuation">.</span><span class="token function">executeAsyncTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227221119.png" alt="image.png"></p><p>都是主线程同步方法。</p><ol start="3"><li>异步方法不能定义为private或static，因为Spring AOP无法拦截这些方法。我们修改<code>AsyncTaskService</code>类中的方法修改为<code>private</code>或者<code>static</code>，则会发生编译错误：</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227221330.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227221345.png" alt="image.png"></p><ol start="4"><li>异步方法内部的调用不能使用this关键字，因为this关键字是代理对象的引用，会导致异步调用失效。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Async method executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在同一个类中直接调用异步方法  </span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里调用不会触发异步执行  </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"callAsyncMethod executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>被<code>@Async</code>注解修饰的方法不能直接被同一个类中的其他方法调用。原因是<code>Spring</code>会在运行时生成一个代理类，调用异步方法时实际上是调用这个代理类的方法。因此，如果在同一个类中直接调用异步方法，<code>@Async</code>注解将不会生效，因为这样调用会绕过代理对象，导致异步执行失效。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Async method executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在同一个类中直接调用异步方法  </span>        <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里调用不会触发异步执行  </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"callAsyncMethod executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplicationTests</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> AsyncTaskService asyncTaskService<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         asyncTaskService<span class="token punctuation">.</span><span class="token function">callAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227223539.png" alt="image.png"></p><ol start="6"><li>不同的异步方法间不要相互调用<br>异步方法间的相互调用会显著增加代码的复杂性层级，由于异步执行的本质在于即时返回并延迟完成任务，因此，嵌套或递归式的异步调用容易导致逻辑难以梳理和维护，特别是在涉及多异步操作状态追踪、顺序控制及依赖关系管理时尤为突出。</li></ol><p>当异步方法内部进一步调用其他异步方法，并且牵涉到同步资源如锁、信号量等时，极易引发死锁问题。例如，一个线程在等待自身启动的另一个异步任务结果的同时，该任务却尝试获取第一个线程所持有的锁，如此循环等待，形成无法解开的死锁。</p><p>无节制地在异步方法内部启动新的异步任务，特别是在高并发场景下，可能导致线程池资源迅速耗尽，使得系统丧失处理更多请求的能力。此外，直接的异步方法调用还增加了错误处理与日志记录的难度，特别是遇到异常情况时，往往难以追溯原始调用链路以精准定位问题源头。</p><p>若需要确保异步方法按照特定顺序执行，直接调用会导致逻辑混乱不清。为解决这一问题，通常推荐采用回调机制、Future/CompletionStage链式编程、响应式编程模型（如RxJava、Project Reactor）等方式来确保有序执行并降低耦合度。</p><p>同时，频繁且低延迟的任务间直接互相调用可能会引入额外的上下文切换开销，从而对系统的整体性能造成潜在负面影响。</p><ol start="7"><li>合理配置线程池<br><code>Spring Boot</code>默认提供的线程池配置可能无法充分满足特定应用在复杂多变生产环境下的需求，例如其预设的线程数、队列大小和拒绝策略等参数可能不尽合理。为确保资源的有效管理和精细控制，我们可以通过自定义线程池来灵活设定核心线程数、最大线程数、线程空闲超时时间、任务等待队列容量以及饱和策略（如任务拒绝策略）等关键属性，从而适应不同业务场景对并发执行任务数量及资源消耗的精准调控。</li></ol><p>另外，不同类型异步任务具有不同的执行特性：有的任务耗时较长，而有的则短促且频繁。针对这种情况，为各类任务配置独立的线程池有助于实现更好的资源隔离，避免任务间的相互影响，进而保障系统的稳定性和响应速度。同时，为了满足特定的安全规范或性能要求，自定义线程池还可以支持诸如设置守护线程、优先级、线程命名格式化等功能。</p><p>更重要的是，自定义线程池有利于系统内部执行状态的深度监控与问题诊断。通过制定合理的命名规则、详尽的日志记录以及精确的metrics统计分析，我们可以清晰洞察每个线程池的工作状况，及时发现并优化潜在的性能瓶颈。</p><p>如果不进行自定义线程池配置，仅依赖于默认或简化的线程池实现，在面对大量涌入的任务时，可能会因线程资源耗尽导致整个系统响应能力和可用性受损。因此，采用合理配置的自定义线程池能够在高负载环境下有效防范此类风险，有力支撑系统的稳健运行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 核心线程数  </span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置队列容量  </span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 最大线程数  </span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 自定义线程名称前缀  </span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"MyAsyncThread-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> executor<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于自定义线程池的参数讲解请参考我这篇文章：<a href="https://www.coderacademy.online/article/2d9d416b.html">重温Java基础（二）之Java线程池最全详解</a></p></blockquote><ol start="8"><li>异常处理：<br>异步方法内部的异常通常不会被调用方捕获到，因此需要在异步方法内部进行异常处理，可以通过<code>try-catch</code>块：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 异步操作代码  </span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error occurred in async method"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 其他错误处理逻辑  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用<code>@Async</code>注解的<code>exceptionHandler</code>属性来处理异常并进行适当的日志记录或错误处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> AsyncUncaughtExceptionHandler <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomAsyncExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 自定义异常处理器</span><span class="token keyword">class</span> <span class="token class-name">CustomAsyncExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleUncaughtException</span><span class="token punctuation">(</span>Throwable ex<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Uncaught exception in async method: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 其他错误处理逻辑  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>与事务的交互<br>默认情况下，当我们在Spring应用中使用<code>@Async</code>注解标记一个方法为异步执行时，这个方法将不会参与到其调用者所处的事务上下文中。这意味着，如果调用异步方法的方法在一个事务内执行，该事务将在调用异步方法后正常提交或回滚，但异步方法内部的操作并不会受到这个事务的影响。</li></ol><p>例如，若在同步方法中修改了数据库记录，并随后调用了一个异步方法来更新其他相关的数据，那么如果同步方法中的事务在调用异步方法后提交，而异步方法在执行过程中抛出了异常导致更新失败，这时第一部分已提交的数据和第二部分未成功更新的数据之间就会产生不一致的情况。</p><p>为了确保异步方法能够正确地参与事务管理，可以通过设置<code>@Async</code>注解的事务传播行为属性（<code>@Transactional</code>的<code>propagation</code>属性值）来解决这个问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Async</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Async method executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 具体业务</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过设置<code>Propagation.REQUIRES_NEW</code>，指示Spring在执行异步方法时开启一个新的、与当前事务无关的事务。这样即使异步方法内部发生异常，它自己的事务会独立进行提交或回滚，从而保证了数据的一致性。不过要注意的是，这种做法可能会增加系统资源消耗，因为每次异步任务都会创建新的事务上下文。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过本文的介绍，我们了解了<code>SpringBoot</code>中<code>@Async</code>注解的原理、使用方法以及需要注意的事项。</p><p><code>@Async</code>注解能够将方法标记为异步执行，利用了<code>Spring</code>框架的<code>AOP</code>和任务执行器机制，使得异步方法能够在后台线程池中并发执行，提高系统的并发能力和响应性。</p><p>然而，在使用<code>@Async</code>注解时，需要注意避免异步方法之间相互调用，合理配置线程池，进行异常处理，处理上下文丢失以及与事务的正确交互。这些注意事项能够确保异步方法的可靠性和稳定性，提高应用程序的性能和可维护性。</p><p>总的来说，<code>@Async</code>注解是<code>SpringBoot</code>中用于实现异步方法的重要特性，能够有效地提升应用程序的性能和并发能力，但在使用时需要谨慎考虑其使用场景和注意事项，以充分发挥其优势。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 异步方法 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求求你别再用OkHttp调用API接口了，快来试试这款HTTP客户端库吧</title>
      <link href="/article/retrofit2.html"/>
      <url>/article/retrofit2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在日常业务开发中，我们时常需要使用一些其他公司的服务，调用第三方系统的接口，这时就会涉及到网络请求，通常我们可以使用<code>HttpClient</code>，<code>OkHttp</code>等框架去完成网络请求。随着RESTful API的普及，一个高效、简洁且易于维护的HTTP客户端库显得尤为关键。而本文主要介绍一款强大的网络客户端库：<code>Retrofit2</code>。</p><h3 id="Retrofit2简介"><a href="#Retrofit2简介" class="headerlink" title="Retrofit2简介"></a>Retrofit2简介</h3><h4 id="Retrofit2是什么？"><a href="#Retrofit2是什么？" class="headerlink" title="Retrofit2是什么？"></a>Retrofit2是什么？</h4><p><code>Retrofit2</code>是一个由Square公司精心打造并开源的<code>Java</code>与<code>Android</code>双平台适用的<code>RESTful API</code>客户端库，其核心构建在性能卓越的<code>OkHttp</code>库之上。通过精巧的设计原理，<code>Retrofit2</code>将原本复杂的HTTP网络请求过程高度抽象为直观且类型安全的接口调用模式，从而极大地简化了应用程序与后端API之间的交互逻辑。</p><p>开发者利用<code>Retrofit2</code>能够以注解驱动的方式来声明和定义API接口，轻松指定HTTP方法、URL路径以及请求参数等关键信息，进而自动生成相应的请求实现代码。该框架不仅支持同步及异步两种调用方式，还内置了对JSON数据序列化和反序列化的自动化处理能力，这意味着无论是发送请求还是解析响应，都能无缝转换成或从对应的Java对象进行操作。</p><p>此外，<code>Retrofit2</code>具备强大的扩展性，允许开发人员根据项目需求定制各种高级功能，如自定义转换器以适应不同数据格式，添加拦截器以实现全局请求/响应处理，以及集成多种认证机制，充分满足现代应用程序中面对复杂网络环境的各种需求。</p><h4 id="Retrofit2能做什么？"><a href="#Retrofit2能做什么？" class="headerlink" title="Retrofit2能做什么？"></a>Retrofit2能做什么？</h4><p><code>Retrofit2</code>的主要功能包括：</p><ol><li><p><strong>类型安全API设计</strong>：<code>Retrofit2</code>赋予开发者以声明式接口定义的方式来确保网络请求的类型安全性。这意味着通过在接口方法上使用注解来精确指定HTTP请求参数和响应数据结构，框架会自动进行类型校验并确保数据在传输过程中严格符合预期类型，从而消除类型不匹配引发的运行时错误。</p></li><li><p><strong>网络请求流程精简</strong>：<code>Retrofit2</code>极大地简化了发起网络请求的步骤。开发人员仅需专注于设计与后端服务交互的API接口及相应的<code>HTTP</code>动作，框架会自动生成底层逻辑代码，无需手动编写创建请求、设置<code>Header</code>或解析响应内容等繁琐环节，极大地提高了开发效率。</p></li><li><p><strong>内置数据转换机制</strong>：为便于数据处理，<code>Retrofit2</code>集成了多种数据转换器（<code>Converter</code>），能够轻松地将从服务器接收到的HTTP原始数据流转换成Java对象，支持常见的数据格式如<code>JSON</code>、<code>XML</code>以及其他可通过扩展实现的格式，这使得数据模型与实际业务逻辑之间的映射变得直观且易于管理。</p></li><li><p><strong>异步执行与回调集成</strong>：针对移动应用中避免阻塞UI线程的需求，Retrofit2全面支持异步网络请求。它允许开发者采用回调函数或者结合RxJava等反应式编程库来优雅地处理异步任务，确保即便在网络请求执行期间也能保持流畅的用户体验和应用性能。</p></li></ol><h4 id="Retrofit2的优点"><a href="#Retrofit2的优点" class="headerlink" title="Retrofit2的优点"></a>Retrofit2的优点</h4><ol><li><p><strong>代码简化与一致性</strong>：通过提供一种声明式的方式来设计和实现网络请求接口，<code>Retrofit2</code>极大地减少了开发人员在处理网络通信时所需编写的重复性代码量。开发者仅需关注业务逻辑相关的API描述，无需手动构建和管理复杂的HTTP请求。</p></li><li><p><strong>提升可读性和维护性</strong>：框架强调清晰的结构和注解驱动的配置方式，使得网络请求逻辑更加直观且易于理解，进而提高了代码的可读性和维护性。开发者能够快速识别并定位各个网络操作的意义和行为。</p></li><li><p><strong>类型安全保证</strong>：通过集成类型安全的<code>API</code>设计，<code>Retrofit2</code>消除了因参数拼写错误或类型不匹配所引发的运行时异常风险。它确保了数据交换过程中参数类型的正确性，增强了应用的整体健壮性。</p></li><li><p><strong>高效稳定集成</strong>：<code>Retrofit2</code>无缝集成了高性能的<code>OkHttp</code>库，充分利用了其在网络连接复用、缓存策略、失败重试等方面的性能优势，从而有效提升了网络请求的执行效率及服务稳定性，为应用程序提供了更强大的网络支持基础架构。</p></li></ol><h4 id="Retrofit2-VS-HttpClient"><a href="#Retrofit2-VS-HttpClient" class="headerlink" title="Retrofit2 VS HttpClient"></a>Retrofit2 VS HttpClient</h4><ol><li><p><strong>现代化的 API 设计</strong>：<br><code>Retrofit2</code> 使用现代编程风格，通过注解定义<code>HTTP</code>请求接口，代码简洁易读。相比之下，<code>HttpClient</code>需要手动构建<code>Request</code>和处理响应，代码结构更为繁琐。</p></li><li><p><strong>自动转换数据</strong>：<br><code>Retrofit2</code> 提供了内置或自定义的数据转换器，如 <code>GsonConverterFactory</code>，可以自动将<code>JSON</code>或其他格式的数据转换为 <code>Java</code>对象，简化了数据的序列化和反序列化过程。<code>HttpClient</code>则需要手动处理数据转换，操作相对繁琐。</p></li><li><p><strong>异步与同步支持</strong>：<br><code>Retrofit2</code> 支持同步和异步两种网络请求方式，提供了基于<code>Call</code>或 <code>Observable</code>等类型的异步调用方式，方便结合 <code>RxJava</code>等响应式编程框架使用，极大地提升了用户体验和应用程序性能。<code>HttpClient</code>在异步支持方面较为局限。</p></li><li><p><strong>面向接口编程</strong>：<br><code>Retrofit2</code> 通过定义服务接口来描述API端点，使得网络层与其他业务逻辑解耦，提高了代码组织性和可测试性。相比之下，<code>HttpClient</code>直接操作 <code>HttpRequest</code>和<code>HttpResponse</code>实例，耦合度较高。</p></li><li><p><strong>兼容性与性能</strong>：<br>官方不再推荐使用<code>Apache HttpClient</code>，而<code>OkHttp</code>（<code>Retrofit2</code> 底层依赖库）经过持续优化，在性能、连接复用、缓存策略以及对<code>HTTP/2</code>协议的支持等方面表现更优。</p></li><li><p><strong>易于扩展</strong>：<br><code>Retrofit2</code>可以很容易地添加拦截器（<code>Interceptor</code>）进行诸如身份验证、日志记录和重试机制等功能的扩展。虽然]<code>HttpClient</code>的扩展性也很强，但需要更多手工编码。</p></li><li><p><strong>社区活跃与更新频繁</strong>：<br><code>Retrofit2</code>和<code>OkHttp</code> 社区活跃，更新迭代较快，能快速跟进新的技术和最佳实践，确保开发者能够利用最新的技术改进和安全更新。</p></li></ol><p><code>Retrofit2</code> 在简化<code>RESTful API</code>客户端开发、提高效率、易用性、可维护性以及对现代网络特性的支持上均优于旧版的 <code>HttpClient</code>。</p><h4 id="Retrofit2-VS-OkHttp"><a href="#Retrofit2-VS-OkHttp" class="headerlink" title="Retrofit2 VS OkHttp"></a>Retrofit2 VS OkHttp</h4><ol><li><p><strong>API 接口定义简洁明了</strong>：<br>Retrofit2 使用注解（Annotations）来描述 HTTP 请求方法、URL、参数等，开发者只需通过定义 Java 接口就能清晰地表达出网络调用的意图。相比之下，OkHttp 需要开发者直接处理复杂的 HTTP 请求构建逻辑。</p></li><li><p><strong>自动序列化与反序列化</strong>：<br>Retrofit2 提供了转换器（Converter）支持，如 GsonConverterFactory、JacksonConverterFactory 等，能够自动将 JSON 或其他格式的数据转换为 Java 对象以及相反的操作，极大地简化了数据处理过程。而 OkHttp 需要开发者手动处理数据转换。</p></li><li><p><strong>同步/异步模式统一处理</strong>：<br>Retrofit2 不仅支持同步请求，还对异步请求提供了统一的 Call 或 Observable 返回类型，方便在 Android 中进行非阻塞式编程，并且易于结合 RxJava 等响应式库使用。相比之下，OkHttp 的异步请求处理需要开发者自行管理。</p></li><li><p><strong>丰富的注解体系</strong>：<br>Retrofit2 提供了多种注解以支持不同的请求类型（GET、POST、PUT、DELETE 等）、路径参数、查询参数、表单提交、文件上传、多部分请求等，可以灵活配置请求内容。而 OkHttp 的使用需要开发者手动构建请求参数和处理响应。</p></li><li><p><strong>强大的扩展性</strong>：<br>Retrofit2 支持自定义拦截器（Interceptor），可以在请求前后添加额外的业务逻辑，如认证、日志记录、缓存策略等。同时，可以自由配置 OkHttpClient 实例，充分利用 OkHttp 的所有特性，如连接池、重试机制、HTTP/2 支持等。相比之下，OkHttp 更专注于网络通信的核心功能。</p></li><li><p><strong>代码可读性强</strong>：<br>Retrofit2 将网络请求抽象成一个服务接口的形式，使得代码更易于阅读和维护，提高了整体项目的组织性和整洁度。相比之下，OkHttp 的使用需要开发者更多地关注底层的网络通信细节。</p></li><li><p><strong>降低耦合度</strong>：<br>使用 Retrofit2 可以将网络访问层与应用的其他组件更好地解耦，使得业务逻辑代码更加关注于处理业务本身，而不是如何发起网络请求。相比之下，OkHttp 的使用需要开发者更多地处理网络请求的细节，耦合度较高。</p></li></ol><p>虽然 OkHttp 是一个高性能的 HTTP 客户端，专注于网络通信的核心功能，但 Retrofit2 在此基础上封装了一层高级抽象，让开发者能以声明式的方式编写网络请求代码，降低了复杂度并提升了开发效率。</p><h3 id="Retrofit2使用"><a href="#Retrofit2使用" class="headerlink" title="Retrofit2使用"></a>Retrofit2使用</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.retrofit2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>retrofit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 示例使用jackson的converter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.retrofit2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>converter-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义API接口"><a href="#定义API接口" class="headerlink" title="定义API接口"></a>定义API接口</h4><p>在<code>Retrofit</code>框架中，构建与服务器的通信接口是通过定义清晰、结构化的API接口来实现的。这个过程涵盖了详细指定请求方式、路径以及相关参数等关键信息。具体来说，每个接口方法代表了一种特定的HTTP交互模式，明确指示了请求类型（如<code>GET</code>、<code>POST</code>、<code>PUT</code>或<code>DELETE</code>）和目标<code>URL</code>路径。</p><h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><p>在接口方法上应用诸如 <code>@GET</code>、<code>@POST</code>、<code>@PUT</code> 和<code>@DELETE</code>等注解是为了精确映射到相应的HTTP动作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/add"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"user/info/{id}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以指定查询参数</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"user/list?pageSize=50"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="URL操作"><a href="#URL操作" class="headerlink" title="URL操作"></a>URL操作</h5><p>利用<code>@Path</code>、<code>@Query</code>和<code>@Body</code>注解能够进一步细化接口描述，分别用于设定路径中的动态变量、查询字符串参数以及<code>HTTP</code>请求体内容。接口方法可以接受不同类型的参数，这些参数会根据注解类型被正确地插入到请求的不同部分。<br>使用<code>@Path</code> 注解的参数会在实际调用时将传入值插入到<code>URL</code>路径中相应的位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以通过<code>@Query</code>参数添加查询参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">)</span> Integer pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于复杂的查询参数组合，可以使用<code>Map</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">,</span> <span class="token annotation punctuation">@QueryMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h5><p>对于请求对象，可以使用<code>@Body</code>注解指定对象作为<code>HTTP</code>请求体。<code>@Body</code>注解通常用于指定将对象作为<code>JSON</code>格式的数据传输到服务器。当您在 Retrofit 接口方法中使用 <code>@Body</code>注解时，<code>Retrofit</code>将会使用内部的转换器（如<code>GsonConverter</code> 或者 <code>JacksonConverter</code>）将对象转换为<code>JSON</code> 格式的字符串，并将其作为请求的请求体发送到服务器。<br>通常情况下，<code>@Body</code>注解用于<code>POST</code> 或者<code>PUT</code>请求，其中请求的主体包含了要传输的对象的<code>JSON</code>表示形式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>通常情况下 @Body注解用于指定JSON格式的数据传输，但Retrofit并不会强制要求请求体的格式必须是JSON。您也可以使用其他格式的数据，例如XML或者纯文本，只要在请求体中提供了正确的数据格式，并且服务器能够正确地解析这种格式的数据。</p></blockquote><h5 id="表单数据和Multipart请求"><a href="#表单数据和Multipart请求" class="headerlink" title="表单数据和Multipart请求"></a>表单数据和Multipart请求</h5><p>方法还可以声明发送表单数据和多部分请求数据<br>使用<code>@FormUrlEncoded</code>，<code>@Field</code>或者<code>@FieldMap</code>将发送表单数据。</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@FormUrlEncoded</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"passowrd"</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@FormUrlEncoded</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@FieldMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时他还支持发送多部分请求，例如文件上传。在方法上使用<code>@Multipart</code>注解用于发送多部分请求，而参数要使用<code>@Part</code>注解。在<code>Retrofit</code>接口方法中使用<code>@Multipart</code>注解时，<code>Retrofit</code>将会使用<code>multipart/form-data</code>格式来发送请求，这种格式允许同时上传文本数据和二进制文件数据。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Multipart</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/image"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span> RequestBody userImage<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"imageDesc"</span><span class="token punctuation">)</span> RequestBody imageDesc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>@Part</code>注解用于声明每个部分的内容，其中可以是<code>RequestBody</code>类型的文本或者二进制数据，也可以是<code>MultipartBody.Part</code>类型的文件或者其他二进制数据。这样的话，就可以通过多个<code>@Part</code>注解来声明不同类型的部分，以满足不同的上传需求</p><h5 id="Header信息"><a href="#Header信息" class="headerlink" title="Header信息"></a>Header信息</h5><p>使用<code>@Headers</code>注解为方法设置静态头部。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"Accept: application/json, text/plain, */*"</span><span class="token punctuation">,</span>  <span class="token string">"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"</span><span class="token punctuation">,</span>  <span class="token string">"Cookie:xxxxxx"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用用<code>@Header</code>或者<code>HeaderMap</code>注解动态更新请求头。必须提供相应的参数给<code>@Header</code>。如果值为 <code>null</code>，则头部将被省略。否则，将对值调用<code>toString</code>，并使用结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span> String cookie<span class="token punctuation">,</span> <span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@HeaderMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerMap<span class="token punctuation">,</span> <span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于Header参数，我们还可以通过OkHttp的拦截器进行操作。</p></blockquote><h5 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h5><p>API接口方法通常返回 <code>Call&lt;T&gt;</code> 类型的对象，这里的T代表期望从服务器接收的数据类型。这种方式使得开发者能方便地利用 Retrofit 提供的回调机制或其他响应式编程库（如RxJava）来处理网络请求的结果，从而确保了对异步操作的良好控制和管理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"test/add"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> <span class="token function">addTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> TestRequest testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>User<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建Retrofit实例"><a href="#创建Retrofit实例" class="headerlink" title="创建Retrofit实例"></a>创建Retrofit实例</h4><p><code>Retrofit</code>框架的核心组件是<code>Retrofit</code>实例。<code>Retrofit</code>实例作为整个框架的心脏，不仅负责搭建网络请求所需的基础设施，还承担起发起请求、转换数据和管理响应生命周期的任务。</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置 API 的基础 URL</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>JacksonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="baseUrl设置"><a href="#baseUrl设置" class="headerlink" title="baseUrl设置"></a>baseUrl设置</h5><p>其中<code>baseUrl</code>用于指定请求服务器的根地址或者<code>API</code>的基础路径。<code>Retrofit</code>会自动将<code>baseUrl</code>和方法注解中的相对路径结合起来生成实际请求的完整URL。例如对上述示例中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"test/add"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> <span class="token function">addTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> TestRequest testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终的请求url为：<code>localhost:8080/coderacademy/test/add</code>。</p><p>关于<code>baseUrl</code>的设置有一些注意事项：</p><ul><li><p>baseUrl设置必须以<code>/</code>结尾，否则汇报错。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240221172931.png" alt="image.png"></p></li><li><p>请求方法中的相对路径（不以”/“开头），将会正确附加在以斜杠结尾的 baseUrl 的路径后面。这确保了正确的 URL 结果。如baseUrl<code>http://localhost:8080/coderacademy/</code>, 方法url为<code>test/add</code>，则最终的路径为：<code>localhost:8080/coderacademy/test/add</code>。</p></li><li><p>请求方法中的绝对路径（以”/“开头），忽略<code>baseUrl</code>中的路径组件，只保留host部分，最终的<code>URL</code>将只包含<code>baseUrl</code>的主机部分和方法的路径。如baseUrl<code>http://localhost:8080/coderacademy/</code>, 方法url为<code>/test/add</code>，则最终的路径为：<code>localhost:8080/test/add</code>。</p></li><li><p>请求方法中的路径可以是完整的<code>URL</code>，如果方法路径是完整的URL，则会替换<code>baseUrl</code>。如baseUrl为<code>http://localhost:8080/coderacademy/</code>,而方法url为<code>http://localhost:8081/coderacademy/test/add</code>，则最终的url为：<code>http://localhost:8081/coderacademy/test/add</code>。</p></li></ul><h5 id="Converter设置"><a href="#Converter设置" class="headerlink" title="Converter设置"></a>Converter设置</h5><p><code>Retrofit</code>默认只能将<code>HTTP</code>响应主体反序列化为<code>OkHttp</code>的<code>ResponseBody</code>类型，并且只能接受其<code>RequestBody</code>类型用于<code>@Body</code>注解。为了支持其他类型，可以添加转换器。</p><p>官方提供了8种转换器：</p><table><thead><tr><th>转换器</th><th>功能</th><th>使用依赖</th></tr></thead><tbody><tr><td>Gson</td><td>将 JSON 数据转换为 Java 对象，以及将 Java 对象转换为 JSON 数据。</td><td>com.squareup.retrofit2:converter-gson</td></tr><tr><td>Jackson</td><td>将JSON数据转换为 Java 对象，以及将 Java 对象转换为 JSON 数据。</td><td>com.squareup.retrofit2:converter-jackson</td></tr><tr><td>Moshi</td><td>将 JSON 数据转换为 Java 对象，以及将 Java 对象转换为 JSON 数据。</td><td>com.squareup.retrofit2:converter-moshi</td></tr><tr><td>Protobuf</td><td>将 Protocol Buffers 数据转换为 Java 对象，以及将 Java 对象转换为 Protocol Buffers 数据。</td><td>com.squareup.retrofit2:converter-protobuf</td></tr><tr><td>Wire</td><td>将 Wire 数据转换为 Java 对象，以及将 Java 对象转换为 Wire 数据。</td><td>com.squareup.retrofit2:converter-wire</td></tr><tr><td>Simple XML</td><td>将 XML 数据转换为 Java 对象，以及将 Java 对象转换为 XML 数据。</td><td>com.squareup.retrofit2:converter-simplexml</td></tr><tr><td>JAXB</td><td>将 XML 数据转换为 Java 对象，以及将 Java 对象转换为 XML 数据。</td><td>com.squareup.retrofit2:converter-jaxb</td></tr><tr><td>Scalars</td><td>将原始类型、包装类型和字符串转换为 RequestBody，以及将 ResponseBody 转换为原始类型、包装类型和字符串。</td><td>com.squareup.retrofit2:converter-scalars</td></tr><tr><td>除了官方提供的这几种转换器以外，如果使用了<code>Retrofit</code>默认不支持的内容格式的<code>API</code>进行通信（例如<code>YAML</code>、<code>TXT</code>、自定义格式），或者使用不同的库来实现现有格式(请求与响应是不同的格式)，我们也可以实现自定义转换器。</td><td></td><td></td></tr></tbody></table><p>除此之外<code>Retrofit</code>还可以跟<code>OkHttpClient</code>搭配使用，实现其高级功能，通过 <code>OkHttpClient</code>，您可以实现诸如网络连接池、超时设置、重试机制、拦截器等高级功能。而<code>Retrofit</code>则提供了简化的<code>API</code>，使得使用这些高级功能变得更加方便。</p><pre class="line-numbers language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置连接超时时间</span>    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置读取超时时间</span>    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置写入超时时间</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加日志拦截器</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置自定义的 OkHttpClient</span>    <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建请求接口实例，发起请求"><a href="#创建请求接口实例，发起请求" class="headerlink" title="创建请求接口实例，发起请求"></a>创建请求接口实例，发起请求</h4><p>在创建完<code>Retrofit</code>实例之后，接下来就需要通过调用<code>Retrofit</code>实例的<code>create()</code> 方法来创建<code>API</code>接口的实例。然后就可以使用该实例调用定义在接口中的方法来发起网络请求。</p><pre class="line-numbers language-java"><code class="language-java">MyClientService myClientService <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MyClientService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TestRequest testRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testRequest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testRequest<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"12131"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发起请求</span>Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call <span class="token operator">=</span> myClientService<span class="token punctuation">.</span><span class="token function">addTest</span><span class="token punctuation">(</span>testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    Response<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否请求成功："</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"响应："</span><span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TestResponse testResponse <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求结果："</span><span class="token operator">+</span> testResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Retrofit</code>中，<code>Call</code>对象代表了一个待执行的网络请求。它是一个表示单个异步或同步执行的请求的对象。<code>Call</code>接口定义了执行网络请求和处理响应的方法。<code>Call</code>接口的泛型类型参数表示了该网络请求的响应类型。例如，<code>Call&lt;TestResponse&gt;</code> 表示该网络请求的响应是一个<code>TestResponse</code>对象响应。</p><p><code>execute()</code>方法用于同步执行网络请求，并返回一个<code>Response</code>对象。当调用<code>execute()</code>方法时，请求将立即发出，当前线程将被阻塞直到请求完成并返回响应。<code>Response</code>对象包含了网络请求的响应数据，可以通过调用<code>body()</code>方法来获取响应主体。</p><p>另外，还可以使用<code>Call</code>对象来发起异步网络请求。异步请求允许您在发出请求后继续执行其他代码，而不必等待网络请求完成。当请求完成后，<code>Retrofit</code>将在后台线程上调用您提供的回调方法，以处理响应数据。</p><pre class="line-numbers language-java"><code class="language-java">Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call <span class="token operator">=</span> myClientService<span class="token punctuation">.</span><span class="token function">addTest</span><span class="token punctuation">(</span>testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>TestResponse<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否请求成功："</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"响应："</span><span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TestResponse testResponse <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求结果："</span><span class="token operator">+</span> testResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 请求失败结果</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异步请求时，需要实现<code>Callback</code>接口，该接口定义了处理成功和失败响应的方法。在 <code>onResponse</code>方法中处理成功响应，在<code>onFailure</code>方法中处理失败响应。</p><p>然后使用<code>Call</code>对象的<code>enqueue()</code>方法来执行异步网络请求，并传入<code>Callback</code>。<code>Retrofit</code>将在后台线程上执行网络请求，并在请求完成后调用相应的回调方法。</p><p>到此一个使用<code>Retrofit2</code>发起请求的功能就完成了。接下来我们看一下<code>Retrofit2</code>的一些高级功能。</p><h3 id="Retrofit2的高级功能"><a href="#Retrofit2的高级功能" class="headerlink" title="Retrofit2的高级功能"></a>Retrofit2的高级功能</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p><code>Retrofit</code>的高级功能通常需要与<code>OkHttpClient</code>结合使用才能实现。<code>OkHttpClient</code>是一个强大的<code>HTTP</code>客户端库，<code>Retrofit</code>是基于它构建的，并且<code>Retrofit</code>默认使用 <code>OkHttpClient</code>作为其底层的网络请求库。</p><p>通过<code>OkHttpClient</code>，您可以实现诸如网络连接池、超时设置、重试机制、拦截器等高级功能。而<code>Retrofit</code>则提供了简化的<code>API</code>，使得使用这些高级功能变得更加方便。</p><pre class="line-numbers language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置连接超时时间</span>    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置读取超时时间</span>    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置写入超时时间</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加日志拦截器</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置自定义的 OkHttpClient</span>    <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于拦截器，在实际开发中有较多需要使用的场景，比如第三方服务需要使用一些签名验证手段，请求数据进行加密等，我们都可以统一在拦截器中进行处理。自定义拦截器，我们需要实现<code>Interceptor</code>接口，实现<code>intercept()</code>方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAuthInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Response <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String appKey <span class="token operator">=</span> <span class="token string">"MyKey"</span><span class="token punctuation">;</span>        String appToken <span class="token operator">=</span> <span class="token string">"MyToken"</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Api-Key"</span><span class="token punctuation">,</span> appKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Api-Secret"</span><span class="token punctuation">,</span> appToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        request <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入拦截器：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置连接超时时间</span>    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置读取超时时间</span>    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置写入超时时间</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加日志拦截器</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h4><p>前面内容已经提到对于转换器，出了<code>Retrofit2</code>提供的8种转换器以外，有些特别的请求体这几种转换器不能满足，此时，我们可以自定义转换器。需要继承<code>Converter.Factory</code>类，重写<code>requestBodyConverter</code>与<code>reponseBodyConverter</code>方法即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBodyConverterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Converter<span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> <span class="token function">responseBodyConverter</span><span class="token punctuation">(</span>Type type<span class="token punctuation">,</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations<span class="token punctuation">,</span> Retrofit retrofit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomResponseBodyConverter</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Converter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> RequestBody<span class="token operator">></span> <span class="token function">requestBodyConverter</span><span class="token punctuation">(</span>Type type<span class="token punctuation">,</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterAnnotations<span class="token punctuation">,</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> methodAnnotations<span class="token punctuation">,</span> Retrofit retrofit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomRequestBodyConverter</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在分别实现<code>CustomResponseBodyConverter</code>以及<code>CustomRequestBodyConverter</code>，实现请求与响应不同的转换器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRequestBodyConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>CustomRequest<span class="token punctuation">,</span> RequestBody<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ObjectMapper objectMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CustomRequestBodyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>DeserializationFeature<span class="token punctuation">.</span>FAIL_ON_UNKNOWN_PROPERTIES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span>PropertyNamingStrategy<span class="token punctuation">.</span>SNAKE_CASE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">setSerializationInclusion</span><span class="token punctuation">(</span>JsonInclude<span class="token punctuation">.</span>Include<span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RequestBody <span class="token function">convert</span><span class="token punctuation">(</span>CustomRequest CustomRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体转换逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***响应转换器*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomResponseBodyConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Type type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对象映射器     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Gson gson<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CustomResponseBodyConverter</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        GsonBuilder gsonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gson <span class="token operator">=</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">convert</span><span class="token punctuation">(</span>ResponseBody value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体处理逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义转换器</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置自定义的 OkHttpClient</span>    <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomBodyConverterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文深入介绍了<code>Retrofit2</code>，这是由<code>Square</code>公司开源的一款面向<code>Java</code>和<code>Android</code>平台的<code>RESTful API</code>客户端库。基于强大的<code>OkHttp</code>网络库构建，<code>Retrofit2</code>通过优雅的设计理念，将复杂的<code>HTTP</code>请求抽象为类型安全且易于理解的接口调用。</p><p>在使用<code>Retrofit2</code>时，开发者可以利用注解来定义<code>API</code>接口以及配置请求方法、<code>URL</code>路径、参数等信息，大大简化了网络通信实现过程，提高了代码可读性和维护性。同时，<code>Retrofit2</code>内置了多种数据转换器（如<code>GsonConverterFactory</code>），支持<code>JSON</code>以及其他格式的数据自动序列化与反序列化，极大地降低了开发成本。</p><p><code>Retrofit2</code>不仅支持同步和异步两种请求模式，还提供了丰富的扩展机制，包括自定义转换器以适应不同数据格式，添加拦截器处理全局请求/响应逻辑，以及集成各种认证方式，满足复杂网络环境下的各类需求。</p><p>此外，本文还阐述了如何创建和配置<code>Retrofit</code>实例，给出了具体的使用示例，并深入探讨了如何利用高级功能如自定义转换器、拦截器以及进行身份验证等，进一步展示了 <code>Retrofit2</code> 在实际项目中的强大灵活性和实用性。通过本文的学习，读者将能够更加熟练地使用<code>Retrofit2</code>开发出高效、可靠的网络请求功能。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Retrofit2 </tag>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转SpringBoot：动态排除Starter配置，轻松部署</title>
      <link href="/article/springbootdynamicexclusionstarter.html"/>
      <url>/article/springbootdynamicexclusionstarter.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在软件开发中，进行本地单元测试是一项常规且必要的任务。然而，在进行单元测试时，有时需要启动一些中间件服务，如Kafka、Elasticjob等。举例来说，我曾经遇到过一个问题：项目中使用了<code>Redisson</code>锁，但由于<code>Redisson</code>版本较低，在Mac环境下偶尔会报错<code># RedisConnectionException: Unable to init enough connections amount</code>。鉴于升级版本带来的风险，以及问题仅在本地启动时出现，我决定在本地环境中排除<code>Redisson</code>的Starter，从而避免影响其他环境的配置。那么，我们应该如何做呢？</p><blockquote><p>我们以上篇介绍如何自定义Starter中的文章中示例<code>CoderAcademyStarter</code>为例。我们引入了这个starter。</p></blockquote><h3 id="Starter自动配置类的排除"><a href="#Starter自动配置类的排除" class="headerlink" title="Starter自动配置类的排除"></a>Starter自动配置类的排除</h3><p>在《SpringBoot如何自定义Starter》中，我们介绍了如何在<code>META-INF/spring.factories</code>文件中使用<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>来指定Starter的自动配置类。Spring Boot启动时会扫描所有已引入jar包中的<code>spring.factories</code>文件，并根据<code>EnableAutoConfiguration</code>键下的类来加载和执行相应的自动配置逻辑。当我们不希望应用启动时使用该Starter的功能时，就需要排除自动配置类。</p><p>我们可以通过<code>spring.autoconfigure.exclude</code>属性排除<code>CoderAcademyStarter</code>的自动配置类：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.autoconfigure.exclude</span><span class="token punctuation">=</span><span class="token attr-value">com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>spring.autoconfigure.exclude</code>是Spring Boot中的一个属性，用于指定在自动配置过程中要排除的自动配置类。通过设置该属性，我们可以明确告知Spring Boot不要自动配置指定的类，即使它们满足自动配置的条件。当需要禁用特定的自动配置类时，可以在<code>application.properties</code>或<code>application.yml</code>中设置<code>spring.autoconfigure.exclude</code>属性，并提供要排除的自动配置类的完全限定类名。这样，Spring Boot在自动配置过程中将不会考虑这些类。</p><p>此时，如果我们在使用<code>CoderAcademyService</code>时会出现错误:</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240218173015.png" alt="image.png"></p><h3 id="根据不同环境排除Starter自动配置类"><a href="#根据不同环境排除Starter自动配置类" class="headerlink" title="根据不同环境排除Starter自动配置类"></a>根据不同环境排除Starter自动配置类</h3><p>在日常开发中，我们通常需要针对不同的环境指定不同的配置。我们可以通过<code>spring.actice.profiles</code>属性来指定不同环境的配置文件的加载。例如，我们可以在本地指定<code>spring.actice.profiles=local</code>，然后创建一个<code>application-local.properties</code>的配置文件，在其中指定<code>spring.autoconfigure.exclude</code>。</p><p>另外，我们还可以实现<code>ApplicationListener&lt;ApplicationContextInitializedEvent&gt;</code>接口，通过监听上下文初始化事件来根据环境变量的标识排除Starter的自动配置类。当Spring应用程序的<code>ApplicationContext</code>被初始化时，将触发<code>ApplicationContextInitializedEvent</code>事件。通常，在应用程序的上下文初始化过程中会先加载bean定义、执行后处理器等操作。因此，通过监听<code>ApplicationContextInitializedEvent</code>事件，我们可以在Spring容器初始化的早期阶段执行一些定制化的逻辑。</p><p>我们可以通过实现<code>ApplicationListener&lt;ApplicationContextInitializedEvent&gt;</code>接口，根据一些环境变量的标识排除Starter的自动配置类。例如，我们可以定义一个<code>coderacademy.enable</code>的标识来决定是否扫描Starter。以下是一个示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ApplicationContextInitializedEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>ConfigurableEnvironment<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ApplicationContextInitializedEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationContextInitializedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableEnvironment environment <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"coderacademy.enable"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token string">"false"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"coderacademy.enable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"spring.autoconfigure.exclude"</span><span class="token punctuation">,</span> <span class="token string">"com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在启动应用时，通过<code>-Dcoderacademy.enable=false</code>指定排除Starter的自动配置类。这种方式特别适用于本地启动应用时排除Starter或其他Bean的初始化。</p><p>当然本地启动也可以直接通过<code>-Dspring.autoconfigure.exclude=com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig</code>也可以满足排除Starter的配置。</p><h3 id="自定义Starter-Bean排除"><a href="#自定义Starter-Bean排除" class="headerlink" title="自定义Starter Bean排除"></a>自定义Starter Bean排除</h3><p>在《SpringBoot如何自定义Starter》文中，我们还提到了一种调用方使用Starter的方式，我们可以不是用自动配置类的Starter，可以自定义配置的信息，在手动创建Starter对应的服务的Bean。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${springboot.coderacademy.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String staterMsg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyConfig coderAcademyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>staterMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这种情况，我们可以使用Spring Boot的注解<code>@ConditionalOnProperty</code>来控制是否创建Bean。<code>@ConditionalOnProperty</code>是一个条件注解，根据配置属性的值来决定是否应该创建一个Bean或应用某个配置。具体来说，<code>@ConditionalOnProperty</code>的<code>name</code>属性表示配置属性的名称，<code>havingValue</code>属性表示配置属性的期望值，默认为<code>true</code>，<code>matchIfMissing</code>属性表示当配置属性不存在时是否匹配条件，默认为<code>false</code>。</p><p>因此，我们可以给<code>CoderAcademyService</code>的Bean添加<code>@ConditionalOnProperty</code>注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${springboot.coderacademy.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String staterMsg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"coderacademy.enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyConfig coderAcademyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>staterMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们在启动应用时可以通过<code>-Dcoderacademy.enable=false</code>变量来控制是否创建<code>CoderAcademyService</code>，而设置了<code>matchIfMissing=true</code>，即使其他环境没有该环境变量也不受影响。</p><p>除了<code>@ConditionalOnProperty</code>之外，Spring Boot还提供了其他一些条件注解，用于根据不同的条件来决定是否应该创建Bean或者是否应该应用某个配置。一些常见的条件注解包括：</p><ol><li><code>@ConditionalOnClass</code>：当类路径中存在指定的类时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnMissingClass</code>：当类路径中不存在指定的类时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnBean</code>：当容器中存在指定的Bean时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnMissingBean</code>：当容器中不存在指定的Bean时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnExpression</code>：当满足SpEL表达式定义的条件时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnJava</code>：当JVM运行的Java版本符合指定条件时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnWebApplication</code>：当运行的环境是Web应用程序时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnNotWebApplication</code>：当运行的环境不是Web应用程序时，才会创建Bean或应用配置。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了在Spring Boot项目中如何排除Starter自动配置类，以及根据不同环境动态排除配置的方法。通过<code>spring.autoconfigure.exclude</code>属性和条件注解如<code>@ConditionalOnProperty</code>，我们可以灵活控制Bean的创建和配置的应用，从而更好地适应不同的部署环境和需求。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 动态排除Starter配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁Mysql中的JSON数据类型，怎一个爽字了得</title>
      <link href="/article/mysqljson.html"/>
      <url>/article/mysqljson.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在实际业务开发中，随着业务的变化，数据的复杂性和多样性不断增加。传统的关系型数据库模型在这种情况下会显得受限，因为它们需要预先定义严格的数据模式，并且通常只能存储具有相同结构的数据。而面对非结构化或半结构化数据的存储和处理需求，选择使用非关系型数据库或者创建子表存储这些变化的结构可能会变得复杂。在这种情况下，我们可以利用<code>MySQL</code>的<code>JSON</code>字段类型来解决这个问题。<code>JSON</code>字段提供了灵活的数据存储方式，能够轻松应对数据结构的变化和动态性，从而更好地满足业务需求。</p><p><code>MySQL5.7.8</code>版本引入了JSON数据类型，允许在数据库表中存储和操作符合<code>JSON</code>格式的数据。这种原生支持<code>JSON</code>（<code>JavaScript</code>对象表示法）的数据类型遵循<code>RFC 7159</code>标准，提供了有效存储复杂、半结构化数据的方式。<code>MySQL8.0</code>版本全面支持<code>JSON</code>数据类型，标志着<code>MySQL</code>在处理非结构化数据方面取得了显著进展。除了能够高效存储<code>JSON</code>文档外，<code>MySQL8.0</code>的<code>JSON</code>数据类型还引入了强大的内置函数，极大地提升了操作和查询<code>JSON</code>数据的效率和便捷性。本文我们以<code>MYSQL 8.0</code>环境研究一下它的<code>JSON</code>类型。</p><h3 id="JSON数据类型的特性"><a href="#JSON数据类型的特性" class="headerlink" title="JSON数据类型的特性"></a>JSON数据类型的特性</h3><ul><li><p>二进制存储<br>MySQL 8.0采用了一种优化的二进制格式存储JSON数据，相较于传统的字符串存储方式，这种新格式能够更迅速地读取和解析JSON文档。该格式允许服务器通过键或数组索引直接查找子对象或嵌套值，无需事先读取或解析文档中的所有值。这不仅降低了存储空间占用，还提升了查询性能。JSON列存储的JSON文档所需的空间大致与LONGBLOB或LONGTEXT相同。但要注意，存储在JSON列中的JSON文档大小受<code>max_allowed_packet</code>系统变量的限制。</p></li><li><p>自动验证<br>当插入或更新包含JSON字段的记录时，MySQL会自动验证所插入的内容是否符合JSON格式规范，确保数据的一致性和完整性。</p></li><li><p>索引支持<br>JSON列不直接索引，但可以在JSON字段中特定路径上创建索引，例如通过<code>JSON_EXTRACT()</code>函数提取出用于索引的值。此外，MySQL优化器还会寻找与JSON表达式匹配的虚拟列上的兼容索引。</p></li><li><p>部分内容更新<br>从MySQL 8.0开始，优化器可以执行JSON列的部分、原地更新，而不是完全删除旧文档并将新文档完全写入列。这种优化可以通过使用<code>JSON_SET()</code>、<code>JSON_REPLACE()</code>或<code>JSON_REMOVE()</code>等函数进行更新。</p></li><li><p>丰富的JSON函数<br>MySQL提供了一组用于操作JSON值的SQL函数，包括创建、操作和搜索。此外，还有一组用于操作GeoJSON值的空间函数。</p></li></ul><h3 id="JSON操作函数"><a href="#JSON操作函数" class="headerlink" title="JSON操作函数"></a>JSON操作函数</h3><p>MySQL提供了一组用于操作JSON值的SQL函数，包括创建、操作和搜索。</p><h4 id="1、创建JSON值"><a href="#1、创建JSON值" class="headerlink" title="1、创建JSON值"></a>1、创建JSON值</h4><ul><li>JSON_ARRAY<br>用于创建JSON数组。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_ARRAY<span class="token punctuation">(</span><span class="token punctuation">[</span>val<span class="token punctuation">[</span><span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_ARRAY<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------------------------------------+</span><span class="token operator">|</span> JSON_ARRAY<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"2024-02-05 03:29:56.000000"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_OBJECT<br>用于创建JSON对象。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_OBJECT<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">key</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">key</span><span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> JSON_OBJECT<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> person<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+</span><span class="token operator">|</span> person                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+</span><span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果传入的不是合法的JSON格式，则会报错。</p><ul><li>JSON_QUOTE<br>用于去除JSON字符串中的引号，将一个JSON格式化的字符串转换为常规的数据库内可直接使用的字符串。当从JSON文档中提取出一个原本被双引号包围的字符串时，此函数会移除这些引号，从而便于后续对提取出的数据进行进一步的SQL操作或者与其他非JSON字段进行比较。</li></ul><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'CoderAcademy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'"CoderAcademy"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+------------------------------+</span><span class="token operator">|</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'CoderAcademy'</span><span class="token punctuation">)</span> <span class="token operator">|</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'"CoderAcademy"'</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+------------------------------+</span><span class="token operator">|</span> <span class="token string">"CoderAcademy"</span>             <span class="token operator">|</span> <span class="token string">"\"CoderAcademy\""</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'[1, 2, 3]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json1 <span class="token punctuation">,</span>JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'["a", "b","c"]'</span><span class="token punctuation">)</span>  <span class="token keyword">AS</span> json2<span class="token punctuation">,</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">)</span>  <span class="token keyword">AS</span> json3<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------+------------------------+--------------------------------------------+</span><span class="token operator">|</span> json1       <span class="token operator">|</span> json2                  <span class="token operator">|</span> json3                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------+------------------------+--------------------------------------------+</span><span class="token operator">|</span> <span class="token string">"[1, 2, 3]"</span> <span class="token operator">|</span> <span class="token string">"[\"a\", \"b\",\"c\"]"</span> <span class="token operator">|</span> <span class="token string">"{\"name\":\"CoderAcademy\", \"age\": 30}"</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------+------------------------+--------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CAST(value AS JSON)<br>在MySQL8.0中，CAST(value AS JSON)函数会尝试将给定的值转化为一个有效的JSON格式字符串。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">CAST<span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span><span class="token string">'["apple", "banana", "cherry"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span> <span class="token keyword">AS</span> json1<span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span> <span class="token keyword">AS</span> JSON <span class="token punctuation">)</span> <span class="token keyword">AS</span> json2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------------------------------------+</span><span class="token operator">|</span> json1                         <span class="token operator">|</span> json2                               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span> <span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，如果要转换的值不符合JSON格式规范，则会抛出错误。例如：<code>NULL</code>、不合法的JSON字符串或其他非转换类型的值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> cast<span class="token punctuation">(</span><span class="token string">'NULL'</span> <span class="token keyword">AS</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>ERROR <span class="token number">3141</span> <span class="token punctuation">(</span><span class="token number">22032</span><span class="token punctuation">)</span>: Invalid JSON <span class="token keyword">text</span> <span class="token operator">in</span> argument <span class="token number">1</span> <span class="token keyword">to</span> <span class="token keyword">function</span> cast_as_json: <span class="token string">"Invalid value."</span> at position <span class="token number">0</span><span class="token punctuation">.</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age"}'</span> <span class="token keyword">AS</span> JSON <span class="token punctuation">)</span><span class="token punctuation">;</span>ERROR <span class="token number">3141</span> <span class="token punctuation">(</span><span class="token number">22032</span><span class="token punctuation">)</span>: Invalid JSON <span class="token keyword">text</span> <span class="token operator">in</span> argument <span class="token number">1</span> <span class="token keyword">to</span> <span class="token keyword">function</span> cast_as_json: <span class="token string">"Missing a colon after a name of object member."</span> at position <span class="token number">29</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_TYPE<br>用于查询JSON值类型的内置函数。该函数返回一个表示给定JSON值基本类型的字符串。<br>语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_TYPE<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>“NULL”：如果路径指向的值是JSON <code>null</code>。</li><li>“OBJECT”：如果路径指向的是一个JSON对象（键值对集合）。</li><li>“ARRAY”：如果路径指向的是一个JSON数组。</li><li>“STRING”：如果路径指向的是一个JSON字符串。</li><li>“NUMBER”：如果路径指向的是一个JSON数字（包括整数和浮点数）。</li><li>“TRUE” 或 “FALSE”：如果路径指向的是布尔值 <code>true</code> 或 <code>false</code>。</li></ol><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_TYPE<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_null<span class="token punctuation">,</span> JSON_TYPE<span class="token punctuation">(</span><span class="token string">'["a", "b","c"]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_array<span class="token punctuation">,</span> JSON_TYPE<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_object<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------+-------------+</span><span class="token operator">|</span> json_null <span class="token operator">|</span> json_array <span class="token operator">|</span> json_object <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------+-------------+</span><span class="token operator">|</span> <span class="token boolean">NULL</span>      <span class="token operator">|</span> ARRAY      <span class="token operator">|</span> OBJECT      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、合并JSON"><a href="#2、合并JSON" class="headerlink" title="2、合并JSON"></a>2、合并JSON</h4><ul><li>JSON_MERGE_PRESERVE<br>用于合并两个或多个JSON文档的函数。并保留所有键值对。<br>语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_MERGE_PRESERVE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> json_doc<span class="token punctuation">[</span><span class="token punctuation">,</span> json_doc<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PRESERVE<span class="token punctuation">(</span><span class="token string">'["a", 1]'</span><span class="token punctuation">,</span> <span class="token string">'{"key": "value"}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token operator">|</span> json_value                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> {<span class="token string">"key"</span>: <span class="token string">"value"</span>}<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在处理重复键时，如果是合并对象(JOSN_OBJECT)，将value自动包装为数组，并通过组合值的方式合并数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PRESERVE<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">,</span> <span class="token string">'{"name":"CoderAcademy", "age": 35}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------------------+</span><span class="token operator">|</span> json_value                                                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token punctuation">[</span><span class="token string">"CoderAcademy"</span><span class="token punctuation">,</span> <span class="token string">"CoderAcademy"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是合并数组(JSON_ARRAY)，将它们的值组合成一个数组，作为结果中该键的值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PRESERVE<span class="token punctuation">(</span><span class="token string">'{"hobbies":["Java", "Mysql"]}'</span><span class="token punctuation">,</span> <span class="token string">'{"hobbies":["Python", "Mysql"]}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------------------+</span><span class="token operator">|</span> json_value                                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Mysql"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Mysql"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MySQL 8.0.3以后支持</p></blockquote><ul><li>JSON_MERGE_PATCH<br>用于合并两个或多个JSON文档的函数。仅保留最后一个值。<br>语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_MERGE_PATCH<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> json_doc<span class="token punctuation">[</span><span class="token punctuation">,</span> json_doc<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PATCH<span class="token punctuation">(</span><span class="token string">'["a", 1]'</span><span class="token punctuation">,</span> <span class="token string">'{"key": "value"}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+</span><span class="token operator">|</span> json_value       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+</span><span class="token operator">|</span> {<span class="token string">"key"</span>: <span class="token string">"value"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PATCH<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">,</span> <span class="token string">'{"name":"CoderAcademy", "age": 35}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------+</span><span class="token operator">|</span> json_value                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MySQL 8.0.3以后支持</p></blockquote><h4 id="3、JSON搜索"><a href="#3、JSON搜索" class="headerlink" title="3、JSON搜索"></a>3、JSON搜索</h4><ul><li>JSON_CONTAINS<br>MySQL8.0中引入的用于检查 JSON 数组或对象是否包含特定值或键值对的函数。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_CONTAINS<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> candidate<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>json_doc</code>是要检查的JSON文档，通常是一个列名或者JSON字符串表达式。<code>candidate</code>是要查找的值。而<code>path</code>（可选）指定在 JSON 文档中的路径，用于更精确地定位要检查的元素，如果没有指定路径，则在整个JSON文档中搜索给定的候选值。<br><code>JSON_CONTAINS</code>函数返回<code>1</code>表示包含，返回<code>0</code>表示不包含。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span><span class="token string">'{"a": 1, "b": 2, "c": {"d": 4}}'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'$.a'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> contains_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> contains_value <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span>              <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span><span class="token string">'[ "apple", "banana", "cherry" ]'</span><span class="token punctuation">,</span> <span class="token string">'"apple"'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> contains_apple<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> contains_apple <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span>              <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span><span class="token string">'{"fruits": ["apple", "banana", "cherry"]}'</span><span class="token punctuation">,</span> <span class="token string">'"apple"'</span><span class="token punctuation">,</span> <span class="token string">'$.fruits'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> contains_apple_in_path<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+</span><span class="token operator">|</span> contains_apple_in_path <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+</span><span class="token operator">|</span>                      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'"apple"'</span><span class="token punctuation">,</span> <span class="token string">'$.fruits'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> json_data                                 <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">07</span>:<span class="token number">28</span>:<span class="token number">40</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------------------------------------+---------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别需要注意的是：<strong>在使用<code>JSON_CONTAINS</code>时，注意数据类型的匹配，确保值的类型与JSON中的类型一致。</strong> JSON_CONTAINS参数传递匹配值是<code>&#39;&#39;</code>并不代表他是一个字符串，例如上述第一个例子：我们搜索<code>1</code>，使用<code>&#39;1&#39;</code>，搜索<code>apple</code>时，使用<code>&#39;&quot;apple&quot;&#39;</code>。</p><p>同时<code>JSON_CONTAINS()</code>不支持对嵌套JSON文档进行递归搜索，它只针对JSON路径指定的位置进行比较。</p><ul><li>JSON_CONTAINS_PATH<br>用于检查JSON文档中是否存在指定路径的函数。与<code>JSON_CONTAINS()</code>函数不同，<code>JSON_CONTAINS_PATH()</code> 不检查路径对应的值是否匹配某个特定值，而是仅判断JSON文档内是否存在指定的路径结构。语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> one_or_all<span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>是待检查的目标JSON文档。<code>one_or_all</code>是一个字符串参数，可以是 <code>&#39;one&#39;</code> 或 <code>&#39;all&#39;</code>，<code>&#39;one&#39;</code>表示只要存在任意一个提供的路径就返回1（真），<code>&#39;all&#39;</code> 表示所有提供的路径都必须存在才返回1（真）。<code>path</code>：一个或多个JSON路径表达式，用于在JSON文档内部定位要检查的路径。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@json_data</span> <span class="token operator">=</span> <span class="token string">'{"name":"John","age":30,"hobbies":["reading","coding"],"address":{"city":"New York","country":"USA"}}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span><span class="token variable">@json_data</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> has_name<span class="token punctuation">,</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span><span class="token variable">@json_data</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.address.country'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> has_country<span class="token punctuation">,</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span><span class="token variable">@json_data</span><span class="token punctuation">,</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies[0]'</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies[1]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> has_both_hobbies<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------------------+</span><span class="token operator">|</span> has_name <span class="token operator">|</span> has_country <span class="token operator">|</span> has_both_hobbies <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------------------+</span><span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>           <span class="token number">1</span> <span class="token operator">|</span>                <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.address.country'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------------------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> json_data                                                                                                        <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------------------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"address"</span>: {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"USA"</span>}<span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"reading"</span><span class="token punctuation">,</span> <span class="token string">"coding"</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">07</span>:<span class="token number">25</span>:<span class="token number">47</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------------------------------------------------------------------------------------------------------------+---------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_EXTRACT<br>从JSON字段中提取指定路径的值。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_EXTRACT<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>是包含JSON数据的列名或者直接的JSON字符串。<code>path</code>是一个或多个以逗号分隔的JSON路径表达式，用于指定要提取的值的位置。路径可以使用点<code>.</code>和方括号<code>[]</code>来表示对象属性和数组索引。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@user_info</span> <span class="token operator">=</span> <span class="token string">'{"name":"John Doe","age":30,"hobbies":["reading","coding"],"address":{"street":"123 Main St","city":"New York"}}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> name<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.age'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> age<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies[0]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> first_hobby<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.address.city'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> city<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> name       <span class="token operator">|</span> age  <span class="token operator">|</span> first_hobby <span class="token operator">|</span> city       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> <span class="token string">"John Doe"</span> <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token string">"reading"</span>   <span class="token operator">|</span> <span class="token string">"New York"</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span>            <span class="token keyword">AS</span> name<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>        JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.age'</span><span class="token punctuation">)</span>             <span class="token keyword">AS</span> age<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>        JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies[0]'</span><span class="token punctuation">)</span>      <span class="token keyword">AS</span> first_hobby<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>        JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.address.city'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> city    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">FROM</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> name       <span class="token operator">|</span> age  <span class="token operator">|</span> first_hobby <span class="token operator">|</span> city       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> <span class="token string">"John Doe"</span> <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token string">"reading"</span>   <span class="token operator">|</span> <span class="token string">"New York"</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">"John"</span>     <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token string">"reading"</span>   <span class="token operator">|</span> <span class="token string">"New York"</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们介绍一下path中的一些规则：</p><ol><li>点<code>.</code>运算符<br>用于访问嵌套的对象属性。例如：<code>$.name</code> 表示访问顶级对象的 “name” 属性。</li><li>方括号<code>[]</code>运算符<br>用于访问数组元素。对于数组索引，使用数字表示位置，从0开始。例如：<code>$.hobbies[0]</code> 表示访问顶级对象 “hobbies” 数组的第一个元素。</li><li>多路径查询<br>在一个函数调用中可以指定多个路径，每个路径之间用逗号分隔。例如：<code>JSON_EXTRACT(json_column, &#39;$.path1&#39;, &#39;$.path2&#39;)</code>。</li></ol><ul><li>JSON_KEYS<br>用于从JSON文档中提取所有键（key）的一个函数，它返回一个包含JSON对象所有键名的数组。这对于需要获取或操作JSON对象内部属性名称时非常有用。语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_KEYS<span class="token punctuation">(</span>json_doc<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>是包含JSON数据的列名或者直接的JSON字符串。<code>path</code>（可选参数）如果提供了路径，则只返回该路径指向的对象内的键。例如，若要提取嵌套在 JSON 文档内某个对象的所有键，可以指定到该对象的路径。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_KEYS<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">AS</span> top_level_keys <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------+</span><span class="token operator">|</span> top_level_keys                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"fruits"</span><span class="token punctuation">]</span>                            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_KEYS<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.address'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> address_keys <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.address'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span><span class="token operator">|</span> address_keys        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"street"</span><span class="token punctuation">]</span>  <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"country"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_OVERLAPS<br>该函数会检查两个JSON对象，并返回布尔值。如果至少有一个键存在于两个对象中且对应值相等，则返回真（1），否则返回假（0）。这个函数并不关注两个JSON对象的所有内容，仅针对有交集的键值对进行比较。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_OVERLAPS<span class="token punctuation">(</span>json_doc1<span class="token punctuation">,</span> json_doc2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@doc1</span> <span class="token operator">=</span> <span class="token string">'{"name": "John", "age": 30}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@doc2</span> <span class="token operator">=</span> <span class="token string">'{"name": "John", "address": "New York"}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_OVERLAPS<span class="token punctuation">(</span><span class="token variable">@doc1</span><span class="token punctuation">,</span> <span class="token variable">@doc2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> do_overlap<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+</span><span class="token operator">|</span> do_overlap <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+</span><span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，如果两个JSON对象没有共享的键，或者共享的键对应的值不相等，则此函数返回0。此外，它只适用于JSON对象，对于JSON数组则不会进行这样的比较。</p><blockquote><p>MySQL 8.0.17以后才有这个函数</p></blockquote><ul><li>JSON_SEARCH<br>用于在JSON文档中搜索指定的字符串值，并返回找到该值的第一个匹配路径。这个函数对于从JSON数据结构中检索特定值非常有用。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_SEARCH<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> one_or_all<span class="token punctuation">,</span> search_str<span class="token punctuation">[</span><span class="token punctuation">,</span> escape_char<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>包含要搜索的JSON数据的列名或JSON字符串。<code>one_or_all</code>表示搜索模式，可以是 <code>&#39;one&#39;</code> 或 <code>&#39;all&#39;</code>,如果是<code>&#39;one&#39;</code>（默认）则只要找到一个匹配就返回第一个匹配的路径，如果没有找到则返回NULL，如果是<code>&#39;all&#39;</code>则返回所有匹配路径的JSON数组，如果没有找到则返回NULL。<code>search_str</code>是要在JSON文档中查找的字符串值。<code>escape_char</code>（可选）代表如果搜索字符串中有特殊字符需要转义，可以提供一个转义字符。<code>path</code>（可选）可以指定一个或多个JSON路径，限制搜索范围到这些路径所指向的对象或数组元素。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_SEARCH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> name_path<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_SEARCH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> main_street_path    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------------+</span><span class="token operator">|</span> name_path <span class="token operator">|</span> main_street_path <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------------+</span><span class="token operator">|</span> <span class="token boolean">NULL</span>      <span class="token operator">|</span> <span class="token string">"$.address.city"</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">"$.name"</span>  <span class="token operator">|</span> <span class="token string">"$.address.city"</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token boolean">NULL</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span>             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，<code>JSON_SEARCH()</code>主要适用于搜索字符串类型的值，在MySQL 8.0及以前版本中，它不支持直接搜索数值型或其他非字符串类型的内容。此外，该函数可能无法处理嵌套的JSON对象或数组内的复杂搜索场景，因为它只能返回单个键值对路径，而不是深度遍历整个JSON结构以寻找匹配项。</p><ul><li>JSON_VALUE<br>用于从JSON文档中提取标量值的一个函数。它允许你从JSON数据结构中检索出符合SQL数据类型的特定键的值，并将其转换为一个可直接在SQL语句中使用的标准SQL数据类型（如字符串、数字或布尔值）。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_VALUE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>JSON_VALUE()</code> 返回的是位于给定路径下的JSON文档中的标量值（即字符串、数字或布尔值），而不是JSON格式的值。这与 <code>JSON_EXTRACT()</code> 函数不同，后者返回的是JSON格式的值，即使提取的是标量值也是如此。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_VALUE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> name<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_VALUE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.age'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> age<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_VALUE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.is_student'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> is_student    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------+</span><span class="token operator">|</span> name     <span class="token operator">|</span> age  <span class="token operator">|</span> is_student <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------+</span><span class="token operator">|</span> John Doe <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> John     <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> <span class="token boolean">NULL</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> John Doe <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token boolean">true</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数简化了JSON数据在SQL查询中的处理，特别是当你需要将JSON字段的值作为普通SQL数据类型进行比较、聚合或其他操作时。</p><blockquote><p>MySQL 8.0.21版本开始提供JSON_VALUE</p></blockquote><h4 id="4、JSON数据修改"><a href="#4、JSON数据修改" class="headerlink" title="4、JSON数据修改"></a>4、JSON数据修改</h4><ul><li>JSON_ARRAY_APPEND<br>用于向JSON数组末尾追加元素的函数。这个函数允许你在现有的JSON数组中添加新的元素，无论是标量值还是嵌套的JSON对象或数组。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_ARRAY_APPEND<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>指包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表一个JSON路径表达式，指向要追加元素到其后的JSON数组。而<code>value</code>就是要追加到指定路径下JSON数组中的值，可以是标量值（如字符串、数字、布尔值），也可以是另一个JSON对象或数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span><span class="token operator">|</span> json_data                                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_APPEND<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------------------------------+</span><span class="token operator">|</span> json_data                                           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一点需要注意，如果<code>path</code>所指的对象不是一个数组，那么在进行追加操作之前，MySQL会将该对象转换为一个只有一个元素的新数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_APPEND<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此函数适用于需要动态修改和扩展数据库内存储的JSON数组的情况，特别是在处理具有可变长度列表的数据时特别有用。</p><ul><li>JSON_ARRAY_INSERT<br>用于向JSON数组的特定位置插入元素的函数。这个函数允许你在现有的JSON数组的指定索引处插入一个新元素，这个元素可以是单个元素值、JSON数组、JSON对象。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_ARRAY_INSERT<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。而<code>path</code>是一个JSON路径表达式，指向要插入元素的JSON数组，并且可以指定要插入的位置（通过数组索引）。而<code>value</code>就是要插入到指定路径下JSON数组中的值，可以是普通值（如字符串、数字、布尔值），也可以是另一个JSON对象或数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[0]'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"cherry"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 插入一个数组</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[0]'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'["cherry", "orange"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"cherry"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_INSERT<br>用于向JSON文档插入新键值对或替换已存在键的值的一个函数。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_INSERT<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。而<code>path</code>是一个JSON路径表达式，指向要插入元素的JSON数组，并且可以指定要插入的位置（通过数组索引）。而<code>value</code>就是要插入到指定路径下JSON数组中的值，可以是普通值（如字符串、数字、布尔值），也可以是另一个JSON对象或数组。</p><p>如果在JSON文档中，路径已存在，则不会覆盖现有的文档值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果指定的路径不存在于原始JSON文档中，则会在该路径处创建新的键值对。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> json_data                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'["Java", "Python"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.address'</span><span class="token punctuation">,</span> cast<span class="token punctuation">(</span><span class="token string">'{"city": "New York", "street": "123 Main St"}'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                                                                                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span><span class="token punctuation">,</span> <span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"address"</span>: {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span>}<span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_REMOVE<br>用于从 JSON 文档中删除数据。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_REMOVE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表删除数据的路径。</p><p>如果路径存在，则会删除路径对应的元素，否则对数据没有影响，即不会删除，也不会报错。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> json_data                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> json_data             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> json_data             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_REPLACE<br>函数用于替换 JSON 文档中的现有值。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_REPLACE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表替换数据的路径。<code>val</code>代表要替换的值。</p><p>如果替换路径在文档中存在，则就用新值覆盖文档中原值，否则不会替换，也不会报错。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REPLACE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REPLACE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span>  CAST<span class="token punctuation">(</span><span class="token string">'["Java", "Python"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_SET<br>用于在 JSON 文档中插入或更新数据。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_SET<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表替换数据的路径。<code>val</code>代表要插入或更新的新值。</p><p>如果路径在文档中已存在，则会覆盖原文档中值，如果不存在，则插入新值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_SET<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'["Java", "Python"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.address'</span><span class="token punctuation">,</span> cast<span class="token punctuation">(</span><span class="token string">'{"city": "New York", "street": "123 Main St"}'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                                                                                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span><span class="token punctuation">,</span> <span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"address"</span>: {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span>}<span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON类型列的索引"><a href="#JSON类型列的索引" class="headerlink" title="JSON类型列的索引"></a>JSON类型列的索引</h3><p>在 MySQL 8.0 中，JSON 类型的索引有一些重要的改进和新特性。JSON 类型的索引使得在处理包含 JSON 数据的列时，查询的性能得到了显著提升。</p><h4 id="JSON路径索引"><a href="#JSON路径索引" class="headerlink" title="JSON路径索引"></a>JSON路径索引</h4><p>MySQL 8.0 引入了 JSON 路径索引，允许在 JSON 对象的特定路径上创建索引，以便更高效地执行 JSON 路径查询。路径索引允许在 JSON 对象中的特定路径上进行范围查询、排序和过滤。我们以查询地址信息中<code>country</code>等于<code>&quot;US&quot;为例</code>，他有这几中写法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 使用JSON_CONTAINS</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'"US"'</span><span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用JSON_VALUE</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_VALUE<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用JSON_EXTRACT</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_EXTRACT<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用 ->> 运算符</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token keyword">AS</span> CHAR<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JSON类型字段上创建索引时，要遵守的规则是要确保索引表达式与查询时的条件表达式匹配，这样MySQL才能正确地使用索引进行优化查询。</p><p>所以针对不同的sql查询，我们提供不同的索引。例如：</p><ul><li>使用JSON_EXTRACT<br>我们可以采取新增一个虚拟列的方式去使用索引，比如我们新增一个<code>country</code>的虚拟列，然后在虚拟列上增加索引</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 添加生成的虚拟列  </span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_info  <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> country <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> GENERATED ALWAYS <span class="token keyword">AS</span> <span class="token punctuation">(</span>JSON_UNQUOTE<span class="token punctuation">(</span>JSON_EXTRACT<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> STORED<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 在生成的列上创建索引  </span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_json_country <span class="token keyword">ON</span> user_info<span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们执行一下计划：</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_json_country <span class="token operator">|</span> idx_json_country <span class="token operator">|</span> <span class="token number">1023</span>    <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出使用了索引<code>idx_json_country</code>。</p><ul><li>使用 -&gt;&gt; 运算符<br>在 JSON 类型的索引中，使用 <code>-&gt;&gt;</code> 运算符，会转换为 <code>JSON_UNQUOTE(JSON_EXTRACT(...))</code>，而 <code>JSON_UNQUOTE()</code> 返回的值具有LONGTEXT 数据类型。MySQL不能对没有键部分上的前缀长度指定的 LONGTEXT 列建立索引，而在功能性键部分中又不允许指定前缀长度。</li></ul><p>我们可以这样创建索引：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_json_country_cast <span class="token keyword">ON</span> user_info<span class="token punctuation">(</span><span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token keyword">AS</span> CHAR<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后看一下执行计划：</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_json_country <span class="token operator">|</span> idx_json_country_cast <span class="token operator">|</span> <span class="token number">123</span>    <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多值索引"><a href="#多值索引" class="headerlink" title="多值索引"></a>多值索引</h4><p>多值索引是 MySQL 8.0.17 版本引入的新功能，它允许在 InnoDB 存储引擎中创建索引来支持对存储数组值的列进行高效查询。传统的索引是一对一的，而多值索引允许在一个数据记录上拥有多个索引记录。多值索引主要用于索引 JSON 数组。</p><p>要创建多值索引，可以在 CREATE TABLE、ALTER TABLE 或 CREATE INDEX 语句中使用 CAST(… AS … ARRAY) 函数来定义。这将把 JSON 数组中的同类型标量值转换为 SQL 数据类型数组。然后，MySQL 会在这个 SQL 数据类型数组上创建一个虚拟列，并在虚拟列上创建一个功能性索引。最终，这个功能性索引构成了多值索引。</p><p>例如，我们在<code>address</code>中增加一个<code>zipcode</code>列用于存储地址邮编，每个地址包含若干个邮编。我们对这个<code>zipcode</code>就可以使用多值索引。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_info <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_json_zipcode<span class="token punctuation">(</span><span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span> <span class="token keyword">AS</span> SIGNED ARRAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们分别执行以下sql进行验证：</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> <span class="token number">94507</span> MEMBER <span class="token keyword">OF</span><span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> user_name <span class="token operator">|</span> address                                                                                          <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> lisi      <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"CN"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94568</span><span class="token punctuation">,</span> <span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> wangwu    <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"guangzhou"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"CN"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94477</span><span class="token punctuation">,</span> <span class="token number">94507</span><span class="token punctuation">]</span>}       <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> qianliu   <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"US"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>}        <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> <span class="token number">94507</span> MEMBER <span class="token keyword">OF</span><span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> <span class="token number">9</span>       <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出使用了索引。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'[94507,94582]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> user_name <span class="token operator">|</span> address                                                                                          <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> lisi      <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"CN"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94568</span><span class="token punctuation">,</span> <span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> qianliu   <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"US"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>}        <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'[94507,94582]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+-------+------------------+------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+-------+------------------+------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> <span class="token number">9</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">6</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+-------+------------------+------------------+---------+------+------+----------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多值索引还可以作为复合索引的一部分进行定义。在复合索引中，只能有一个多值键部分，并且可以与其他单值部分一起使用。多值键部分可以按任意顺序使用。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_info <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_name_zipcode<span class="token punctuation">(</span>user_name<span class="token punctuation">,</span> <span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span> <span class="token keyword">AS</span> SIGNED ARRAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL提供了丰富的内置函数支持JSON数据类型的存储和操作，如检查、提取、插入、更新及搜索JSON文档中的内容。此外，为了提高含有JSON字段的查询效率，用户可以在满足条件的情况下为JSON特定路径创建索引，如使用虚拟生成列或者MySQL 8.0以上的原生JSON路径索引功能。多值索引特别适用于JSON数组元素的检索优化，使得数据库能针对数组内的每个独立值建立索引记录，提升复杂查询场景下的性能表现。</p><p>我们可以了解到 JSON 数据类型的灵活性、易用性以及适用性，以及如何在实际项目中充分利用它来应对动态数据模型、半结构化数据存储和查询等方面的挑战。</p><h3 id="文中示例表结构与数据"><a href="#文中示例表结构与数据" class="headerlink" title="文中示例表结构与数据"></a>文中示例表结构与数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test_json<span class="token punctuation">`</span>  <span class="token punctuation">(</span>      <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>json_data<span class="token punctuation">`</span>     JSON <span class="token keyword">COMMENT</span> <span class="token string">'json值'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'json测试表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_info<span class="token punctuation">`</span>  <span class="token punctuation">(</span>      <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>address<span class="token punctuation">`</span>     JSON <span class="token keyword">COMMENT</span> <span class="token string">'地址信息'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'用户信息'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-multi-valued" target="_blank" rel="noopener">MySQL :: MySQL 8.0 Reference Manual :: 15.1.15 CREATE INDEX Statement</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/json-functions.html" target="_blank" rel="noopener">MySQL :: MySQL 8.0 Reference Manual :: 14.17 JSON Functions</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> Mysql的JSON类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为二面：SpringBoot读取配置文件的原理是什么？加载顺序是什么？</title>
      <link href="/article/springbootloadconfigdata.html"/>
      <url>/article/springbootloadconfigdata.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Spring Boot以其简化的配置和强大的开箱即用功能而备受欢迎，而配置文件的加载是Spring Boot应用启动过程中的关键步骤之一。深入理解Spring Boot启动时如何加载配置文件的源码，有助于开发者更好地理解其内部工作原理，提高配置管理的灵活性和可维护性。本文将从源码入手，解读Spring Boot启动时配置文件加载的关键组件和步骤。</p><blockquote><p>本文使用的SpringBoot版本为:2.7.0</p></blockquote><p>SpringBoot使用事件监听的方式去读取配置文件。在SpringBoot2.4.0以前是通过<code>ConfigFileApplicationListener</code>去监听读取配置文件的事件，在SpringBoot2.4.0时废弃了<code>ConfigFileApplicationListener</code>，该使用<code>EnvironmentPostProcessorApplicationListener</code>去监听文件读取事件。这点区别需要注意。</p><blockquote><p>本文只会解读配置文件加载步骤，除加载文件步骤以外的会忽略。</p></blockquote><p>加载配置文件大致流程如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240205003852.png" alt="image.png"></p><h3 id="准备应用程序环境"><a href="#准备应用程序环境" class="headerlink" title="准备应用程序环境"></a>准备应用程序环境</h3><ol><li>在SpringBootApplication执行run方法后，获取程序中的事件监听器后，执行<code>prepareEnvironment</code>方法开始准备环境。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203160828.png" alt="image.png"></p><ol start="2"><li>通知注册的监听器，应用程序的环境已经准备好。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203161040.png" alt="image.png"></p><ol start="3"><li><p><code>doWithListeners</code> 遍历注册的监听器，对每个监听器执行 <code>environmentPrepared</code> 操作，通知它们应用程序的环境已经准备好。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203215005.png" alt="image.png"></p></li><li><p>处理应用事件的组件<code>SimpleApplicationEventMulticaster</code>开始执行<code>multicastEvent</code>去广播环境准备事件<code>ApplicationEnvironmentPreparedEvent</code>给注册的监听器，环境已经准备好，让他们可以执行环境准备阶段的自定义逻辑。</p></li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203161707.png" alt="image.png"></p><p>至此，应用程序环境已经准备好的事件已经广播出去，接下来<code>EnvironmentPostProcessorApplicationListener</code>监听器监听到事件后就可以开始处理读取配置文件的逻辑。</p><h3 id="准备加载配置文件环境"><a href="#准备加载配置文件环境" class="headerlink" title="准备加载配置文件环境"></a>准备加载配置文件环境</h3><ol><li><code>EnvironmentPostProcessorApplicationListener</code>监听到<code>ApplicationEnvironmentPreparedEvent</code>即环境已经准备好的事件，开始处理执行实现 <code>EnvironmentPostProcessor</code>类的<code>postProcessEnvironment</code>方法。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203161913.png" alt="image.png"></p><p>而注册<code>EnvironmentPostProcessor</code> 实现类的有7个。都是加载类路径下的<code>META-INF/spring.factories</code> 文件中配置的<code>EnvironmentPostProcessor</code>实现类。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203223053.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203104629.png" alt="image.png"></p><p>而<code>ConfigDataEnvironmentPostProcessor</code>就是用于处理加载配置文件的实现类。同时这里也是SpringBoot2.4.0前后版本关于加载配置文件差异的一个地方。</p><ol start="2"><li><code>ConfigDataEnvironmentPostProcessor</code>开始执行<code>postProcessEnvironment</code>方法，创建<code>ConfigDataEnvironment</code>实例，然后执行其<code>processAndApply</code>。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203165501.png" alt="image.png"></p><p><code>ConfigDataEnvironment</code>类在SpringBoot2.4.0版本引入，它是SpringBoot配置数据加载和管理的核心组件。它负责从多个源加载、解析和处理配置数据，并将这些数据整合到应用环境中。在这里主要去创建<code>ConfigDataLocationResolvers</code>，<code>ConfigDataLoaders</code>以及<code>ConfigDataEnvironmentContributors</code>。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203232004.png" alt="image.png"></p><ol start="3"><li><code>ConfigDataLocationResolvers</code>在SpringBoot2.4.0版本中引入，是负责解析和定位配置数据源位置的一个组件集合。是一个工厂类，用于创建配置数据位置解析器的实例，它包含了一组<code>ConfigDataLocationResolver</code>的实现类，目前只有两个实现类：<code>StandardConfigDataLocationResolver</code>以及<code>ConfigTreeConfigDataLocationResolver</code>。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203232942.png" alt="image.png"></p><p>其中<code>ConfigTreeConfigDataLocationResolver</code>主要用于解析Config Tree 类型的配置数据位置。Config Tree是SpringBoot2.4.0引入的一种配置数据存储格式，可以将配置文件以树形结构组织，使得配置文件之间的关系更加清晰。<br>而<code>StandardConfigDataLocationResolver</code>它用于解析标准的配置数据位置，即 SpringBoot2.4之前版本中使用的传统配置文件存放方式。这种方式通常是将配置文件放在类路径下的<code>config</code>目录中，或者在文件系统的特定位置，例如我们常写的<code>applicaiton.properties</code>或者<code>applicaiton.yml</code>。这个类也是本文用于加载配置文件的解析器。</p><ol start="4"><li><code>ConfigDataLoaders</code>是SpringBoot中处理配置数据加载的组件，也是SpringBoot2.4.0引入。它是一个工厂类，用于创建配置数据加载器的实例，配置数据加载器均实现<code>ConfigDataLoader</code>接口。在SpringBoot中，配置数据加载器负责实际加载配置数据，将配置文件的内容解析成应用程序可用的配置信息。同样的他也只有两个实现类：<code>ConfigTreeConfigDataLoader</code>和<code>StandardConfigDataLoader</code>。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203235707.png" alt="image.png"><br>同解析器，<code>ConfigTreeConfigDataLoader</code>主要用于加载Config Tree类型的配置数据。而<code>StandardConfigDataLoader</code> 用于加载标准的配置数据。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203173402.png" alt="image.png"></p><ol start="4"><li><code>ConfigDataEnvironmentContributors</code>是SpringBoot中用于管理配置数据环境贡献者的组件。它的主要作用是维护一组贡献者，这些贡献者负责提供配置数据的加载、处理和管理。同样也是SpringBoot 2.4.0之后引入。它从特定的源或根据特定规则加载并解析配置数据，然后将解析后的结果（通常是以<code>PropertySource</code>形式）添加到<code>ConfigDataEnvironment</code>对象中。并且负责按照预定义的顺序和优先级策略来加载和合并不同来源的配置信息，确保正确地覆盖和合并属性值。不同的<code>ConfigDataEnvironmentContributor</code>可以响应不同的环境变量、系统属性或激活的profile，从而动态地调整加载哪些配置数据。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204001758.png" alt="image.png"></p><p>此时他的工作是获取与给定源相关联的<code>Binder</code>，用于对配置数据进行绑定操作。执行<code>getInitialImportContributors(binder)</code>方法获取初始导入的配置数据贡献者，加入到贡献者列表中。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204113527.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204114227.png" alt="image.png"></p><p>这个方法就很重要了，这里就是SpringBoot加载的文件的默认位置以及加载文件的顺序。执行第1个方法时，可以通过<code>IMPORT_PROPERTY</code>即<code>spring.config.import</code>这个值可以指定要导入的额外配置数据位置，这些位置将会在配置数据加载时被导入。SpringBoot将会使用该属性指定的位置作为主要的配置数据来源，并将其导入到应用程序的配置中。这个属性通常用于指定一个主要的配置文件，覆盖默认的配置文件位置。它的优先级也是最高的。例如：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/imported-config/application.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行第2个方法即绑定<code>ADDITIONAL_LOCATION_PROPERTY</code>指定的目录<code>spring.config.additional-location</code>，这个目录用于指定额外的配置数据导入位置。指定的额外导入位置会在主要位置之外被考虑。这个属性用于添加额外的配置数据位置，可以与主要位置一起使用，而不是替代它。</p><p>然后就是第3个方法，绑定<code>LOCATION_PROPERTY</code>指定的目录<code>spring.config.location</code>。该目录作为主要的配置数据位置。可以通过设置该属性来指定主要的配置数据位置，这个位置会被优先考虑，覆盖默认的位置。而默认位置有如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204111541.png" alt="image.png"></p><pre class="line-numbers language-text"><code class="language-text">optional:classpath:/optional:classpath:/config/optional:file:./optional:file:./config/optional:file:./config/*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>optional</code>代表可选的配置文件位置。由上述<code>addInitialImportContributors</code>可以看出默认配置文件加载顺序是从上到下优先级越来越高。即加载顺序为：</p><pre class="line-numbers language-text"><code class="language-text">file:./file:./config/file:./config/*/classpath:/classpath:/config/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204165905.png" alt></p><p>这个加载顺序不同SrpingBoot2.4.0于以前的版本。</p><blockquote><p>这里注意这个是加载文件的顺序，而不是加载读取配置的顺序。加载读取配置的顺序请往下看</p></blockquote><p>其中<code>file:./</code>、<code>file:./config/</code>、<code>file:./config/*/**</code>都是在文件系统中搜索配置文件，这种方式适用于需要在文件系统上动态配置文件的场景，其中 <code>*</code> 可以匹配任意子目录。<br>而<code>classpath:/</code>、<code>classpath:/config/</code>则表示在类路径（classpath）下搜索配置文件，包括根路径和 <code>/config/</code>子路径。这种方式适用于将配置文件打包在应用程序的 JAR 文件中或者放在类路径下的<code>config</code>目录中。</p><blockquote><p>Contributors翻译为贡献者，类似给配置数据环境提供数据的加载，处理和管理的。</p></blockquote><p>到这里<code>ConfigDataEnvironment</code>中关于加载和解析配置文件的部分就准备好了，接下来就开始执行<code>processAndApply</code>方法开始加载解析文件。</p><h3 id="配置文件加载解析"><a href="#配置文件加载解析" class="headerlink" title="配置文件加载解析"></a>配置文件加载解析</h3><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203171916.png" alt="image.png"></p><ol><li>创建配置文件导入器<code>ConfigDataImporter</code>,将<code>ConfigDataEnvironment</code>中的加载器以及解析器都放入导入器中。</li><li>执行<code>processInitial</code>方法，然后配置数据贡献者<code>ConfigDataEnvironmentContributors</code>开始执行<code>withProcessedImports</code>方法开始执行加载以及解析配置文件。循环配置数据贡献者直至拿到所有的配置文件。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203171650.png" alt="image.png"></p><ol start="3"><li><p>执行创建<code>ConfigDataLocationResolverContext</code>解析器上下文，<code>ConfigDataLoaderContext</code>加载器上下文，以及获取贡献者中配置文件的配置。</p></li><li><p>配置文件导入器执行<code>resolveAndLoad</code>方法开始执行解析和加载数据。这方法中分为<code>resolve</code>解析以及<code>load</code>加载数据。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204171255.png" alt="image.png"></p></li><li><p><code>resolve</code>会调用<code>ConfigDataEnvironment</code>中创建的解析器，比如：<code>StandardConfigDataLocationResolver</code>，然后去解析<code>ConfigDataEnvironmentContributor</code>中保存的配置文件的路径。<code>StandardConfigDataLocationResolver</code>会先把路径拿出来按照<code>;</code>进行拆分<br>（方法在<code>ConfigDataLocation</code>中），然后组装每个路径下的文件位置信息，对于文件名默认都为<code>application</code>，对于文件类型，需要使用到<code>PropertySourceLoader</code>他有两个子类：<code>YamlPropertySourceLoader</code>和<code>PropertiesPropertySourceLoader</code>，通过<code>getFileExtensions</code>方法获取文件类型。其中<code>PropertiesPropertySourceLoader</code>对应<code>properties</code>和<code>xml</code>，而<code>YamlPropertySourceLoader</code>对应<code>yml</code>以及<code>yaml</code>。</p></li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204172321.png" alt="image.png"></p><p>这样就可以用<code>ConfigDataLocation</code>路径+applicaiton+getFileExtensions得到一组文件路径。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204172352.png" alt="image.png"></p><p>然后解析器会检查这些文件是否存在，如果不存在的则会过滤掉。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204185338.png" alt="image.png"></p><p>最后将找到的文件放入<code>StandardConfigDataResource</code>集合中返回，由<code>load</code>方法去加载数据。</p><ol start="6"><li><code>load</code>方法将<code>resolve</code>方法解析出来的文件路径,有对应的加载器去文件中将数据取出来。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204185804.png" alt="image.png"><br>这里需要注意的是，读取文件是从最后一个开始读取，即跟文件加载顺序相反，所以配置加载顺序为：</li></ol><pre class="line-numbers language-text"><code class="language-text">file:./config/*/file:./config/file:./classpath:/config/classpath:/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204190203.png" alt="image.png"></p><p>此时的loaders.load即在<code>ConfigDataEnvironment</code>中创建的加载器，本文中使用<code>StandardConfigDataLoader</code>进行加载，然后在配置加载器中由文件类型对应的加载器进行数据加载。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204190521.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240205003343.png" alt="image.png"><br>将读取的数据封装到<code>ConfigData</code>当中返回。最后将数据组装到<code>ConfigDataEnvironmentContributors</code>中，最后把数据放入当前应用环境中。这样SpringBoot启动时读取文件的流程就结束了。当然后面还有按照当前指定环境<code>profiles</code>读取，但读取流程一致。只要是配置的优先级，这个我们放在下一篇文章中继续解读。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻松应对复杂业务逻辑：LiteFlow-编排式规则引擎框架的优势</title>
      <link href="/article/4749dca98aed.html"/>
      <url>/article/4749dca98aed.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/LiteFlow.png" alt="LiteFlow.png"></p><h3 id="LiteFlow简介"><a href="#LiteFlow简介" class="headerlink" title="LiteFlow简介"></a>LiteFlow简介</h3><h4 id="LiteFlow是什么？"><a href="#LiteFlow是什么？" class="headerlink" title="LiteFlow是什么？"></a>LiteFlow是什么？</h4><p><code>LiteFlow</code>是一款专注于逻辑驱动流程编排的轻量级框架，它以组件化方式快速构建和执行业务流程，有效解耦复杂业务逻辑。通过支持热加载规则配置，开发者能够即时调整流程步骤，将复杂的业务如价格计算、下单流程等拆分为独立且可复用的组件，从而实现系统的高度灵活性与扩展性，避免了牵一发而动全身的问题。旨在优化开发流程，减少冗余工作，让团队能够更聚焦于核心业务逻辑，而将流程控制层面的重任托付给该框架进行自动化处理。</p><p><code>LiteFlow</code>整合了流程编排与规则引擎的核心特性，提供<code>XML</code>、<code>JSON</code>或<code>YAML</code>格式的灵活流程定义，以及本地文件系统、数据库、ZooKeeper、Nacos、Apollo、Redis等多种规则文件存储方案。其内建插件如liteflow-rule-nacos，以及开放的扩展机制，赋予开发人员自定义规则解析器的能力，满足多样化场景下的规则管理需求。</p><blockquote><p>对于基于角色任务流转的场景，<code>LiteFlow</code>并非最佳选择，推荐使用<code>Flowable</code>或<code>Activiti</code>等专门的工作流引擎。</p></blockquote><h4 id="LiteFlow的架构"><a href="#LiteFlow的架构" class="headerlink" title="LiteFlow的架构"></a>LiteFlow的架构</h4><p><code>LiteFlow</code>是从获取上下文开始的，这个上下文通常包含了执行流程所需的数据和环境信息。通过解析这些上下文数据，<code>LiteFlow</code>能够理解并执行对应的规则文件，驱动业务流程的执行。在<code>LiteFlow</code>中，业务流程被组织成一系列的链路（或节点），每个链路代表一个业务步骤或决策点。这些链路上的节点，也就是业务组件，是独立的，可以支持多种脚本语言，如<code>Groovy</code>、<code>JavaScript</code>、<code>Python</code>、<code>Lua</code>等，以便根据具体业务需求进行定制。下图为<code>LiteFlow</code>的整体架构图。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/LiteFlow%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="LiteFlow执行流程.png"></p><h4 id="LiteFlow的作用"><a href="#LiteFlow的作用" class="headerlink" title="LiteFlow的作用"></a>LiteFlow的作用</h4><ul><li><p><code>LiteFlow</code>将瀑布式代码进行组件化、灵活的编排体系，组件可独立调整替换，规则引擎语法简单易学。<br>利用<code>LiteFlow</code>可以把传统的瀑布式代码重构为以组件为中心的概念体系，从而获得灵活的编排能力。在这种结构里，各个组件彼此分离，允许轻松调整和替换。组件本身可通过脚本定制，而且组件间的过渡完全受规则引导。此外，<code>LiteFlow</code>具备简单易懂的<code>DSL</code>规则引擎语法，能快速入门掌握。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123172903.png" alt="image.png"></p></li><li><p><code>LiteFlow</code>强大的编排能力<br><code>LiteFlow</code>的编排语法强大到可以编排出任何你想要的逻辑流程。如下图复杂的语法，如果使用瀑布式的代码去写，那种开发以及维护难度可想而知，但是使用<code>LiteFlow</code>你可以轻松完成逻辑流程的编排，易于维护。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123173145.png" alt="image.png"></p></li><li><p><code>LiteFlow</code>支持组件热部署<br>通过<code>LiteFlow</code>，你可以实现组件的实时热替换，同时也能在已有的逻辑流程中随时插入新的组件，以此动态调整你的业务逻辑。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123173357.png" alt="image.png"></p><h3 id="LiteFlow的环境支持"><a href="#LiteFlow的环境支持" class="headerlink" title="LiteFlow的环境支持"></a>LiteFlow的环境支持</h3></li><li><p>JDK<br><code>LiteFlow</code>要求的最低的JDK版本为8，支持<code>JDK8~JDK17</code>所有的版本。当然如果使用<code>JDK11</code>以上，确保<code>LiteFlow</code>的版本为<code>v2.10.6</code>及其以上版本。</p><blockquote><p>如果你使用JDK11及其以上的版本，请确保jvm参数加上以下参数:–add-opens java.base/sun.reflect.annotation=ALL-UNNAMED</p></blockquote></li><li><p>Spring<br><code>LiteFlow</code>要求的Spring的最低版本为<code>Spring 5.0</code>。支持的范围是<code>Spring 5.X ~ Spring 6.X</code>。</p></li><li><p>SpringBoot<br><code>LiteFlow</code>要求的Springboot的最低的版本是2.0。支持的范围是<code>Springboot 2.X ~ Springboot 3.X</code>。</p></li></ul><h3 id="LiteFlow的性能"><a href="#LiteFlow的性能" class="headerlink" title="LiteFlow的性能"></a>LiteFlow的性能</h3><p><code>LiteFlow</code>框架在启动时完成大部分工作，包括解析规则、注册组件和组装元信息，执行链路时对系统资源消耗极低。在设计之初就注重性能表现，对核心代码进行了优化。</p><p>实际测试中，<code>LiteFlow</code>表现出色，50多个业务组件组成的链路在压测中单点达到1500 TPS，成功应对双11、明星顶流带货等大规模流量挑战。</p><p>尽管<code>LiteFlow</code>框架自身性能卓越，但实际执行效率取决于业务组件的性能。若组件包含大量循环数据库查询、不良<code>SQL</code> 或大量<code>RPC</code>同步调用，整体<code>TPS</code>也会较低。但这归咎于业务组件的性能问题，而非<code>LiteFlow</code>框架本身的性能问题。整体系统吞吐量的高低不只依赖于某个框架，而是需要整体优化业务代码才能提升。</p><blockquote><p>数据来源于LiteFlow官方文档说明。</p></blockquote><h3 id="LiteFlow使用"><a href="#LiteFlow使用" class="headerlink" title="LiteFlow使用"></a>LiteFlow使用</h3><p>以下我们结合SpringBoot环境使用。</p><p><code>LiteFlow</code>在使用上可以按照引入依赖，<code>LiteFlow</code>相关配置，规则文件，定义组件，节点编排，执行流程进行。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.yomahub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>liteflow-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>目前liteflow的稳定版本已经更新到2.11.4.2。本文依托于2.11.1做讲解演示。好多新的功能均在2.9.0以后的版本中才有。</p></blockquote><h4 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h4><p><code>LiteFlow</code>有诸多配置项，大多数配置项有默认值，可以不必配置，同时官方也建议某个配置项不了解它有什么用时，就不要去随意的改它的值。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">liteflow</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#规则文件路径</span>  <span class="token key atrule">rule-source</span><span class="token punctuation">:</span> config/flow.el.xml  <span class="token comment" spellcheck="true">#-----------------以下非必须-----------------</span>  <span class="token comment" spellcheck="true">#liteflow是否开启，默认为true</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#liteflow的banner打印是否开启，默认为true</span>  <span class="token key atrule">print-banner</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#zkNode的节点，只有使用zk作为配置源的时候才起作用，默认为/lite-flow/flow</span>  <span class="token key atrule">zk-node</span><span class="token punctuation">:</span> /lite<span class="token punctuation">-</span>flow/flow  <span class="token comment" spellcheck="true">#上下文的最大数量槽，默认值为1024</span>  <span class="token key atrule">slot-size</span><span class="token punctuation">:</span> <span class="token number">1024</span>  <span class="token comment" spellcheck="true">#FlowExecutor的execute2Future的线程数，默认为64</span>  <span class="token key atrule">main-executor-works</span><span class="token punctuation">:</span> <span class="token number">64</span>  <span class="token comment" spellcheck="true">#FlowExecutor的execute2Future的自定义线程池Builder，LiteFlow提供了默认的Builder</span>  <span class="token key atrule">main-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.thread.LiteFlowDefaultMainExecutorBuilder  <span class="token comment" spellcheck="true">#自定义请求ID的生成类，LiteFlow提供了默认的生成类</span>  <span class="token key atrule">request-id-generator-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.flow.id.DefaultRequestIdGenerator  <span class="token comment" spellcheck="true">#并行节点的线程池Builder，LiteFlow提供了默认的Builder</span>  <span class="token key atrule">thread-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.thread.LiteFlowDefaultWhenExecutorBuilder  <span class="token comment" spellcheck="true">#异步线程最长的等待时间(只用于when)，默认值为15000</span>  <span class="token key atrule">when-max-wait-time</span><span class="token punctuation">:</span> <span class="token number">15000</span>  <span class="token comment" spellcheck="true">#异步线程最长的等待时间(只用于when)，默认值为MILLISECONDS，毫秒</span>  <span class="token key atrule">when-max-wait-time-unit</span><span class="token punctuation">:</span> MILLISECONDS  <span class="token comment" spellcheck="true">#when节点全局异步线程池最大线程数，默认为16</span>  <span class="token key atrule">when-max-workers</span><span class="token punctuation">:</span> <span class="token number">16</span>  <span class="token comment" spellcheck="true">#并行循环子项线程池最大线程数，默认为16</span>  <span class="token key atrule">parallelLoop-max-workers</span><span class="token punctuation">:</span> <span class="token number">16</span>  <span class="token comment" spellcheck="true">#并行循环子项线程池等待队列数，默认为512</span>  <span class="token key atrule">parallelLoop-queue-limit</span><span class="token punctuation">:</span> <span class="token number">512</span>  <span class="token comment" spellcheck="true">#并行循环子项的线程池Builder，LiteFlow提供了默认的Builder</span>  <span class="token key atrule">parallelLoop-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.thread.LiteFlowDefaultParallelLoopExecutorBuilder  <span class="token comment" spellcheck="true">#when节点全局异步线程池等待队列数，默认为512</span>  <span class="token key atrule">when-queue-limit</span><span class="token punctuation">:</span> <span class="token number">512</span>  <span class="token comment" spellcheck="true">#是否在启动的时候就解析规则，默认为true</span>  <span class="token key atrule">parse-on-start</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#全局重试次数，默认为0</span>  <span class="token key atrule">retry-count</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">#是否支持不同类型的加载方式混用，默认为false</span>  <span class="token key atrule">support-multiple-type</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true">#全局默认节点执行器</span>  <span class="token key atrule">node-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.flow.executor.DefaultNodeExecutor  <span class="token comment" spellcheck="true">#是否打印执行中过程中的日志，默认为true</span>  <span class="token key atrule">print-execution-log</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#是否开启本地文件监听，默认为false</span>  <span class="token key atrule">enable-monitor-file</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true">#是否开启快速解析模式，默认为false</span>  <span class="token key atrule">fast-load</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true">#简易监控配置选项</span>  <span class="token key atrule">monitor</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#监控是否开启，默认不开启</span>    <span class="token key atrule">enable-log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true">#监控队列存储大小，默认值为200</span>    <span class="token key atrule">queue-limit</span><span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token comment" spellcheck="true">#监控一开始延迟多少执行，默认值为300000毫秒，也就是5分钟</span>    <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token comment" spellcheck="true">#监控日志打印每过多少时间执行一次，默认值为300000毫秒，也就是5分钟</span>    <span class="token key atrule">period</span><span class="token punctuation">:</span> <span class="token number">300000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要使用规则，则必须配置<code>rule-source</code>配置，但是如果你是用代码动态构建规则，则<code>rule-source</code>自动失效。</p></blockquote><h4 id="规则文件"><a href="#规则文件" class="headerlink" title="规则文件"></a>规则文件</h4><p>从上面<code>LiteFlow</code>的整体架构图中可以看出<code>LiteFlow</code>支持多种规则文件源配置：本地文件，数据库，zk，Nacos，Apollo，Etcd，Redis以及自定义配置源。本文将会以本地规则文件为例讲解，其余配置源将在后续文章中讲解实时修改流程中在进行分享，</p><p><code>LiteFlow</code>支持3种规则文件格式：<code>XML</code>,<code>JSON</code>,<code>YML</code>，3种文件的配置相差无几。<code>LiteFlow</code>的组成很轻量，主要由<code>Node</code>以及<code>Chain</code>元素构成。值得一提的是：如果在非Spring环境下，<code>Node</code>节点是必须的，配置配置，否则会导致报错找不到节点。当然在Spring环境下，我们可以不必配置<code>Node</code>节点，只需要将相应的节点注册到Spring上下文即可。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flow</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chain1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          THEN(a, b, c);      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          SWITCH(s1).to(s2, THEN(a,b).id("d"));      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flow</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>在介绍具体的组件之前，我们先来了解下<code>@LiteflowComponent</code>注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>TYPE <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Documented</span>  <span class="token annotation punctuation">@Inherited</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">LiteflowComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">)</span>      String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">)</span>      String <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**    * 可以给节点起别名    **/</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@LiteflowComponent</code>继承自<code>@Component</code>注解，在Spring环境中，可以将组件注入到容器中。它的value或者id即对应规则文件中的node的id。例如上述规则文件中的a,b,c等。</p><h5 id="普通组件：NodeComponent"><a href="#普通组件：NodeComponent" class="headerlink" title="普通组件：NodeComponent"></a>普通组件：NodeComponent</h5><p>普通组件节点需要继承<code>NodeComponent</code>，需要实现<code>process</code>方法。可用于<code>THEN</code>和<code>WHEN</code>编排中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然<code>NodeComponent</code>中还有一些其他方法可以重写，以达到自己的业务需求。例如：</p><ul><li>isAccess()：表示是否进入该节点，可以用于业务参数的预先判断。</li><li>isContinueOnError()：表示出错是否继续往下执行下一个组件，默认为false</li><li>isEnd()：是否结束整个流程(不往下继续执行)。<br>如果返回true，则表示在这个组件执行完之后立马终止整个流程。此时由于是用户主动结束的流程，属于正常结束，所以流程结果中(<code>LiteflowResponse</code>)的isSuccess是true。</li><li>beforeProcess()和afterProcess()：流程的前置和后置处理器，其中前置处理器，在<code>isAccess</code> 之后执行。</li><li>onSuccess()和onError()：流程的成功失败事件回调</li><li>rollback()：流程失败后的回滚方法。</li></ul><p><strong>在任意组件节点的内部，还可以使用<code>this</code>关键字调用对应的方法：</strong></p><ul><li><p>获取流程初始入参参数<br>我们在组件节点内部可以通过<code>this.getRequestData()</code>去获取流程初始的入参。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    DataRequest dataRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取上下文<br>在组件节点里，随时可以通过方法<code>this.getContextBean(clazz)</code>获取当前你自己定义的上下文，从而可以获取到上下文的数据。例如：</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          ConditionContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>ConditionContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setIsEnd<br>是否立即结束整个流程 ，用法为<code>this.setIsEnd(true)</code>。<br>还有一些其他的方法，可以参考源码。</li></ul><h5 id="选择组件：NodeSwitchComponent"><a href="#选择组件：NodeSwitchComponent" class="headerlink" title="选择组件：NodeSwitchComponent"></a>选择组件：NodeSwitchComponent</h5><p>实际业务中，我们针对不同的业务类型，有不同的业务处理逻辑，例如上一篇文章中的订单类型一样，此时就需要节点动态的判断去执行哪些节点或者链路，所以就出现了选择组件。<br>选择组件需要实现<code>NodeSwitchComponent</code>，并且需要实现<code>processSwitch()</code>方法。用于<code>SWITCH</code>编排中。</p><p><code>processSwitch()</code>方法返回值是一个String，即下一步流程执行的节点ID或者链路tag。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span>"s<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeSwitchComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行switch规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"a"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>规则文件中，配置的<code>SWITCH</code>编排信息为：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(s).to(a, b, c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时s节点就会返回要执行的节点id为a，即要执行a流程。通常switch的节点的逻辑我们需要具体结合业务类型，例如订单类型枚举去使用。</p><p>除了可以返回id以外，我们还可以返回tag(标签)。例如我们在规则文件中这么写:<br>在规则表达式中我们可以这样使用:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(s).to(a.tag("td"), b.tag("td"), c.tag("td));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在<code>SWITCH</code>中返回tag：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span>"s<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeSwitchComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行switch规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">":td"</span>      <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个标签为td的节点</span>        <span class="token keyword">return</span> <span class="token string">"tag:td"</span>   <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个标签为td的节点</span>        <span class="token keyword">return</span> <span class="token string">"a"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择targetId是b的节点</span>        <span class="token keyword">return</span> <span class="token string">"b:"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个targetId是b的节点</span>        <span class="token keyword">return</span> <span class="token string">"b:td"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择targetId是b且标签是td的节点</span>        <span class="token keyword">return</span> <span class="token string">":"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个节点</span>        <span class="token keyword">return</span> <span class="token string">"d"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 进入 d 节点，含义：选择targetId是d的节点</span>        <span class="token keyword">return</span> <span class="token string">"d:"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 进入 d 节点，含义：选择第一个targetId是d的节点</span>        <span class="token keyword">return</span> <span class="token string">"d:td"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进入 d 节点，含义：选择targetId是d且标签是td的节点</span>        <span class="token keyword">return</span> <span class="token string">"b:x"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 报错，原因：没有targetId是b且标签是x的节点</span>        <span class="token keyword">return</span> <span class="token string">"x"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 报错，原因：没有targetId是x的节点</span>        <span class="token keyword">return</span> <span class="token string">"::"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 报错，原因：没有找到标签是":"的节点 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeSwitchComponent</code>继承至<code>NodeComponent</code>，其节点的内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="条件组件：NodeForComponent"><a href="#条件组件：NodeForComponent" class="headerlink" title="条件组件：NodeForComponent"></a>条件组件：NodeForComponent</h5><p>条件组件，也是IF组件，返回值是一个<code>boolean</code>。需要继承<code>NodeForComponent</code>，实现<code>processIf()</code>方法。可用于<code>IF...ELIF...ELSE</code>编排。例如：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "ifChain">      IF(x, a, b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该例中x就是一个条件组件，如果x返回true，则会执行a节点，否则执行b节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfXComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeIfComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行X节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeIfComponent</code>继承至<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="次数循环组件：NodeForComponent"><a href="#次数循环组件：NodeForComponent" class="headerlink" title="次数循环组件：NodeForComponent"></a>次数循环组件：NodeForComponent</h5><p>次数循环组件。返回的是一个int值的循环次数。继承<code>NodeForComponent</code>，实现<code>processFor()</code>方法, 主要用于<code>FOR...DO...</code>表达式。在紧接着DO编排中的节点中，可以通过<code>this.getLoopIndex()</code>获取下标信息，可以从对应数组或者集合中通过下表获取对应的元素信息。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "forChain">      FOR(f).DO(a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeForComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">processFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataList <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          Integer loopIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoopIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataList <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String str <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loopIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中f组件相当于定义一个数组或者集合的元素个数，类似</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// size = f </span><span class="token comment" spellcheck="true">//逻辑处理  = a</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>NodeForComponent</code>继承至<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="条件循环组件：NodeWhileComponent"><a href="#条件循环组件：NodeWhileComponent" class="headerlink" title="条件循环组件：NodeWhileComponent"></a>条件循环组件：NodeWhileComponent</h5><p>条件循环组件，主要用于<code>WHILE...DO...</code>表达式。继承<code>NodeWhileComponent</code>，需要实现<code>processWhile()</code>方法。<code>processWhile()</code>方法返回一个boolean类型的值，即while循环跳出的条件，如果为false则循环结束，同次数循环，可以在DO编排中的节点中，可以通过<code>this.getLoopIndex()</code>获取下标信息，可以从对应数组或者集合中通过下表获取对应的元素信息。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "whileChain">      WHILE(w).DO(a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeWhileComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Integer count <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>dataContext<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataList <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> count <span class="token operator">&lt;</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeWhileComponent</code>继承至<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="迭代循环组件：NodeIteratorComponent"><a href="#迭代循环组件：NodeIteratorComponent" class="headerlink" title="迭代循环组件：NodeIteratorComponent"></a>迭代循环组件：NodeIteratorComponent</h5><p>迭代循环组件，相当于Java语言的<code>Iterator</code>关键字，功能上相当于<code>for</code>循环，主要用于<code>ITERATOR...DO...</code>表达式。需要继承<code>NodeIteratorComponent</code>，实现<code>processIterator()</code>方法。在DO编排的节点中，可以通过<code>this.getCurrLoopObj()</code>获取集合中的信息。这个组件在使用liteflow的循环组件时用的比较多，就像日常开发代码，集合遍历大部分都会使用for循环(特殊情况必须使用下标除外)。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "iteratorChain">      ITERATOR(iterator).DO(a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"iterator"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyIteratorComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeIteratorComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">processIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          String str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeIteratorComponent</code>继承至<code>NodeComponent</code>，循环组件节点的内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="退出循环组件：NodeBreakComponent"><a href="#退出循环组件：NodeBreakComponent" class="headerlink" title="退出循环组件：NodeBreakComponent"></a>退出循环组件：NodeBreakComponent</h5><p>退出循环组件，即<code>BREAK</code>组件。返回的是一个布尔值的循环退出标志。 需要继承<code>NodeBreakComponent</code>，实现<code>processBreak</code>方法。主要用于<code>FOR...DO...BREAK</code>,<code>WHILE...DO...BREAK</code>,<code>ITERATOR...DO...BREAK</code>表达式。即Java的<code>for</code>，<code>while</code>循环退出。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "iteratorChain">      ITERATOR(iterator).DO(a).BREAK(break_flag);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"break_flag"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BreakComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeBreakComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          String str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理<code>NodeBreakComponent</code>也是继承<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><p>接下来我们聊一下组件的另外一种定义方式：声明式组件。我比较喜欢用。。。</p><h4 id="声明式组件"><a href="#声明式组件" class="headerlink" title="声明式组件"></a>声明式组件</h4><p>在上述介绍组件时，都是通过定义一个类继承某一个组件，例如<code>NodeComponent</code>或者<code>NodeIteratorComponent</code>，这样的定义组件会有一些弊端，比如当你的业务庞大时类也会快速的膨胀增加，即使一个跳出循环或者循环组件都要单独去定义一个类（个人认为循环组件其实不会包含太多的复杂业务逻辑），再比如说Java中类是单继承，这样就会造成这个写组件类无法再去继承一些其他的超类供我们使用。基于此，<code>LiteFlow</code>推出依靠注解完成组件的声明，即使一个普通类中的方法不需要继承任何组件类，也可以声明为一个组件，一个类可以定义很多个组件。可以分别对类或者方法进行生命组件。目前声明式组件只能在springboot环境中使用。</p><h5 id="类级别声明"><a href="#类级别声明" class="headerlink" title="类级别声明"></a>类级别声明</h5><p>类级别式声明主要用处就是通过注解形式让普通的java bean变成LiteFlow的组件。无需通过继承类或者实现接口的方式。但是类级别声明有一个缺点就是他和常规组件一样，需要一个类对应一个组件。使用<code>@LiteflowCmpDefine</code>注解，通过<code>NodeTypeEnum</code>指定当前类是什么类型的组件。<code>NodeTypeEnum</code>值如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> NodeTypeEnum <span class="token punctuation">{</span>      <span class="token function">COMMON</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">,</span> <span class="token string">"普通"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SWITCH</span><span class="token punctuation">(</span><span class="token string">"switch"</span><span class="token punctuation">,</span> <span class="token string">"选择"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeSwitchComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IF</span><span class="token punctuation">(</span><span class="token string">"if"</span><span class="token punctuation">,</span> <span class="token string">"条件"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeIfComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">FOR</span><span class="token punctuation">(</span><span class="token string">"for"</span><span class="token punctuation">,</span> <span class="token string">"循环次数"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeForComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">WHILE</span><span class="token punctuation">(</span><span class="token string">"while"</span><span class="token punctuation">,</span> <span class="token string">"循环条件"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeWhileComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">BREAK</span><span class="token punctuation">(</span><span class="token string">"break"</span><span class="token punctuation">,</span> <span class="token string">"循环跳出"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeBreakComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ITERATOR</span><span class="token punctuation">(</span><span class="token string">"iterator"</span><span class="token punctuation">,</span> <span class="token string">"循环迭代"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeIteratorComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SCRIPT</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span> <span class="token string">"脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptCommonComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SWITCH_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"switch_script"</span><span class="token punctuation">,</span> <span class="token string">"选择脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptSwitchComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IF_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"if_script"</span><span class="token punctuation">,</span> <span class="token string">"条件脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptIfComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">FOR_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"for_script"</span><span class="token punctuation">,</span> <span class="token string">"循环次数脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptForComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">WHILE_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"while_script"</span><span class="token punctuation">,</span> <span class="token string">"循环条件脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptWhileComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">BREAK_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"break_script"</span><span class="token punctuation">,</span> <span class="token string">"循环跳出脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptBreakComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件类中的再通过<code>@LiteflowMethod</code>注解将方法映射为组件方法。通过<code>@LiteflowMethod</code>中<code>value</code>值指定方法类型<code>LiteFlowMethodEnum</code>，通过<code>nodeType</code>指定节点类型<code>NodeTypeEnum</code>。<code>LiteFlowMethodEnum</code>对应各组件中的抽象类方法（<code>isMainMethod=true</code>）（或者可覆盖的方法）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> LiteFlowMethodEnum <span class="token punctuation">{</span>      <span class="token function">PROCESS</span><span class="token punctuation">(</span><span class="token string">"process"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_SWITCH</span><span class="token punctuation">(</span><span class="token string">"processSwitch"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_IF</span><span class="token punctuation">(</span><span class="token string">"processIf"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_FOR</span><span class="token punctuation">(</span><span class="token string">"processFor"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_WHILE</span><span class="token punctuation">(</span><span class="token string">"processWhile"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_BREAK</span><span class="token punctuation">(</span><span class="token string">"processBreak"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_ITERATOR</span><span class="token punctuation">(</span><span class="token string">"processIterator"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IS_ACCESS</span><span class="token punctuation">(</span><span class="token string">"isAccess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IS_END</span><span class="token punctuation">(</span><span class="token string">"isEnd"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IS_CONTINUE_ON_ERROR</span><span class="token punctuation">(</span><span class="token string">"isContinueOnError"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">GET_NODE_EXECUTOR_CLASS</span><span class="token punctuation">(</span><span class="token string">"getNodeExecutorClass"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ON_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"onSuccess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ON_ERROR</span><span class="token punctuation">(</span><span class="token string">"onError"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">BEFORE_PROCESS</span><span class="token punctuation">(</span><span class="token string">"beforeProcess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">AFTER_PROCESS</span><span class="token punctuation">(</span><span class="token string">"afterProcess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">GET_DISPLAY_NAME</span><span class="token punctuation">(</span><span class="token string">"getDisplayName"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">ROLLBACK</span><span class="token punctuation">(</span><span class="token string">"rollback"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">;</span>    <span class="token keyword">private</span> String methodName<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">boolean</span> isMainMethod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对于方法的要求：</strong><br>组件内的方法的参数必须传入<code>NodeComponent</code>类型的参数，而且必须是第一个参数。这个参数值就替代常规组件中的<code>this</code>，从这个参数中可以获取流程入参，上线文等信息。然后方法的返回值必须跟常规组件中的抽象方法的返回值保持一致，否则可能吹出现错误。对于方法名称并无限制。</p><ul><li>普通组件：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>value <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"processA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>BEFORE_PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"beforeA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>AFTER_PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>条件组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.IF</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_if"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineIfCpm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processIf</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>       DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>选择组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.SWITCH</code>参数。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_w"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineSwitchCpm</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch1</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>         DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"b"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>次数循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.FOR</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_for"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>FOR<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineForCmp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_FOR<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>FOR<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">processFor</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.WHILE</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_while"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>WHILE<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineWhileCmp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_WHILE<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>WHILE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processWhile</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行while"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.ITERATOR</code>参数。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_iterator"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineIteratorCpm</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_ITERATOR<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">)</span>  <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">processSwitch1</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行iterator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>退出循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.BREAK</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_break"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineWhileCmp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_BREAK<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行break"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="方法级别式声明"><a href="#方法级别式声明" class="headerlink" title="方法级别式声明"></a>方法级别式声明</h5><p>因为类级别式声明还是会造成类定义过多的问题，<code>LiteFlow</code>又提供了方法级别式声明。方法级别式声明可以让在一个类中通过注解定义多个组件。在类上使用<code>@LiteflowComponent</code>进行声明这是一个组件类，然后在方法使用<code>@LiteflowMethod</code>声明方法是一个组件节点。如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHandlerCmp</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 普通组件 等价于 继承`NodeComponent` 实现process()方法      * @param nodeComponent      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"common"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"普通组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processCommon</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * IF组件 等价于 继承 `NodeIfComponent` 实现processIf()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"if"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"IF组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processIf</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * SWITCH组件 等价于 继承 `NodeSwitchComponent` 实现processSwitch()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"switch"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"SWITCH组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token string">"nodeId"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 次数循环组件 等价于 继承 `NodeForComponent` 实现processFor()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>FOR<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_FOR<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"for"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"FOR组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">processFor</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务逻辑  </span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 条件循环组件 等价于 继承 `NodeWhileComponent` 实现processWhile()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>WHILE<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_WHILE<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"while"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"WHILE组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processWhile</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 迭代循环组件 等价于 继承 `NodeIteratorComponent` processIterator()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_ITERATOR<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"iterator"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"ITERATOR组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">processIterator</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务逻辑  </span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 跳出循环组件 等价于 继承 `NodeBreakComponent` processBreak()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_BREAK<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"break"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"BREAK组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于方法级别声明特性来说，<code>@LiteflowMethod</code>注解上的<code>nodeId</code>一定要写。<code>nodeName</code>的属性。方便对声明式的组件进行命名。定义方法时，返回值要和常规组件里的对应方法返回值一致。例如普通组件的<code>process</code>方法是不返回的，比如IF组件的<code>processIf</code>方法是返回布尔值的。如果写错误，会造成一些异常。。。。</p><blockquote><p>我个人是比较喜欢用这种方式进行组件的定义，可以按照业务逻辑将代码拆分成一个个的模块，在各自的模块中进行业务逻辑的实现，也会非常清晰。</p></blockquote><h4 id="EL规则"><a href="#EL规则" class="headerlink" title="EL规则"></a>EL规则</h4><p><code>LiteFlow</code>2.8.x以后版本提供了一款强大的规则表达式。一切复杂的流程在<code>LiteFlow</code>表达式的加持下，都变得非常简便明了。配合一些流程图简直是通熟易懂。让整个业务流程在处理上看起来并没有那么黑盒。它可以设置各种编排规则，包括：</p><ul><li>串行编排<br>串行编排，即组件要顺序执行，使用<code>THEN</code>关键字，<strong><code>THEN</code>必须大写</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>thenchain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(a, b, c);      THEN(a, THEN(b, c));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>并行编排<br>并行编排即并行执行若干个个组件，使用用<code>WHEN</code>关键字，<strong><code>WHEN</code>必须大写。</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>whenchain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      WTHEN(a, b, c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然，<code>WHEN</code>跟<code>THEN</code>还可以结合使用:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(a, WHEN(b, c, d), e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当a节点执行完成之后，并行执行b,c,d节点，完成之后在执行e节点。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129143222.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129153713.png" alt="image.png"></p><p>我们在看到并行执行的时候，就会联想到多线程处理，那么<code>LiteFlow</code>是怎么创建多线程的呢？答案是<code>LiteFlow</code>内部默认维护了一个<code>when</code>线程池，这个线程池是供给所有<code>WHEN</code>流程使用的。当然你可以在<code>LiteFlow</code>执行器执行之前给你的流程通过<code>LiteflowConfig</code>传入一些线程池参数或者实现<code>ExecutorBuilder</code>接口，自定义线程池。比如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiteFlowThreadPool</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorBuilder</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> ExecutorService <span class="token function">buildExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-%s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                      <span class="token comment" spellcheck="true">// 核心线程数，即2个常开窗口  </span>                    <span class="token number">2</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 最大的线程数，银行所有的窗口  </span>                    <span class="token number">5</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 空闲时间  </span>                    <span class="token number">5</span><span class="token punctuation">,</span>                      TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 工作队列  </span>                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 线程工厂  </span>                    threadFactory<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 拒绝策略  </span>                    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在<code>LiteflowConfig</code>设置并行线程执行器class路径<code>threadExecutorClass</code>:</p><pre class="line-numbers language-java"><code class="language-java">LiteflowConfig liteflowConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiteflowConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  liteflowConfig<span class="token punctuation">.</span><span class="token function">setThreadExecutorClass</span><span class="token punctuation">(</span><span class="token string">"LiteFlowThreadPool的类路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  flowExecutor<span class="token punctuation">.</span><span class="token function">setLiteflowConfig</span><span class="token punctuation">(</span>liteflowConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"testChain"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果，可以看见线程池使用的是自定义的：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129161642.png" alt="image.png"></p><blockquote><p>LiteFlow从2.11.1开始，提供一个<code>liteflow.when-thread-pool-isolate</code>参数，默认为<code>false</code>，如果设为<code>true</code>，则会开启WHEN的线程池隔离机制，这意味着每一个when都会有单独的线程池。</p></blockquote><p>在多线程执行下，我们还有一个疑问，如果其中某个或者某几个并行分支发生异常执行失败那么后面的节点会不会收到影响？假如我们把C节点抛出一个异常，发现流程直接就结束了，并没有执行最后的E节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129162750.png" alt="image.png"><br>对于这种情况，<code>LiteFlow</code>的<code>WHEN</code>关键字提供了<code>ignoreError</code>(默认为false)来提供忽略错误的特性。我们修改流程如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(test_a, WHEN(test_b, test_c, test_d).ignoreError(true), test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次执行发现流程执行到了E节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129163209.png" alt="image.png"></p><p><code>LiteFlow</code>还提供了对<code>WHEN</code>并行流程中，使用子关键字<code>any</code>(默认为false)可以设置任一条分支先执行完即忽略其他分支，继续执行的特性。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(test_a, WHEN(test_b, test_c, test_d).ignoreError(true).any(true), test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们将C节点Sleep 10秒，可以发现C节点并没有执行，就执行到了E节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129170000.png" alt="image.png"></p><p>除此之外，<code>LiteFlow</code>还支持了并行编排中指定节点的执行则忽略其他，<code>WHEN</code>关键字子关键字 <code>must</code> (不可为空)，可用于指定需等待执行的任意节点，可以为 1 个或者多个，若指定的所有节点率先完成，则继续往下执行，忽略同级别的其他任务。我们将流程调节如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(test_a, WHEN(test_b, test_c, test_d).ignoreError(true).must(test_c), test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们还是将C节点Sleep 10秒，发现流程一直等到C节点执行结束才会执行后面的节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129171707.png" alt="image.png"></p><blockquote><p>must子关键字在LiteFlow从v2.11.1版本之后才有。</p></blockquote><ul><li>选择编排<br>在实现业务逻辑过程中，我们常见的就是根据某种标识去进行不同的业务流程，通常我们也可以使用策略模式进行实现。在<code>LiteFlow</code>中可以通过<code>SWITCH..TO()</code>选择编排，即<code>SWITCH</code>中的流程返回后面TO中那个节点就会执行那个节点，我们只需要处理好<code>SWITCH</code>中条件于TO中分支的关系即可。增加一个<code>Switch</code>组件：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_w"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件W"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行W节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"test_a"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们规则编排：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, test_b, test_c, test_d, test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129180607.png" alt="image.png"></p><p><code>SWITCH</code>还提供了子关键字<code>DEFAULT</code>，如果<code>SWITCH</code>返回的节点不是TO中的节点，则就走DEFAULT中指定的节点。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, test_b, test_c, test_d, test_e).DEFAULT(test_y);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129194449.png" alt="image.png"></p><p>由选择组件章节中我们知道，<code>SWITCH</code>可以返回ID或者链路Tag，上述例子中返回的<code>test_a</code>就是一个节点ID(对应<code>@LiteflowMethod</code>中指定的nodeId中的值)。当让在规则中我们也可以给表达式设置一个id。<code>LiteFlow</code>中规定，每个表达式都可以有一个id值，你可以设置id值来设置一个表达式的id值。然后在选择组件里返回这个id即可。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, THEN(test_b, test_c, test_d).id("test_bcd"), test_e).DEFAULT(test_y);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如此时<code>test_w</code>表达式返回的是<code>test_bcd</code>,则流程就会执行<code>test_b</code>, <code>test_c</code>, <code>test_d</code>节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129195541.png" alt="image.png"></p><p>除了给表达式赋值<code>id</code>属性之外，还可以给表达式赋值<code>tag</code>属性。在<code>SWITCH</code>中返回<code>tag</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, THEN(test_b, test_c, test_d).tag("test_tag"), test_e).DEFAULT(test_y);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们<code>SWITCH</code>组件中返回tag标签：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_w"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件W"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行W节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"tag:test_tag"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129201425.png" alt="image.png"></p><ul><li>条件编排<br>条件编排类似Java中的if…else，它有<code>IF</code>，<code>IF...ELIF</code>，<code>ELSE</code>几种写法。其中IF以及ELIF中的表达式对应IF组件中返回的<code>boolean</code>结果。对与IF有二元表达式：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(test_f, test_a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>IF</code>后面还可以跟<code>ELSE</code>。类似Java中的<code>else</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(test_f, test_a).ELSE(test_b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IF还支持三元表达式，上面的二元表达式等价于如下三元表达式写法：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(test_f, test_a, test_b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面两种表达式都可以解读为：如果<code>test_f</code>中返回<code>true</code>则执行<code>test_a</code>节点，否则执行<code>test_b</code>节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_f"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件F"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processF</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行F节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130102610.png" alt="image.png"></p><p>我们再看一下<code>ELIF</code>的写法，<code>ELIF</code>类似Java中的<code>else if</code>的写法，它的后面也可以跟<code>ELSE</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       IF(test_f, test_a).ELIF(test_x, test_b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们在订一个<code>test_x</code>的IF组件：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_f"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件F"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processF</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行F节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_x"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件X"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processX</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行X节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130110428.png" alt="image.png"></p><p><code>test_f</code>节点返回false，所以不会执行<code>test_a</code>，继续执行<code>test_x</code>节点，返回true，则会执行<code>test_b</code>节点。<br>当然<code>ELIF</code>后面也可以使用<code>ELSE</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       IF(test_f, test_a).ELIF(test_x, test_b).ELSE(test_c);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时如果<code>test_f</code>以及<code>test_x</code>都返回false，就会走<code>test_c</code>。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130111319.png" alt="image.png"></p><p>值得注意的是，当我们使用<code>IF</code>的二元表达式时才会去跟上<code>ELIF</code>以及<code>ELSE</code>。如果是三元表达式我们不可以使用<code>ELIF</code>以及<code>ELSE</code>，会报错。</p><blockquote><p>在2.10.0以前可以使用，但是在<code>IF</code>中的最后一个表达式会被<code>ELIF</code>或者`ELSE中的表达式<br>覆盖掉。本人只调研到了2.10.0,在这个版本中还是会报错。</p></blockquote><ul><li>循环编排</li></ul><p>循环编排类似Java中的循环，分为次数循环(<code>FOR...DO()</code>)，条件循环(<code>WHILE...DO()</code>)以及迭代循环(<code>ITERATOR...DO()</code>)，同时还涉及跳出循环编排(<code>BREAK</code>)。<br>我们定义一个固定次数的FOR循环：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testForChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      FOR(3).DO(THEN(test_a, test_b));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时会将<code>test_a</code>，<code>test_b</code>循环执行3次。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130135626.png" alt="image.png"></p><p>当然实际开发中，我们需要搭配<code>FOR</code>循环组件使用，即在<code>FOR</code>循环中返回需要执行的次数：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testForChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      FOR(test_w).DO(THEN(test_a, test_b));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如<code>test_w</code>组件中返回次数是3,则执行效果如上固定次数。</p><p>接下来我们看一下<code>WHILE</code>条件循环，<code>WHILE</code>的表达式需要结合<code>WHILE</code>组件使用，返回一个<br><code>boolean</code>类型的值，去控制循环的流程，如果为true则继续循环，否则结束循环。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      WHILE(test_h).DO(THEN(test_a, test_b));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来我们继续看一下迭代循环<code>ITERATOR</code>，类似于Java中的for循环。这里我们要配合<code>ITERATOR</code>组件使用，返回一个集合的迭代器。</p><p>我们定义一个迭代循环编排：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testIteratorChain">      ITERATOR(test_i).DO(test_p);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们在定义一个迭代组件以及一个普通组件用于打印集合中的元素：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_ITERATOR<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_i"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件I"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">processI</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_p"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试打印组件"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printData</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130143042.png" alt="image.png"></p><p>有循环编排，就相应的要有跳出循环编排，我们可以使用<code>BREAK</code>编排，配合<code>BREAK</code>组件使用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testForChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      FOR(test_j).DO(THEN(test_a, test_b)).BREAK(test_break);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      WHILE(test_h).DO(THEN(test_a, test_b)).BREAK(test_break);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  &lt;chain name = "testIteratorChain">      ITERATOR(test_i).DO(test_p).BREAK(test_break);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们以迭代循环跳出为例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_BREAK<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_break"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测Break组件"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130145553.png" alt="image.png"></p><p>即执行到C元素时返回true，跳出循环。</p><blockquote><p>LiteFlow从v2.9.0开始，提供了循环编排表达式组合。</p></blockquote><ul><li>异常捕获<br>EL表达式中还增加了异常捕获表达式，用于捕获节点中的异常。类似Java中的<code>try...catch</code>。用法为<code>CATCH</code>…<code>DO</code>(<code>DO</code>关键字非必须)，如果在<code>CATCH</code>的表达式中捕获到了异常，可以在<code>DO</code>表达式中的节点进行处理，可以使用<code>nodeComponent.getSlot().getException()</code>获取异常信息。但是有一点我们需要注意，假如我们使用了<code>CATCH</code>，如果其中的节点中发生了异常，那么我们在流程执行的结果中也会看到流程执行成功的标识(<code>isSuccess</code>=true)，可以理解，发生的异常被你捕获处理了。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testCatchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      CATCH(      THEN(test_a, test_b)      ).DO(test_catch);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在<code>test_b</code>节点中手动抛出一个<code>RuntimeException</code>，在<code>test_catch</code>中使用<code>nodeComponent.getSlot().getException()</code>打印捕获到的异常，同时我们在流程执行结果中打印<code>isSuccess</code>看流程是否执行成功：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_catch"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试Catch组件"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processCatch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"执行Catch节点，捕获到了异常\n"</span><span class="token punctuation">,</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"testCatchChain"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"执行成功"</span> <span class="token operator">:</span> <span class="token string">"执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果中的异常信息："</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130152104.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130152151.png" alt="image.png"></p><p>可以看到<code>test_catch</code>打印了异常信息，同时我们可以看到流程执行结果中返回执行成功，没有异常信息。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130152252.png" alt="image.png"></p><p>同时<code>CATCH</code>配合迭代循环还可以达到Java<code>forEach</code>循环的<code>continue</code>的效果。</p><pre class="line-numbers language-XML"><code class="language-XML"><chain name = "testIteratorCatchChain">      ITERATOR(test_i).DO(CATCH(THEN(test_pa, test_pb, test_pc)));  </chain><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们在<code>test_pb</code>在打印C时抛出异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_pb"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试打印组件B"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printPB</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B组件打印："</span><span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"B组件发生异常了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130155121.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130155133.png" alt="image.png"></p><p>此时没有执行C组件打印B，直接跳过了<code>test_pc</code>节点。</p><blockquote><p>LiteFlow从2.10.0开始提供CATCH表达式</p></blockquote><ul><li>与或非表达式<br>与或非表达式即<code>AND</code>，<code>OR</code>，<code>NOT</code>表达式。可以用于返回<code>boolean</code>值的组件的编排。可以将若干个这种组件编排在一起返回应该boolean值进行后续流程的判断。</li></ul><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testAndOrNotChain">      IF(AND(test_f, test_x), test_a, test_c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时只有<code>test_f</code>和<code>test_x</code> 节点都返回true，就会走<code>test_a</code>，否则走<code>test_c</code>。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testAndOrNotChain">      IF(OR(test_f, test_x), test_a, test_c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是OR，<code>test_f</code>和<code>test_x</code> 节点都返回false，就会走<code>test_c</code>，否则走<code>test_c</code>。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testAndOrNotChain">      IF(NOT(test_f), test_a, test_c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>NOT</code>即非的意思，如果<code>test_f</code>返回true，则就会走<code>test_c</code>节点，否则走<code>test_a</code>节点。</p><p><code>AND</code>，<code>OR</code>，<code>NOT</code>三种表达式可以相互组合使用。但是只能用于返回<code>boolean</code>值的组件上。</p><ul><li>子流程<br>在日常处理复杂业务时，流程编排的规则会嵌套很多层，可以想象一下那样的流程读起来也比较头疼，而且事实上我们在开发中是需要将复杂的流程业务去拆分成一个个独立的子流程去实现。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130170244.png" alt="image.png"></li></ul><p>如上图它的规则如下：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "order_handle">  THEN(      SWITCH(order_x).TO(      THEN(          order_a,          order_c,          IF(              order_k,                  THEN(                      order_d,                      order_f                  ),              order_e)          ).id("to_c"),      THEN(          order_b,          order_c,              IF(                  order_k,                  THEN(                      order_d,                      order_f              ),          order_e)      ).id("to_b")      )  );  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写其实也可以，但是读起来理解起来不号。这时我们就可以子流程进行改造。我们按照<code>to_c</code>,<code>to_b</code>流程进行拆分。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    // 主流程      THEN(SWITCH(order_x).TO(THEN(to_c).id("to_c"), THEN(to_b).id("to_b")), order_h);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_if<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(order_k, THEN(order_d, order_f), order_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  &lt;chain name = "to_c">      THEN(order_a, order_c, order_if);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  &lt;chain name = "to_b">      THEN(order_b, order_c, order_if);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样流程上就清晰了很多。</p><ul><li>子变量<br>在复杂流程的编排上，我们不仅可以使用子流程，还可以使用子变量的方式。我们可以直接在流程中定义变量。如上述例子使用子变量可以改造为：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      // 定义一个if节点处理df/e      order_if = IF(order_k, THEN(order_d, order_f), order_e);      // 定义to_c的订单流程 用id标识流程为to_c      to_c = THEN(order_a, order_c, order_if).id("to_c");      // 定义to_b的订单流程 用id标识为流程to_b      to_b = THEN(order_b, order_c, order_if).id("to_b");      // 主流程      THEN(SWITCH(order_x).TO(to_c, to_b), order_h);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样也可以清晰。</p><ul><li>其他<br>我们在上述一些示例中，每个语句后都加了分号：<code>;</code>，关于规则中的分号，我们链路中只有一条规则的时候（没有自变量）可以不加也可以运行，但是如果存在自变量，一定要在自变量中加上分号，否则汇报错。同时官方也建议不管是否存在子变量，都要加上分号。</li></ul><p>另外，EL中我们使用<code>//</code>定义注释。</p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>在上述的一些示例中，我们使用了<code>flowExecutor</code>去执行规则。<code>FlowExecutor</code>就是流程的执行器，是一个流程执行的触发点。在<code>Spring</code>或者<code>SprigBoot</code>环境下我们可以直接注入<code>FlowExecutor</code>进行使用。<br><code>FlowExecutor</code>中提供同步以及异步两种类型的方法，同步方法直接返回<code>LiteflowResponse</code>，而异步返回的是<code>Future&lt;LiteflowResponse&gt;</code>。同步方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//参数为流程ID，无初始流程入参，上下文类型为默认的DefaultContext</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数为流程ID，第二个参数为流程入参。上下文类型为默认的DefaultContext</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数为流程ID，第二个参数为流程入参，后面可以传入多个上下文class</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanClazzArray<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数为流程ID，第二个参数为流程入参，后面可以传入多个上下文的Bean</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanArray<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第一个参数为流程ID，第二个参数为流程入参，第三个参数是用户的RequestId，后面可以传入多个上下文的Bean</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2RespWithRid</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> String requestId<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanClazzArray<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们一定要使用自定义上下文传入，不要使用默认上下文。</p><p>而异步方法跟同步方法是一样的，只是他是无阻塞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Future<span class="token operator">&lt;</span>LiteflowResponse<span class="token operator">></span> <span class="token function">execute2Future</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanArray<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时，执行器可以针对异步执行提供了可配置的线程池参数，</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## FlowExecutor的execute2Future的线程数</span><span class="token attr-name">liteflow.main-executor-works</span><span class="token punctuation">=</span><span class="token attr-value">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以使用自定义线程池，如果使用自定义线程池必须实现<code>ExecutorBuilder</code>接口，实现<code>ExecutorService buildExecutor()</code>接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiteFlowThreadPool</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorBuilder</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> ExecutorService <span class="token function">buildExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-%s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>              <span class="token comment" spellcheck="true">// 核心线程数，即2个常开窗口  </span>            <span class="token number">2</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 最大的线程数，银行所有的窗口  </span>            <span class="token number">5</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 空闲时间  </span>            <span class="token number">5</span><span class="token punctuation">,</span>              TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 工作队列  </span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 线程工厂  </span>            threadFactory<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 拒绝策略  </span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于Java线程池的配置详解，请参考这篇文章：<a href="https://www.coderacademy.online/article/2d9d416b.html">重温Java基础（二）之Java线程池最全详解 | 码农Academy的博客 (coderacademy.online)</a></p></blockquote><p>我们可以通过<code>LiteFlow</code>的配置信息去设置:</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## FlowExecutor的execute2Future的自定义线程池的路径</span><span class="token attr-name">liteflow.main-executor-class</span><span class="token punctuation">=</span> <span class="token attr-value">com.springboot.litefolw.config.LiteFlowThreadPool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过上述配置文件配置的信息，对全局的<code>FlowExecutor</code>都会生效，假如我们相对某一个执行器定义线程池内容，可以使用<code>LiteFlowConfig</code>类去的定义（通过配置文件中配置信息也会进入到这个类里）。</p><pre class="line-numbers language-java"><code class="language-java">LiteflowConfig liteflowConfig <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">getLiteflowConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// FlowExecutor的execute2Future的自定义线程池的路径</span>liteflowConfig<span class="token punctuation">.</span><span class="token function">setMainExecutorClass</span><span class="token punctuation">(</span><span class="token string">"com.springboot.litefolw.config.LiteFlowThreadPool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// FlowExecutor的execute2Future的自定义线程池的路径</span>liteflowConfig<span class="token punctuation">.</span><span class="token function">setMainExecutorWorks</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里不建议new一个LiteflowConfig去设置配置信息，这样可能会导致配置文件中的一些默认配置信息丢失。</p></blockquote><p>在一个流程执行时，我们需要传入一些参数例如订单号，账户信息等，这些信息会做初始参数传入到流程中。在执行器中我们可以使用上述<code>FlowExecutor</code>的方法中的第二个参数(Object param)传入流程入参参数。流程入参可以是任何对象，实际开发中，我们会将自己封装初始化好的Bean传入，然后可以在流程中使用<code>this.getRequestData()</code>或者<code>nodeCompoent.getRequestData()</code>。</p><pre class="line-numbers language-java"><code class="language-java">DataRequest dataRequest <span class="token operator">=</span> DataRequest<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iteratorRequestList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LiteflowResponse response <span class="token operator">=</span> <span class="token comment" spellcheck="true">// 流程传入参数</span>flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"testIteratorCatchChain"</span><span class="token punctuation">,</span> dataRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在流程中获取入参参数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataRequest dataRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_a"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件A"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行A节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          DataRequest dataRequest <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>理论上来说，流程入参可以是任何对象，但是我们不应该把数据上下文的实例当做参数传入。流程参数跟数据上下文是两个实例对象，流程入参只能通过<code>this.getRequestData()</code>去拿。</p></blockquote><p>最后我们来说一下流程执行的结果<code>LiteflowResponse</code>。异步执行的流程可以通过<code>future.get()</code>获取。我们简单介绍一下其中常用的一些方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiteflowResponse</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断流程是否执行成功</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果流程执行不成功，可以获取流程的异常信息，这个跟isSuccess()使用，很有用</span>    <span class="token keyword">public</span> Exception <span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取流程的执行步骤</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>CmpStep<span class="token operator">>></span> <span class="token function">getExecuteSteps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取流程的执行的队列信息</span>    <span class="token keyword">public</span> Queue<span class="token operator">&lt;</span>CmpStep<span class="token operator">></span> <span class="token function">getRollbackStepQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取流程的执行步骤的字符串信息。这个值在流程执行结束后,liteflow日志也会自动打印</span>    <span class="token keyword">public</span> String <span class="token function">getExecuteStepStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据上下文信息</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getContextBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> contextBeanClazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据上下文"><a href="#数据上下文" class="headerlink" title="数据上下文"></a>数据上下文</h4><p>数据上下文对与整个<code>LiteFlow</code>来说是非常重要的，从LiteFlow的简介中我们知道LiteFlow的主要功能是业务解耦，那么解耦中很重要的一步就是数据解耦。要做编排，就要消除各个组件中的差异性，组件不接收业务参数，也不会返回业务数据，每个组件只需要从数据上下文中获取自己关心的数据，不用关心此数据是由谁提供的，同样的，每个组件也只需要把自己执行所产生的结果数据放到数据上下文中，也不用关心此数据到底是提供给谁用的。这样就在一定程度上做到了数据解耦。数据上下文进入流程中后，整个链路中的任一节点都可以取到。不同的流程，数据上下文实例是完全隔离开的。</p><p>LiteFlow虽然也提供了默认的数据上下文<code>DefaultContext</code>，但是实际开发中不建议使用。我们要传入自己自定义的数据上下文对象，同流程入参，我们可以使用任意的Bean作为数据上下文传入到流程中。我们可以定义好若干个数据上下文对象的class传入到流程中，LiteFlow会在调用时进行初始化，给这个上下文分配唯一的实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 传入一个</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 传入多个</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以将已经初始化好的Bean作为数据上下文传入到流程当中：</p><pre class="line-numbers language-java"><code class="language-java">DataContext dataContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入一个</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 传入多个</span>OrderContext orderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataContext<span class="token punctuation">,</span> orderContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是有一点要非常注意：<strong>框架并不支持上下文bean和class混传，你要么都传bean，要么都传class。</strong></p><p>然后我们就可以在链路的任意节点中通过以下方式获取数据上下文：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComponent</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_a"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件A"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行A节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>           DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          OrderContext orderContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，SpringBoot环境下LiteFlow的一些基本概念就介绍完了，大家可以按照这些概念实现一个demo去体验LiteFlow那解耦，以及流程编排那种特爽的柑橘。当然大家也可以参考这篇文章去实现demo：<a href="https://www.coderacademy.online/article/springbootliteflowuse.html">SpringBoot+LiteFlow优雅解耦复杂核心业务 | 码农Academy的博客 (coderacademy.online)</a></p><p>后面我们在介绍LiteFlow的一些高级特性，例如：组件降级，组件继承，组建回滚，热刷新，以及使用代码构建规则，使用脚本构建组件，还有使用Nacos，Redis作为规则文件源等。</p>]]></content>
      
      
      <categories>
          
          <category> 规则引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> LiteFlow </tag>
            
            <tag> 规则引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高Java开发生产力，我选Stream API,真香啊</title>
      <link href="/article/javastreamapi.html"/>
      <url>/article/javastreamapi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>Java 8 引入的Stream API提供了一种新的数据处理方式，它以声明式、函数式的编程模型，极大地简化了对集合、数组或其他支持数据源的操作。Stream可以被看作是一系列元素的流水线。允许你高效地对大量数据执行复杂的过滤、映射、排序、聚合等操作，而无需显式地使用循环或者临时变量。Stream API的设计理念主要包括两个方面：<strong>链式调用</strong>和<strong>惰性求值</strong>。链式调用允许我们将多个操作连接在一起，形成一个流水线，而惰性求值意味着只有在真正需要结果的时候才执行计算，从而避免了不必要的计算开销。</p><p>接下来我们就来盘点一下日常开发中常用的一些Stream API。</p><h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><ul><li><strong>集合创建</strong></li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 串行流</span>Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 并行流</span>Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> parallelStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>数组创建</strong></li></ul><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用<code>Stream.of(T...values)</code>创建</li></ul><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用Stream.generate()创建流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生成一个无限流，通过limit()限制元素个数  </span>Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> randomStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用Stream.iterate()创建流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生成一个等差数列，通过limit()限制元素个数 </span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用IntStream、LongStream、DoubleStream创建原始类型流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用IntStream创建  </span>IntStream intStream <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4]  </span><span class="token comment" spellcheck="true">// 使用LongStream创建  </span>LongStream longStream <span class="token operator">=</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>IntStream我们使用的地方还是比较多的，比如我们按照下标遍历一个集合时，同常的做法是：for(int i = 0; i &lt; list.size(); i++){}，我们可以使用IntStream去改造一下，IntStream.rangeClosed(0, list.size()).forEach();</p></blockquote><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>中间操作是构建流水线的一部分，用于对流进行转换和处理，但它们并不会触发实际的计算。</p><ul><li>过滤操作（filter）<br>过滤操作用于筛选流中的元素，保留满足指定条件的元素。<code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code>，<code>filter</code>接受一个谓词Predicate，我们可以通过这个谓词定义筛选条件，<code>Predicate</code>是一个函数式接口，其包含一个<code>test(T t)</code>方法，该方法返回boolean。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> fruits <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 过滤长度大于5的水果  </span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> filteredFruits <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fruit <span class="token operator">-</span><span class="token operator">></span> fruit<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度大于5的水果: "</span><span class="token operator">+</span> filteredFruits<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filterTest</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>Student<span class="token operator">></span> filterStudents <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"武汉大学"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      filterStudents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240131232112.png" alt="image.png"></p><ul><li>映射操作（map/flatMap）<br>映射操作用于对流中的每个元素进行转换。他有map以及flatMap两种操作。map就是基本的映射操作，对每个元素进行提取转换。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将实体层映射成学生姓名字符串  </span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将字符串转大写。</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> upperList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"stream"</span><span class="token punctuation">,</span> <span class="token string">"api"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日常开发中map操作我们用的非常多，比如数据库中查询出来的DO实体，我们需要转换为VO返回给前端页面展示，这时候我们可以使用map进行转换操作：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>StudentDO<span class="token operator">></span> studentDOList <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">listStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>StudentVO<span class="token operator">></span> studentVOList <span class="token operator">=</span> studentDOList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>studentDO <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    StudentVO studentVO <span class="token operator">=</span> StudentVO<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">studentNo</span><span class="token punctuation">(</span>studentDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">studentName</span><span class="token punctuation">(</span>studentDO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> studentVO<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而flatMap的作用略微特殊，它用于将一个元素映射为一个流，然后将所有流连接成一个流。这在处理嵌套结构或集合中的元素是另一个集合的情况下非常有用。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> nestedWords <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>    Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Kotlin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Ruby"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">,</span> <span class="token string">"TypeScript"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 flatMap 将嵌套的 List&lt;String> 转换为一个扁平的 List&lt;String>, 结果将是包含所有单词的扁平流</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> wordList <span class="token operator">=</span> nestedWords<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>List<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果： [Java, Kotlin, Python, Ruby, JavaScript, TypeScript]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flatMap</code>在使用时，通常会涉及到处理复杂的数据结构，比如处理嵌套的对象集合或者进行数据的扁平化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> grades<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">class</span> <span class="token class-name">ClassRoom</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>ClassRoom<span class="token operator">></span> classRoomList<span class="token punctuation">;</span>  <span class="token punctuation">}</span>School school <span class="token operator">=</span> School<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">classRoomList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>                  ClassRoom<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">studentList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>                          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  ClassRoom<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">studentList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>                          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"David"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 flatMap 扁平化处理获取所有学生的所有课程成绩  </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> allGrades <span class="token operator">=</span> school<span class="token punctuation">.</span><span class="token function">getClassRoomList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>classroom <span class="token operator">-</span><span class="token operator">></span> classroom<span class="token punctuation">.</span><span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> student<span class="token punctuation">.</span><span class="token function">getGradeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allGrades<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：[90, 85, 88, 78, 92, 80, 95, 89, 91, 82, 87, 79]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mapToInt操作<br><code>mapToInt</code> 是 Stream API 中的一种映射操作，专门用于将元素映射为 <code>IntStream</code>。通过 <code>mapToInt</code>，你可以将流中的元素映射为 <code>int</code> 类型，从而进行更专门化的操作，例如数值计算。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> totalAge2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似的还有<code>mapToLong</code>和<code>mapToDouble</code> 操作，这两个操作类似于 <code>mapToInt</code>，分别用于将流中的元素映射为 <code>LongStream</code> 和 <code>DoubleStream</code>。</p><ul><li>排序操作（sorted）<br>排序操作用于对流中的元素进行排序。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> cities <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span><span class="token punctuation">,</span> <span class="token string">"London"</span><span class="token punctuation">,</span> <span class="token string">"Paris"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对城市按字母顺序排序</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedStream <span class="token operator">=</span> cities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于集合中对象的排序，sorted要求待比较的元素必须实现Comparable接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Builder</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student other<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> other<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedList <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有实现，就需要将比较器作为参数传递给<code>sorted(Comparator&lt;? super T&gt; comparator)</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Builder</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedList <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>去重操作（distinct）<br>去重操作用于去除流中的重复元素。distinct基于Object.equals(Object)实现。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 去除重复的数字  </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> distinctList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者去除学生中姓名相同的</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> studentNameList <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                 <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>截断操作（limit）<br>截断操作用于限制流中元素的数量。limit返回包含前n个元素的流，当集合大小小于n时，则返回实际长度。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只取前三个数字 </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> limitedList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取土工工程专业的年龄最小的前两名学生</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> limitStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跳过操作（skip）<br>跳过操作用于跳过流中的前几个元素，返回由后面所有元素构造的流，如果n大于满足条件的集合的长度，则会返回一个空的集合。作用上跟limit相反。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳过前三个数字，返回后面的数字 </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> limitedList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 跳过土工工程专业的年龄最小的前两名学生，取后面的学生</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> limitStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>peek操作<br><code>peek</code> 方法对每个元素执行操作并返回一个新的 Stream。<code>peek</code> 的主要目的是用于调试和观察流中的元素，通常用于打印调试信息、记录日志或其他类似的目的，而不会改变流中元素的结构。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> modifiedWords <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filtered Word: "</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Uppercase Word: "</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Stream的终端操作"><a href="#Stream的终端操作" class="headerlink" title="Stream的终端操作"></a>Stream的终端操作</h3><p>终端操作是对流进行最终计算的操作，执行终端操作后，流将被消耗，不能再被使用。</p><ul><li>迭代forEach操作<br><code>forEach</code> 迭代操作，用于对流中的每个元素执行指定的操作。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> fruits <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 forEach 输出每个水果</span>fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fruit <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行forEach时可省略 stream()，即</span>fruits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fruit <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或</span>fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>收集操作(collect)<br>通过<code>collect()</code>方法结合<code>java.util.stream.Collectors</code>工具类将Stream转换为另一种形式，例如列表、集合(toList, toSet, toMap)、映射或归约结果。如上述示例中的: </li></ul><ol><li>收集到List<br>使用<code>Collectors.toList()</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 跳过土工工程专业的年龄最小的前两名学生，取后面的学生</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> limitStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>收集到Set<br>使用<code>Collectors.toSet()</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将学生姓名收集到Set</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> studentNameSet <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>List转Map<br>使用<code>Collectors.toMap</code>。日常开发中使用很多。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 转换为年龄对应的学生信息  </span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Student<span class="token operator">></span> studentMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                                            Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span>                                             Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                             <span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码代表，我们使用年龄作为Map的key，对应学生信息作为value。<code>Function.identity()</code>：这是一个提取元素自身的映射函数。<code>(e1, e2) -&gt; e1</code>：这是一个合并冲突的操作。如果在流中存在相同的年龄（相同的键），这个函数定义了当出现重复键时应该如何处理。在这里，我们选择保留第一个出现的元素，即保留先出现的 <code>Student</code> 对象。当然我们还可以这样<code>(e1, e2) -&gt; {...}</code>自定义合并冲突策略，例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 转换为年龄对应的学生信息,如果年龄相同，则取名字较长的  </span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Student<span class="token operator">></span> studentMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> e1 <span class="token operator">:</span> e2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果value的值是一些number，我们也可以做一些加减乘除之类的合并。</p><p>日常开发中，这个用法很频繁。</p><ol start="4"><li>字符串拼接：<br>使用<code>Collectors.joining(拼接符)</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students  <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  String studentName <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出来：Alice,Bob</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>分组<br>即按照集合中的元素的某个属性进行分组，转换为<code>Map&lt;Object, List&lt;Object&gt;&gt;</code>:</li></ol><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> fruits <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> lengthToNamesMap <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 按照年龄分组  </span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> studentMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连续进行分组</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Student<span class="token operator">>>></span> groupsStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 先按照学校分组  </span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getSchool          <span class="token comment" spellcheck="true">// 再按照专业分组  </span>        <span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getMajor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>counting()<br><code>counting()</code> 收集器用于计算流中元素的数量。等同于Stream的<code>count()</code>操作。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 效果同等于</span><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>maxBy()<br><code>maxBy()</code>基于指定的比较器，用于找到流中的最大的元素。等同于Stream的<code>max</code>操作</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 年龄最大的学生</span>Student olderStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>Student olderStudent2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于stram的max</span>Student olderStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>minBy()<br><code>minBy()</code>基于指定的比较器，用于找到流中的最小的元素。等同于Stream的<code>min</code>操作。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 年龄最小的学生</span>Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>averagingInt<br><code>averagingInt()</code> 收集器用于计算流中元素的平均值。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 求学生平均年龄</span><span class="token keyword">double</span> avgAge <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="10"><li>summarizingInt()<br><code>summarizingInt()</code> 收集器用于计算流中元素的汇总统计信息，包括总数、平均值、最大值和最小值。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一次性得到元素个数、总和、均值、最大值、最小值</span>IntSummaryStatistics summaryStatistics <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总数："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均值："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>partitioningBy()<br>将流中的元素按照指定的条件分成两个部分。在分区中key只有两种情况：true或false，目的是将待分区集合按照条件一分为二，分区相对分组的优势在于，我们可以同时得到两类结果，在一些应用场景下可以一步得到我们需要的所有结果，比如将数组分为奇数和偶数。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分为武汉大学学生，非武汉大学学生</span>Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> partStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"武汉大学"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>count操作<br><code>count</code> 用于计算流中的元素个数。效果等同于<code>Collectors.counting()</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 效果同等于</span><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>max操作<br>基于指定比较器，max用于找到流中最大的元素。效果等同于<code>Collectors.maxBy()</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student olderStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>  Student olderStudent2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>min操作<br>基于指定比较器，min用于找到流中最小的元素。效果等同于<code>Collectors.minBy()</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 年龄最小的学生</span>Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reduce操作<br><code>reduce</code> 用于对流中的元素进行归约操作，得到一个最终的结果。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 计算学生的总年龄</span><span class="token keyword">int</span> totalAge1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以使用Integer.sum</span><span class="token keyword">int</span> totalAge2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以不设置初始值0，直接Integer.sum，但是返回的是Optional</span><span class="token keyword">int</span> totalAge3 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>findFirst操作<br><code>findFirst</code> 用于查找流中的第一个元素。也即<code>list.get(0)</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student firstStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>曾经有个小兄弟问我，他有一段代码类似 Student firstStu = students.get(0)。他们组长让他优化优化，然后就用了这种方式优化的。😂</p></blockquote><ul><li>findAny操作<br><code>findAny</code> 用于查找流中的任意一个元素。在并行流中，<code>findAny</code> 可以更快地获取结果，而在串行流中与 <code>findFirst</code> 的效果基本一致。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student anyStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>anyMatch操作<br>anyMatch则是检测是否存在一个或多个满足指定的参数行为，如果满足则返回true。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> hasQh <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"清华大学"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>noneMatch<br>noneMatch用于检测是否不存在满足指定行为的元素，如果不存在则返回true.</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> hasBd <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"北京大学"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>allMatch<br>allMatch用于检测是否全部都满足指定的参数行为，如果全部满足则返回true。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> isAdult <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>在Java 8及以上版本，你可以使用并行流（Parallel Stream）来充分利用多核处理器的能力。并行流在处理大量数据时可以提高性能，但并不是在所有情况下都比顺序流更快。当在并行流上进行操作时，需要注意并发问题。确保你的操作是无状态的、无副作用的，或者使用合适的并发工具。一定一定要注意线程安全。并行流本质上基于java7的Fork-Join框架实现，其默认的线程数为宿主机的内核数。</p><p>创建并行流，只需要将stream()替换成parallelStream()即可。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">listStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> parallelStream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与顺序流相似，你可以在并行流上执行各种中间和终端操作。</p><p>日常中，对于大批量的数据处理转换，我们可以使用并行流去处理。我们可以先把数据切分成100或者其他数值一组的<code>List&lt;List&lt;Student&gt;&gt;</code> 然后使用并行流去处理这些数据。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>StudentVO<span class="token operator">></span> studentVOList <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Lists<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pList <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理转换数据</span>    List<span class="token operator">&lt;</span>StudentVO<span class="token operator">></span> voList <span class="token operator">=</span> <span class="token function">convertList</span><span class="token punctuation">(</span>pList<span class="token punctuation">)</span><span class="token punctuation">;</span>      studentVOList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>voList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再比如一些大批量的数据分批次查询，都可以使用并行流去做，但是一定要注意线程安全。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用Stream API可使Java集合处理更简洁、清晰，充分发挥现代、函数式编程的优势。然而，需注意Stream的惰性求值，只在终端操作触发时执行中间操作，确保操作的必要性，避免不必要计算。Stream鼓励无状态、无副作用的操作，避免在中间操作修改共享状态，以确保流的预测性和可维护性。Stream不可重用，一旦被消费，无法再次使用，需谨慎设计流程。并行流虽提高性能，但需谨慎使用，不适用于所有情况，可能导致额外性能开销。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java 8中引入的Stream API为开发者带来了全新的编程范式。其链式调用和惰性求值的设计理念，使得数据处理变得更为简单和高效。通过深入理解Stream API，我们能够更好地利用这一强大工具，在实际开发中写出更为优雅和易读的代码。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Mybatis的TypeHandler，轻松应对Mysql的JSON类型</title>
      <link href="/article/mybatistypehandler.html"/>
      <url>/article/mybatistypehandler.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在<code>MyBatis</code>中，<code>TypeHandler</code>是一个核心的组件，负责处理数据库字段与<code>Java</code>对象之间的类型转换。由于不同数据库系统和<code>Java</code>数据类型之间存在差异，因此需要<code>TypeHandler</code>来进行数据的转换，以确保数据的正确性和一致性。接下来我们一起探讨<code>MyBatis</code>中<code>TypeHandler</code>的相关知识，包括其基础原理、编写自定义<code>TypeHandler</code>、处理常见数据类型、高级应用以及性能优化等内容。</p><h3 id="TypeHandler的工作原理"><a href="#TypeHandler的工作原理" class="headerlink" title="TypeHandler的工作原理"></a>TypeHandler的工作原理</h3><p>TypeHandler 的工作原理主要体现在两个关键环节：参数设置和结果集映射。</p><ol><li><strong>参数设置</strong>： 当<code>MyBatis</code> 执行<code>SQL</code>语句时，需要将用户传入的方法参数或者 <code>Mapper XML</code>文件中定义的参数值设置到<code>PreparedStatement</code>对象中。对于非基本类型的参数，如自定义对象、枚举或其他复杂类型，<code>MyBatis</code>将通过查找对应的 <code>TypeHandler</code> 实现类来完成转换工作。即<code>MyBatis</code>根据参数的<code>Java</code>类型找到对应的<code>TypeHandler</code>，然后调用其<code>setParameter</code> 方法，这个方法会将<code>Java</code>类型的数据转换为<code>JDBC</code>可识别的数据库类型，并调用<code>PreparedStatement</code> 的<code>set</code>方法将转换后的数据写入预编译的<code>SQL</code>语句中。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224225601.png" alt="image.png"></p><ol start="2"><li><strong>结果集映射</strong>： 在查询执行完毕后，<code>MyBatis</code>需要将从<code>ResultSet</code>中读取的数据转换成<code>Java</code>类型并填充到目标对象属性上。如下即为根据<code>jdbcType</code>或者<code>javaType</code>获取对对应的<code>typeHandler</code>。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223173757.png" alt="image.png"></p><blockquote><p>如果在Mybatis的xml中指定了TypeHandler则会直接使用这个Handler。</p></blockquote><p><code>MyBatis</code>通过结果映射配置来确定将结果集中的哪些列映射到<code>Java</code>对象的哪些属性上。当<code>MyBatis</code>从<code>ResultSet</code>中获取某列数据时，它会根据结果映射配置所关联的<code>Java</code>类型，找到相应的<code>TypeHandler</code>。然后，<code>MyBatis</code>调用<code>TypeHandler</code>的<code>getResult</code>方法，该方法将从数据库返回的<code>JDBC</code>类型数据转换为<code>Java</code>类型，并最终赋值给目标<code>Java</code>对象的属性。这个过程确保了数据库中的数据与<code>Java</code>对象之间的正确转换和映射，从而实现了数据的持久化操作。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223161914.png" alt="image.png"></p><h3 id="自定义TypeHandler"><a href="#自定义TypeHandler" class="headerlink" title="自定义TypeHandler"></a>自定义TypeHandler</h3><p>在<code>MyBatis</code>中，虽然已经提供了丰富的内置<code>TypeHandler</code>来处理常见的数据类型，但在实际开发中，有时候我们可能需要处理一些特殊的数据类型或者定制化的数据转换逻辑，例如数据库中的某个字段存储的是特定格式的字符串（例如JSON数据类型），但<code>Java</code>端需要将其转换为枚举或自定义对象。这时候，就需要编写自定义的<code>TypeHandler</code>来进行数据处理。</p><h4 id="TypeHandler接口"><a href="#TypeHandler接口" class="headerlink" title="TypeHandler接口"></a>TypeHandler接口</h4><p>要编写自定义的<code>TypeHandler</code>，首先需要实现<code>MyBatis</code>提供的<code>TypeHandler</code>接口。该接口定义了处理结果集方法<code>getResult</code>和处理参数的方法<code>setParameter</code>。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223230034.png" alt="image.png"></p><p>在实现<code>TypeHandler</code>接口后，我们需要重写这几个方法，<code>setParameter</code>方法用于将<code>Java</code>对象的属性值设置到<code>PreparedStatement</code>中，而<code>getResult</code>方法则用于将<code>ResultSet</code>中的数据转换为<code>Java</code>对象的属性值。</p><h4 id="BaseTypeHandler抽象类"><a href="#BaseTypeHandler抽象类" class="headerlink" title="BaseTypeHandler抽象类"></a>BaseTypeHandler抽象类</h4><p>实际上，我们在日常开发中常使用的并不是实现<code>TypeHandler</code>接口，而是继承<code>BaseTypeHandler</code>抽象类。<code>BaseTypeHandler</code>实现了<code>TypeHandler</code>接口，<code>BaseTypeHandler</code>提供了对<code>TypeHandler</code>接口中方法的默认实现，包括空值处理、异常处理等，减少了重复的代码编写，提高了开发效率。同时，<code>BaseTypeHandler</code>也提供了一些扩展点，使得开发者可以在不改变核心逻辑的情况下进行定制化扩展，满足不同场景下的需求。使用<code>BaseTypeHandler</code> 抽象类可以使自定义<code>TypeHandler</code>的编写更加规范、简化和灵活。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223232703.png" alt="image.png"></p><h4 id="MappedJdbcTypes和MappedTypes"><a href="#MappedJdbcTypes和MappedTypes" class="headerlink" title="MappedJdbcTypes和MappedTypes"></a>MappedJdbcTypes和MappedTypes</h4><p>在自定义的<code>TypeHanlder</code>时，我们也可以使用<code>@MappedJdbcTypes</code>和<code>@MappedTypes</code>注解，显示的指定你的<code>TypeHanlder</code>要处理的<code>JDBC</code>类型和<code>Java</code>类型。</p><ul><li><code>@MappedJdbcTypes</code>注解用于指定该TypeHandler支持的JDBC类型。通过这个注解，可以明确告知<code>Mybatis</code>此类型处理器在<code>getResult</code>时应该处理哪些数据库中的数据类型（如<code>VARCHAR</code>、<code>TIMESTAMP</code>等）。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> JdbcType<span class="token punctuation">.</span>VARBINARY<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToJsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体梳理逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上，<code>TypeHandler</code>将被用于映射到<code>JDBC</code>类型为<code>VARCHAR</code>的列上的<code>AddressBO</code>类型。</p><ul><li><code>@MappedTypes</code>注解则用于指定<code>Java</code>类型，它告诉<code>Mybatis</code>这个<code>TypeHandler</code>在执行<code>setParameter</code>时应该关联于哪些<code>Java</code>类或接口上。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MappedTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>AddressBO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToJsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体逻辑处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上，当<code>Mybatis</code>遇到与<code>AddressBO</code>类型相匹配的属性时，会使用这个<code>TypeHandler</code>进行转换。</p><p>通常，为了确保<code>TypeHandler</code>能在正确的地方被应用，同时考虑到可读性和维护性，推荐在自定义<code>TypeHandler</code>中同时使用这两个注解来清晰地定义其适用范围：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> JdbcType<span class="token punctuation">.</span>VARBINARY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MappedTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>AddressBO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToJsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体逻辑处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在某些情况下，如果是在全局配置或者具体的映射文件中显式制定注册了<code>TypeHandler</code>，则可能不需要这些注解也能正常工作。但是，使用注解可以提高代码的清晰度和自动化的可能性。</p><h4 id="注册TypeHandler"><a href="#注册TypeHandler" class="headerlink" title="注册TypeHandler"></a>注册TypeHandler</h4><p>编写完自定义的<code>TypeHandler</code>后，还需要将其注册到<code>MyBatis</code>的配置中（<code>typeHandlerMap</code>中），以便<code>MyBatis</code>能够正确地识别和使用它。</p><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><p>我们可以在创建<code>SqlSessionFactory</code>时，通过<code>SqlSessionFactoryBean</code>的<code>setTypeHandlers</code>的方法全局指定你的<code>TypeHandler</code>。</p><pre class="line-numbers language-java"><code class="language-java">SqlSessionFactoryBean factoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  factoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>   factoryBean<span class="token punctuation">.</span><span class="token function">setTypeHandlers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddressTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时我们就可以在<code>TypeHandlerMap</code>中可以发现这个自定义的<code>TypeHanlder</code>了。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224223913.png" alt="image.png"></p><h5 id="局部指定"><a href="#局部指定" class="headerlink" title="局部指定"></a>局部指定</h5><p>如果针对某些特定的表下特定的字段（即不通用的字段）可以在该映射文件中使用该<code>TypeHandler</code>，可以在对应的XML映射文件中进行配置制定。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在某个字段上指定TypeHandler --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>  <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.handler.AddressTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *  from user_info where id = #{id,jdbcType=BIGINT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或者在参数映射中指定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByPrimaryKeySelective<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--@mbg.generated--></span>    update user_info    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        user_name = #{userName,jdbcType=VARCHAR},      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        address = #{address,jdbcType=VARCHAR,typeHandler=com.springboot.mybatis.handler.AddressTypeHandler},     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id = #{id,jdbcType=BIGINT}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当<code>Mybatis</code>执行<code>SQL</code>时，对于对应类型的数据就会自动调用你定义的<code>TypeHandler</code>来进行数据转换。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们以<code>Mysql</code>的<code>JSON</code>数据类型为例，以《解锁Mysql的JSON数据类型》文中示例为例，我们查询以及保存<code>user_info</code>表中的<code>address</code>字段，因<code>address</code>字段在库中以<code>JSON</code>存储，我们在<code>UserInfoDO</code>中使用对象<code>AddressBO</code>接收。</p><p>我们定义一个专门处理数据<code>JSON</code>类型数据与<code>Java</code>对象相互转换的一个抽象的<code>TypeHandler</code>，它继承了<code>BaseTypeHandler</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ObjectMapper objectMapper<span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>          objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>DeserializationFeature<span class="token punctuation">.</span>FAIL_ON_UNKNOWN_PROPERTIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//使用null表示集合类型字段是时不抛异常  </span>        objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>DeserializationFeature<span class="token punctuation">.</span>FAIL_ON_NULL_FOR_PRIMITIVES<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//对象为空时不抛异常  </span>        objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>FAIL_ON_EMPTY_BEANS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * json转换为obj       * @param json json串       * @return object       */</span>    <span class="token keyword">private</span> T <span class="token function">parse</span><span class="token punctuation">(</span>String json<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> null<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token function">specificType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * obj转换为json       * @param obj object对象       * @return json个数的字符串       */</span>      <span class="token keyword">private</span> String <span class="token function">toJsonString</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>PreparedStatement ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T parameter<span class="token punctuation">,</span> JdbcType jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          String content <span class="token operator">=</span> parameter <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">toJsonString</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>          ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> T <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> String columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> T <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> T <span class="token function">getNullableResult</span><span class="token punctuation">(</span>CallableStatement cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 具体类型，由子类提供       *       * @return 具体类型       */</span>      <span class="token keyword">protected</span> <span class="token keyword">abstract</span> TypeReference<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">specificType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一个通用的<code>JSON</code>转<code>Java</code>对象的通用<code>Handler</code>就完成了。然后我们具体的字段转换到相应的<code>Java</code>对象时，只需要继承这个抽象类，把<code>Java</code>对象传递过去即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressTypeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">JsonBaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 具体类型，由子类提供       *       * @return 具体类型       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> TypeReference<span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token function">specificType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们分别指定查询的<code>ResultMap</code>以及插入的<code>sql</code>中的<code>address</code>字段的<code>TypeHandler</code>为<code>AddressTypeHandler</code>的全路径。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>  <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.handler.AddressTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *  from user_info where id = #{id,jdbcType=BIGINT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--@mbg.generated--></span>    insert into user_info (user_name, address, create_time      )  values (#{userName,jdbcType=VARCHAR},          #{address,jdbcType=VARCHAR,typeHandler=com.springboot.mybatis.handler.AddressTypeHandler},             #{createTime,jdbcType=TIMESTAMP}      )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>UserInfoDO</code>中的<code>address</code>属性由<code>String</code>修改为<code>AddressBO</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoDO</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 自增主键      */</span>      <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 名称      */</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 地址信息      */</span>      <span class="token keyword">private</span> AddressBO address<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 创建时间      */</span>      <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们分别执行插入以及查询的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      UserInfoDO userInfoDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoDO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      AddressBO addressBO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddressBO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setStreet</span><span class="token punctuation">(</span><span class="token string">"123 Main St"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setCountry</span><span class="token punctuation">(</span><span class="token string">"US"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> zipcodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      zipcodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">94507</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      zipcodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">94582</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setZipcodes</span><span class="token punctuation">(</span>zipcodes<span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoDO<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>addressBO<span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoDO<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userInfoDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库中结果为：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224233118.png" alt="image.png"></p><p>然后我们在执行查询方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      UserInfoDO userInfoDO <span class="token operator">=</span> userInfoMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfoDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为:<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224233518.png" alt="image.png"></p><p>在<code>MyBatis</code>框架中，采用自定义<code>TypeHandler</code>实现<code>JSON</code>数据类型字段与<code>Java</code>对象的相互转换具有显著的优势。通过精心设计和实现<code>TypeHandler</code>，可以精准把控从<code>Java</code>对象到<code>JSON</code>字符串以及反向转换的过程，确保数据在存入数据库时按照预设格式可靠地序列化，并在读取时准确无误地还原为对应的<code>Java</code>实体，从而有效避免因数据格式不兼容引发的运行时异常或数据损坏问题。同时，利用<code>TypeHandler</code>将数据持久化的具体逻辑进行抽象封装，使业务代码得以聚焦核心功能，不受底层数据库交互细节的影响，极大提升了代码的可读性和维护性。而在整个项目范围内统一应用自定义的<code>TypeHandler</code>，有利于维持数据操作的一致性和标准化，消除了由于开发人员使用不同处理策略带来的潜在风险，有力推动了项目的整体开发效率和维护质量提升。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了<code>MyBatis</code>中<code>TypeHandler</code>的概念、基础用法以及应用。我们探讨了如何编写自定义的 <code>TypeHandler</code>来处理特殊格式的数据。通过本文的学习，我们可以更好地理解和应用<code>TypeHandler</code>，在实际开发中处理数据库操作时能够更加灵活、高效地运用<code>MyBatis</code>框架。</p><p>在使用<code>TypeHandler</code>的过程中，我们需要注意数据的准确性和一致性，确保数据的正确转换和映射，避免出现数据丢失或者转换错误的情况。除了简单的数据类型转换外，<code>TypeHandler</code>还可以用于进行数据校验和转换。在<code>TypeHandler</code>的实现中，我们可以添加一些逻辑来对数据进行校验，如检查数据的有效性、范围等。通过在<code>TypeHandler</code>中添加数据校验和转换逻辑，我们可以确保数据的完整性和正确性。<br>另外，还需要根据具体的业务需求和数据特点来选择合适的 <code>TypeHandler</code>，并根据需要进行性能优化和调整，以提高系统的整体性能和稳定性。</p><p>通过对<code>TypeHandler</code>的学习和实践，我们可以更加灵活地处理各种数据类型和数据格式，为项目的顺利进行和未来的发展打下坚实的基础。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 自定义TypeHandler </tag>
            
            <tag> MySql的JSON类型数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊Integer的缓存机制问题</title>
      <link href="/article/null.html"/>
      <url>/article/null.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在Java编程中，<code>Integer</code>类作为基本类型int的包装器，提供了对象化的操作和自动装箱与拆箱的功能。从<code>JDK5</code>开始引入了一项特别的优化措施——Integer缓存机制，它对于提升程序性能和减少内存消耗具有重要意义。接下来我们由一段代码去打开Integer缓存机制的秘密。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Integer i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>      Integer i2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>      Integer i3 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>      Integer i4 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于答案是什么呢？我们接着往下看，等你看完就明白了。</p><blockquote><p>当你在你的Idea中写出这段代码的时候，Idea就会提示你要使用<code>equals()</code>方法区比较大小，因为<code>Integer</code>是对象，对象的值比较要用<code>equals()</code>方法，而不是使用<code>==</code>，这里我们主要是研究一下<code>Integer</code>的缓存机制。</p></blockquote><h3 id="Integer缓存是什么"><a href="#Integer缓存是什么" class="headerlink" title="Integer缓存是什么"></a>Integer缓存是什么</h3><p>Java的<code>Integer</code>类内部实现了一个静态缓存池，用于存储特定范围内的整数值对应的<code>Integer</code>对象。默认情况下，这个范围是-128至127。当通过<code>Integer.valueOf(int)</code>方法创建一个在这个范围内的整数对象时，并不会每次都生成新的对象实例，而是复用缓存中的现有对象。我们看一下<code>Integer.valueOf(int)</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>          <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>Integer.valueOf(int)</code>方法来说，由于这个方法经常用于将基本类型int转换为包装器对象，所以它使用了<code>@HotSpotIntrinsicCandidate</code>注解，这样HotSpot JVM可能会提供一种更为高效的内部实现来处理自动装箱操作。而<code>IntegerCache</code>是<code>Integer</code>内部的一个静态类，负责缓存整数对象。它在类加载时被初始化，创建并缓存范围内的所有整数对象。我们看一下<code>IntegerCache</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 缓存范围的下限，默认为-128  </span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 缓存范围的上限，初始化时动态计算（基于系统属性或默认值127）  </span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 存储在缓存范围内所有Integer对象的数组  </span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 静态初始化块，在类加载时执行  </span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 初始设定high为127  </span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 尝试从系统属性获取用户自定义的最大整数值  </span>        String integerCacheHighPropValue <span class="token operator">=</span>                  VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 如果系统属性存在并且可以转换为int类型，则更新high值  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 确保high至少为127，并且不超过Integer.MAX_VALUE允许的最大数组大小  </span>                h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 设置最终确定的high值  </span>        high <span class="token operator">=</span> h<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 初始化cache数组，长度等于缓存范围内的整数数量  </span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 使用循环填充cache数组，创建并存储对应的Integer对象  </span>        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 检查，确保缓存范围至少包含[-128, 127]  </span>        <span class="token comment" spellcheck="true">// 这是Java语言规范对小整数自动装箱共享的要求  </span>        <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 私有构造器，防止外部实例化此内部类的对象  </span>    <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>IntegerCache</code>类在Java虚拟机启动时创建了一个固定大小的数组，用于缓存指定范围内所有的<code>Integer</code>对象。这样在后续程序运行过程中，对于这些范围内的整数进行装箱操作时，可以直接从缓存中获取已存在的对象，以提升性能并减少内存开销。同时，它也提供了根据系统属性(<code>-Djava.lang.Integer.IntegerCache.high</code>)来自定义缓存上限的能力，并确保满足Java语言规范关于小整数自动装箱共享的规定。</p><p>在<code>Integer.value(int)</code>方法中，如果<code>int</code>的值在<code>IntegerCache</code>返回的<code>low</code>和<code>high</code>之内，则直接返回<code>IntegerCache</code>中缓存的对象，否则重新<code>new</code>一个新的<code>Integer</code>对象。</p><p>而文章开头示例中，我们使用<code>Interge i1 = 100</code>的方式其实是Java的自动装箱机制，整数字面量<code>100</code>是一个基本类型的int值。当赋值给一个<code>Integer</code>引用变量<code>i</code>时，编译器会隐式地调用<code>Integer.valueOf(int)</code>方法将这个基本类型的int值转换为<code>Integer</code>对象。</p><p>整数在编程中经常被使用，特别是在循环计数等场景中，通过缓存整数对象，可以大幅度减少相同整数值的对象创建，从而减小内存占用。</p><p>由此我们可以看出因为100在[-128, 127]之内，所以<code>i1 == i2</code>打印<code>true</code>，而1000不在[-128, 127]之内，所以<code>i3 == i4</code>打印<code>false</code>。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129233231.png" alt="image.png"></p><p>我们尝试使用<code>java.lang.Integer.IntegerCache.high</code>调整一下<code>high</code>为1000，然后看一下效果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129233728.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129233753.png" alt="image.png"><br>打印结果都是true。</p><p>当然这个上限不要随意去调整，调整之前，需要仔细评估应用程序的实际需求和性能影响。尽量选择在[-128, 127]范围内的整数值，以充分利用Integer缓存机制。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p><strong>比较：</strong> 由于缓存的存在，在-128至127之间的<code>Integer</code>对象在进行<code>==</code>运算符比较时，结果可能是<code>true</code>，因为它们指向的是同一个内存地址。而在缓存范围之外创建的<code>Integer</code>对象即使值相等，也会视为不同的对象，因此使用<code>==</code>比较会返回<code>false</code>。不论是否启用缓存，对于任何两个<code>Integer</code>对象，只要其包含的整数值相同，调用<code>equals()</code>方法始终会返回<code>true</code>。所以我们在比较对象时一定要使用<code>equals()</code>方法。</p></li><li><p><strong>不适用于所有场景：</strong> 当使用<code>new Integer(i)</code>直接创建<code>Integer</code>对象时，不会利用缓存。</p></li><li><p><strong>不要随意去扩展缓存的上下限</strong> </p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Integer缓存机制是Java中的一项性能优化措施，通过缓存一定范围内的整数对象，既能减小内存开销，又能提高性能。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Integer缓存机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+LiteFlow优雅解耦复杂核心业务</title>
      <link href="/article/springbootliteflowuse.html"/>
      <url>/article/springbootliteflowuse.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>基于上一篇<code>SpringBoot优雅使用责任链模式</code>解决处理一些耦合度过高的复杂业务的开发。本篇我们开始使用规则引擎<code>LiteFlow</code>去优化示例。本篇文章主要演示<code>LiteFlow</code>如何去解耦则的核心业务。关于<code>LiteFlow</code>的具体内容参见后续文章，记得点个关注哦。。。。</p><p><code>LiteFlow</code>是一款专注于逻辑驱动流程编排的轻量级框架，它以组件化方式快速构建和执行业务流程，有效解耦复杂业务逻辑。通过支持热加载规则配置，开发者能够即时调整流程步骤，将复杂的业务如价格计算、下单流程等拆分为独立且可复用的组件，从而实现系统的高度灵活性与扩展性，避免了牵一发而动全身的问题。旨在优化开发流程，减少冗余工作，让团队能够更聚焦于核心业务逻辑，而将流程控制层面的重任托付给该框架进行自动化处理。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>yomahub<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>liteflow<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.11</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>导入LiteFlow配置项，启用LiteFlow。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">liteflow</span><span class="token punctuation">:</span>    <span class="token key atrule">rule-source</span><span class="token punctuation">:</span> config/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>rule-source即我们的规则文件所在位置。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240126230728.png" alt="image.png"></p><h3 id="定义编排规则"><a href="#定义编排规则" class="headerlink" title="定义编排规则"></a>定义编排规则</h3><p>我们还是按照这个流程图去设计：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240127234330.png" alt="image.png"></p><p>按照流程图，我们使用<code>LiteFlow</code>的EL规则进行流程编排如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      // 定义一个if节点处理df/e      order_if = IF(order_k, THEN(order_d, order_f), order_e);      // 定义to_c的订单流程  用id标识流程为to_c      to_c = THEN(order_a, order_c, order_if).id("to_c");      // 定义to_b的订单流程  用id标识为流程to_b      to_b = THEN(order_b, order_c, order_if).id("to_b");      // 主流程      THEN(SWITCH(order_x).TO(to_c, to_b), order_h);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编排规则上看，很容易就反应出来上述业务流程图。<code>SWITCH()</code> 函数接受一个节点 <code>order_x</code> 作为参数，并根据SWITCH组件输出结果来决定流程的走向。这种方式使得业务流程的定义和执行更加直观和灵活。</p><p>LiteFlow的编排能力非常强大，它支持顺序、选择、循环、条件等多种流转模式。用户可以通过简单的配置，实现复杂的业务流程编排。编排可以通过XML、JSON或者代码的方式来定义。同时，LiteFlow还支持动态修改编排规则，使得系统能够在不重启的情况下，实时调整业务流程。它通过将业务流程拆分成独立的组件，并使用规则来定义组件之间的流转关系，实现了业务流程的灵活编排和变更。如上面的<code>SWITCH...TO</code>等。</p><p>然后我们在按照流程节点，去定义业务组件，实现具体的业务逻辑。</p><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><p>从流程图上看， 订单创建分为两种类型,<code>to_c</code>和<code>to_b</code>。然后分别进行两种订单的处理。我们先使用<code>LiteFlow</code>的<code>SWITCH</code>选择组件，根据订单类型选择要执行的链路或者节点。<br>一般我们会结合订单类型的枚举类进行使用。我们先创建一个订单类型的枚举类，枚举类中不同的订单类型对应不同的处理流程。如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">enum</span> OrderTypeEnum<span class="token punctuation">{</span>      <span class="token function">TO_C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"to_c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">TO_B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"to_b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**订单类型*/</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**订单处理的节点ID*/</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String chainId<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getChainId</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OrderTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>orderTypeEnum <span class="token operator">-</span><span class="token operator">></span> orderTypeEnum<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>chainId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的订单类型"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举中的<code>chainId</code>就对应<code>LiteFlow</code>中的订单流程<code>to_c</code>以及<code>to_b</code>。现在我们在<code>SWITCH</code>中返回对应的也任务流程节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_x"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"获取订单链路"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">processOrderType</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取流程入参参数  </span>    OrderParam orderParam <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 订单类型  </span>    Integer orderType <span class="token operator">=</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> OrderTypeEnum<span class="token punctuation">.</span><span class="token function">getChainId</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SWITCH</code> 组件的主要功能是在执行流程时根据预定义的条件进行分支。它通常用于处理流程中的决策点。如上述根据订单类型决定执行那个流程节点，如果是ToC订单（即orderType=1）就会走<code>to_c</code>流程，ToB订单就会走<code>to_b</code>订单。然后我们只需要各自关注处理ToC以及ToB订单的流程节点了。</p><p>接下来我们来定义处理订单的各业务节点。我们按照业务逻辑或者流程节点进行拆分成三个组件类。分别是处理<code>ToC</code>订单<code>ToCHandlerCmp</code>，处理<code>ToB</code>订单<code>ToBHandlerCmp</code>，以及公共逻辑组件<code>CommonHanldeCmp</code>。当然也可以根据业务逻辑再进行更为细致的拆分甚至不进行拆分都在放一个组件类中。</p><p>我们先使用<code>@LiteflowComponent</code>声明一个ToC订单处理的组件类。<code>@LiteflowComponent</code>注解用于将一个普通的Java类声明为LiteFlow框架中的组件。我们也可以不使用声明式组件，直接继承各组件的抽象类，比如常规组件<code>NoComponent</code>，Switch组件<code>NodeSwitchComponet</code>组件，IF组件<code>NodeIfComponet</code>等，我们会在后面的文章中具体讲解。<br>接下来我们的业务节点可以放在这个组件类中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToCHandleCmp</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在通过<code>@LiteflowMethod</code>定义组件内直接的节点方法。@LiteflowMethod注解则用于在组件类中声明可以被LiteFlow框架调用的方法。这个注解会指定该方法在流程中的节点类型（如普通节点、条件节点等）以及节点的一些属性（如节点ID、节点名称等）。在流程执行时，LiteFlow框架会根据流程定义中节点的配置来调用相应的组件方法，从而完成业务流程的执行。同理也是可以不使用这种声明式的方式，你也可以继承对应组件的抽象类后实现抽象方法也可以完成流程。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToCHandleCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_a"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"ANodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ANodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOC11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_d"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"DNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processD</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"DNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_f"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"FNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processF</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"FNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>node_id</code>的值即我们规则编排文件中表达式中对应的nodeId。</p><p>再定义处理ToB订单的流程组件以及方法<code>ToBHandleCmp</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToBHandleCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_b"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"BNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processB</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOB11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_e"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"ENodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processE</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ENodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再定义公共逻辑组件<code>CommonHanldeCmp</code>，公共组件也可以定义一些相同业务的处理节点以便可不同流程可以复用这些节点，也可以定一些逻辑条件的节点，比如<code>IF</code>组件节点，<code>SWITCH</code>组件节点或者<code>ITERATOR</code>循环组件节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHandleCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_x"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"获取订单链路"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">processOrderType</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取流程入参参数  </span>        OrderParam orderParam <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 订单类型  </span>        Integer orderType <span class="token operator">=</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> OrderTypeEnum<span class="token punctuation">.</span><span class="token function">getChainId</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_c"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"CNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processC</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_k"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"KNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processK</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"KNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_h"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"HNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processH</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"HNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@AllArgsConstructor</span>      <span class="token keyword">enum</span> OrderTypeEnum<span class="token punctuation">{</span>          <span class="token function">TO_C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"to_c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">TO_B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"to_b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**订单类型*/</span>          <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**订单处理的节点ID*/</span>          <span class="token keyword">public</span> <span class="token keyword">final</span> String chainId<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getChainId</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OrderTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>orderTypeEnum <span class="token operator">-</span><span class="token operator">></span> orderTypeEnum<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>chainId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的订单类型"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了上面的<code>SWITCH</code>选择组件以及CMMON普通组件外，他还有如下组件：</p><ul><li>条件组件：IF组件，条件组件用于在流程中进行条件判断。它可以返回布尔值（true/false），根据条件的结果决定流程的走向。在LiteFlow中，条件组件可以通过实现特定的接口或继承特定的类来定义，例如<code>NodeIfComponent</code>。用于<code>IF...ELIF...ELSE</code>编排。 相当于Java中的<code>if..else..</code>。</li><li>次数循环组件：FOR组件，用于固定次数的循环执行某个流程片段。用于<code>FOR...DO...</code>表达式编排。相当于Java中的<code>for(int i=0;i&lt;size;i++){//循环}</code>。</li><li>条件循环组件：WHILE组件，用于根据条件进行循环执行。它会不断检查指定的条件，只要条件满足，就会继续执行循环体。用于<code>WHILE...DO...</code>表达式编排。相当于Java中的<code>while(){//循环}</code>。</li><li>迭代循环组件：ITERATOR组件，类似于编程语言中的迭代器，用于遍历集合或数组等数据结构。可以对集合中的每个元素执行相同的操作。用于<code>ITERATOR...DO...</code>表达式编排。相当于Java中的<code>forEach</code>循环。</li><li>跳出循环组件：BREAK组件。用于在循环体内部满足特定条件时提前结束循环。它可以打破当前循环的执行流程，使流程跳出循环体，继续执行后续的逻辑。用于<code>FOR...DO...BREAK</code>,<code>WHILE...DO...BREAK</code>,<code>ITERATOR...DO...BREAK</code>表达式编排。相当于Java中的<code>break</code>。</li></ul><p>使用@LiteflowComponent和@LiteflowMethod进行声明式组件的开发，可以大大提高业务流程的灵活性和可维护性。通过将业务流程拆分成独立的组件，我们可以方便地对组件进行复用、测试和扩展。同时，通过简单的配置即可实现业务流程的调整和优化，而无需修改和重新编译代码。</p><h3 id="数据上下文"><a href="#数据上下文" class="headerlink" title="数据上下文"></a>数据上下文</h3><p><code>OrderContext</code>即为<code>LiteFlow</code>中的上下文。LiteFlow中的上下文（Context）是一个非常重要的概念，它是整个流程执行过程中的数据共享和传递的桥梁。上下文可以理解为流程中的“全局变量”或“共享数据区”，它存储了流程执行过程中需要用到的各种数据。这些数据可以是流程参数、业务数据、中间结果等。</p><p>LiteFlow中的每个组件都可以访问上下文，并从中获取所需的数据或将数据存入上下文中。组件之间通过上下文进行数据交换，而不需要直接相互调用或传递参数。这种设计方式降低了组件之间的耦合度，提高了流程的灵活性和可维护性。</p><p>上下文对象会随着流程的执行而传递，每个组件都可以访问和修改上下文中的数据。当流程执行完成后，可以通过上下文对象获取流程的执行结果和其他相关数据。</p><p>对于上下文我们可以将任意的Bean当做上下文进行传入。LiteFlow对上下文的Bean没有任何要求。我们可以传入一个或者多个上下文对象的class，也可以将一个或者多个初始化好的对象当做上下文传入。</p><pre class="line-numbers language-java"><code class="language-java">LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OrderContext orderContext1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  DataContext dataContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> orderContext1<span class="token punctuation">,</span> dataContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行器执行流程"><a href="#执行器执行流程" class="headerlink" title="执行器执行流程"></a>执行器执行流程</h3><p>我们使用<code>LiteFlow</code>执行器执行订单处理的流程：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> FlowExecutor flowExecutor<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runOrderFlowTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      OrderParam orderParam <span class="token operator">=</span> OrderParam<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OrderContext orderContext <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240126200213.png" alt="image.png"></p><p>LiteFlow的执行器（<code>FlowExecutor</code>）负责解析和执行定义好的业务流程。执行器接收流程定义和输入参数，然后按照流程定义的顺序和逻辑调用相应的组件来执行具体的业务操作。还可以通过执行器来启动、暂停、恢复和终止流程的执行。执行器还负责管理流程的上下文，确保数据在流程中的正确传递和共享。</p><p>LiteFlow的入参是在启动流程时传递给执行器的数据。入参可以是任何类型的对象，比如基本数据类型、自定义的Java Bean等。入参的传递方式取决于你在定义流程时指定的参数类型和传递方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 入参</span>OrderParam orderParam <span class="token operator">=</span> OrderParam<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过执行器flowExecutor 执行 流程</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  OrderContext orderContext <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>LiteFlow是一个现代化的规则引擎框架，融合了编排特性和规则引擎的所有特性。它可以将瀑布流式的代码，转变成以组件为核心概念的代码结构，组件与组件之间是解耦的，组件可以用脚本来定义，组件之间的流转全靠规则来驱动，可以任意编排。</p><p>LiteFlow非常适合用于解耦复杂逻辑。如果你要对复杂业务逻辑进行新写或者重构，用LiteFlow最合适不过。使用LiteFlow，你就可以把复杂的业务逻辑按业务流程将瀑布式代码分成一个个小组件，并定义好规则流程配置。这样，所有的组件，就能按照你的规则配置去进行复杂的流转。</p><p>本节我们只是简单的使用了一下LiteFlow，我们接下来会详细的去介绍LiteFlow强大的功能，欢迎关注。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> LiteFlow </tag>
            
            <tag> 流程引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里二面：SpringBoot可以同时处理多少个请求？当场懵了。。。。</title>
      <link href="/article/springbootmaxhandlerequest.html"/>
      <url>/article/springbootmaxhandlerequest.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>SpringBoot以其简洁高效的开发方式和强大的内嵌容器特性，为开发者提供了构建高性能后端服务的便利。然而，当面临高并发场景时，理解并合理配置Spring Boot应用以达到最佳的并发处理能力至关重要。在Spring Boot中，应用程序对HTTP请求的并发处理主要依赖于内嵌的Servlet容器（如Tomcat）。接下来我们以Tomcat为例谈谈这个问题。</p><blockquote><p>本文以SpringBoot2.7.0为例。</p></blockquote><p>在接下来讲解Tomcat工作线程池之前，你可以先了解一下Java线程池的工作原理，请参考这篇文章：<a href="https://mp.weixin.qq.com/s/jasS6Sp7LcaLs4qkuvatpw" target="_blank" rel="noopener">Java线程池最全详解</a></p><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>我们的程序实际上是运行在Tomcat里的。所以SpringBoot可以处理多少请求，其实也就是看Tomcat可以处理多少请求。Tomcat的工作线程池负责接收并处理这些请求。在SpringBoot中关于Tomcat工作项城池的参数可以在<code>spring-boot-autoconfigure</code>的依赖包中的<code>spring-configuration-metadata.json</code>中有如下四个参数控制Tomcat的工作线程池：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.threads.max"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Maximum amount of worker threads."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Threads"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">200</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.threads.min-spare"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Minimum amount of worker threads."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Threads"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.max-connections"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Maximum number of connections that the server accepts and processes at any given time. Once the limit has been reached, the operating system may still accept connections based on the \"acceptCount\" property."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">8192</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.accept-count"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Maximum queue length for incoming connection requests when all possible request processing threads are in use."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">100</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看一下这四个参数的含义：</p><ul><li><p>server.tomcat.threads.max：用于配置<code>Tomcat</code>内嵌服务器的工作线程池的最大工作线程数。工作线程用于处理接收到的HTTP请求，处理完毕后将返回到线程池中等待下一个请求。当并发请求数量小于等于 <code>threads.max</code> 时，<code>Tomcat</code>尽可能使用现有的工作线程来处理请求，如果并发请求数量超过了 <code>threads.max</code>，<code>Tomcat</code>不再创建新的工作线程，而是将请求放入队列等待。该值可以看做是一个临时工，如果并发请求的数量在<code>threads.min-spare</code>到<code>threads.max</code>之间，就会使用这些临时工线程进行处理。默认值为200。主要关注的是工作线程池，用于处理请求的线程数。适用于调整并发请求的处理能力。</p></li><li><p>server.tomcat.threads.min-spare：确定了工作线程池的最小空闲线程数量，即使没有请求需要处理，也会保持这些线程处于等待状态，以便快速响应新的请求。该值可以看做是一个长期工，如果并发请求数小于<code>min-spare</code>,就会使用这些线程去处理请求。默认值是10，即使没有活跃的请求，<code>Tomcat</code>也会保持至少 10 个空闲线程。</p></li><li><p>server.tomcat.max-connections：用于配置<code>Tomcat</code>内嵌服务器的连接池的最大连接数。即允许同时存在的最大连接数。这个连接数是针对整个连接池的，不仅仅是工作线程的数量。当并发请求数量导致服务器需要创建新的连接时，Tomcat 会检查连接池中的连接数是否已经达到了 <code>max-connections</code> 配置的最大值。如果已经达到最大值，新的连接请求将被放入等待队列中，直到有连接被释放。默认值8192。</p></li><li><p>server.tomcat.accept-count：用于配置<code>Tomcat</code>连接器所允许的最大等待接受连接的请求数（即等待队列）。当所有线程都在处理其他请求时，新的连接请求将会排队等待。如果队列已满，额外的连接将被拒绝。默认值是100。</p></li></ul><p>我们以饭馆的示例去说明这几个参数之间的关系：<br>我们把<code>Tomcat</code>比作一家热门的餐厅，每个顾客都是一个请求。餐厅里一直有一部分厨师一直待命，无论有没有顾客，确保随时能够处理点单。这部分厨师就是<strong>min-spare（长期工）</strong>,当餐厅遇到一些大的宴会时，餐厅老板就会从外面找过来一批厨师帮忙，这部分厨师就是临时工，<strong>临时工+长期工就是(max)</strong>。餐厅的座位就表示同时最大可以容纳啊就餐的顾客人数，即<strong>max-connections</strong>。假如某时餐厅生意火爆，餐厅的座位都坐满以后，此时餐厅就会想办法在餐厅门口放上一排座椅，可以让后来的顾客在这里等待，假如里面有顾客吃完，这时外面等待的顾客就可以进去用餐。如果餐厅门口的座椅也做满，再来的顾客就会离开。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128225903.png" alt></p><p>假如上述就是那家餐厅，2个绿色框代表长期工厨师即min-spare，3个红色框代表临时工厨师，共有5名厨师，即max数量，5个棕色的队列即餐厅椅子数量，即5个max-connections，餐厅最多可以容忍5名顾客吃饭，2个橘色队列代表门口等待区椅子数量，即2个accept-count。假如此时来了4个客人，那就可以区餐厅吃饭，如果来了7个客人，那么有5个客人进去吃饭，2个客人在门口等待，如果来了8个客人，那么有5个客人进去吃饭，2个客人在门口等待，剩下1个客人就会直接离开。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们创建一个SpringBoot项目，我们将上述四个参数分别修改为如下：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.tomcat.accept-count</span><span class="token punctuation">=</span><span class="token attr-value">2  </span><span class="token attr-name">server.tomcat.max-connections</span><span class="token punctuation">=</span><span class="token attr-value">5  </span><span class="token attr-name">server.tomcat.threads.max</span><span class="token punctuation">=</span><span class="token attr-value">5  </span><span class="token attr-name">server.tomcat.threads.min-spare</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在定义一个接口，用于模拟客户端请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMaxRequestController</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"maxRequest"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token keyword">public</span> String <span class="token function">testMaxRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前请求线程: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们启动项目，使用<code>JVisualVM</code>监测一下此时项目中的线程数为2个：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128231335.png" alt="image.png"></p><p>此时我们使用<code>Apifox</code>发起一个请求，观察线程数没有增长。我们在使用<code>Apifox</code>中模拟3个线程同时请求，发现此时线程数变成5个：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128232351.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129005649.png" alt></p><p>我们继续增加线程数到7个，我们发现线程数还是5个，因最大线程数等于5个：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128233213.png" alt="image.png"></p><p>后台请求全部成功：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129005304.png" alt="image.png"></p><p>我们继续增加线程数到8个，此时线城数依然是5个，设置请求超时时间为1秒，但是有一个请求失败：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129010330.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129010103.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129011159.png" alt="image.png"></p><p>服务端只处理了7个请求：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129010447.png" alt="image.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>SpringBoot可以同时处理多少个请求，需要看其内嵌的Sevlet处理线程的能力，以Tomcat为例，即Tomcat可以处理多少请求，这需要看配置文件中设置的<code>server.tomcat.accept-count</code>以及<code>server.tomcat.max-connections</code>的大小。Tomcat同时可以处理的请求为<code>server.tomcat.accept-count</code>加上 <code>server.tomcat.max-connections</code>。实际生产应用中我们需要根据服务器，硬件的配置等综合因素考虑后，调节这两个值，确保应用程序能够处理预期的并发量。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊日常开发中如何优雅的避免那无处不在的空指针异常</title>
      <link href="/article/javanpe.html"/>
      <url>/article/javanpe.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在Java编程语言中，<code>NullPointerException</code>（简称NPE）是一种常见的运行时异常，当程序试图访问或操作一个还未初始化（即值为null）的对象引用时，Java虚拟机就会抛出<code>NullPointerException</code>。如果我们在日常开发中，不能很好的去规避NPE，那么可能因为数据或者其他问题就会导致线上问题。。。很烦。。。。</p><p>阿里巴巴开发手册规约中也说明防止NPE，是程序员的基本素养。。。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240131003821.png" alt="image.png"></p><p>接下来我们先谈谈几种可能会出现空指针异常的方式。</p><h3 id="出现空指针异常的情况"><a href="#出现空指针异常的情况" class="headerlink" title="出现空指针异常的情况"></a>出现空指针异常的情况</h3><ul><li><strong>访问空对象的属性或调用空对象的方法</strong><br>当一个对象是null时，试图访问一个对象的属性或调用其方法，就会触发空指针异常。<pre class="line-numbers language-java"><code class="language-java">String text <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>User user = null;<br>String userName = user.getUserName();</p><pre><code>- **数组为null或者数组元素为null**当尝试访问数组中的某个索引处的元素，而该元素为`null`时，同样会导致空指针异常。```javaString[] strs = null;int length = strs.length;String[] strs = new String[3];  int length = strs[2].length();</code></pre><ul><li><strong>集合中null元素访问</strong><br>当集合中存在null元素，当我们遍历集合，访问到这个元素的属性或者方法时也会抛出NPE，这种情况也会出现在我们的日常开发中，有时候就会因为数据问题导致这种情况发生，常常也莫名其妙。。。。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>调用的方法返回null</strong><br>调用某个方法，期望其返回一个非null的对象，但实际返回了null。当然这种情况等同于访问空对象的属性或者方法。这在实际开发过程中极易出现的一种情况。比如我们使用<code>Mybatis</code>从数据库中查询一条记录时，数据不存在，就会返回null。这种情况尤为注意。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> User <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>User user <span class="token operator">=</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用基本数据类型的包装类</strong><br>在使用基本数据类型的包装类时，如果未正确初始化，再转成int时，可能导致空指针异常。</li></ul><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上大概是我想到或者常遇到的一些可能会发生NPE的情况，如果还有其他情况，可以贴出来讨论。</p><p>那么我们该如何避免NPE呢？</p><h3 id="避免NPE的几种方式"><a href="#避免NPE的几种方式" class="headerlink" title="避免NPE的几种方式"></a>避免NPE的几种方式</h3><ul><li><strong>访问对象前要谨慎</strong><br>在使用对象之前，始终检查它是否为null。这包括方法参数、返回值以及对象的属性。在访问对象的方法或属性之前，使用条件语句判断对象是否为null。比如我们在访问User对象前，一定要判null</li></ul><pre class="line-numbers language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>      String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Address address <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>address <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>          String coutry <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者我们的user是从一个方法中获取的，例如数据库中查询，那么我们在访问这个对象前，一定要判null，如果为null要抛出对应的业务异常，然后我们就可以在接口响应中对应返回错误的信息即可，此时就算是一个正常的流程了。这点尤为重要，一定要注意。</p><pre class="line-numbers language-java"><code class="language-java">User user <span class="token operator">=</span> userManager<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">""</span>当前查询的对象不存在<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于SpringBoot项目中捕获自定义业务异常，统一异常管理，统一结果返回，可以参考这篇文章：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一结果返回，统一异常处理，大牛都这么玩 | 码农Academy的博客</a></p></blockquote><p>当然如果使我们在写<code>User getUserById(Long id)</code>返回对象或者<code>List&lt;User&gt; listUserByIds(List&lt;Long&gt; idList)</code>时我们可以不返回<code>null</code>，可以返回一个对象默认信息或者一个空集合，这样调用方就不会出现NPE风险，当然我们不强制返回一个对象或者空集合，但是必须添加注释充分 说明什么情况下会返回null值。这也是阿里巴巴开发手册规约的建议。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240131003727.png" alt="image.png"></p><ul><li><strong>使用Optional类</strong><br>JDK8以上版本提供了<code>Optional</code>类，它是一个容器对象，可用于包装可能为null的值。我们可以使用它判断null问题，同时也解决了多层级访问问题，配合使用orElse时，会先执行orElse方法，然后执行逻辑代码，不管是否出现了空指针。</li></ul><pre class="line-numbers language-java"><code class="language-java">String country <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAddress<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Address<span class="token operator">:</span><span class="token operator">:</span>getCountry<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String country <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAddress<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Address<span class="token operator">:</span><span class="token operator">:</span>getCountry<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">defaultContry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> String <span class="token function">defaultContry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"CN"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用orElseThrow()方法，当Optional中的对象是一个null时我们直接抛出异常：</p><pre class="line-numbers language-java"><code class="language-java">String userName <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getUserName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"当前用户信息不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>使用断言避免空指针</strong><br>使用Java断言（assert）来检查变量是否为null。但要注意，断言通常在开发和测试阶段启用，而在生产环境中可能被禁用（在生产环境中，通常不会启用断言以避免不必要的性能开销以及防止潜在的错误信息泄漏）。</li></ul><pre class="line-numbers language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span> user <span class="token operator">!=</span> null <span class="token operator">:</span> <span class="token string">"user should not be null"</span><span class="token punctuation">;</span>Address address <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span> address <span class="token operator">!=</span> null <span class="token operator">:</span> <span class="token string">"address should not be null"</span><span class="token punctuation">;</span>  String coutry <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用@Nullable注解</strong><br>使用<code>javax.annotation.Nullable</code>注解，<code>@Nullable</code>注解通常用于标记一个方法的参数、返回值或者字段可能为null。这个注解并非Java标准库的一部分，但在一些第三方库（如JSR 305库中的<code>javax.annotation.Nullable</code>，以及Google Guava和JetBrains的Kotlin标准库等）中广泛使用，并且被许多IDE和静态分析工具支持。以便在编译期或开发工具中提示可能的NPE风险。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handlerUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Long userId <span class="token operator">=</span> 0L<span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handlerUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时IDEA就会警告会出现NPE风险<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130235558.png" alt="image.png"></p><ul><li><strong>借助工具扫描代码</strong><br>在Java开发中，我们还可以使用以下工具扫描代码以发现潜在的空指针异常风险。</li></ul><ol><li><strong>IntelliJ IDEA</strong>：内置了强大的静态代码分析器，能够检测出可能的NPE和其他代码问题。 </li><li><strong>SonarQube</strong> / <strong>SonarLint</strong>：提供持续集成和本地IDE插件形式的静态代码分析，能找出潜在的空指针以及其他质量或安全问题。Sonar可以定时扫描仓库中的代码，可以发现代码中的一些潜在风险，可以通过一些通知例如邮件等告知代码提交者这段代码的风险。</li><li><strong>FindBugs</strong>（现更名为SpotBugs）：另一个开源的静态分析工具，能够发现潜在的bug，包括可能导致NPE的情况。</li><li><strong>阿里巴巴Java开发规约插件</strong>： 对于Eclipse和IntelliJ IDEA都有相应的插件版本，基于阿里巴巴内部Java编码规范，包含了对可能出现NPE情况的检测。</li></ol><h3 id="补充一点"><a href="#补充一点" class="headerlink" title="补充一点"></a>补充一点</h3><p>在JDK 17中引入的Helpful NullPointerExceptions特性确实增强了空指针异常信息的准确性与可用性。当发生NullPointerException时，JVM现在能够提供更精确的位置信息，特别是在链式调用场景下，它会指出导致空指针异常的具体对象引用。这有助于开发者更快地定位到代码中的问题所在，无需通过堆栈跟踪逐层分析来判断哪个对象引用为null。<br>假如我们访问<code>user.getAddress().getCountry().length()</code>时，在JDK17以前，如果发生了空指针异常，他只会打印出来发生了空指针异常，但是并没有告知到底是user对象还是address对象还是coutnry发生了异常：</p><pre class="line-numbers language-text"><code class="language-text">Exception in thread "main" java.lang.NullPointerException    at com.study.base.core.base.NpeTest.main(NpeTest.java:23)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是在JDK17以后，借助Helpful NullPointerExceptions特性，异常信息将更加精确，可能会类似打印这样的信息，精确到那个值发生了空指针异常：</p><pre class="line-numbers language-text"><code class="language-text">Exception in thread "main" java.lang.NullPointerException: Cannot invoke "Address.getCountry()" because "user.address" is null    at com.study.base.core.base.NpeTest.main(NpeTest.java:23)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这又多了一个升级JDK到17以上的理由。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>NullPointerException（NPE）是Java开发中常见的运行时异常，源于对未初始化或已置为null的对象引用进行操作。在实际开发过程中，进行非空检查、使用Optional类以及采用Null安全注解以及使用检查工具等策略可以有效避免此类异常的发生。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 空指针异常 </tag>
            
            <tag> NullPointerException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊BigDecimal使用时的陷阱</title>
      <link href="/article/javabigdecimal.html"/>
      <url>/article/javabigdecimal.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在Java开发中，我们常常需要处理精确的数值计算，特别是在金融领域或其他要求高精度的场景。而为了避免浮点数运算中可能引发的精度丢失问题，Java提供了BigDecimal类，它被设计用于处理精确的十进制数值。</p><p>BigDecimal是Java中用于处理高精度数值计算的类，它提供了丰富的方法来支持基本的数学运算，包括加法、减法、乘法和除法等。除了基本运算，BigDecimal还支持比较操作和取整操作，允许设置小数位数、指定舍入模式等。此外，它还提供了一系列附加功能，例如转换为科学计数法、格式化输出以及判断是否为整数等。这使得BigDecimal成为处理金融、科学等领域需要高精度计算的理想选择。通过利用BigDecimal的强大功能，开发者可以确保在涉及复杂数值计算时获得准确而可靠的结果。</p><p>然而，在使用BigDecimal的过程中，如果我们使用不当的话，就会造成一些莫名其妙的bug。下面我们就来聊一聊使用BigDecimal不当所带来的”灾难”。</p><h3 id="BigDecimal构造器使用不当"><a href="#BigDecimal构造器使用不当" class="headerlink" title="BigDecimal构造器使用不当"></a>BigDecimal构造器使用不当</h3><p>假如现在有一个浮点类型值<code>0.01</code>，我们要给转换为BigDecimal，以便我们做一些原酸。那么我们就会这么做：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal1<span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal2<span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal3 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么这三个BigDecimal的对象的值各是多少呢？输出结果如下：</p><pre><code>0.010000000000000000208166817117216851329430937767028808593750.010.01</code></pre><p>为何出现如此差异呢？</p><p>当使用<code>new BigDecimal(0.01)</code>时，传入的是浮点数，因为浮点数在计算机中以二进制形式表示，0.01在二进制中是无限循环小数，导致转换为BigDecimal时发生了精度丢失。</p><p>而使用<code>new BigDecimal(&quot;0.01&quot;)</code>时，由于字符串表示形式准确地包含了小数点和所有位数信息，因此这个构造函数能够精确无误地解析并存储这个数值，不存在浮点数精度问题。<strong>也是官方推荐的构建BigDecimal的方式。</strong></p><p>我们使用<code>BigDecimal.valueOf(0.01)</code>时，方法首先通过 <code>Double.toString(0.01)</code> 将传入的 <code>double</code> 类型数值转换为其标准字符串表示形式，在通过<code>new BigDecimal(Strin val)</code>去构建BigDecimal。其源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> BigDecimal <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Reminder: a zero double returns '0.0', so we cannot fastpath  </span>    <span class="token comment" spellcheck="true">// to use the constant ZERO.  This might be important enough to    </span>    <span class="token comment" spellcheck="true">// justify a factory approach, a cache, or a few private    </span>    <span class="token comment" spellcheck="true">// constants, later.    </span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用equals-方法进行数值比较"><a href="#使用equals-方法进行数值比较" class="headerlink" title="使用equals()方法进行数值比较"></a>使用equals()方法进行数值比较</h3><p>假如我们要比较下面两个值的大小：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.010"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal6<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>decimal7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal6<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>decimal7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre><code>false0 </code></pre><p>结果显示<code>equals()</code>方法返回不相等，而<code>compareTo()</code>方法返回相等。为什么会出现如此的差异？</p><p>我们先看一下<code>BigDecimal</code>的<code>equals()</code>，发现<code>BigDecimal</code>重写了<code>equals()</code>方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      BigDecimal xDec <span class="token operator">=</span> <span class="token punctuation">(</span>BigDecimal<span class="token punctuation">)</span> x<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 比较两个值的精度    </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">!=</span> xDec<span class="token punctuation">.</span>scale<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>intCompact<span class="token punctuation">;</span>      <span class="token keyword">long</span> xs <span class="token operator">=</span> xDec<span class="token punctuation">.</span>intCompact<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> INFLATED<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>xs <span class="token operator">==</span> INFLATED<span class="token punctuation">)</span>              xs <span class="token operator">=</span> <span class="token function">compactValFor</span><span class="token punctuation">(</span>xDec<span class="token punctuation">.</span>intVal<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> xs <span class="token operator">==</span> s<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xs <span class="token operator">!=</span> INFLATED<span class="token punctuation">)</span>          <span class="token keyword">return</span> xs <span class="token operator">==</span> <span class="token function">compactValFor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inflated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>xDec<span class="token punctuation">.</span><span class="token function">inflated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法的注释中写道：与 compareTo 不同，此方法仅当两个 BigDecimal 对象在值和小数位数上相等时才认为它们相等（因此，使用此方法进行比较时，2.0 不等于 2.00）。不仅比较两个 <code>BigDecimal</code> 实例的数值是否相等，还要求它们的标度（scale）完全一致。</p><p>而 <code>compareTo()</code> 方法则专门针对数值大小进行了设计，它只比较两个 <code>BigDecimal</code> 对象的实际数值大小，不关心它们的标度差异。这意味着即使两个 <code>BigDecimal</code> 对象的小数位数不同，只要数值相同，<code>compareTo()</code> 方法也能正确地判断它们在数值上的相等性。</p><p>在实际开发中，当你仅需要判断两个 <code>BigDecimal</code> 是否数值相等时，通常推荐使用 <code>compareTo()</code> 方法，并检查返回值是否为 0，而不是直接使用 <code>equals()</code> 方法。如果确实需要同时判断数值与标度，则可以使用 <code>equals()</code> 方法。</p><h3 id="除法运算未指定舍入模式"><a href="#除法运算未指定舍入模式" class="headerlink" title="除法运算未指定舍入模式"></a>除法运算未指定舍入模式</h3><p>使用BigDecimal进行除法运算时，一定要正确的使用舍入模式，避免舍入误差引起的问题，并且有时候出现结果是无限小数，程序会抛出异常。例如：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal10 <span class="token operator">=</span> decimal8<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>decimal9<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal10<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时会抛出异常：</p><pre><code>Exception in thread &quot;main&quot; java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</code></pre><p><code>divide()</code>方法的结果是一个非终止（无限）的小数扩展，并且没有精确的十进制表示形式可以完全存储到 <code>BigDecimal</code> 对象中时，就会触发这个异常。如果不指定合适的舍入模式或精度，当除不尽的结果无法准确转换为有限长度的十进制数字时，就会抛出此异常。</p><p>为了避免这个异常，我们需要制定结果精度：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal10 <span class="token operator">=</span> decimal8<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>decimal9<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal10<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>0.33</code></pre><p>关于舍入模式的值如下：</p><pre><code>RoundingMode.UP：向远离零的方向舍入RoundingMode.DOWN：向靠近零的方向舍入RoundingMode.CEILING：向正无穷方向舍入RoundingMode.FLOOR：向负无穷方向舍入RoundingMode.HALF_UP：四舍五入，如果舍弃部分大于等于 0.5RoundingMode.HALF_DOWN：四舍五入，如果舍弃部分大于 0.5RoundingMode.HALF_EVEN：银行家舍入法，遵循 IEEE 754 标准</code></pre><p>当然我们在指定舍入模式时一定要谨慎，要充分了解精度设置所带来的误差对于业务的影响。</p><h3 id="转换double丢失精度"><a href="#转换double丢失精度" class="headerlink" title="转换double丢失精度"></a>转换double丢失精度</h3><p>我们在使用<code>doubleValue()</code>方法将BigDecimal转为double可能引入精度丢失。</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.141592653589793238"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> d <span class="token operator">=</span> decimal11<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre><code>3.141592653589793</code></pre><p><code>BigDecimal</code> 类型转换为 <code>double</code> 类型时可能会出现精度问题。由于 <code>double</code> 是一种 IEEE 754 标准的二进制浮点数格式，它在计算机内存中是以近似值存储的，因此无法精确表示所有十进制小数。</p><p>当一个 <code>BigDecimal</code> 对象包含不能被精确表示为 <code>double</code> 类型的小数值时，转换过程中会发生舍入误差。在实际业务中如果要求高精度计算或绝对无损的数值转换，应该避免直接将 <code>BigDecimal</code> 转换为 <code>double</code>，应当保持使用 <code>BigDecimal</code> 进行计算以确保精度。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在处理精确数值计算时，BigDecimal是Java中一个强大的工具，但在使用过程中需要注意一些潜在的问题。避免使用浮点数构造BigDecimal，而是使用String类型的构造器，在进行除法运算时一定要指定舍入模式，谨慎指定舍入模式，使用compareTo比较BigDecimal的值，要使用BigDecimal进行高精度的运算。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为二面：SpringBoot如何自定义Starter？</title>
      <link href="/article/springbootcustomstarter.html"/>
      <url>/article/springbootcustomstarter.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>Spring Boot的自动配置机制为开发人员提供了一种轻松集成和配置各种功能的便捷方式。然而，随着项目的复杂性增加，更好地组织和分享通用功能变得至关重要。自定义Starter成为了理想的解决方案，旨在简化项目的依赖管理和自动配置，使开发者能够迅速而灵活地集成特定的功能模块。本文将深入探讨在Spring Boot中如何创建自定义Starter，为构建模块化且易维护的应用提供有力的支持。</p><p>接下来我们来实现一个自定义的<code>starter</code>。</p><h3 id="实现自定义Starter"><a href="#实现自定义Starter" class="headerlink" title="实现自定义Starter"></a>实现自定义Starter</h3><p>首先，我们需要明确自定义starter的目标功能，如提供特定领域的服务或集成第三方库。比如我们创建一个<code>coderacademy-spring-boot-starter</code>的starter，用于提供某些服务。例如我们的服务就实现一个打印功能：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello 码农Academy！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>本文旨在介绍如何自定义starter，故而starter的功能不是本文的主要内容，后续我们会提供一个基于注解实现ES操作/搜索的服务的starter。感兴趣的，点个关注哦~</p></blockquote><h4 id="创建项目结构"><a href="#创建项目结构" class="headerlink" title="创建项目结构"></a>创建项目结构</h4><p>我们创建一个名为<code>springboot-coderacademy-starter</code>的项目，在<code>pom.xml</code>中设置<code>groupId</code>，<code>artifactId</code>还有<code>version</code>。其中<code>groupId</code>与<code>artifactId</code>应反映starter的名称。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在引入一些我们需要是用到的依赖，比如我们要使用<code>@Configuration</code>，<code>@EnableConfigurationProperties</code>等注解：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>spring-boot-configuration-processor</code>这个依赖主要用于IDEA支持和编译时生成元数据。</p><blockquote><p>本文使用的springboot版本为2.7.0</p></blockquote><h4 id="创建自动配置类"><a href="#创建自动配置类" class="headerlink" title="创建自动配置类"></a>创建自动配置类</h4><p>自动配置类负责定义Spring Boot应用程序中的通用配置和功能。这个类通常使用<code>@Configuration</code>注解进行标记，在这个类中注入服务、组件或其他你需要自动配置的对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>coderacademy<span class="token punctuation">.</span>service<span class="token punctuation">.</span>CoderAcademyService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: &lt;p>&lt;/p > * @author: 码农Academy * @create: 2024/1/31 14:38 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定自动装配类"><a href="#指定自动装配类" class="headerlink" title="指定自动装配类"></a>指定自动装配类</h4><p>在<code>resources</code>文件夹下创建一个<code>META-INF/spring.factories</code>文件，在这个文件中指定自动装配类<code>CoderAcademyAutoConfig</code>：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>META-INF/spring.factories</code>文件中，<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>是一个特殊的键，它的值是一个包含要应用的自动配置类的全限定名列表。当应用启动时，SpringBoot的引导过程会扫描所有已引入jar包中的<code>spring.factories</code>文件，并根据<code>EnableAutoConfiguration</code>键下的类来加载和执行相应的自动配置逻辑。</p><p>当然如果不使用这个配置，在调用方使用<code>@ComponentScan</code>也可以扫描到<code>CoderAcademyAutoConfig</code>。但是这跟Starter的设计理念相悖。在Starter的设计中，一般不推荐调用方手动进行额外的扫描。这是因为调用方引入了Starter，就应该依赖于 Starter提供的自动配置。手动扫描可能会导致不必要的麻烦，例如循环依赖、配置类的重复加载等问题。</p><p>假如我们现在没有其他的配置了，比如说一下额外的属性配置，那我们就可以打包与发布了。</p><h4 id="打包与发布"><a href="#打包与发布" class="headerlink" title="打包与发布"></a>打包与发布</h4><p>此时我们就可以将自定义Starter打包，并发布到Maven仓库或其他仓库管理工具。</p><blockquote><p>本地开发时，可以直接install。不必发不到私服。</p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我们新建一个调用方的项目，在其中引入<code>coderacademy-spring-boot-starter</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们编写测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">class</span> <span class="token class-name">SpringbootCodeApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> CoderAcademyService coderAcademyService<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCoderAcademy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       String str <span class="token operator">=</span> coderAcademyService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCoderAcademyService</span><span class="token punctuation">(</span>CoderAcademyService coderAcademyService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coderAcademyService <span class="token operator">=</span> coderAcademyService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240201173812.png" alt="image.png"></p><p>这样一个很简单的Starter就完成了。<br>当然在实际开发中，我们还需要一些自定义配置项需要注入到Starter中，才可以提供完整的服务。</p><h4 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h4><p>我们新建一个<code>CoderAcademyProperties</code>类用于接收，调用方在自己项目中的<code>application.yaml</code>或者其他的配置中心配置的信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"码农Academy"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ConfigurationProperties</code> 是 SpringBoot中用于绑定外部配置到Bean的属性上，<code>prefix</code>属性指定了配置前缀。这样我们就可以在调用方的<code>application.yml</code>中配置以<code>coderacademy</code>为前缀的信息。这里我们也给了默认值。</p><p>然后我们将这个配置注入到<code>CoderAcademyService</code>中去。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CoderAcademyProperties coderAcademyProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello "</span><span class="token operator">+</span> coderAcademyConfig<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CoderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coderAcademyProperties <span class="token operator">=</span> coderAcademyProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们改动一下<code>CoderAcademyService</code>的AutoConfig。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我重新<code>Deploy</code>之后，然后在调用方配置一下<code>CoderAcademyProperties</code>中对应的属性：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">coderacademy.name</span> <span class="token punctuation">=</span> <span class="token attr-value">CoderAcademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次跑一下单测：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240201194917.png" alt="image.png"></p><p>在实际开发场景中，我们有时会遇到这样的需求：调用方希望根据自身项目的需求灵活定义配置项，无需严格遵循<code>CoderAcademyProperties</code>中预设的模式（例如<code>coderacademy.name</code>）。例如，他们可能倾向于通过自定义属性<code>customer.starter.name</code>来代替，并将这个属性值映射到其项目的配置文件中。随后，在调用方自己的<code>@Configuration</code>类里，基于这些个性化配置来创建一个<code>CoderAcademyService</code>实例。</p><p>然而，问题在于，Starter模块内部预先提供了一个默认的<code>CoderAcademyService</code> Bean定义。当调用方在其应用上下文中也声明了同类型的Bean时，这将触发Spring容器中的Bean冲突和初始化异常。为了解决这个问题，我们在设计<code>Starter</code>时需要考虑到这一点，我们在自动配置类中利用<code>@ConditionalOnMissingBean</code>注解来确保仅在容器中尚无<code>CoderAcademyService</code> Bean时才进行创建操作。这样就避免了重复注册同一类型Bean导致的问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CoderAcademyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在调用方设计一个配置类，用于创建一个<code>CoderAcademyService</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${customer.coderacademy.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String customerName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>customerName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用方的<code>application.properties</code>加上<code>customer.coderacademy.name</code>配置。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">customer.coderacademy.name</span> <span class="token punctuation">=</span> <span class="token attr-value">customer,coderacademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们再次在调用方执行：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202102135.png" alt="image.png"></p><h4 id="属性配置提示"><a href="#属性配置提示" class="headerlink" title="属性配置提示"></a>属性配置提示</h4><p>我们在使用其他的官方<code>Starter</code>时在<code>application.properties</code>或者<code>application.yml</code>配置相关属性时，IDEA会自动给出属性的Key的提示，以及给出默认值。那么在自定义<code>Starter</code>中该如何实现这功能呢？其实这就需要用到了我们引入的<code>spring-boot-configuration-processor</code>依赖。</p><p><code>spring-boot-configuration-processor</code> 是 Spring Boot 提供的一个注解处理器，用于处理 <code>@ConfigurationProperties</code> 注解，生成配置属性的元数据，以提供更好的 IDE 支持和配置文件提示。注解处理器会扫描项目中标注了<code>@ConfigurationProperties</code> 注解的类，然后生成包含有关这些配置属性的详细信息的 <code>spring-configuration-metadata.json</code>文件。该文件位于<code>META-INF</code>下。这个元数据文件包含了配置属性的描述、类型、默认值等信息，以提供更好的代码提示和文档生成功能。元数据文件被 IDE（如 IDEA、Eclipse）使用，用于提供更强大的代码提示和补全功能。开发者在编辑配置文件时可以看到配置属性的描述、类型等信息，更容易正确地配置应用程序。</p><p>当然添加依赖之后，我们还需要添加Maven的插件（如果使用的是Maven）。</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们执行<code>mvn clean -U install -DskipTests</code>命令后，就可以在target下的<code>META-INF</code>就可以看见这个元数据文件。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202143323.png" alt="image.png"></p><p>我们在重新打包之后，在调用方的<code>application.properties</code>中配置属性信息时，可以看到效果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202143528.png" alt="image.png"></p><h4 id="配置文件默认值"><a href="#配置文件默认值" class="headerlink" title="配置文件默认值"></a>配置文件默认值</h4><p>在上述示例中，我们在<code>CoderAcademyProperties</code>代码中显示的给<code>name</code>赋值了一个默认值。这种方式实现也可以，但是不够优雅，我们换一种优雅的方式去实现配置的默认值设置。我们该用设置一个存储默认值的配置文件<code>coderacademy-default.properties</code>，从这个文件绑定配置的默认值。</p><p>我们在<code>resources/META-INF</code>下创建一个<code>coderacademy-default.properties</code>。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">coderacademy.name</span> <span class="token punctuation">=</span> <span class="token attr-value">Default CoderAcademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在<code>CoderAcademyAutoConfig</code>中使用<code>@PropertySource</code>将这这个默认文件中的配置加载绑定到Bean中即<code>CoderAcademyProperties</code>中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyPropertiesAutoConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CoderAcademyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CoderAcademy Default Properties"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"classpath:/META-INF/coderacademy-default.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在SpringBoot应用中，通过<code>application.properties</code>或<code>application.yml</code>设置的属性具有较高的优先级。如果使用<code>@PropertySource</code>加载的属性与前者有冲突，则会被后者覆盖。</p><p>我们在调用方直接使用<code>Starter</code>中创建的<code>CoderAcademyService</code>，看一下效果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202150918.png" alt="image.png"></p><p>即此时使用的是<code>coderacademy-default.properties</code>中配置的默认值。<br>我们在调用方配置<code>coderacademy.name</code>的值</p><pre class="line-numbers language-properites"><code class="language-properites">coderacademy.name = This is CoderAcademy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次运行一下数据</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202150948.png" alt="image.png"></p><p>至此一个自定义的<code>Starter</code>就完成了。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>项目架构：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202153807.png" alt="image.png"></p></li><li><p>依赖：</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>服务配置信息</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略get set方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CoderAcademyProperties</code>主要作用是为了绑定<code>application.properites</code>中配置信息。其默认的配置文件<code>coderacademy-default.properties</code>：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">coderacademy.url</span><span class="token punctuation">=</span><span class="token attr-value">https://www.coderacademy.online/  </span><span class="token attr-name">coderacademy.port</span><span class="token punctuation">=</span><span class="token attr-value">8080  </span><span class="token attr-name">coderacademy.user-name</span><span class="token punctuation">=</span><span class="token attr-value">CoderAcademy  </span><span class="token attr-name">coderacademy.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>服务配置类<br>新建一个<code>CoderAcademyConfig</code>用于创建<code>CoderAcademyService</code>服务。<code>CoderAcademyProperties</code>只作为服务的配置信息，主要参与绑定外部配置文件中的配置信息。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略 get  set</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建一个将<code>CoderAcademyProperties</code>的参数绑定到配置类<code>CoderAcademyConfig</code>的一个自动装配类<code>CoderAcademyPropertiesAutoConfig</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CoderAcademy Default Properties"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"classpath:/META-INF/coderacademy-default.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyPropertiesAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyConfig <span class="token function">coderAcademyConfig</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyConfig coderAcademyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> coderAcademyConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>服务类<br>服务类中就是用<code>CoderAcademyConfig</code>创建。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CoderAcademyConfig coderAcademyConfig<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">connectDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Connect to "</span> <span class="token operator">+</span> coderAcademyConfig<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> coderAcademyConfig<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" successfully!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CoderAcademyService</span><span class="token punctuation">(</span>CoderAcademyConfig coderAcademyConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coderAcademyConfig <span class="token operator">=</span> coderAcademyConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个服务自动装配类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyPropertiesAutoConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyConfig coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>META-INF/spring.factories</code>下中使用<code>EnableAutoConfiguration</code>指定自动配置类。</p><pre class="line-numbers language-xml"><code class="language-xml">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig,com.springboot.starter.coderacademy.config.CoderAcademyPropertiesAutoConfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时就可以把这个Starter打包推到私服，就可以使用了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自定义Spring Boot Starter的原理是在应用启动时，SpringBoot扫描含有spring.factories的jar包，加载其中的org.springframework.boot.autoconfigure.EnableAutoConfiguration条目。引入自定义starter后，相应的自动配置类会被检测并加载到Spring容器执行。通过条件注解等机制，可根据用户提供的配置信息或其他Bean的存在动态配置和初始化Bean，实现功能的自动化装配。自定义starter体现了SpringBoot模块化和可扩展性，简化了依赖管理和配置，使开发者能迅速构建具有特定功能的应用。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 自定义Starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：Mysql千万级大表如何进行深度分页优化</title>
      <link href="/article/mysqloffset.html"/>
      <url>/article/mysqloffset.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>假如有一张千万级的订单表，这张表没有采用分区分表，也没有使用ES等技术，分页查询进行到一定深度分页之后（比如1000万行后）查询比较缓慢，我们该如何进行优化？</p><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>订单表结构如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_order<span class="token punctuation">`</span> <span class="token punctuation">(</span>      <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>order_no<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单编号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'客户编号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>order_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>warehouse_code<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'发货地仓库编码'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人国家'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>state<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人州'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人城市'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>street<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">256</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人街道'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>zip_code<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人邮编'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>contact_email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">128</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人邮箱'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>contact_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人姓名'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>contact_mobile<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人手机号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>deleted<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否已被删除'</span><span class="token punctuation">,</span>      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_customer<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>deleted<span class="token punctuation">`</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_create_time<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>deleted<span class="token punctuation">`</span> <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'销售订单表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>Mysql</code>版本为8.0。我们使用Python脚本向表中插入2000万条数据。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql  <span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker  <span class="token keyword">import</span> random  <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime  <span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor  <span class="token comment" spellcheck="true"># MySQL 连接配置  </span>db_config <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'your_database_host'</span><span class="token punctuation">,</span>    <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'your_database_user'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'your_database_password'</span><span class="token punctuation">,</span>    <span class="token string">'database'</span><span class="token punctuation">:</span> <span class="token string">'your_database_name'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 创建 MySQL 连接  </span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token operator">**</span>db_config<span class="token punctuation">)</span>  cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 Faker 生成模拟数据  </span>fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取国家下发货仓库编码  </span><span class="token keyword">def</span> <span class="token function">generate_warehousecode</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> country <span class="token operator">==</span> <span class="token string">"US"</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">"US-"</span><span class="token operator">+</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"WEST"</span><span class="token punctuation">,</span> <span class="token string">"EAST"</span><span class="token punctuation">,</span> <span class="token string">"MIDDLE"</span><span class="token punctuation">,</span> <span class="token string">"SOUTH"</span><span class="token punctuation">,</span> <span class="token string">"NORTH"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-0"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> country <span class="token operator">+</span> <span class="token string">"00"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 插入 t_order 表数据（多线程并发，每个线程插入1万条，共2000个线程）  </span><span class="token keyword">def</span> <span class="token function">insert_data_thread</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 创建 MySQL 连接  </span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token operator">**</span>db_config<span class="token punctuation">)</span>      cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>      order_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          order_no <span class="token operator">=</span> <span class="token string">"OC"</span><span class="token operator">+</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 取前16位  </span>        customer_no <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>        order_status <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          country <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>              <span class="token punctuation">[</span><span class="token string">"CA"</span><span class="token punctuation">,</span> <span class="token string">"US"</span><span class="token punctuation">,</span> <span class="token string">"MX"</span><span class="token punctuation">,</span> <span class="token string">"JP"</span><span class="token punctuation">,</span> <span class="token string">"UK"</span><span class="token punctuation">,</span> <span class="token string">"TR"</span><span class="token punctuation">,</span> <span class="token string">"DE"</span><span class="token punctuation">,</span> <span class="token string">"ES"</span><span class="token punctuation">,</span> <span class="token string">"FR"</span><span class="token punctuation">,</span> <span class="token string">"IT"</span><span class="token punctuation">,</span> <span class="token string">"NL"</span><span class="token punctuation">,</span> <span class="token string">"PL"</span><span class="token punctuation">,</span> <span class="token string">"SE"</span><span class="token punctuation">,</span> <span class="token string">"BR"</span><span class="token punctuation">,</span> <span class="token string">"CN"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          warehouse_code <span class="token operator">=</span> generate_warehousecode<span class="token punctuation">(</span>country<span class="token punctuation">)</span>          state <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>          city <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>          street <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span>          zip_code <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>          contact_email <span class="token operator">=</span> fake<span class="token punctuation">.</span>email<span class="token punctuation">(</span><span class="token punctuation">)</span>          contact_name <span class="token operator">=</span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span>          contact_mobile <span class="token operator">=</span> fake<span class="token punctuation">.</span>phone_number<span class="token punctuation">(</span><span class="token punctuation">)</span>          create_time <span class="token operator">=</span> fake<span class="token punctuation">.</span>date_time_between<span class="token punctuation">(</span>start_date<span class="token operator">=</span>datetime<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          update_time <span class="token operator">=</span> create_time          deleted <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 默认未删除  </span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""              INSERT INTO t_order (                order_no, customer_no, order_status, warehouse_code, country,                state, city, street, zip_code, contact_email, contact_name,                contact_mobile, create_time, update_time, deleted            )            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)        """</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>order_no<span class="token punctuation">,</span> customer_no<span class="token punctuation">,</span> order_status<span class="token punctuation">,</span> warehouse_code<span class="token punctuation">,</span> country<span class="token punctuation">,</span>                state<span class="token punctuation">,</span> city<span class="token punctuation">,</span> street<span class="token punctuation">,</span> zip_code<span class="token punctuation">,</span> contact_email<span class="token punctuation">,</span> contact_name<span class="token punctuation">,</span>                contact_mobile<span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> deleted<span class="token punctuation">)</span><span class="token punctuation">)</span>          order_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>lastrowid<span class="token punctuation">,</span> order_no<span class="token punctuation">,</span> customer_no<span class="token punctuation">,</span> create_time<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保存插入的行的 ID  </span>    <span class="token comment" spellcheck="true"># 提交 t_order 数据插入  </span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>thread_id<span class="token operator">+</span> <span class="token string">"已经跑完10000条数据。。。。。。。。。"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 关闭数据库连接  </span>    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 ThreadPoolExecutor 并发插入  </span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 可以根据需要调整最大线程数  </span>    executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>insert_data_thread<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123201518.png" alt="image.png"></p><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>导出数据时我们需要按照时间倒序。所以我们先执行以下sql查询前100条</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>共花费210ms。执行计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123201659.png" alt="image.png"></p><p>然后我们继续执行sql，我们从第100万行开始取100条数据：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时耗时3分2秒，耗时明显增加。执行计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123202248.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123202322.png" alt="image.png"><br>由执行计划看，此时索引已经失效了。。。。</p><p>我们继续执行sql，从第1000万行开始取100条数据：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">10000000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时耗时4分14秒，时间真是太长了，执行计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203426.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123202846.png" alt="image.png"></p><p>后面还有接近1000万条数据没有取出来，直接就废了。</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>当我们使用 <code>LIMIT offset, count</code> 查询语句进行深度分页查询时，例如 <code>LIMIT 10000000,100</code> ，会发生以下过程：</p><ol><li>MySQL首先会根据给定条件从相应的索引树中查找m+n条记录。对于聚集索引来说，它直接找到需要的结果即丢弃前<code>offset</code>条数据，返回<code>count</code>条数据并返回；而对于二级索引，则可能涉及回表操作。</li><li>如果使用的是二级索引，在查到m+n条记录后还需要通过这些记录所关联的主键<code>ID</code>去聚集索引里再次搜索出完整的行数据，然后再丢弃掉前<code>offset</code>条数据，返回<code>count</code>条数据。因此在这个过程中可能会产生大量的“回表”操作，这将导致性能下降。</li></ol><p>我们借助<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html" target="_blank" rel="noopener"><strong>B+ Tree Visualization</strong></a>演示一下这张表的索引结构：</p><ul><li>聚集索引（主键ID）</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122233800.png" alt="聚集索引（主键ID）"></p><ul><li>二级索引（idx_create_time）</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122234301.png" alt="二级索引（create_time）"></p><p>以上述例子来说，当我们查询<code>LIMIT 10000000,100</code>时，它会先从二级索引中查询10000000+100条记录对应的ID，然后再用这些记录的ID去聚集索引中查询ID对应的记录，然后舍弃掉前10000000条数据，返回后100条数据。</p><p>所以当<code>offset</code>+<code>count</code>量很大时，Mysql的执行器认为全表扫描的性能更由于使用索引，所以也导致索引失效。所以我们要做的尽可能的减少回表的记录数量。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h4><p>我们改造sql，通过一个子查询按照<code>create_time</code>倒排，获取第<code>offset</code> + 1条记录的最新的create_time，create_time直接从二级索引上可以获取，不会进行回表，然后我们再根据这个create_time传递到主查询时，取100条数据，即回表数据也仅仅只有count条即100条数据，大大减少了回表的记录数量。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order  <span class="token keyword">WHERE</span> create_time <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> create_time <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询第100万时耗时556毫秒。</p><p>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203520.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203725.png" alt="image.png"><br>可以看出主查询以及子查询都使用到了索引，回表查询的数据记录数也大大减少。</p><p>继续查询到第1000万行时耗时接近6秒。<br>执行结果，执行计划</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203937.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204350.png" alt="image.png"><br>可以看出主查询以及子查询都使用到了索引，回表查询的数据记录数也大大减少。</p><p><mark style="background: #FF5582A6;">这种方式需要<code>create_time</code> 的分布是相对均匀的，否则可能会导致某个时间段内的数据较多，影响查询性能。</mark></p><h4 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h4><p>我们改造sql，<code>create_time</code>跟<code>id</code>都存储在二级索引中，我们获取这两列值不需要回表，所以我们创建一个偏移量为<code>offset</code>，个数为<code>count</code>并且包含<code>create_time</code>以及<code>id</code>的临时表，临时表中数据不需要回表。然后再跟自身通过主键<code>ID</code>进行关联，仅需要回表<code>count</code>条数据，大大减少了回表的记录格式。同时也使用了主键索引关联，效率也大大提高。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> torder<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span>  t_order torder    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">100</span>     <span class="token punctuation">)</span> tmp <span class="token keyword">ON</span> torder<span class="token punctuation">.</span>id <span class="token operator">=</span> tmp<span class="token punctuation">.</span>id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    create_time <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询第100万时耗时260毫秒。<br>执行结果，执行计划。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204450.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204625.png" alt="image.png"></p><p>继续查询到第1000万行时耗时接近2秒<br>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204711.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204815.png" alt="image.png"></p><p>这种方式要保证<code>INNER JOIN</code>使用了合适的索引。</p><h4 id="SEARCH-AFTER"><a href="#SEARCH-AFTER" class="headerlink" title="SEARCH AFTER"></a>SEARCH AFTER</h4><p>每次查询都保留上次的最小的<code>create_time</code>，然后下次查询只查询比上一页的<code>create_time</code>小的数据。单表查询，并且使用索引，回表数据少，不需要子查询以及关联查询，查询效率高。类似ES的<code>SEARCH AFTER</code>的查询方式。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 我们模拟连续分页到第1000000页，最小的一条数据的create_time</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">ASC</span>  <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order  <span class="token keyword">WHERE</span> create_time <span class="token operator">&lt;=</span> <span class="token string">'2023-01-22 00:00:00'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询第100万时耗时142毫秒。</p><p>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204928.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123205002.png" alt="image.png"></p><p>继续查询到第1000万行时耗时244毫秒</p><p>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123210129.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123210351.png" alt="image.png"></p><p><mark style="background: #FF5582A6;">当然该种方式缺点也很明显：只能支持连续分页，不能支持获取随意页的数据。</mark></p><h4 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h4><ul><li>限制查询范围： 在需求层面，可以限制只能查询前100页数据，或者规定只能获取某个时间段内的数据，从而避免深度分页。</li><li>水平分表：考虑将数据按照某个维度进行水平分表，以减小单表的数据量</li><li>使用ES，Hive，ClickHouse等OLAP方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 面试 </tag>
            
            <tag> Mysql深度分页 </tag>
            
            <tag> Sql优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：Mysql中EXISTS与IN的使用有哪些差异</title>
      <link href="/article/mysqlexistsin.html"/>
      <url>/article/mysqlexistsin.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎老铁来到我的博客，扫码下图关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>在数据库查询优化中，查询效率直接关系到应用程序性能。其中，IN和EXISTS是两种常见的子查询操作符，广泛应用于SQL查询语句，但它们在执行效率上有所不同。</p><p>本文深入探讨IN和EXISTS的工作原理，以及在何种情境下选择更为合适。通过对这两种操作符的详细分析，揭示它们在实际应用中的优缺点，一起了解如何在数据库查询中灵活运用IN和EXISTS，以优化查询语句的执行。</p><h3 id="IN与EXISTS基本概念与用法"><a href="#IN与EXISTS基本概念与用法" class="headerlink" title="IN与EXISTS基本概念与用法"></a>IN与EXISTS基本概念与用法</h3><h4 id="IN子查询"><a href="#IN子查询" class="headerlink" title="IN子查询"></a>IN子查询</h4><p>在MySQL中，当使用<code>IN</code>子查询时，主查询（外表）中的每一行都会与子查询（内表）的结果集进行比较。先执行子查询生成一个临时表，然后主查询取出对应的字段值，系统会遍历子查询结果集，检查这个字段值是否存在于子查询结果集中。如果存在，则该行满足条件，会被加入到最终的查询结果中。例如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">where</span> customer_no <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，对于<code>t_order</code>表中的每一行，MySQL会查看<code>t_customer</code>表中是否存在与其<code>customer_no</code>相匹配的记录。如果<code>t_customer</code>表中有任何行的<code>customer_no</code>与<code>t_order</code>表中当前行的<code>customer_no</code>相同，那么这一行就会被包含在最终查询结果中。</p><p><code>IN</code>子查询的效率通常在子查询结果集较小的情况下较高，因为它需要处理并可能缓存整个子查询结果。</p><h4 id="EXISTS子查询"><a href="#EXISTS子查询" class="headerlink" title="EXISTS子查询"></a>EXISTS子查询</h4><p><code>EXISTS</code>子查询则是用于判断关联性，它并不关心子查询返回的具体数据值，而只关注是否存在匹配的行。对于主查询表中的每一行，执行内部的<code>EXISTS</code>子查询。当<code>EXISTS</code>子查询找到一行或多行符合<code>WHERE</code>条件的记录时，立即返回真(<code>TRUE</code>)。这个<code>TRUE</code>值会导致外层查询的那一行被纳入最终结果中，因为<code>WHERE EXISTS</code>条件为真。一旦<code>EXISTS</code>子查询找到匹配项，它就不需要继续查找剩余的记录了，即实现了所谓的“短路”或“早期终结”。例如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order torder <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no <span class="token operator">AND</span> tcustomer<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，只要<code>t_customer</code>表中存在至少一条记录，其<code>customer_no</code>与<code>t_order</code>表中的当前行<code>customer_no</code>相符，MySQL就认为<code>EXISTS</code>条件为真，并将当前的<code>t_order</code>表行作为结果返回。无论<code>t_customer</code>表有多少其他相关记录，都不再影响此条目是否被选中。<br><code>EXISTS</code>在子查询表大但只需验证是否存在对应关系时更高效，它支持“短路”机制，一旦找到匹配项就结束子查询，不必遍历完整个子查询表。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>MySQL中的<code>IN</code>语句是把外表和内表作<code>HASH</code>连接，而<code>EXISTS</code>语句是对外表作<code>LOOP</code>循环，每次<code>LOOP</code>循环再对内表进行查询，单纯的理解<code>EXISTS</code>比<code>IN</code>语句的效率要高的说法其实是不准确的，要区分情景:</p><ul><li>如果查询的两不表大小相当，那么用<code>EXISTS</code>和<code>IN</code>差别不大。</li><li>如果两个表中一个较小，一个是大表，则子查询表大的用<code>EXISTS</code>,子查询表小的用 <code>IN</code>。</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>下面我们来通过实际案例去验证数据量和索引对<code>IN</code>与<code>EXISTS</code>子查询性能的影响。<br>我们创建两张表：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- t_order</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t_order<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_order<span class="token punctuation">`</span><span class="token punctuation">(</span>   id                 <span class="token keyword">bigint</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span>          <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>order_no<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单编号'</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'客户编号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">'测试订单表'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- t_customer</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span><span class="token punctuation">(</span>       id                 <span class="token keyword">bigint</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span>          <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>       <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'客户编号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span>  <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">'测试订单客户表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过<code>Python</code>脚本往<code>t_order</code>中插入100万条数据，<code>t_customer</code>中插入1万条数据。</p><p>案例<code>sql</code>:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">where</span> customer_no <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order torder <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no <span class="token operator">AND</span> tcustomer<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>案例执行建立在没有加索引情况下进行。</p></blockquote><h4 id="IN小表，EXISTS小表"><a href="#IN小表，EXISTS小表" class="headerlink" title="IN小表，EXISTS小表"></a>IN小表，EXISTS小表</h4><p>我们在执行上面两条sql时会发现<code>IN</code>查询的速度远远高于<code>EXISTS</code>。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">where</span> customer_no <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order torder <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no <span class="token operator">AND</span> tcustomer<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们先看两个sql的执行计划：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122114228.png" alt="image.png"><br>本案例中<code>IN</code>查询的SQL执行了近5秒。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122114623.png" alt="image.png"><br>本案例中<code>EXISTS</code>查询的SQL执行了超过5分钟。</p><p>从上述执行计划中，我们可以看到<code>IN</code>查询和<code>EXISTS</code>查询在没有索引的情况下都进行了全表扫描：</p><ul><li><p>IN查询：</p><ul><li>主查询对<code>t_order</code>表进行了全表扫描（ALL），由于没有索引，MySQL需要遍历1005915行数据。</li><li>子查询对<code>t_customer</code>表也进行了全表扫描（MATERIALIZED），查找国家为’US’的客户编号。该表大小较小，有1000行数据。</li></ul></li><li><p>EXISTS查询：</p><ul><li>主查询同样对<code>t_order</code>表进行了全表扫描（ALL），同理，无索引导致效率较低。</li><li>子查询对<code>t_customer</code>表进行了全表扫描（DEPENDENT SUBQUERY），并且根据WHERE条件过滤出与主查询关联的数据。</li></ul></li></ul><p>虽然两者都未使用索引，但根据执行计划中的rows值，<code>IN</code>查询的子查询涉及的数据量要远小于主查询涉及的数据量。具体来说，在<code>IN</code>查询中，子查询只需要处理1000行数据，并将结果用于筛选主查询中的1005915行数据。而在<code>EXISTS</code>查询中，子查询虽然只返回1.00（几乎为1）个匹配记录，但它需要针对每一行主查询的结果进行检查，总共要处理1005915次。</p><p>因此，在这种情况下，<code>IN</code>查询的效率高于<code>EXISTS</code>查询的原因主要是子查询数据集大小的不同以及子查询对主查询的影响程度。尽管两个查询都没有利用到索引优化，但在实际执行时，<code>IN</code>查询所需的计算量相对较小，故其性能优于<code>EXISTS</code>查询。</p><h4 id="IN大表，EXISTS大表"><a href="#IN大表，EXISTS大表" class="headerlink" title="IN大表，EXISTS大表"></a>IN大表，EXISTS大表</h4><p>我们再次变更一下sql，让子查询是大表，观察一下他们的执行情况。即sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> customer_no <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span>  t_order torder <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们再次查看sql的执行计划：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122152320.png" alt="image.png"><br>执行IN查询语句时花费2秒。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122152415.png" alt="image.png"><br>执行<code>EXISTS</code>查询花费0.25秒。</p><p>由此可以看出<code>EXISTS</code>查询的效率远高于<code>IN</code>查询，我们结合执行计划进行分析：</p><ul><li>IN查询：<ul><li>主查询（<code>t_customer</code>）由于没有索引，MySQL需要对整个表进行全表扫描，涉及行数为1000行。</li><li>子查询（<code>t_order</code>）同样进行了全表扫描，涉及行数为1005915行。虽然子查询的结果通过自动生成的临时键与主查询关联，并且对于每一个主查询中的<code>customer_no</code>，子查询都能很快找到对应的记录（rows值为1），但由于子查询的数据量巨大，所以整体查询效率不高。</li></ul></li><li>EXISTS查询：<ul><li>主查询（<code>t_customer</code>）仍然进行了全表扫描，涉及行数为1000行。</li><li>子查询（<code>t_order</code>）也是全表扫描，但关键在于它是“DEPENDENT SUBQUERY”，这意味着它会依赖于外部查询（即主查询）的每一行结果来决定是否执行。尽管子查询需要处理1005915行数据，但由于其是根据主查询的每一条<code>customer_no</code>逐个检查是否存在匹配项，因此当遇到第一条不满足条件的<code>customer_no</code>时，就可以立即停止对子查询中剩余行的处理。这导致了在实际执行过程中，可能只需要检查一部分<code>t_order</code>表的数据即可完成所有主查询记录的验证，从而提高了查询效率。</li></ul></li></ul><p>在这个案例中，因为主查询表（<code>t_customer</code>）较小，而子查询表（<code>t_order</code>）较大，<code>EXISTS</code>查询能够在较早阶段停止不必要的计算，使得整体查询效率优于<code>IN</code>查询。</p><h3 id="数据量以及索引对IN与-EXISTS性能的影响"><a href="#数据量以及索引对IN与-EXISTS性能的影响" class="headerlink" title="数据量以及索引对IN与`EXISTS性能的影响"></a>数据量以及索引对<code>IN</code>与`EXISTS性能的影响</h3><p>在MySQL中，<code>IN</code>和<code>EXISTS</code>子查询的性能很大程度上取决于内外表的数据量以及相关的索引设置。</p><h4 id="数据量的影响"><a href="#数据量的影响" class="headerlink" title="数据量的影响"></a>数据量的影响</h4><ul><li><p>对于<code>IN</code>子查询：当内表（子查询结果集）较小且数据能够被有效索引时，<code>IN</code>通常表现良好。如果内表很大，即使有索引，由于需要生成并存储完整的子查询结果集以供主查询进行比对，因此随着内表记录数的增长，性能会逐渐下降。</p></li><li><p>对于<code>EXISTS</code>子查询：当外层主查询表较大，而内表虽大但匹配条件的行数较少时，<code>EXISTS</code>的优势更加明显。因为它仅需找到一个匹配项就可以立即结束内部循环，返回真值，无需遍历整个内表。当内表数据量巨大但能快速定位到满足条件的少数行时，<code>EXISTS</code>相比<code>IN</code>更高效。</p><h4 id="索引的影响："><a href="#索引的影响：" class="headerlink" title="索引的影响："></a>索引的影响：</h4></li><li><p>对于<code>IN</code>子查询：如果<code>IN</code>子查询中的字段具有有效的索引，可以减少内表的全表扫描，转而通过索引查找，显著提高查询效率。尤其是覆盖索引（索引包含了查询所需的所有列），可以直接从索引中获取信息，避免回表操作。</p></li><li><p>对于<code>EXISTS</code>子查询：对于<code>EXISTS</code>子查询，同样要求相关联的字段上有合适的索引。例如，在上面的例子中，若<code>t_customer</code>的<code>customer_no</code>字段有索引，那么在执行<code>WHERE tcustomer.customer_no = torder.customer_no</code>时，可以通过索引快速定位匹配记录，从而加速子查询的执行过程。</p></li></ul><p>在决定使用<code>IN</code>还是<code>EXISTS</code>时，首先应考虑的是内外表的数据规模以及关联字段上的索引情况。若内表较小或子查询结果集易于通过索引优化，<code>IN</code>可能是更好的选择。若关注是否存在关联关系且内表虽大但能满足条件的行数有限，同时外层主查询表可能更大，则<code>EXISTS</code>可能提供更高的查询性能。 </p><p>当然最佳实践是结合实际业务需求、数据分布特点以及数据库统计信息，通过分析SQL执行计划来确定最合适的查询策略，并根据实际情况调整表结构和索引设计。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 面试 </tag>
            
            <tag> exists与in </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot责任链与自定义注解：优雅解耦复杂业务</title>
      <link href="/article/springbootchain.html"/>
      <url>/article/springbootchain.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>责任链模式是一种行为设计模式，它允许你将请求沿着处理者链进行传递，直到有一个处理者处理请求。在实际应用中，责任链模式常用于解耦发送者和接收者，使得请求可以按照一定的规则被多个处理者依次处理。</p><p>首先，本文会通过一个实例去讲解<code>SpringBoot</code>使用责任链模式以及自定义注解优雅的实现一个功能。我们现在有如下图一样的一个创建订单的业务流程处理，我们选择使用责任链模式去实现。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240115175330.png" alt="image.png"></p><p>我们分析下流程，发现从条件x开始，就分为了两条业务线，我们定义走业务节点A的叫规则A，走业务节点B的叫规则B。这样就形成了两条业务链路：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240115175344.png" alt="image.png"></p><p>那我就开始使用自定义注解定义规则A，以及规则B。</p><h3 id="规则注解"><a href="#规则注解" class="headerlink" title="规则注解"></a>规则注解</h3><p>定义<code>@RuleA</code>标识处理规则A的节点：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RuleA</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义<code>@RuleB</code>标识处理规则B的节点：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RuleB</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Spring框架中，<code>@Qualifier</code>注解用于指定要注入的具体bean的名称。当一个接口或抽象类有多个实现类时，通过<code>@Qualifier</code>注解可以明确告诉Spring框架要注入哪一个实现类。</p><p>自定义注解与<code>@Qualifier</code>结合使用的含义在于，你可以通过自定义注解为特定的实现类分组，并在使用<code>@Qualifier</code>时引用这个自定义注解。这样做的主要目的是提高代码的可读性和可维护性，使得注入的意图更加清晰。</p><h3 id="业务处理"><a href="#业务处理" class="headerlink" title="业务处理"></a>业务处理</h3><p>各业务节点处理的数据是同一份，处理方法是一个，只是处理的业务不同。所以我们定义一个业务处理点的接口，让各业务节点去实现业务处理接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INodeComponent</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**  * 定义所有数据处理节点的接口  * @param orderContext 数据上下文  * @param orderParam 数据处理入参参数  */</span>  <span class="token keyword">void</span> <span class="token function">handleData</span><span class="token punctuation">(</span>OrderContext orderContext<span class="token punctuation">,</span> OrderParam orderParam<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们实现业务处理接口：<br>我们定义在规则A流程中执行的节点都是用注解<code>@RuleA</code>去标记，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ANodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleData</span><span class="token punctuation">(</span>OrderContext orderContext<span class="token punctuation">,</span> OrderParam orderParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RuleA流程执行处理业务节点A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ANodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 不同类型订单，订单号不同，可在节点中个处理</span>    orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOC11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span> <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义在规则B流程中执行的节点都是用注解<code>@RuleB</code>去标记，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleB</span> <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RuleB流程执行处理业务节点B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOB11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ENodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到如果规则A和规则B都需要执行的业务用了<code>@RuleA</code>和<code>@RuleB</code>去标记。同时我们使用<code>@Order</code>注解定义<code>NodeComponent</code>的注入顺序，值越小越先注入。</p><blockquote><p>基于@Order定义<code>NodeComponent</code>的注入顺序不是那么的友好，最好的方式是与规则注解耦合，即一个规则下定义注入顺序，</p></blockquote><h3 id="规则处理器"><a href="#规则处理器" class="headerlink" title="规则处理器"></a>规则处理器</h3><p>我们在定义条件X节点对应的针对处理规则A和规则B的处理器。<br>同理，因规则A以及规则B处理数据的数据是同一份，方法也是同一个，所以我们还是定义一个处理器超类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**  * 处理校验订单以及创建订单信息  * @param requestVO 订单创建入参  * @return 订单DO实体类  */</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> OrderDO <span class="token function">handleOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * 执行业务处理链路  * @param requestVO 订单创建入参  * @param nodeComponentList 业务处理节点  * @return  */</span>  <span class="token keyword">protected</span> OrderDO <span class="token function">executeChain</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">INodeComponent</span><span class="token operator">></span> nodeComponentList<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">final</span> OrderParam orderParam <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildOrderParam</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> OrderContext orderContext <span class="token operator">=</span> OrderContext<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>INodeComponent nodeComponent <span class="token operator">:</span> nodeComponentList<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处进行业务处理节点的调用</span>        nodeComponent<span class="token punctuation">.</span><span class="token function">handleData</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">,</span> orderParam<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行的链路：{}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildOrderDO</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的超类对外提供统一的业务处理接口方法，同时对业务处理节点的调用进行处理的管理，对于规则处理者来说，他只需要实现<code>handlerOrder</code>的方法。以下是规则处理器的实现代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"ruleA"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleAHandler</span> <span class="token keyword">extends</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">INodeComponent</span><span class="token operator">></span> nodeComponents<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 处理校验订单以及创建订单信息      *      * @param requestVO 订单创建入参      * @return 订单DO实体类      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderDO <span class="token function">handleOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">executeChain</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">,</span> nodeComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"ruleB"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleBHandler</span> <span class="token keyword">extends</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@RuleB</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">INodeComponent</span><span class="token operator">></span> nodeComponents<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 处理校验订单以及创建订单信息      *      * @param requestVO 订单创建入参      * @return 订单DO实体类      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderDO <span class="token function">handleOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">executeChain</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">,</span> nodeComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订单处理器"><a href="#订单处理器" class="headerlink" title="订单处理器"></a>订单处理器</h3><p>最后我们在创建一个订单处理器，为业务代码中提供服务接口。<br>先创建一个订单类型的枚举，枚举中定义使用哪个规则处理器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> OrderHandlerEnum <span class="token punctuation">{</span>      <span class="token function">TO_C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ruleA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">TO_B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ruleB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer orderType<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String ruleHandler<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getRuleHandler</span><span class="token punctuation">(</span>Integer orderType<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OrderHandlerEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>orderType<span class="token punctuation">,</span> orderType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>OrderHandlerEnum<span class="token punctuation">.</span>TO_C<span class="token punctuation">)</span><span class="token punctuation">.</span>ruleHandler<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  `<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以定义一个订单处理器了，处理中决定调用那个规则处理器去执行规则。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFactory</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> NodeHandler<span class="token operator">></span> nodeHandlerMap<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 创建订单      * @param requestVO 订单参数      * @return 订单实体DO      */</span>      <span class="token keyword">public</span> OrderDO <span class="token function">createOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">final</span> Integer orderType <span class="token operator">=</span> requestVO<span class="token punctuation">.</span><span class="token function">getOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取node规则执行器名称  </span>        <span class="token keyword">final</span> String ruleHandler <span class="token operator">=</span> OrderHandlerEnum<span class="token punctuation">.</span><span class="token function">getRuleHandler</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取node规则执行器  </span>        <span class="token keyword">final</span> NodeHandler nodeHandler <span class="token operator">=</span> nodeHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ruleHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeHandler <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 异常  </span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> nodeHandler<span class="token punctuation">.</span><span class="token function">handleOrder</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们编写测试类看一下效果：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootCodeApplicationTests</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> OrderFactory orderFactory<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">void</span> <span class="token function">testOrderCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> OrderCreateRequestVO requestVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderCreateRequestVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setOrderType</span><span class="token punctuation">(</span>OrderHandlerEnum<span class="token punctuation">.</span>TO_C<span class="token punctuation">.</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> OrderDO orderDO <span class="token operator">=</span> orderFactory<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderDO<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果日志如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240115184118.png" alt="image.png"></p><p>执行结果是我们想要的。</p><p>通过采用责任链模式结合Spring Boot的优化方案，我们实现了一种高度解耦的业务逻辑处理方式。其中的主要优势在于，我们成功地将各个业务节点的处理逻辑进行解耦，使得每个节点能够独立演进，降低了代码的耦合性。</p><p>其中的最大优势体现在替换或新增业务节点处理规则时的灵活性。若需替换某一节点的处理规则，只需实现新的<code>INodeComponent</code>并标记相应的规则注解，系统将自动将其纳入责任链中。这意味着我们能够以最小的改动实现业务逻辑的变更，而无需涉及其他节点。</p><p>进一步地，若新增一条处理规则，只需定义新的规则注解（如<code>@RuleC</code>），并实现相应的<code>INodeComponent</code>接口，定义规则C下各节点的处理逻辑。然后，创建对应的规则C处理器即可，系统将自动将其整合到责任链中。这种设计允许我们以一种清晰、简便的方式进行代码扩展，同时使得代码接口清晰易懂，为后续维护和升级提供了便利。这种设计理念在面对日益变化的业务规则时，具有显著的适应性和可维护性。</p><p>上述示例中我们也使用了表驱动，策略模式+工厂模式，以及枚举等方式，具体请参考我另一篇的文章：<a href="https://www.coderacademy.online/article/7fd1e424.html">代码整洁之道（一）之优化if-else的8种方案</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过使用责任链模式，我们可以更优雅地组织和扩展业务逻辑。在Spring Boot中，结合自定义注解和<code>@Qualifier</code>注解，以及构造函数注入，可以实现更清晰、可读性更强的代码。通过控制处理者的顺序，我们可以确保责任链的执行顺序符合业务需求。</p><p>责任链模式的优雅实践使得我们的代码更具可维护性，更容易应对业务的变化。在设计和实现中，要根据实际业务场景的需要进行灵活调整，以达到最佳的解耦和可扩展性。</p><p>有的小伙伴可能也会发现我们的类定义为<code>NodeComponent</code>，很熟悉，是的，此类名参考一个规则引擎开源项目<code>LiteFlow</code>，我们下一期将会使用<code>LiteFolw</code>改造这个案例，由此打开学习<code>LiteFlow</code>的篇章，需要了解的小伙伴们注意点关注哦。。。。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 责任链模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乖乖，咱不用BeanUtil.copy了，咱试试这款神级工具（超详细）</title>
      <link href="/article/mapstruct.html"/>
      <url>/article/mapstruct.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在现代Java应用程序开发中，处理对象之间的映射是一个常见而且必不可少的任务。随着项目规模的增长，手动编写繁琐的映射代码不仅耗时且容易出错，因此开发者们一直在寻找更高效的解决方案。比如基于<code>Dozer</code>封装的或者<code>Spring</code>自带的<code>BeanUtil.copyProperties</code>对应对象之间的属性拷贝。但是<code>Dozer</code>采用运行时映射的方式，通过反射在运行时动态生成映射代码。这意味着在每次映射时都需要进行反射操作，Dozer在处理复杂映射时可能需要额外的配置和自定义转换器,可能导致一定的性能开销,尤其在大型项目中可能表现不佳。另外在处理处理复杂映射（例如字段名称不一致，某些字段不需要映射）时可能需要额外的配置和自定义转换器，使用起来并不是那么的便捷。那么此时<code>MapStruct</code>变应用而生，成为简化Java Bean映射的利器。</p><p><code>MapStruct</code>是一款基于注解和编译时代码生成的工具，旨在简化Java Bean之间的映射过程。通过在<strong>编译时生成高效的映射代码</strong>，避免了运行时的性能开销，使得映射过程更加高效。<code>MapStruct</code>不仅消除了手写映射代码的痛苦，还提供了性能优势。它支持在Java Bean之间进行映射，并通过使用注解标记映射方法和类，提供了一种声明性的方式定义映射规则，简化了映射代码的编写。使得开发者能够专注于业务逻辑而不必过多关注对象之间的转换。并且它还支持自定义转换器和表达式，适用于处理各种复杂的映射场景。</p><p>下面我们就开始介绍如何使用<code>MapStruct</code>来高效的完成对象之间的映射。</p><h3 id="如何MapStruct使用"><a href="#如何MapStruct使用" class="headerlink" title="如何MapStruct使用"></a>如何MapStruct使用</h3><p>使用MapStruct进行Java Bean映射通常包括几个基本步骤，包括项目配置、注解标记、自定义转换器等。以下是详细的使用步骤：</p><h4 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在 <code>pom.xml</code> 需要正确配置<code>MapStruct</code>的依赖和注解处理器插件。例如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok-mapstruct-binding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然如果你同时使用了<code>lombok</code>，也需要同时配置<code>lombok</code>编译生成代码的插件。</p><h4 id="2、创建映射接口"><a href="#2、创建映射接口" class="headerlink" title="2、创建映射接口"></a>2、创建映射接口</h4><p>创建一个Java接口，并使用<code>@Mapper</code>注解标记它。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义其他映射方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码定义了一个映射接口<code>MyMapper</code>，其中有一个映射方法<code>sourceToTarget</code>用于将<code>SourceObject</code>映射为<code>TargetObject</code>。<code>INSTANCE</code>字段用于获取映射器的实例。</p><p>此时我们编译项目之后，可以看见生成的<code>MyMapper</code>实现类中的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就省去了我们自己手写两个对象之间的字段映射，避免了大量的重复工作，大大增加了开发效率，其次也是最重要的一点就是我们可以很直观的看见两个对象之间的字段映射关系，不像<code>Dozer</code>那样每次基于反射区实现映射，我们无法看见两边的字段的映射，出现问题后不方便排查，功能上不可控。</p><blockquote><p>很重要的一点提示：我们要养成在写完一个映射方法后，要养成一定一定提前编译看一下生成的实现类方法是否正确，同时也看看是否存在字段映射关系设置错误导致编译不通过。</p></blockquote><h4 id="3、映射接口使用"><a href="#3、映射接口使用" class="headerlink" title="3、映射接口使用"></a>3、映射接口使用</h4><p>在业务代码或者其他代码方法中，我们可以直接使用<code>MyConverter.INSTANCE.sourceToTarget(source)</code>进行<code>source</code>与<code>target</code>之间的转换。</p><pre class="line-numbers language-java"><code class="language-java">TargetObject <span class="token function">handleObject</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> MyConverter<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">sourceToTarget</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>怎么样？是不是很简单。接下来让我们继续介绍<code>MapStruct</code>的详细功能，揭开它神秘的面纱。。。。。</p><h3 id="MapStruct常用注解"><a href="#MapStruct常用注解" class="headerlink" title="MapStruct常用注解"></a>MapStruct常用注解</h3><p>了解MapStruct的注解及其属性是非常重要的，因为它们定义了映射规则和行为。以下是MapStruct中常用的注解及其属性：</p><h4 id="1-Mapper"><a href="#1-Mapper" class="headerlink" title="1.@Mapper"></a>1.<code>@Mapper</code></h4><p>用于标记一个接口或抽象类，用于定义对象之间的映射规则。它有多个属性可以配置映射器的功能。以下是 <code>@Mapper</code> 注解的一些常用属性：</p><h5 id="1-1-componentModel"><a href="#1-1-componentModel" class="headerlink" title="1.1 componentModel"></a>1.1 <code>componentModel</code></h5><p>指定生成的映射器实例的组件模型,以便与应用框架集成。他有”default”（默认值）、”cdi”、”spring”等可选值（具体参考<code>MappingConstants.ComponentModel</code>）。我们着重介绍一下default以及spring：</p><ul><li><p>default：<code>MapStruct</code>的默认组件模型<br>在默认模式下，MapStruct 会生成一个无参数的构造函数的映射器实例。映射器实例的创建和管理由 <code>MapStruct</code>自动处理。实例通常通过 <code>Mappers.getMapper（Class）</code>获取。适用于简单的映射场景，无需额外的依赖注入或容器管理。</p></li><li><p>spring：使用<code>Spring Framework</code>的组件模型<br>在 Spring 模式下，MapStruct 会生成一个使用 <code>@Component</code> 注解标记的映射器实例，从而允许通过 Spring 的 IoC 容器进行管理和依赖注入。适用于 Spring 框架中的应用，可以利用 Spring 的依赖注入功能。稍后我们会介绍这种模型的使用，也是我们日常使用<code>SpringBoot</code>开发时用的比较多的模型。比如上例中，我们使用spring的模型，则生成的代码：</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpringMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MySpringMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看见实现类中自动加上了<code>@Component</code>，注入到Spring的容器中管理。</p><ul><li>cdi：使用 Contexts and Dependency Injection (CDI) 的组件模型。<br>在 CDI 模式下，MapStruct 会生成一个使用 <code>@Dependent</code> 注解标记的映射器实例，允许通过 CDI 容器进行管理和依赖注入。适用于<code>Java EE</code> 或<code>Jakarta EE</code>中使用 CDI 的应用，可以利用 CDI 容器进行管理。</li></ul><p>其余的大家感兴趣的可以去阅读源码，平时使用不多，这里就不过多介绍了。</p><h5 id="1-2-uses"><a href="#1-2-uses" class="headerlink" title="1.2 uses"></a>1.2 uses</h5><p>指定映射器使用的自定义转换器。自定义转换器是在映射过程中调用的方法，用于处理特定类型之间的自定义映射逻辑。如果我们两个对象之间有一个字段的属性值需要特殊处理之后在进行映射，即需要加上一些转换逻辑，我们就可以自定义一个转换器，然后在映射器中使用转换器中的方法。例如：SoureObject中的有一个枚举值，但是转换到TargetObject中时需要转换为具体的说明，那么此时我们就可以使用自定义转换器。</p><p>我们自定义一个转换器，并且定义一个转换方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConverter</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">convertSexDesc</span><span class="token punctuation">(</span>Integer sex<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再映射器<code>MyMapper</code>中使用<code>uses</code>指定转换器，同时使用<code>@Mapping</code>注解指定两个字段的映射规则：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后可以看见实现类中生成的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> MyConverter myConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> myConverter<span class="token punctuation">.</span><span class="token function">convertSexDesc</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然假如你的转换器或者转换方法，是你这个映射器独有，其他映射器不会使用这个转换方法，那么你可以直接在<code>MyMapper</code>中定义一个<code>default</code>的转换方法，就不必使用<code>uses</code>引入转换器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      <span class="token keyword">default</span> String <span class="token function">convertSexDesc</span><span class="token punctuation">(</span>Integer sex<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中，直接可以调用到这个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> <span class="token function">convertSexDesc</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在Java中，接口可以包含默认方法（Default Methods）。默认方法是在接口中提供一个默认的实现，这样在接口的实现类中就不需要强制性地实现该方法了。默认方法使用关键字 <code>default</code> 进行声明。</p></blockquote><h5 id="1-3-imports"><a href="#1-3-imports" class="headerlink" title="1.3 imports"></a>1.3 imports</h5><p>导入其他类的全限定名，使其在生成的映射器接口中可见。比如我们可以导入其他的工具类去处理我们的字段，例如:<code>StringUtils</code>, <code>CollectionUtils</code>，<code>MapUtils</code>,或者一些枚举类等。同常运用<code>@Mapping</code>中的<code>expression</code>上。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>imports <span class="token operator">=</span> <span class="token punctuation">{</span>StringUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span>  expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中直接<code>import</code>了<code>imports</code>中定义的类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>code<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>SexEnum<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然我们也可以不使用<code>imports</code>去导入其他的类，那我们在使用这些类的方法时，必须写上他们的全路径:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span>  expression <span class="token operator">=</span> <span class="token string">"java(com.springboot.code.mapstruct.SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中，就不会<code>import</code>类了：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>code<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-config"><a href="#1-4-config" class="headerlink" title="1.4 config"></a>1.4 config</h5><p><code>config</code> 属性允许你指定一个映射器配置类，该配置类用于提供全局的配置选项。通过配置类，你可以定义一些全局行为，例如处理 <code>null</code> 值的策略、映射器名称、映射器组件模型等。</p><p>我们使用<code>@MapperConfig</code>定义一个映射器配置类 <code>MyMapperConfig</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MapperConfig</span><span class="token punctuation">(</span>          nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">,</span>          componentModel <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">,</span>          uses <span class="token operator">=</span> MyConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>          unmappedTargetPolicy <span class="token operator">=</span> org<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>ReportingPolicy<span class="token punctuation">.</span>WARN  <span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapperConfig</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再<code>MyMapper</code>中指定config：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>config <span class="token operator">=</span> MyMapperConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以集中管理映射器的一些全局行为，而不需要在每个映射器中重复配置。<br>在实际应用中，你可以根据项目需求定义不同的映射器配置类，用于管理不同的全局配置选项。这有助于提高代码的组织性和可维护性。</p><h5 id="1-5-nullValueCheckStrategy"><a href="#1-5-nullValueCheckStrategy" class="headerlink" title="1.5 nullValueCheckStrategy"></a>1.5 nullValueCheckStrategy</h5><p>用于指定映射器对源对象字段的<code>null</code>值进行检查的策略。检查策略枚举类<code>NullValueCheckStrategy</code>值如下：</p><ul><li>ALWAYS：始终对源值进行<code>NULL</code>检查。<br>生成的实现类中，都是源值进行判<code>NULL</code>：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> myConverter<span class="token punctuation">.</span><span class="token function">convertSexDesc</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ON_IMPLICIT_CONVERSION：不检查<code>NULL</code>值，直接将源值赋值给目标值</li></ul><p>除了上述的属性值之外，还有一些其他的属性值，例如：</p><ul><li><code>unmappedSourcePolicy</code>： 未映射源对象字段的处理策略。</li><li><code>unmappedTargetPolicy</code>： 未映射目标对象字段的处理策略。<br>可选值：<code>ReportingPolicy.IGNORE</code>（忽略未映射字段，默认）、<code>ReportingPolicy.WARN</code>（警告）、<code>ReportingPolicy.ERROR</code>（抛出错误）。</li></ul><p>以及其他的一些属性值，如果需要用到的同学，可以看一下源码中的介绍，这里就不过多叙述了。</p><h4 id="2-MapperConfig"><a href="#2-MapperConfig" class="headerlink" title="2.@MapperConfig"></a>2.<code>@MapperConfig</code></h4><p>注解用于定义映射器配置类，它允许在一个单独的配置类中集中管理映射器的全局配置选项。可以将一些全局的配置选项集中在一个配置类中，使得映射器的配置更为清晰和可维护。在实际应用中，可以根据需要定义不同的映射器配置类，以便在不同的场景中使用。配置类可以在映射器中通过<code>@Mapper</code>的<code>config</code>属性引入。它大部分的属性值跟<code>@Mapper</code>一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MapperConfig</span><span class="token punctuation">(</span>          nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ON_IMPLICIT_CONVERSION<span class="token punctuation">,</span>          componentModel <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">,</span>          uses <span class="token operator">=</span> MyConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>          unmappedTargetPolicy <span class="token operator">=</span> org<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>ReportingPolicy<span class="token punctuation">.</span>WARN  <span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapperConfig</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再<code>MyMapper</code>中指定config：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>config <span class="token operator">=</span> MyMapperConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Mapping"><a href="#3-Mapping" class="headerlink" title="3.@Mapping"></a>3.<code>@Mapping</code></h4><p>用于自定义映射器方法中的映射规则。它允许你指定源对象和目标对象之间字段的映射关系。</p><h5 id="3-1-source-和-target"><a href="#3-1-source-和-target" class="headerlink" title="3.1 source 和 target:"></a>3.1 <code>source</code> 和 <code>target</code>:</h5><ul><li><strong><code>source</code> 含义：</strong> 源对象字段的名称或表达式。</li><li><strong><code>target</code> 含义：</strong> 目标对象字段的名称。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sourceField"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sourceField"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者使用表达式的方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>expression <span class="token operator">=</span> <span class="token string">"java(source.getSourceField())"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"targetField"</span><span class="token punctuation">)</span>TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-2-qualifiedByName-和-qualifiedBy"><a href="#3-2-qualifiedByName-和-qualifiedBy" class="headerlink" title="3.2 qualifiedByName 和 qualifiedBy:"></a>3.2 <code>qualifiedByName</code> 和 <code>qualifiedBy</code>:</h5><ul><li><code>qualifiedByName</code>： 指定使用自定义转换器方法进行映射。</li></ul><p>定义一个转换器<code>MyNameConverter</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNameConverter</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertUserName"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">convertUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义转换器的方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span> uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyNameConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertUserName"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>qualifiedBy</code>： 指定使用基于<code>@qualifier</code>注解的转换方法</li></ul><p>先定义一个基于<code>@qualifier</code>(mapstruct包下)的作用于转换器类上的注解<code>@StrConverter</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">StrConverter</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再定义一个基于<code>@qualifier</code>(mapstruct包下)的作用于转换器方法上的注解<code>@NameUpper</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NameUpper</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后定义一个自定义转换器<code>MyNameConverter</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@StrConverter</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNameConverter</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NameUpper</span>      <span class="token keyword">public</span> String <span class="token function">convertUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在<code>@Mappinbg</code>中通过使用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyNameConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> qualifiedBy <span class="token operator">=</span> NameUpper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终两种方式编译后的结果是一致的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> MyNameConverter myNameConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyNameConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> myNameConverter<span class="token punctuation">.</span><span class="token function">convertUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上基于qualifiedBy的使用示例参考自@Qualifier源码文档。</p></blockquote><h5 id="3-3-ignore"><a href="#3-3-ignore" class="headerlink" title="3.3 ignore"></a>3.3 <code>ignore</code></h5><p>是否忽略某字段的映射。为true时忽略。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后实现类中不会对这个字段进行赋值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-defaultExpression"><a href="#3-4-defaultExpression" class="headerlink" title="3.4 defaultExpression"></a>3.4 <code>defaultExpression</code></h5><p>指定默认表达式，当源对象字段为 <code>null</code> 时使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> defaultExpression <span class="token operator">=</span> <span class="token string">"java(SexEnum.MAN.desc)"</span><span class="token punctuation">)</span>TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后实现类：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span>MAN<span class="token punctuation">.</span>desc <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>defaultExpression不能与expression，defaultValue，constant一起使用。</p></blockquote><h5 id="3-5-defaultValue"><a href="#3-5-defaultValue" class="headerlink" title="3.5 defaultValue"></a>3.5 <code>defaultValue</code></h5><p>指定默认值，当源对象字段为 <code>null</code> 时使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"男人"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> <span class="token string">"男人"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>defaultValue不能与expression，defaultExpression，constant一起使用。</p></blockquote><h5 id="3-6-constant"><a href="#3-6-constant" class="headerlink" title="3.6 constant"></a>3.6 constant</h5><p>将目标对象的字段设置为该常量。不从源对象中映射值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java">targetObject<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span> <span class="token string">"API"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>constant不能与defaultExpression，expression，defaultValue，constant, source一起使用。</p></blockquote><h5 id="3-7-expression"><a href="#3-7-expression" class="headerlink" title="3.7 expression"></a>3.7 <code>expression</code></h5><p>通过表达式完成映射。要基于该字符串设置指定的目标属性。目前，Java 是唯一受支持的“表达式语言”，表达式必须使用以下格式以 Java 表达式的形式给出：<code>java（&lt;EXPRESSION&gt;）</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java">targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>expression不能与source, defaultValue, defaultExpression, qualifiedBy, qualifiedByName 以及constant 一起使用</p></blockquote><h5 id="3-8-dateFormat"><a href="#3-8-dateFormat" class="headerlink" title="3.8 dateFormat"></a>3.8 dateFormat</h5><p>指定日期格式化模式，仅适用于日期类型的字段。可以实现<code>String</code>类型时间和<code>Date</code>相互转换，基于<code>SimpleDateFormat</code>实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String createTime<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date loginDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>      <span class="token keyword">private</span> String loginDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getLoginDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setLoginDate</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span> <span class="token string">"yyyy-MM-dd"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getLoginDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span> ParseException e <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-9-numberFormat"><a href="#3-9-numberFormat" class="headerlink" title="3.9 numberFormat"></a>3.9 numberFormat</h5><p>指定数值格式化格式，仅适用<code>Number</code>类型的字段。可以实现<code>String</code>类型数值与<code>Number</code>相互转换，基于<code>DecimalFormat</code>实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amountDouble<span class="token punctuation">;</span>      <span class="token keyword">private</span> String amountStr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String amountStr<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">double</span> amountDouble<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getAmountStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setAmountDouble</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span> <span class="token string">"#,###.00"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getAmountStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span> ParseException e <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  targetObject<span class="token punctuation">.</span><span class="token function">setAmountStr</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span> <span class="token string">"#,###.00"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getAmountDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有其他的属性，这里就不过多叙述了，有兴趣或者需要的可以阅读源码。</p><h4 id="4-Mappings"><a href="#4-Mappings" class="headerlink" title="4.@Mappings"></a>4.<code>@Mappings</code></h4><p>包含多个<code>@Mapping</code>注解，将多个字段映射规则组合在一起，使代码更清晰。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Named"><a href="#5-Named" class="headerlink" title="5.@Named:"></a>5.<code>@Named</code>:</h4><p>用于标记自定义转换器或者映射器中的某个方法的名称。一般配合<code>qualifiedByName</code> 使用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 标记映射方法名称*/</span><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*** 标记转换器方法名称*/</span><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> String <span class="token function">convertSexDesc</span><span class="token punctuation">(</span>Integer sex<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在定义自己的转换器方法时，最好把方法都加上@Named的注解标记你的方法名称，否则如果后续代码中再写一个同类型的不同方法名的转换方法时编译报错：不明确的映射方法。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240114194040.png" alt="image.png"></p><h4 id="6-IterableMapping"><a href="#6-IterableMapping" class="headerlink" title="6. @IterableMapping"></a>6. <code>@IterableMapping</code></h4><pre><code>用于集合映射，定义集合元素的映射规则。其中一些属性例如:`qualifiedByName`，`qualifiedBy`以及`dateFormat`，`numberFormat`参考`@Mapping`中的用法。</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@IterableMapping</span><span class="token punctuation">(</span>qualifiedByName <span class="token operator">=</span> <span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>  List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> <span class="token function">sourceToTargetList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>SourceObject<span class="token operator">></span> sourceObjectList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后的实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> <span class="token function">sourceToTargetList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>SourceObject<span class="token operator">></span> sourceObjectList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> sourceObjectList <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TargetObject<span class="token operator">></span><span class="token punctuation">(</span> sourceObjectList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> SourceObject sourceObject <span class="token operator">:</span> sourceObjectList <span class="token punctuation">)</span> <span class="token punctuation">{</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> <span class="token function">sourceToTarget</span><span class="token punctuation">(</span> sourceObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可看出它内部循环调用<code>sourceToTarget</code>的方法完成list的转换。</p><blockquote><p>需要特别注意，在写集合类型的转换时一定要配合<code>IterableMapping</code>的<code>qualifiedByName</code>和<code>Named</code>使用，如果不使用<code>@IterableMapping</code>中显示声明循环使用的方法时，它的内部会重新生成一个映射方法去使用。这样会在开发过程中出现一些莫名其妙的忽然就不好使的错误。。。。。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget2"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    @IterableMapping(qualifiedByName = "sourceToTarget")  </span>    List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> <span class="token function">sourceToTargetList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>SourceObject<span class="token operator">></span> sourceObjectList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后，实现类中代码可以看出并没有使用以上两个方法，而是重新生成的：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240114194643.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240114194658.png" alt="image.png"></p><h4 id="7-MappingTarget"><a href="#7-MappingTarget" class="headerlink" title="7.@MappingTarget"></a>7.<code>@MappingTarget</code></h4><p>标记在映射方法的目标对象参数上，允许在映射方法中修改目标对象的属性。当目标对象已经创建了，此时可以将目标对象也当做参数传递到映射器方法中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget3"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">sourceToTarget3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译后实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sourceToTarget3</span><span class="token punctuation">(</span>TargetObject targetObject<span class="token punctuation">,</span> SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span> <span class="token string">"API"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-InheritConfiguration"><a href="#8-InheritConfiguration" class="headerlink" title="8.@InheritConfiguration"></a>8.<code>@InheritConfiguration</code></h4><p>它用于在映射接口中引用另一个映射方法的配置。主要用于减少代码重复，提高映射方法的可维护性。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@InheritConfiguration</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget2"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@InheritConfiguration</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      <span class="token keyword">void</span> <span class="token function">sourceToTarget4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sourceToTarget2</code>和<code>sourceToTarget4</code>就可以直接继承使用<code>sourceToTarget</code>的规则了。避免了再次定义一份相同的规则。</p><h4 id="9-BeanMapping"><a href="#9-BeanMapping" class="headerlink" title="9. @BeanMapping"></a>9. <code>@BeanMapping</code></h4><p>用于配置映射方法级别的注解，它允许在单个映射方法上指定一些特定的配置。例如忽略某些属性、配置映射条件等(开始我们在<code>@Mapper</code>中定义)。它提供了一种在方法级别自定义映射行为的方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@BeanMapping</span><span class="token punctuation">(</span>nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget2"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译后实现的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>校验了源对象值的null</p><h4 id="10-ValueMapping"><a href="#10-ValueMapping" class="headerlink" title="10.@ValueMapping"></a>10.<code>@ValueMapping</code></h4><p>用于自定义枚举类型或其他可映射类型的值映射。该注解允许在枚举类型映射时，定义自定义的值映射规则，使得在映射中可以转换不同的枚举值。他只有两个属性值：</p><ul><li><code>source</code>：只能取值：枚举值名称，<code>MappingConstants.NULL</code>，<code>MappingConstants.ANY_REMAINING</code>，<code>MappingConstants.ANY_UNMAPPED</code></li><li><code>target</code>: 只能取值：枚举值名称<code>MappingConstants.NULL</code>，<code>MappingConstants.ANY_UNMAPPED</code></li></ul><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">enum</span> OrderType <span class="token punctuation">{</span> RETAIL<span class="token punctuation">,</span> B2B<span class="token punctuation">,</span> C2C<span class="token punctuation">,</span> EXTRA<span class="token punctuation">,</span> STANDARD<span class="token punctuation">,</span> NORMAL <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> ExternalOrderType <span class="token punctuation">{</span> RETAIL<span class="token punctuation">,</span> B2B<span class="token punctuation">,</span> SPECIAL<span class="token punctuation">,</span> DEFAULT <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ValueMappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"SPECIAL"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"EXTRA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"DEFAULT"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"STANDARD"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"DEFAULT"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"NORMAL"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> MappingConstants<span class="token punctuation">.</span>THROW_EXCEPTION<span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"C2C"</span> <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  ExternalOrderTypeEnum <span class="token function">mapOrderType</span><span class="token punctuation">(</span>OrderTypeEnum orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> ExternalOrderTypeEnum <span class="token function">mapOrderType</span><span class="token punctuation">(</span>OrderTypeEnum orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> orderType <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ExternalOrderTypeEnum externalOrderTypeEnum<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span> orderType <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> EXTRA<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>SPECIAL<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> STANDARD<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> NORMAL<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> C2C<span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span> <span class="token string">"Unexpected enum constant: "</span> <span class="token operator">+</span> orderType <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> RETAIL<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>RETAIL<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> B2B<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>B2B<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span> <span class="token string">"Unexpected enum constant: "</span> <span class="token operator">+</span> orderType <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> externalOrderTypeEnum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-Context"><a href="#11-Context" class="headerlink" title="11.@Context"></a>11.<code>@Context</code></h4><p><code>@Context</code>注解在MapStruct框架中用于标记映射方法的参数，使得这些参数作为映射上下文来处理。被标注为<code>@Context</code>的参数会在适用的情况下传递给其他映射方法、<code>@ObjectFactory</code>方法或者<code>@BeforeMapping</code>和<code>@AfterMapping</code>方法，从而可以在自定义代码中使用它们。</p><p>具体作用如下：</p><ul><li><p><strong>传递上下文信息</strong>： 当MapStruct执行映射操作时，它会将带有<code>@Context</code>注解的参数值向下传递到关联的方法中。这意味着你可以在不同的映射阶段（包括属性映射、对象工厂方法调用以及映射前后的处理方法）共享和利用这些上下文数据。</p></li><li><p><strong>调用相关方法</strong>： MapStruct还会检查带有<code>@Context</code>注解的参数类型上是否声明了<code>@BeforeMapping</code>或<code>@AfterMapping</code>方法，并在适用时对提供的上下文参数值调用这些方法。</p></li><li><p><strong>空值处理</strong>： 注意，MapStruct不会在调用与<code>@Context</code>注解参数相关的映射前后方法或对象工厂方法之前进行空值检查。调用者需要确保在这种情况下不传递null值。</p></li><li><p><strong>生成代码的要求</strong>： 为了使生成的代码能够正确调用带有<code>@Context</code>参数的方法，正在生成的映射方法声明必须至少包含那些相同类型（或可赋值类型）的<code>@Context</code>参数。MapStruct不会为缺失的<code>@Context</code>参数创建新实例，也不会以null代替它们传递。</p></li></ul><p>因此，<code>@Context</code>注解提供了一种机制，允许开发者在映射过程中携带并传播额外的状态或配置信息，增强了映射逻辑的灵活性和定制能力。</p><p>一个简单的用法示例：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>      <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-BeforeMapping"><a href="#12-BeforeMapping" class="headerlink" title="12.@BeforeMapping"></a>12.<code>@BeforeMapping</code></h4><p>这个注解可以标注在一个没有返回值的方法上，该方法会在执行实际映射操作前被调用。在此方法中可以通过<code>@Context</code>注入上下文对象，并根据需要对源对象或上下文进行修改或预处理。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>      <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>          DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@BeforeMapping</span>      <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject context<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在映射之前初始化或更新上下文中的信息  </span>        context<span class="token punctuation">.</span><span class="token function">setDateTimeFormatter</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类代码中，会发现在<code>sourceToTarget5</code>的方法第一行会调用<code>beforeFormatDate</code>这个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第一行调用@BeforeMapping的方法</span>    <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-AfterMapping"><a href="#13-AfterMapping" class="headerlink" title="13.@AfterMapping"></a>13.<code>@AfterMapping</code></h4><p>这个注解同样可以标注在一个没有返回值的方法上，但它会在完成所有属性映射后被调用。你可以在这里执行一些额外的转换逻辑或者基于映射结果和上下文进行后期处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@BeforeMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在映射之前初始化或更新上下文中的信息  </span>    context<span class="token punctuation">.</span><span class="token function">setDateTimeFormatter</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@AfterMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterHandler</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>contextObject<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后，可以发现在<code>sourceTarget5</code>的实现方法中的最后会调用<code>afterHandler</code>方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterHandler</span><span class="token punctuation">(</span> source<span class="token punctuation">,</span> targetObject<span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@BeforeMapping</code> 和 <code>@AfterMapping</code> 注解的方法默认会作用于在同一接口内使用了相同参数类型的映射方法上。如果想要在一个地方定义一个通用的前置或后置处理逻辑，并让它应用于多个映射方法，可以编写一个不带具体映射源和目标参数的方法，并在需要应用这些逻辑的所有映射方法上保持相同的<code>@Context</code>参数类型。</p><h4 id="14-ObjectFactory"><a href="#14-ObjectFactory" class="headerlink" title="14.@ObjectFactory"></a>14.<code>@ObjectFactory</code></h4><p>此注解用于声明一个工厂方法，该方法在目标对象实例化阶段被调用。这里也可以通过<code>@Context</code>获取到上下文信息，以便在创建目标对象时就考虑到某些上下文依赖。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@BeforeMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在映射之前初始化或更新上下文中的信息  </span>    context<span class="token punctuation">.</span><span class="token function">setDateTimeFormatter</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@AfterMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterHandler</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>contextObject<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ObjectFactory</span>  <span class="token keyword">default</span> TargetObject <span class="token function">createTargetObject</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 根据上下文初始化dto的一些属性  </span>    targetObject<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>contextObject<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中，会看见<code>TargetObject</code>会通过<code>createTargetObject</code>方法创建：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token function">createTargetObject</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterHandler</span><span class="token punctuation">(</span> source<span class="token punctuation">,</span> targetObject<span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ObjectFactory</code> 标记的方法则更具有针对性，它通常用于为特定的目标对象创建实例。如果你定义了一个<code>@ObjectFactory</code>方法且没有指定具体映射方法，则这个工厂方法会作为默认的实例化方式，在所有未明确提供实例化方法的映射目标对象时被调用。</p><h3 id="SpringBoot集成"><a href="#SpringBoot集成" class="headerlink" title="SpringBoot集成"></a>SpringBoot集成</h3><p>上面我们说到了<code>@Mapper</code>注解以及他的属性<code>componentModel</code>，将该值设置为<code>Spring</code>也就是<code>MappingConstants.ComponentModel.SPRING</code>值时，这个映射器生成的实现类就可以被<code>Spring</code>容器管理，这样就可以在使用时就可以注入到其他组件中了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyNameConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> imports <span class="token operator">=</span> <span class="token punctuation">{</span>SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> componentModel <span class="token operator">=</span> MappingConstants<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>SPRING<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的实现类自动加上<code>@Component</code>注解，并将其注册为Spring Bean，：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span> <span class="token string">"API"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以在其他组件中注入<code>MyMapper</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootCodeApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MyMapper mapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>      <span class="token keyword">void</span> <span class="token function">testMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          TargetObject targetObject <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">sourceToTarget</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SourceObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMapper</span><span class="token punctuation">(</span>MyMapper mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mapper <span class="token operator">=</span> mapper<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MapStruct是一个利用注解和编译时代码生成技术的Java Bean映射工具，通过在接口上定义映射规则并自动创建实现类，极大地简化了对象转换过程。相比于手动编写映射代码及运行时反射工具如Dozer，MapStruct提供了更高的性能、更好的可读性和易于维护性。它支持灵活的字段映射配置、自定义转换逻辑，并可通过组件模型适应不同框架，是提升开发效率与降低维护成本的理想对象映射解决方案。</p><p>写在最后：可能大家觉得要防御性编程，但是咱可以把编译后实现类的代码CV到你的代码里面就可以了，这样免去了自己手写<code>get</code>，<code>set</code>方法映射，这样不出错，还可以节省时间摸鱼。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
            <tag> MapStruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几款IDEA插件，助你玩转Mybatis开发</title>
      <link href="/article/ideamybatisplugins.html"/>
      <url>/article/ideamybatisplugins.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎老铁来到我的博客，扫码下图关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><blockquote><p>写在前面，假如有老铁乘坐传送门过来的，建议扫码关注公众号之后，后台回复[<mark style="background: #FF5582A6;">插件</mark>]即可获取，安装后可享受一下<code>MyBatis Log</code>带来的便捷，真香啊。。。</p></blockquote><p>在软件开发的征程中，MyBatis 框架一直是 Java 开发者中的首选，其简洁的 SQL 映射和强大的灵活性使其成为持久层框架的瑰宝。然而，在我们开发过程中，很多人都曾面对过一个相对繁琐的问题：如何高效而准确地将数据库表映射到实体类和相应的 Mapper 文件中？如何将单测日志中的<code>SQL LOG</code> 快速高效的解析出来？</p><p>当然在将数据库表映射到实体类和相应的 Mapper 文件中我们可以采用代码生成器，比如<code>MyBatis Generator</code>或者结合<code>Spring Freemarker</code>手写代码模板生成， 很多年前用过，但是都是基于配置文件，还要改配置，一点都不方便，下面我们介绍几款插件解决这个问题，当然有免费的插件。。。。</p><h3 id="MyBatisCodeHelperPro"><a href="#MyBatisCodeHelperPro" class="headerlink" title="MyBatisCodeHelperPro"></a>MyBatisCodeHelperPro</h3><p>最好的Mybatis代码提示,代码检测插件,快速生成代码,测试sql,日志转sql等.功能超级全，简直是开发<code>Mybatis</code>用的神级插件。这是官方对这个插件的介绍：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112151551.png" alt="image.png"></p><p>根据介绍，真的可以满足我们日常开发<code>Mybatis</code>所需要的所有功能，除了不会帮你自动写代码以外。。。。</p><p><code>IDEA</code>使用内置的数据库客户端，连接上数据库，选中需要生成代码的表，可以将实体，<code>mapper</code>，<code>mapper xml</code>生成到我们指定的目录里面，我们还可以选择生成的mapper方法，例如：插入，部分字段插入，更新，删除以及查询。最最最让人喜欢的就是在xml中写<code>SQL</code>时的智能提示，这可以快速方便的帮助我们写动态SQL，并且还不会因为字段手写可能会导致的错误。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112145032.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112150712.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112150740.png" alt="image.png"></p><p><strong>但是，他是收费的，并且只能在IDEA企业版中安装</strong></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112152112.png" alt="image.png"></p><p>虽然未激活也可以使用，但是功能比激活状态下的要少很多。</p><h3 id="MybatisX"><a href="#MybatisX" class="headerlink" title="MybatisX"></a>MybatisX</h3><p><strong>首先，他是免费的</strong>。他能做到将表映射到对应目录下的实体，mapper，mapperXml，以及可以从mapper的具体方法链接到xml中的具体sql。但是并没有<code>MybatisCodeHelpPro</code>那么多功能，特别是智能提示，只能做到对数据库字段的提示，没法做到<code>#{}</code>中的提示。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112183152.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112183626.png" alt="image.png"></p><p>如果想白嫖的，<strong>建议安装这个插件，比那些代码生成模板好用。</strong></p><h3 id="Mybatis-Log"><a href="#Mybatis-Log" class="headerlink" title="Mybatis Log"></a><code>Mybatis Log</code></h3><p>可以把IDEA控制中打印的SQL执行的日志，直接转换为可以在数据库中直接执行的SQL，不需要我们自己去替换SQL的参数。直接选中日志中的log右键转换即可。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112190935.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112164411.png" alt="image.png"><br>直接可以运行的sql，在我们排查数据问题时真的可以节省很多时间，还不用出错。</p><p>还有一个功能：假如你从其他地方拷贝过来的SQL LOG,放在IDEA里面的某个文件中也可以右键使用<code>Mybatis Log</code>转换。</p><p><strong>但是，正版的它也是收费的</strong></p><p><strong>但是，我有破解版。。。。</strong></p><p>传送门：扫码关注公众号后，后台回复[<mark style="background: #FF5582A6;">插件</mark>]即可获取，安装后可享受一下<code>Mybatis Log</code>带来的便捷，真香啊。。。</p><p>当然还有一个<code>Mybatis Log Free</code> ，但是他不能在控制台中选中某一条SQL LOG 进行转化，他只能将控制台中所有的<code>SQL LOG</code>转换为<code>SQL</code>。并且它只能在控制台中转换LOG，IDEA中文件的LOG无法转换。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> IDEA插件 </tag>
            
            <tag> MyBatis插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java基础（一）Java中的四种内部类</title>
      <link href="/article/javainnerclass.html"/>
      <url>/article/javainnerclass.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>当谈到Java基础内部类时，我们通常指的是在一个类的内部定义的另一个类。内部类在Java中有四种类型：成员内部类、静态内部类、局部内部类和匿名内部类。本文将重点介绍成员内部类和静态内部类的用法和示例。</p><h3 id="一、成员内部类"><a href="#一、成员内部类" class="headerlink" title="一、成员内部类"></a>一、成员内部类</h3><p>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。接口只是解决了部分问题，而内部类使得多重继承的解决方案变得更加完整。而内部类带来的许多好处：</p><ul><li><p>1、内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立。</p></li><li><p>2、在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或者继承同一个类。</p></li><li><p>3、创建内部类对象的时刻并不依赖于外围类对象的创建。</p></li><li><p>4、内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。</p></li><li><p>5、内部类提供了更好的封装，除了该外围类，其他类都不能访问。</p></li></ul><p>因为内部类可以随意使用外部类的成员变量（包括私有）而不用生成外部类的对象，这也是内部类的唯一优点，如同心脏可以直接访问身体的血液，而不是通过医生来抽血。内部类在没有同名成员变量和局部变量的情况下，内部类会直接访问外部类的成员变量，而无需指定Out.this.属性名，否则，内部类中的局部变量会覆盖外部类的成员变量。而访问内部类本身的成员变量可用this.属性名，访问外部类的成员变量需要使用Out.this.属性名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 成员内部类   *   *1.成员内部类中的方法可以直接使用外部类的实例变量和实例方法。   *2.在成员内部类中可以直接用内部类创建对象   *3.成员内部类没有用static修饰且定义在在外部类类体中。   * @author 码农Academy   *   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberInnerClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是外部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>                  <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是内部类的成员变量"</span><span class="token punctuation">;</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类的成员变量："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token function">outerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问外部类方法  </span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类再次访问外部类的成员变量："</span><span class="token operator">+</span>MemberInnerClass<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> InnerClass <span class="token function">makeInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//在外部类方法中创建内部类实例  </span>                InnerClass innerClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> innerClass<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  MemberInnerClass outerClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MemberInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//成员内部类需要通过外部类的实例才能创建对象，与实例变量需要通过对象来访问相似  </span>                <span class="token comment" spellcheck="true">//MemberInnerClass.InnerClass innerClass  =outerClass.makeInnerClass();  </span>                <span class="token comment" spellcheck="true">//1.开头的MemberInnerClass是为了标明需要生成的内部类对象在哪个外部类当中  </span> <span class="token comment" spellcheck="true">//2.必须先有外部类的对象才能生成内部类的对象，因为内部类的作用就是为了访问外部类中的成员变量  </span>                MemberInnerClass<span class="token punctuation">.</span>InnerClass innerClass <span class="token operator">=</span> outerClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  innerClass<span class="token punctuation">.</span><span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、静态内部类"><a href="#二、静态内部类" class="headerlink" title="二、静态内部类"></a>二、静态内部类</h3><p>如果用static 将内部内静态化，那么内部类就只能访问外部类的静态成员变量，具有局限性，对于实例方法或者非静态变量，只有通过对象引用才能访问，static内部类中不能使用this关键字来访问外部类中的实例成员 。其次，因为内部类被静态化，因此Out.In可以当做一个整体看，可以直接new 出内部类的对象（通过类名访问static，生不生成外部类对象都没关系）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 静态嵌套类   * 与类的其他成员相似，可以用static修饰内部类，这样的类称为静态内部类。   * 静态内部类与静态内部方法相似，只能访问外部类的static成员，不能直接访问外部类的实例变量，   * 对于实例方法或者非静态变量，只有通过对象引用才能访问。   * 由于static内部类不具有任何对外部类实例的引用，因此static内部类中不能使用this关键字来访问外部类中的实例成员，   * 但是可以访问外部类中的static成员。这与一般类的static方法想通   * @author 码农Academy   *   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticNestedClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的静态变量"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String outStr<span class="token operator">=</span><span class="token string">"我是外部类的非静态变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>                  <span class="token keyword">private</span>  String str<span class="token operator">=</span><span class="token string">"我说是静态内部类的变量"</span><span class="token punctuation">;</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问外部类："</span><span class="token operator">+</span>StaticNestedClass<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 对于实例方法或者非静态变量，只有通过对象引用才能访问。  </span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问外部类非静态成员变量："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">StaticNestedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>outStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问内部类："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//因为内部类被静态化，因此StaticNestedClass.InnerClass可以当做一个整体看，可以直接new 出内部类的对象（通过类名访问static，生不生成外部类对象都没关系）  </span>                StaticNestedClass<span class="token punctuation">.</span>InnerClass innerClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StaticNestedClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  innerClass<span class="token punctuation">.</span><span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、局部内部类"><a href="#三、局部内部类" class="headerlink" title="三、局部内部类"></a>三、局部内部类</h3><p>我们将内部类移到了外部类的方法中，然后在外部类的方法中再生成一个内部类对象去调用内部类方法。方法中的内部类可以访问外部类成员。对于方法的参数和局部变量，必须有final修饰才可以访问(JDK 1.8以后不需要！)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 方法内部类（局部内部类）   * 在方法体或语句块（包括方法、构造方法、局部块或静态初始化块）内部定义的类成为局部内部类。   * 局部内部类不能加任何访问修饰符，因为它只对局部块有效。   * 1.局部内部类只在方法体中有效，就想定义的局部变量一样，在定义的方法体外不能创建局部内部类的对象   * 2.在方法内部定义类时，应注意以下问题：   *  (1).方法定义局部内部类同方法定义局部变量一样，不能使用private、protected、public等访问修饰说明符修饰，也不能使用static修饰，但可以使用final和   abstract修饰   *  (2).方法中的内部类可以访问外部类成员。对于方法的参数和局部变量，必须有final修饰才可以访问(JDK 1.8以后不需要！)。   *  (3).static方法中定义的内部类可以访问外部类定义的static成员   * @author 码农Academy   *   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodInnerClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String outerStr<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是外部类地方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">method</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>              <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是方法内部类的成员变量"</span><span class="token punctuation">;</span>              <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问方法参数："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问内部类的成员变量："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问外部类的成员变量："</span><span class="token operator">+</span>outerStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问外部类与内部类同名的成员变量："</span><span class="token operator">+</span>MethodInnerClass<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>           <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          MethodInnerClass out<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MethodInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          out<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"成员内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、匿名内部类"><a href="#四、匿名内部类" class="headerlink" title="四、匿名内部类"></a>四、匿名内部类</h3><p>定义类的最终目的是创建一个类的实例，但是如果某个类的实例只是用一次，则可以将类的定义与类的创建，放到与一起完成，或者说在定义类的同时就创建一个类。以这种方法定义的没有名字的类成为匿名内部类。  </p><p>匿名内部类因为没有名字，所以不可以继承其他类，但若某个内部类作为一个接口，匿名内部类可以实现接口。我们在使用Lambda表达式时简化匿名内部类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 匿名内部类   * @author 码农Academy   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousInnerClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> Inner <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">,</span> String city<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">private</span> String nameStr <span class="token operator">=</span> name<span class="token punctuation">;</span>             <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> nameStr<span class="token punctuation">;</span>              <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java四大内部类 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程的利器：Pair和Triple无缝解决多值返回问题，助力编写高效代码</title>
      <link href="/article/javapairtriple.html"/>
      <url>/article/javapairtriple.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>在实际编码中，经常会遇到一个方法需要返回多个值的情况，你编写一个方法，需要同时返回某个操作的结果和一些相关的附加信息。使用传统的方式，你可能需要创建一个包含这些信息的自定义类或者使用集合（如 <code>Map</code>）来存储这些值。然而，这往往使得代码变得臃肿，而且对于调用方来说，理解和提取这些值可能会显得有些繁琐。</p><p>这时使用<code>org.apache.commons.lang3.tuple</code>下的<code>Pair</code> 或 <code>Triple</code> 及其子类是一种非常便捷的解决方案。这些类提供了一种清晰、简单的方式来组织和传递多个相关联的值，使得代码更加直观和易于理解。</p><p>使用 <code>Pair</code> 或 <code>Triple</code> 就能轻松解决这个问题。你可以在一个方法中返回一个 <code>Pair</code> 或 <code>Triple</code> 对象，其中包含你想要传递的多个值。这样，你可以清晰地表示这些值之间的关系，而且调用方可以轻松地访问和使用这些值，而无需繁琐的解包过程。</p><p>在接下来的部分，我们将深入研究如何在这类场景中使用 <code>Pair</code> 和 <code>Triple</code> 及其子类，以及它们如何简化我们在编码中常遇到的多值返回问题。</p><p>引入依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pair-类介绍"><a href="#Pair-类介绍" class="headerlink" title="Pair 类介绍"></a>Pair 类介绍</h3><p><code>Pair</code> 类是<code>org.apache.commons.lang3</code>库提供的一个简单的键值对容器，用于表示两个相关联的值。其主要作用是将两个值组织在一起，提供一种便捷的方式进行传递和处理。</p><p>首先我们来看一下<code>Pair</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象类，表示简单的键值对。 * 实现了 Map.Entry 接口，支持在各种集合中使用。 * 实现了 Comparable 接口，用于比较两个 Pair 对象的大小。 * 可序列化，支持对象的序列化和反序列化。 * * @param &lt;L> 左值的类型 * @param &lt;R> 右值的类型 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">>></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4954918890077093841L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空数组，用于表示空的 Pair 对象数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Pair<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ARRAY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PairAdapter</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个空的 Pair 数组。     *     * @return 空的 Pair 数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Pair<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_ARRAY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 静态工厂方法，创建一个新的 ImmutablePair 对象，表示给定的左右值的键值对。     *     * @param left  左值     * @param right 右值     * @param &lt;L>   左值的类型     * @param &lt;R>   右值的类型     * @return ImmutablePair 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ImmutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 静态工厂方法，创建一个新的 ImmutablePair 对象，表示给定 Map.Entry 对象的键值对。     *     * @param pair Map.Entry 对象     * @param &lt;L>  左值的类型     * @param &lt;R>  右值的类型     * @return ImmutablePair 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ImmutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回左值，实现了 Map.Entry 接口。     *     * @return 左值     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> L <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法，由子类实现，用于获取左值。     *     * @return 左值     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法，由子类实现，用于获取右值。     *     * @return 右值     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回右值，实现了 Map.Entry 接口。     *     * @return 右值     */</span>    <span class="token keyword">public</span> R <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Pair</code>类是一个抽象类，它有两个子类<code>ImmutablePair</code>和<code>MutablePair</code>。接下来我们介绍一下这两个子类，也是我们要使用的两个类。</p><h4 id="MutablePair"><a href="#MutablePair" class="headerlink" title="MutablePair"></a>MutablePair</h4><p><code>MutablePair</code>是一个可变的。它允许在创建后动态修改键和值，提供了更大的灵活性。但是它是线程不安全的。<br>我们可以根据它提供的几个静态方法或者它的构造器去构造一个<code>MutablePair</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个空的 MutablePair</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> MutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，传入给定的左右值的键值对，创建并返回一个MutablePair 对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> MutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，传入给定 Map.Entry 对象的键值对，创建并返回一个新的MutablePair 对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> MutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> pair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 无参构造器</span><span class="token keyword">public</span> <span class="token function">MutablePair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 指定左右值的键值对的构造器</span><span class="token keyword">public</span> <span class="token function">MutablePair</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以根据它的几个方法修改键和值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 修改左值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span>L left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改右值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span>R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改新的右值，并返回之前的右值。</span><span class="token keyword">public</span> R <span class="token function">setValue</span><span class="token punctuation">(</span>R value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以根据它的几个方法获取键和值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取左值</span><span class="token keyword">public</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取左值</span><span class="token keyword">public</span> <span class="token keyword">final</span> L <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取右值</span><span class="token keyword">public</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取右值 </span><span class="token keyword">public</span> R <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然我们看到它的<code>left</code>以及<code>right</code>都是<code>public</code>的。所以我们也可以直接取值，不用使用它的<code>get</code>方法。</p></blockquote><h4 id="ImmutablePair"><a href="#ImmutablePair" class="headerlink" title="ImmutablePair"></a>ImmutablePair</h4><p><code>ImmutablePair</code>是<code>Pair</code>的一个不可变的子类。它在创建完成之后，不允许改变键和值。它是线程安全的。</p><p>我们可以看一下它如何进行构造的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个空的 ImmutablePair 数组。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个包含 null 左值和 null 右值的 ImmutablePair 对象，表示空值。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">nullPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个包含指定左值和 null 右值的 ImmutablePair 对象。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">left</span><span class="token punctuation">(</span>L left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个包含 null 左值和指定右值的 ImmutablePair 对象。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">right</span><span class="token punctuation">(</span>R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，创建并返回一个新的 ImmutablePair 对象，表示给定的左右值的键值对。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，创建并返回一个新的 ImmutablePair 对象，表示给定 Map.Entry 对象的键值对。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> pair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有参构造器 传入给定的左右值的键值对。</span><span class="token keyword">public</span> <span class="token function">ImmutablePair</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以根据它的几个方法获取键和值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取左值</span><span class="token keyword">public</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取左值</span><span class="token keyword">public</span> <span class="token keyword">final</span> L <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取右值</span><span class="token keyword">public</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取右值 </span><span class="token keyword">public</span> R <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然我们看到它的<code>left</code>以及<code>right</code>都是<code>public</code>的。所以我们也可以直接取值，不用使用它的<code>get</code>方法。</p></blockquote><p>那我们再看一下为什么<code>ImmutablePair</code>是不可变的，并且是线程安全的。<br>首先我们看一下它的左值以及右值都是<code>final</code>的，不可更改的。并且调用它的<code>setValue</code>会抛出<code>UnsupportedOperationException</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> L left<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> R right<span class="token punctuation">;</span><span class="token keyword">public</span> R <span class="token function">setValue</span><span class="token punctuation">(</span>R value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类中的 <code>left</code> 和 <code>right</code> 成员变量被声明为 <code>final</code>，这意味着它们在对象创建后不能被修改，确保了线程安全性。<code>ImmutablePair</code> 被设计为不可变的键值对类，即一旦创建，其内容不可更改。这确保了在多线程环境中，不会有并发修改的问题。</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 返回MutablePair   * @param userDO   * @return   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> MutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> MutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 返回ImmutablePair   * @param userDO   * @return   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> ImmutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ImmutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      UserDO userDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> mutablePair <span class="token operator">=</span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" MutablePair修改前："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      mutablePair<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" MutablePair修改后："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      ImmutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> immutablePair <span class="token operator">=</span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ImmutablePair修改前："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      immutablePair<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ImmutablePair修改后："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果，我们发现<code>ImmutablePair</code>在修改value时报错：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112002229.png" alt="image.png"></p><p><code>Pair</code> 类及其子类 <code>ImmutablePair</code> 和 <code>MutablePair</code> 是用于表示键值对的实用工具类。<code>ImmutablePair</code> 是不可变的、线程安全的，适用于安全共享；<code>MutablePair</code> 允许动态修改值，但不具备线程安全性，适用于单线程环境。它们在方法返回多个值时提供了简便的解决方案，提高了代码的灵活性。</p><h3 id="Triple介绍"><a href="#Triple介绍" class="headerlink" title="Triple介绍"></a>Triple介绍</h3><p><code>Triple</code> 是一个用于表示三元组的抽象类。三元组是由三个元素组成的有序集合，其中每个元素都有特定的位置，分别称为左值（Left）、中间值（Middle）和右值（Right）。<code>Triple</code> 类提供了一种便捷的方式来组织和处理这种具有固定顺序的数据。可以在不创建专门类的情况下轻松返回三个值。通过 <code>Triple</code>，开发者可以更方便地处理包含三个元素的数据，减少了创建和维护多个变量的复杂性，使代码更加简洁。</p><p>我们来看一下<code>Triple</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示包含三个元素的三元组的抽象类 Triple。 * * 该类是一个抽象实现，定义了基本的 API，将元素分别称为 'left'、'middle' 和 'right'。 * * 子类的实现可以是可变的或不可变的。对存储的对象类型没有限制。 * Triple 对象的可变性取决于其中存储的对象是否是可变的。如果存储的是可变对象，那么 Triple 本身也就变得可变，因为存储的对象状态可以被修改。 * 如果存储的是不可变对象，那么Triple 对象在创建后就保持不可变。 * */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Triple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">>></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 一个空数组。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Triple<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ARRAY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TripleAdapter</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回可分配而无需编译器警告的空数组单例。     *     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_ARRAY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取由三个对象组成的不可变三元组，推断出泛型类型。     *     * 此工厂方法允许使用推断类型来创建三元组以获取泛型类型。     *     * @param left   左元素，可以为 null     * @param middle 中间元素，可以为 null     * @param right  右元素，可以为 null     * @return 由三个参数形成的三元组，非 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableTriple</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取此三元组的左元素。     *     * @return 左元素，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取此三元组的中间元素。     *     * @return 中间元素，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> M <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取此三元组的右元素。     *     * @return 右元素，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Triple</code>是一个抽象类，它有两个子类：可变<code>MutableTriple</code> 以及不可变 <code>ImmutableTriple</code>。</p><h4 id="MutableTriple"><a href="#MutableTriple" class="headerlink" title="MutableTriple"></a>MutableTriple</h4><p><code>MutableTriple</code> 是可变的，原因在于它提供了公共的设置（set）方法，允许在创建后修改其内部值。具体来说，<code>MutableTriple</code> 提供了 <code>setLeft</code>、<code>setMiddle</code> 和 <code>setRight</code> 方法，使得在对象创建后可以修改左、中、右元素的值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示由三个 {@code Object} 元素组成的可变三元组。 * * 非线程安全 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MutableTriple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Triple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过推断泛型类型获取三个对象的可变三元组。     *     * 该工厂允许通过推断泛型类型创建三元组。     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> MutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MutableTriple</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** 左对象 */</span>    <span class="token keyword">public</span> L left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 中间对象 */</span>    <span class="token keyword">public</span> M middle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 右对象 */</span>    <span class="token keyword">public</span> R right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个新的三元组实例，包含三个 null 值。     */</span>    <span class="token keyword">public</span> <span class="token function">MutableTriple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建一个新的三元组实例。     *     * @param left   左值，可以为 null     * @param middle 中间值，可以为 null     * @param right  右值，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token function">MutableTriple</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middle <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置三元组的左元素。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置三元组的中间元素。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMiddle</span><span class="token punctuation">(</span><span class="token keyword">final</span> M middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middle <span class="token operator">=</span> middle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置三元组的右元素。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span><span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MutableTriple</code> 被明确标记为非线程安全。</p><h4 id="ImmutableTriple"><a href="#ImmutableTriple" class="headerlink" title="ImmutableTriple"></a>ImmutableTriple</h4><p><code>ImmutableTriple</code> 是一个不可变的三元组类，由三个泛型元素（left、middle、right）组成。不可变意味着一旦创建，其状态无法修改。该类被设计为线程安全的，但需要注意，如果存储在三元组中的对象是可变的，那么三元组本身实际上就不再是不可变的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 一个由三个元素组成的不可变三元组。 * * ImmutableTriple 是一个最终类，被设计成不可变的，即在实例化后其状态不可更改。 * 如果存储在三元组中的三个对象都是线程安全的，则该类是线程安全的。类的最终性防止了子类化，确保不会添加不希望的行为。 * * 线程安全的 如果三个对象都是线程安全的 * */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ImmutableTriple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Triple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回可以在不触发编译器警告的情况下分配的空数组单例。     * @return 可以在不触发编译器警告的情况下分配的空数组单例。     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_ARRAY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由 null 组成的不可变三元组。     *     * @return 一个由 null 组成的不可变三元组。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">nullTriple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过推断泛型类型获得由三个对象组成的不可变三元组。     *     * 此工厂允许使用推断创建三元组以获得泛型类型。     *     * @return 由三个参数形成的不可变三元组，不为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableTriple</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** 左对象 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> L left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 中间对象 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> M middle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 右对象 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> R right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构造方法 创建一个新的三元组实例。     *     */</span>    <span class="token keyword">public</span> <span class="token function">ImmutableTriple</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middle <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ImmutableTriple</code> 被声明为 <code>final</code>，表示不可继承，确保不可变性。确保不会有子类添加或修改行为。然后类中的属性 <code>left</code>、<code>middle</code>、<code>right</code> 被声明为 <code>final</code>，表示它们在实例化后无法被修改。类中没有提供修改元素的公共方法。<code>ImmutableTriple</code> 主张不可变性，不提供修改实例状态的方法。当然如果存储在三元组中的对象是可变的，则整个三元组就变得可变。这是因为虽然 <code>ImmutableTriple</code> 本身是不可变的，但如果存储的对象是可变的，它们的状态可能会发生变化。</p><p>类声明中使用 <code>#ThreadSafe#</code> 标记，表示在存储的三个对象都是线程安全的情况下，<code>ImmutableTriple</code> 是线程安全的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 返回可变Truple  * @param userDO  * @return  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> MutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> MutableTriple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**  * 返回不可变Triple  * @param userDO  * @return  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> ImmutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ImmutableTriple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      UserDO userDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> mutableTriple <span class="token operator">=</span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mutableTriple改变前的值："</span> <span class="token operator">+</span> mutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      mutableTriple<span class="token punctuation">.</span><span class="token function">setMiddle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mutableTriple改变后的值："</span> <span class="token operator">+</span> mutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      ImmutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> immutableTriple <span class="token operator">=</span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImmutableTriple改变前的值："</span> <span class="token operator">+</span> immutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      UserDO userFromTriple <span class="token operator">=</span> immutableTriple<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      userFromTriple<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImmutableTriple改Right键值对象的值："</span> <span class="token operator">+</span> immutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 因ImmutableTriple 不可变，无法通过set方法修改键值。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用 Pair 和 Triple 类可以简化代码、提高可读性，使关联数据更清晰，保持类型安全，增强代码清晰度，提高扩展性，并提供丰富的功能，从而使开发人员更高效地处理相关数据，编写更简洁可读的代码，提升代码质量和开发效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 代码工具类 </tag>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：说一下Mysql中from多表跟join表的区别</title>
      <link href="/article/mysqlfromjoin.html"/>
      <url>/article/mysqlfromjoin.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>在日常的数据库查询中，我们常常需要同时涉及多个表的数据。然而，在处理多表查询时，我们可能会使用不同的语法来达到相同的目的。最近，我的一个同事向我提出了一个问题，他的查询语句使用了 <code>FROM</code> 多表的方式，而我通常更喜欢使用 <code>INNER JOIN</code>。他问：“这两种写法有什么区别吗？它们真的是等效的吗？”这个问题激发了我对这两种写法进行更深入思考的兴趣，我决定动手试试。</p><p>在动手之前，我们先创建两张表<code>t_order</code>和<code>t_address</code>。</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS `t_order`;  CREATE TABLE `t_order`(   id                 bigint UNSIGNED AUTO_INCREMENT COMMENT '自增主键'          PRIMARY KEY,   `order_no` varchar(16) NOT NULL DEFAULT '' COMMENT '订单编号',  `create_time`      datetime        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',  ) ENGINE = InnoDB    AUTO_INCREMENT = 1    DEFAULT CHARSET = utf8mb4 COMMENT ='测试订单表';  DROP TABLE IF EXISTS `t_address`;  CREATE TABLE `t_order`(   id                 bigint UNSIGNED AUTO_INCREMENT COMMENT '自增主键'          PRIMARY KEY,   `order_id` bigint UNSIGNED NOT NULL DEFAULT 0 COMMENT '订单ID',   `address_no` varchar(16) NOT NULL DEFAULT '' COMMENT '地址编号',  `create_time`      datetime        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',  ) ENGINE = InnoDB    AUTO_INCREMENT = 1    DEFAULT CHARSET = utf8mb4 COMMENT ='测试订单地址表';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试表，无任何业务含义。</p></blockquote><h3 id="FROM-多表"><a href="#FROM-多表" class="headerlink" title="FROM 多表"></a><code>FROM</code> 多表</h3><p>在 SQL 查询中，使用 <code>FROM</code> 多表的方式是一种直接的表连接方法。通过在 <code>FROM</code> 子句中列出多个表，我们可以将这些表的行组合在一起，形成一个结果集。例如：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,          o.order_no,          a.id,          a.order_id,         a.address_no  FROM t_order o,       t_address a  WHERE o.id = a.order_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述查询使用逗号 <code>,</code> 将表 <code>table1</code> 和 <code>table2</code> 连接在一起，并通过 <code>WHERE</code> 子句指定了连接条件。这种写法看似简单直观，但在实际应用中可能引发一些潜在问题。如果没有明确指定连接条件，就有可能导致笛卡尔积的产生。笛卡尔积是指将一个表的每一行与另一个表的每一行组合在一起，形成一个庞大的结果集。这可能导致性能下降和不正确的查询结果。如下这种写法：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,          o.order_no,          a.id,          a.order_id,         a.address_no  FROM t_order o,       t_address a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a><code>INNER JOIN</code></h3><p>相比于直接使用 <code>FROM</code> 多表，使用 <code>INNER JOIN</code> 提供了更为灵活、明确的连接方式，有助于避免潜在的问题并提升查询的可读性。让我们深入探讨 <code>INNER JOIN</code> 的作用和优势。<code>INNER JOIN</code> 是一种显式的连接语法，通过在 <code>FROM</code> 子句中使用 <code>INNER JOIN</code> 关键字明确指定连接条件。其语法如下：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,         o.order_no,         a.id,         a.order_id,         a.address_no  FROM t_order o  INNER JOIN t_address a ON o.id = a.order_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>INNER JOIN</code> 的主要优势之一是明确指定连接条件。通过在 <code>ON</code> 子句中明确写出连接条件，我们避免了使用逗号 <code>,</code> 连接时可能忽略连接条件的风险。这样做有助于代码的可读性和维护性，减少了产生笛卡尔积的可能性。</p><p>当然还有其他的<code>JOIN</code>，例如：<code>LEFT JOIN</code>和<code>RIGHT JOIN</code>。我们会在后续的文章中继续介绍。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>在Mysql中使用<code>FROM</code>查询多表和使用<code>INNER JOIN</code>连接,查询结果,查询效率是一样的。</strong></p><h4 id="从执行顺序分析"><a href="#从执行顺序分析" class="headerlink" title="从执行顺序分析"></a>从执行顺序分析</h4><p>我们先来看一下Msql的<code>SELECT</code>语句的执行顺序：</p><ol><li><p><strong>FROM 子句：</strong> 从指定的表中获取数据。在这里，涉及到的是表 <code>a</code> 和 <code>b</code>。</p></li><li><p><strong>JOIN 操作：</strong> 如果查询中包含连接操作（如 <code>INNER JOIN</code> 或 <code>,</code> 符号表示的连接），则会执行连接操作。连接操作的目的是将来自不同表的行组合起来。</p></li><li><p><strong>ON 或 WHERE 子句：</strong> 在连接操作后，应用连接条件。如果是 <code>INNER JOIN</code>，连接条件通常包含在 <code>ON</code> 子句中。如果是逗号 <code>,</code> 符号表示的连接，连接条件在 <code>WHERE</code> 子句中。</p></li><li><p><strong>SELECT 子句：</strong> 选择要返回的列。在这里，使用 <code>SELECT *</code> 表示选择所有列。</p></li><li><p><strong>GROUP BY 子句：</strong> 如果有 <code>GROUP BY</code> 子句，则按指定的列对结果进行分组。</p></li><li><p><strong>HAVING 子句：</strong> 如果有 <code>HAVING</code> 子句，则应用于分组后的结果。</p></li><li><p><strong>ORDER BY 子句：</strong> 如果有 <code>ORDER BY</code> 子句，则按指定的列对结果进行排序。</p></li><li><p><strong>LIMIT 子句：</strong> 如果有 <code>LIMIT</code> 子句，则限制返回的行数。</p></li></ol><p>根据这个执行顺序，可以解释两个查询语句的等效性。在第一个查询 <code>SELECT o.*,a.* FROM t_order o INNER JOIN t_address a ON o.id = a.order_id</code> 中，连接条件是通过 <code>ON</code> 子句指定的；而在第二个查询 <code>SELECT o.*,a.* FROM t_order o,t_address a WHERE o.id = a.order_id</code> 中，连接条件则是通过 <code>WHERE</code> 子句指定的。然而，在执行时，MySQL 会在连接操作阶段考虑这两个条件，并选择合适的连接算法来执行连接操作。</p><p>因此，尽管语法稍有不同，但在执行时，MySQL 解释这两个查询时会考虑连接条件，因此它们具有相同的功能。在实际执行中，MySQL 优化器会选择最有效的执行计划，确保得到相同的结果。</p><h4 id="从执行计划分析"><a href="#从执行计划分析" class="headerlink" title="从执行计划分析"></a>从执行计划分析</h4><p>执行计划是由查询优化器生成的，它是描述查询引擎如何获取和处理数据的计划。优化器在生成执行计划时考虑多个因素，包括表的大小、索引情况、连接条件等，以确定最佳的执行计划。</p><p>我们来执行一下通过<code>FROM</code>的方式的计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111174830.png" alt="image.png"></p><p>接着我们再来看一下<code>INNER JOIN</code>的方式的计划：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111174940.png" alt="image.png"></p><p>通过对比，我们发现两者在执行计划上并没有什么区别。</p><h3 id="实例验证"><a href="#实例验证" class="headerlink" title="实例验证"></a>实例验证</h3><p>接文章开头创建的两张表，我们向t_order表中插入100w条数据，t_address表中插入10w条数据进行验证。</p><p>我们开始执行<code>FROM</code>的方式的sql：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,       o.order_no,       a.id,       a.order_id,       a.address_noFROM t_order o,     t_address aWHERE o.id = a.order_id  limit 0, 100000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111192515.png" alt="image.png"></p><p>我们在执行一次<code>INNER JOIN</code>的方式的sql:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,       o.order_no,       a.id,       a.order_id,       a.address_noFROM t_order oINNER JOIN t_address a ON o.id = a.order_id limit 0, 100000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111192721.png" alt="image.png"><br>可以看出两者查询所花费的时间相差无几。再看一下两种方式的执行计划，也是一样的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由上述我们可以看出在Mysql中使用<code>FROM</code>查询多表和使用<code>JOIN</code>连接，查询结果以及查询效率是一样的。</p><p>但是我们最好还是使用 <code>INNER JOIN</code> ，它的写法更直观、更易于优化器理解，有助于生成更优化的执行计划。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql查询 </tag>
            
            <tag> Mysql面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot统一结果返回，统一异常处理，大牛都这么玩</title>
      <link href="/article/springbootcommonresponse.html"/>
      <url>/article/springbootcommonresponse.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在开发Spring Boot应用时，我们经常面临着不同的控制器方法需要处理各种不同类型的响应结果，以及在代码中分散处理异常可能导致项目难以维护的问题。你是否曾经遇到过在不同地方编写相似的返回格式，或者在处理异常时感到有些混乱？这些看似小问题的积累，实际上可能对项目产生深远的影响。统一结果返回和统一异常处理并非只是为了规范代码，更是为了提高团队的协作效率、降低项目维护的难度，并使代码更易于理解和扩展。</p><p>本文的目的是帮助你更好地理解和应用Spring Boot中的统一结果返回和统一异常处理。通过详细的讨论和实例演示，我们将为你提供一套清晰的指南，让你能够在自己的项目中轻松应用这些技术，提高代码质量，减轻开发压力。</p><h3 id="统一结果返回"><a href="#统一结果返回" class="headerlink" title="统一结果返回"></a>统一结果返回</h3><p>统一结果返回是一种通过定义通用的返回格式，使所有的响应结果都符合同一标准的方法。这有助于提高代码的一致性，减少重复代码的编写，以及使客户端更容易理解和处理API的响应。统一结果返回不仅规范了代码结构，还能提高团队协作效率，降低项目维护的难度。</p><p>接下来让我们一起看看在SpringBoot中如何实现统一结果返回。</p><h4 id="1-定义通用的响应对象"><a href="#1-定义通用的响应对象" class="headerlink" title="1. 定义通用的响应对象"></a>1. 定义通用的响应对象</h4><p>当实现统一结果返回时，需要创建一个通用的响应对象，定义成功和失败的返回情况，并确保在接口中使用这个通用返回对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Setter</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultResponse</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>1133637474601003587L<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 接口响应状态码       */</span>      <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 接口响应信息       */</span>      <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 接口响应的数据       */</span>      <span class="token keyword">private</span> T data<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-定义接口响应状态码"><a href="#2-定义接口响应状态码" class="headerlink" title="2. 定义接口响应状态码"></a>2. 定义接口响应状态码</h4><p>统一结果返回的关键之一是规定一套通用的状态码。这有助于客户端更容易地理解和处理 API 的响应，同时也为开发者提供了一致的标准。通常，一些 HTTP 状态码已经被广泛接受，如：</p><ul><li><code>200 OK</code>：表示成功处理请求。</li><li><code>201 Created</code>：表示成功创建资源。</li><li><code>204 No Content</code>：表示成功处理请求，但没有返回任何内容。</li></ul><p>对于错误情况，也可以使用常见的 HTTP 状态码，如：</p><ul><li><code>400 Bad Request</code>：客户端请求错误。</li><li><code>401 Unauthorized</code>：未授权访问。</li><li><code>404 Not Found</code>：请求资源不存在。</li><li><code>500 Internal Server Error</code>：服务器内部错误。</li></ul><p>除了 HTTP 状态码外，你还可以定义自己的应用程序特定状态码，以表示更具体的情况。确保文档中清晰地说明了每个状态码所代表的含义，使开发者能够正确地解释和处理它们。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> StatusEnum <span class="token punctuation">{</span>      <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token punctuation">,</span><span class="token string">"请求处理成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">UNAUTHORIZED</span><span class="token punctuation">(</span><span class="token number">401</span> <span class="token punctuation">,</span><span class="token string">"用户认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">FORBIDDEN</span><span class="token punctuation">(</span><span class="token number">403</span> <span class="token punctuation">,</span><span class="token string">"权限不足"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SERVICE_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"服务器去旅行了，请稍后重试"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PARAM_INVALID</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"无效的参数"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String message<span class="token punctuation">;</span>      <span class="token function">StatusEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-定义统一的成功和失败的处理方法"><a href="#3-定义统一的成功和失败的处理方法" class="headerlink" title="3. 定义统一的成功和失败的处理方法"></a>3. 定义统一的成功和失败的处理方法</h4><p>定义统一的成功和失败的响应方法有助于保持代码一致性和规范性，简化控制器逻辑，提高代码复用性，降低维护成本，提高可读性，促进团队协作，以及更便于进行测试。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 封装成功响应的方法   * @param data 响应数据   * @return reponse   * @param &lt;T> 响应数据类型   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">success</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultResponse</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 封装error的响应   * @param statusEnum error响应的状态值   * @return   * @param &lt;T>   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">error</span><span class="token punctuation">(</span>StatusEnum statusEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span>statusEnum<span class="token punctuation">,</span> statusEnum<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 封装error的响应  可自定义错误信息 * @param statusEnum error响应的状态值   * @return   * @param &lt;T>   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">error</span><span class="token punctuation">(</span>StatusEnum statusEnum<span class="token punctuation">,</span> String errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultResponse</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>statusEnum<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-web层统一响应结果"><a href="#4-web层统一响应结果" class="headerlink" title="4. web层统一响应结果"></a>4. web层统一响应结果</h4><p>在web层使用统一结果返回的目的是将业务逻辑的处理结果按照预定的通用格式进行封装，以提高代码的一致性和可读性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> IUserService userService<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 创建用户       * @param requestVO       * @return       */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**       * 根据用户ID获取用户信息       * @param userId 用户id       * @return 用户信息       */</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>UserInfoResponseVO<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请选择用户"</span><span class="token punctuation">)</span> String userId<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">final</span> UserInfoResponseVO responseVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserInfoById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>responseVO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>IUserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用接口，响应的信息统一为：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"userId"</span><span class="token operator">:</span> <span class="token string">"121"</span><span class="token punctuation">,</span>        <span class="token property">"userName"</span><span class="token operator">:</span> <span class="token string">"码农Academy"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统一结果返回通过定义通用的返回格式、成功和失败的返回情况，以及在控制器中使用这一模式，旨在提高代码的一致性、可读性和可维护性。采用统一的响应格式简化了业务逻辑处理流程，使得开发者更容易处理成功和失败的情况，同时客户端也更容易理解和处理 API 的响应。这一实践有助于降低维护成本、提高团队协作效率，并促进代码的规范化。</p><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><p>统一异常处理的必要性体现在保持代码的一致性、提供更清晰的错误信息、以及更容易排查问题。通过定义统一的异常处理方式，确保在整个应用中对异常的处理保持一致，减少了重复编写相似异常处理逻辑的工作，同时提供友好的错误信息帮助开发者和维护人员更快地定位和解决问题，最终提高了应用的可维护性和可读性。</p><h4 id="1-定义统一的异常类"><a href="#1-定义统一的异常类" class="headerlink" title="1.定义统一的异常类"></a>1.定义统一的异常类</h4><p>我们需要定义服务中可能抛出的自定义异常类。这些异常类可以继承自<code>RuntimeException</code>，并携带有关异常的相关信息。即可理解为局部异常，用于特定的业务处理中异常。手动埋点抛出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3303518302920463234L<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> StatusEnum status<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">ServiceException</span><span class="token punctuation">(</span>StatusEnum status<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">ServiceException</span><span class="token punctuation">(</span>StatusEnum status<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> status<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-异常处理器"><a href="#2-异常处理器" class="headerlink" title="2.异常处理器"></a>2.异常处理器</h4><p>创建一个全局的异常处理器，使用<code>@ControllerAdvice</code> 或者 <code>@RestControllerAdvice</code>注解和<code>@ExceptionHandler</code>注解来捕获不同类型的异常，并定义处理逻辑。</p><h5 id="2-1-ControllerAdvice注解"><a href="#2-1-ControllerAdvice注解" class="headerlink" title="2.1 @ControllerAdvice注解"></a>2.1 @ControllerAdvice注解</h5><p>用于声明一个全局控制器建言（Advice），相当于把<code>@ExceptionHandler</code>、<code>@InitBinder</code>和<code>@ModelAttribute</code>注解的方法集中到一个地方。常放在一个特定的类上，这个类被认为是全局异常处理器，可以跨足多个控制器。</p><blockquote><p>当时用<code>@ControllerAdvice</code>时，我们需要在异常处理方法上加上<code>@ResponseBody</code>，同理我们的web接口。但是如果我们使用<code>@RestControllerAdvice</code> 就可以不用加，同理也是web定义的接口</p></blockquote><h5 id="2-2-ExceptionHandler注解"><a href="#2-2-ExceptionHandler注解" class="headerlink" title="2.2 @ExceptionHandler注解"></a>2.2 <code>@ExceptionHandler</code>注解</h5><p>用于定义异常处理方法，处理特定类型的异常。放在全局异常处理器类中的具体方法上。</p><p>通过这两个注解的配合，可以实现全局的异常处理。当控制器中抛出异常时，Spring Boot会自动调用匹配的<code>@ExceptionHandler</code>方法来处理异常，并返回定义的响应。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionAdvice</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 处理ServiceException       * @param serviceException ServiceException       * @param request 请求参数       * @return 接口响应       */</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ServiceException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleServiceException</span><span class="token punctuation">(</span>ServiceException serviceException<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"request {} throw ServiceException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> serviceException<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>serviceException<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 其他异常拦截       * @param ex 异常       * @param request 请求参数       * @return 接口响应       */</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request {} throw unExpectException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SERVICE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-异常统一处理使用"><a href="#3-异常统一处理使用" class="headerlink" title="3.异常统一处理使用"></a>3.异常统一处理使用</h4><p>在业务开发过程中，我们可以在<code>service</code>层处理业务时，可以手动抛出业务异常。由全局异常处理器进行统一处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> IUserManager userManager<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**       * 创建用户       *       * @param requestVO 请求参数       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span>UserCreateRequestVO requestVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> UserDO userDO <span class="token operator">=</span> userManager<span class="token punctuation">.</span><span class="token function">selectUserByName</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>userDO <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserManager</span><span class="token punctuation">(</span>IUserManager userManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userManager <span class="token operator">=</span> userManager<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> IUserService userService<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 创建用户       * @param requestVO       * @return       */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          userService<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>IUserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们请求接口时，假如用户名称已存在，接口就会响应：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统一异常处理带来的好处包括提供一致的异常响应格式，简化异常处理逻辑，记录更好的错误日志，以及更容易排查和解决问题。通过统一处理异常，我们确保在整个应用中对异常的处理方式一致，减少了重复性代码的编写，提高了代码的规范性。简化的异常处理逻辑降低了开发者的工作负担，而更好的错误日志有助于更迅速地定位和解决问题，最终提高了应用的可维护性和稳定性。</p><h3 id="其他类型的异常处理"><a href="#其他类型的异常处理" class="headerlink" title="其他类型的异常处理"></a>其他类型的异常处理</h3><p>在项目开发过程中，我们还有一些常见的特定异常类型，比如<code>MethodArgumentNotValidException</code>和<code>UnexpectedTypeException</code>等，并为它们定义相应的异常处理逻辑。这些特定异常可能由于请求参数校验失败或意外的数据类型问题而引起，因此有必要为它们单独处理，以提供更具体和友好的异常响应。</p><h4 id="1-MethodArgumentNotValidException"><a href="#1-MethodArgumentNotValidException" class="headerlink" title="1.MethodArgumentNotValidException"></a>1.MethodArgumentNotValidException</h4><p>由于请求参数校验失败引起的异常，通常涉及到使用<code>@Valid</code>注解或者<code>@Validated</code>进行请求参数校验。我们可以在异常处理器中编写<code>@ExceptionHandler</code>方法，捕获并处理<code>MethodArgumentNotValidException</code>，提取校验错误信息，并返回详细的错误响应。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 参数非法校验   * @param ex   * @return   */</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleMethodArgumentNotValidException</span><span class="token punctuation">(</span>MethodArgumentNotValidException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>ObjectError<span class="token operator">></span> errors <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String message <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ObjectError<span class="token operator">:</span><span class="token operator">:</span>getDefaultMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"param illegal: {}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SERVICE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们使用<code>@Valid</code>注解或者<code>@Validated</code>进行请求参数校验不通过时，响应结果为：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"请输入地址信息,用户年龄必须小于60岁,请输入你的兴趣爱好"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于<code>@Valid</code>注解或者<code>@Validated</code>进行参数校验的功能请参考：<a href="https://www.coderacademy.online/article/springbootvalidation.html">SpringBoot优雅校验参数</a></p></blockquote><h4 id="2-UnexpectedTypeException"><a href="#2-UnexpectedTypeException" class="headerlink" title="2.UnexpectedTypeException"></a>2.UnexpectedTypeException</h4><p>意外的数据类型异常，通常表示程序运行时发生了不符合预期的数据类型问题。一个常见的使用场景是在数据转换或类型处理的过程中。例如，在使用 Spring 表单绑定或数据绑定时，如果尝试将一个不符合预期类型的值转换为目标类型，就可能抛出 <code>UnexpectedTypeException</code>。这通常会发生在将字符串转换为数字、日期等类型时，如果字符串的格式不符合目标类型的要求。</p><p>我们可以在异常处理器中编写<code>@ExceptionHandler</code>方法，捕获并处理<code>UnexpectedTypeException</code>，提供适当的处理方式，例如记录错误日志，并返回合适的错误响应。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UnexpectedTypeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleUnexpectedTypeException</span><span class="token punctuation">(</span>UnexpectedTypeException ex<span class="token punctuation">,</span>                                                          HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"catch UnexpectedTypeException, errorMessage: \n"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当发生异常时，接口会响应：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"服务器去旅行了，请稍后重试"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-ConstraintViolationException"><a href="#3-ConstraintViolationException" class="headerlink" title="3.ConstraintViolationException"></a>3.ConstraintViolationException</h4><p><code>javax.validation.ConstraintViolationException</code> 是 Java Bean Validation（JSR 380）中的一种异常。它通常在使用 Bean Validation 进行数据校验时，如果校验失败就会抛出这个异常。即我们在使用自定义校验注解时，如果不满足校验规则，就会抛出这个错误。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ConstraintViolationException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handlerConstraintViolationException</span><span class="token punctuation">(</span>ConstraintViolationException ex<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request {} throw ConstraintViolationException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>案例请参考：<a href="https://www.coderacademy.online/article/springbootvalidation.html">SpringBoot优雅校验参数</a>，注册ConstraintValidator示例中的<code>@UniqueUser</code>校验。</p></blockquote><h4 id="4-HttpMessageNotReadableException"><a href="#4-HttpMessageNotReadableException" class="headerlink" title="4.HttpMessageNotReadableException"></a>4.HttpMessageNotReadableException</h4><p>表示无法读取HTTP消息的异常，通常由于请求体不合法或不可解析。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ResponseBody</span>  <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>HttpMessageNotReadableException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleHttpMessageNotReadableException</span><span class="token punctuation">(</span>HttpMessageNotReadableException ex<span class="token punctuation">,</span>  HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request {} throw ucManagerException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SERVICE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-HttpRequestMethodNotSupportedException"><a href="#5-HttpRequestMethodNotSupportedException" class="headerlink" title="5.HttpRequestMethodNotSupportedException"></a>5.HttpRequestMethodNotSupportedException</h4><p>Spring Framework 中的异常类，表示请求的 HTTP 方法不受支持。当客户端发送了一个使用不被服务器支持的 HTTP 方法（如 GET、POST、PUT、DELETE等）的请求时，可能会抛出这个异常。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>HttpRequestMethodNotSupportedException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpMediaTypeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleMethodNotSupportedException</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"HttpRequestMethodNotSupportedException \n"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>HTTP_METHOD_NOT_SUPPORT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局异常处理与局部异常处理在Spring Boot应用开发中扮演不同角色。全局异常处理通过统一的异常处理器确保了整个应用对异常的处理一致性，减少了冗余代码，提高了代码的整洁度。然而，这种方式可能在灵活性上略显不足，无法满足每个具体控制器或业务场景的个性化需求。</p><p>相比之下，局部异常处理能够为每个控制器或业务场景提供更具体、灵活的异常处理逻辑，允许定制化的异常响应。这使得在复杂的项目中更容易处理特定的异常情况，同时提供更详细的错误信息。然而，局部异常处理可能带来代码冗余和维护难度的问题，特别是在大型项目中。</p><p>在实际应用中，选择全局异常处理还是局部异常处理应根据项目规模和需求进行权衡。对于小型项目或简单场景，全局异常处理可能是一种更简单、合适的选择。而对于大型项目或需要个性化异常处理的复杂业务逻辑，局部异常处理则提供了更为灵活的方案。最佳实践是在项目中根据具体情况灵活使用这两种方式，以平衡一致性和个性化需求。</p><h3 id="最佳实践与注意事项"><a href="#最佳实践与注意事项" class="headerlink" title="最佳实践与注意事项"></a>最佳实践与注意事项</h3><h4 id="1-最佳实践"><a href="#1-最佳实践" class="headerlink" title="1. 最佳实践"></a>1. 最佳实践</h4><ul><li><p><strong>统一响应格式：</strong> 在异常处理中，使用统一的响应格式有助于客户端更容易理解和处理错误。通常，返回一个包含错误码、错误信息和可能的详细信息的响应对象。</p></li><li><p><strong>详细错误日志：</strong> 在异常处理中记录详细的错误日志，包括异常类型、发生时间、请求信息等。这有助于快速定位和解决问题。</p></li><li><p><strong>使用HTTP状态码：</strong> 根据异常的性质，选择适当的HTTP状态码。例如，使用<code>HttpStatus.NOT_FOUND</code>表示资源未找到，<code>HttpStatus.BAD_REQUEST</code>表示客户端请求错误等。</p></li><li><p><strong>异常分类：</strong> 根据异常的种类，合理分类处理。可以定义不同的异常类来表示不同的异常情况，然后在异常处理中使用<code>@ExceptionHandler</code>分别处理。</p></li><li><p><strong>全局异常处理：</strong> 使用全局异常处理机制来捕获未被特定控制器处理的异常，以确保应用在整体上的健壮性。</p></li></ul><h4 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2 注意事项"></a>2 注意事项</h4><ul><li><p><strong>不滥用异常：</strong> 异常应该用于表示真正的异常情况，而不是用作控制流程。滥用异常可能导致性能问题和代码可读性降低。</p></li><li><p><strong>不忽略异常：</strong> 避免在异常处理中忽略异常或仅仅打印日志而不进行适当的处理。这可能导致潜在的问题被掩盖，难以追踪和修复。</p></li><li><p><strong>避免空的catch块：</strong> 不要在<code>catch</code>块中什么都不做，这样会使得异常难以被发现。至少在<code>catch</code>块中记录日志，以便了解异常的发生。</p></li><li><p><strong>适时抛出异常：</strong> 不要过于吝啬地抛出异常，但也不要无谓地滥用。在必要的时候使用异常，例如表示无法继续执行的错误情况。</p></li><li><p><strong>测试异常场景：</strong> 编写单元测试时，确保覆盖异常场景，验证异常的正确抛出和处理。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>异常处理在应用开发中是至关重要的一环，它能够提高应用的健壮性、可读性和可维护性。全局异常处理和局部异常处理各有优劣，需要根据项目的规模和需求来灵活选择。通过采用统一的响应格式、详细的错误日志、适当的HTTP状态码等最佳实践，可以使异常处理更为有效和易于管理。同时，注意避免滥用异常、忽略异常、适时抛出异常等注意事项，有助于确保异常处理的质量。在开发过程中，持续关注和优化异常处理，将有助于提高应用的稳定性和用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot统一结果返回 </tag>
            
            <tag> SpringBoot统一异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新来的一个同事，把SpringBoot参数校验玩的那叫一个优雅</title>
      <link href="/article/springbootvalidation.html"/>
      <url>/article/springbootvalidation.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在开发现代应用程序时，数据验证是确保用户输入的正确性和应用程序数据完整性的关键方面。Spring Boot 提供了强大的数据验证机制，使开发者能够轻松地执行验证操作。本文将深入介绍 Spring Boot 中的 Validation，以及如何在应用程序中正确使用它。</p><h3 id="为什么使用数据验证？"><a href="#为什么使用数据验证？" class="headerlink" title="为什么使用数据验证？"></a>为什么使用数据验证？</h3><ul><li><p>1.<strong>用户输入的正确性</strong>：数据验证是确保用户输入的正确性的一种重要手段。通过验证用户输入的数据，可以防止无效或错误的数据进入应用程序，提高数据的质量。例如：系统中的备注字段数据库中对应的长度是256，如果用户输入的备注超过这个长度值，那么就会导致mysql报<code>Data too long</code>。</p></li><li><ol start="2"><li><strong>数据完整性：</strong> 数据完整性是指数据在存储和传输过程中的准确性和一致性。数据验证有助于确保数据满足特定的格式、长度、范围等要求，从而提高数据的完整性。</li></ol></li></ul><ol start="3"><li><p><strong>安全性：</strong> 数据验证也是保障应用程序安全性的关键因素。通过验证用户输入，可以防范一些潜在的安全威胁，例如 SQL 注入、跨站脚本攻击等。</p></li><li><p><strong>业务规则的执行：</strong> 在应用程序中，通常存在一些业务规则，例如某个字段不能为空、日期范围必须在某个特定范围内等。通过数据验证，可以确保这些业务规则在应用程序中得到正确执行。</p></li></ol><h3 id="手动数据校验的痛点"><a href="#手动数据校验的痛点" class="headerlink" title="手动数据校验的痛点"></a>手动数据校验的痛点</h3><p>日常开发中，有些写项目可能没有采用Spring Validator，采用的是在代码中手动校验数据。但是手动校验数据会带来代码冗余、错误处理的一致性以及业务规则的维护的一些痛点。</p><ul><li>代码冗余的手动校验逻辑，导致代码中大量的if-else</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">registerUser</span><span class="token punctuation">(</span>UserRegistrationRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Request cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Username cannot be blank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Password must be at least 6 characters long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理用户注册逻辑</span>    <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"User registered successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>缺乏统一的错误处理机制</p></li><li><p>业务规则维护的困难<br>随着业务规则的增加，手动编写的校验逻辑可能变得庞大且难以维护。修改和扩展校验规则可能需要修改多个地方，增加了维护成本。</p></li><li><p>缺乏验证组的支持<br>手动校验通常不支持验证组的概念，难以根据不同场景执行不同的验证规则。</p></li><li><p>不易于集成前端验证<br>手动校验不易与前端验证框架集成，导致前后端验证逻辑可能不一致。</p></li></ul><p>通过引入 Spring Validator，我们能够有效解决这些痛点，提高代码的可读性、可维护性，并确保校验逻辑的一致性。</p><h3 id="Spring-Boot-中的-Validation-概述"><a href="#Spring-Boot-中的-Validation-概述" class="headerlink" title="Spring Boot 中的 Validation 概述"></a>Spring Boot 中的 Validation 概述</h3><p>因Springboot的<code>spring-boot-starter-web</code>默认内置了<code>Hibernate-Validator</code>（Spring boot 2.3以前版本），虽然<code>Hibernate-Validator</code>也能做到数据校验，但是考虑到<code>spring-boot-starter-validation</code> 是一个抽象层，使得验证框架的具体实现变得可插拔。这意味着，除了 <code>Hibernate Validator</code>，开发者可以选择其他符合 Bean Validation 规范的实现。所以我们可以手动引入<code>spring-boot-starter-validation</code>实现数据验证。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>spring-boot-starter-validation</code> 不仅支持 JSR-303（Bean Validation 1.0）规范，还提供了对 JSR-380（Bean Validation 2.0）规范的全面支持。这使得开发者可以利用 Bean Validation 2.0 的新特性，更灵活地定义验证规则，包括对集合、嵌套对象的验证等。</p><p>通过在实体类的字段上使用标准的 Bean Validation 注解（如 <code>@NotBlank</code>、<code>@Size</code>、<code>@Email</code> 等），我们能够直观地定义数据的验证规则。这些验证规则会在应用程序的不同层次（如控制器层）生效，确保输入数据的正确性。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Spring Boot Validation 提供了一系列注解，用于在实体类中定义验证规则。以下是一些常用的校验相关的注解及其功能以及用法：<br>1.<strong><code>@NotNull</code>：</strong> 校验元素值不能为 null。如果元素为null，则验证失败。通常用于字段级别的验证。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Name cannot be null"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.<strong><code>@NotBlank</code>：</strong> 校验字符串元素值不能为 null 或空字符串。必须包含至少一个非空格字符(即执行trim()之后不为’’)。如果元素为null或者‘‘，则验证失败。通常用于<code>String</code>类型的字段校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Username cannot be blank"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.<strong><code>NotEmpty</code>：</strong> 校验集合元素或数组元素或者字符串是否非空。通常作用于集合字段或数组字段，此时需要集合或者数字的元素个数大于0。也可以作用于字符串，此时校验字符串不能为null或空串（可以是一个空格）。注意与<code>@NotBlank</code>的使用区别。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"List cannot be empty"</span><span class="token punctuation">)</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> items<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.<strong><code>@Length</code>：</strong> 校验字符串元素的长度。作用于字符串。<strong>注：<code>Hibernate-Validator</code>中注解，等同于<code>spring-boot-starter-validation</code>中的<code>@Size</code></strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Length must be between 5 and 20 characters"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.<strong><code>@Size</code>：</strong> 校验集合元素个数或字符串的长度在指定范围内。在集合或字符串字段上添加 <code>@Size</code> 注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Number of items must be between 1 and 10"</span><span class="token punctuation">)</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> items<span class="token punctuation">;</span><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Length must be between 5 and 20 characters"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.<strong><code>@Min</code>：</strong> 校验数字元素的最小值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Age must be at least 18"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7.<strong><code>@Max</code>：</strong> 校验数字元素的最大值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Age must not exceed 100"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9.<strong><code>@DecimalMax</code>：</strong> 作用于<code>BigDecimal</code>类型字段， 校验字段的最大值，支持比较的值为字符串表示的十进制数。通常搭配它的<code>inclusive()</code>使用，区别边界问题。<code>value</code> 属性表示最大值，inclusive 属性表示是否包含最大值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@DecimalMax</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"100.00"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Value must be less than or equal to 100.00"</span><span class="token punctuation">)</span><span class="token keyword">private</span> BigDecimal amount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>10.<strong><code>@DecimalMin</code>：</strong>  作用于<code>BigDecimal</code>类型字段， 校验字段的最小值，支持比较的值为字符串表示的十进制数。通常搭配它的<code>inclusive()</code>使用，区别边界问题。<code>value</code> 属性表示最小值，inclusive 属性表示是否包含最小值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Value must be greater than 0.00"</span><span class="token punctuation">)</span><span class="token keyword">private</span> BigDecimal amount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>11.<strong><code>@Email</code>：</strong> 校验字符串元素是否为有效的电子邮件地址。可以通过<code>regexp</code>自定义邮箱匹配正则。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Invalid email address"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12.<strong><code>@Pattern</code>：</strong>  根据正则表达式校验字符串元素的格式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"[a-zA-Z0-9]+"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Only alphanumeric characters are allowed"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>13.<strong><code>@Digits</code>：</strong> 校验数字元素的整数部分和小数部分的位数。作用于<code>BigDecimal</code>，<code>BigInteger</code>，字符串，以及<code>byte</code>, <code>short</code>,<code>int</code>, <code>long</code>以及它们的包装类型。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Digits</span><span class="token punctuation">(</span>integer <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> fraction <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Number must have up to 5 integer digits and 2 fraction digits"</span><span class="token punctuation">)</span><span class="token keyword">private</span> BigDecimal amount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>14.<strong><code>@Past</code>：</strong> 校验日期或时间元素是否在当前时间之前。即是否是过去时间。作用于Date相关类型的字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Past</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Date must be in the past"</span><span class="token punctuation">)</span><span class="token keyword">private</span> LocalDate startDate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>15.<strong><code>@Future</code>：</strong> 校验日期或时间元素是否在当前时间之后。即是否是未来时间。作用于Date相关类型的字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Future</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Date must be in the future"</span><span class="token punctuation">)</span><span class="token keyword">private</span> LocalDate endDate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注：以上只罗列部分注解以及它们的功能，其余他们的字段属性并没有详细说明，其他注解以及详细的说明需要去看源码。</p></blockquote><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><h5 id="1-定义接口入参请求参数"><a href="#1-定义接口入参请求参数" class="headerlink" title="1.定义接口入参请求参数"></a>1.定义接口入参请求参数</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * @description: &lt;p>&lt;/p >  * @author: 码农Academy  * @create: 2024/1/8 16:46  */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度最大为128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请填写正确的邮箱地址"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String email<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须大于18岁"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须小于60岁"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入你的兴趣爱好"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"兴趣爱好最多可以输入5个"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>      <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"体重必须大于50KG"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> BigDecimal weight<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Validated</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入地址信息"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> UserAddressRequestVO address<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-定义请求接口"><a href="#2-定义请求接口" class="headerlink" title="2.定义请求接口"></a>2.定义请求接口</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 创建用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 校验用户邮箱是否合法      * @param email      * @return      */</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">validUserEmail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span> String email<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h5><ul><li>创建用户校验，Json请求体校验<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108180356.png" alt="image.png"></li></ul><blockquote><p>我们需要捕获一下<code>MethodArgumentNotValidException</code>。该部分内容请参考文章：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一异常处理</a></p></blockquote><ul><li>校验邮箱，单参数校验<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108194014.png" alt="image.png"></li></ul><p><strong>注：单参数校验时我们需要，在方法的类上加上<code>@Validated</code>注解，否则校验不生效。</strong></p><h4 id="嵌套对象的校验"><a href="#嵌套对象的校验" class="headerlink" title="嵌套对象的校验"></a>嵌套对象的校验</h4><p>在<code>UserCreateRequestVO</code>中增加一个<code>address</code>的校验，即需要对嵌套对象进行校验</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * @description: &lt;p>&lt;/p >  * @author: 码农Academy  * @create: 2024/1/8 19:45  */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAddressRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"地址信息中国家长度不能超过16个字符"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"地址信息国家不能为空"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String country<span class="token punctuation">;</span>      <span class="token keyword">private</span> String city<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"详细地址长度不能超过128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String address1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>UserAddressRequestVO</code>中增加<code>address</code>属性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入地址信息"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> UserAddressRequestVO address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法，要在嵌套对象上使用 @Valid 注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入地址信息"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Valid</span>      <span class="token keyword">private</span> UserAddressRequestVO address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109124553.png" alt="image.png"></p><blockquote><p>试了一些其他的方式，好像都不行，有知道其他方式的，欢迎评论区留言探讨</p></blockquote><h3 id="自定义验证注解"><a href="#自定义验证注解" class="headerlink" title="自定义验证注解"></a>自定义验证注解</h3><p>在项目开发中，我们也可以自定义注解去完成我们的字段校验，比如某些枚举值的传递，需要校验枚举值是否合法。在创建自定义注解之前，我们需要了解一下<code>ConstraintValidator</code>以及实现自定义验证注解的原理</p><h4 id="1-ConstraintValidator-接口"><a href="#1-ConstraintValidator-接口" class="headerlink" title="1.ConstraintValidator 接口"></a>1.ConstraintValidator 接口</h4><p><code>ConstraintValidator</code> 是 Java Bean Validation (JSR 380) 规范中用于自定义验证逻辑的接口。它允许你定义针对特定自定义注解的验证规则。它是一个泛型接口，需要提供两个类型参数：</p><ul><li><code>A</code>：是你的自定义注解的类型。</li><li><code>T</code>：是被验证的元素类型，通常是字段类型。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>A constraintAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>initialize</code> 方法：在验证器初始化时被调用，可以用于获取约束注解中的配置信息。</li><li><code>isValid</code> 方法：执行实际的验证逻辑，返回 <code>true</code> 表示验证通过，<code>false</code> 表示验证失败。</li></ul><p>以下为枚举校验注解的校验规则实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * &lt;p> &lt;/p>  * @author: 码农Academy  * @create: 2024/01/09 3:11 下午  */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>EnumValid<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> Class <span class="token class-name">clazz</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String validField<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>EnumValid constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>          clazz <span class="token operator">=</span> constraintAnnotation<span class="token punctuation">.</span><span class="token function">enumClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          validField <span class="token operator">=</span> constraintAnnotation<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@SneakyThrows</span>      <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> ConstraintValidatorContext constraintValidatorContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Class<span class="token operator">&lt;</span>Enum<span class="token operator">></span> enumClass <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>Enum<span class="token operator">></span><span class="token punctuation">)</span>clazz<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//获取所有枚举实例  </span>        Enum<span class="token punctuation">[</span><span class="token punctuation">]</span> enumConstants <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 需要比对的字段  </span>        Field field <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>validField<span class="token punctuation">)</span><span class="token punctuation">;</span>          field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>Enum constant <span class="token operator">:</span> enumConstants<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 取值final修饰  </span>            Object validValue <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>constant<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>validValue <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                  Method method <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>validField<span class="token punctuation">)</span><span class="token punctuation">;</span>                  validValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>constant<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>validValue <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  validValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>validValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  object <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span> object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>validValue<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建自定义注解"><a href="#2-创建自定义注解" class="headerlink" title="2.创建自定义注解"></a>2.创建自定义注解</h4><p>在 Java Bean Validation 中，约束注解（Constraint Annotation）是通过元注解 <code>@Constraint</code> 来定义的。这个注解包含了以下关键元素：</p><ul><li><code>validatedBy</code>: 指定用于执行验证的 <code>ConstraintValidator</code> 实现类。</li></ul><p>以校验枚举值的合法行为例，我们创建一个<code>EnumValid</code>约束注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>EnumValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> METHOD<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> ANNOTATION_TYPE<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> PARAMETER <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnumValid</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 不合法时 抛出异常信息      */</span>      String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"值不合法"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 校验的枚举类      * @return      */</span>      Class <span class="token class-name">enumClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Enum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 对应枚举类中需要比对的字段      * @return      */</span>      String <span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"code"</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-注册-ConstraintValidator"><a href="#3-注册-ConstraintValidator" class="headerlink" title="3.注册 ConstraintValidator"></a>3.注册 ConstraintValidator</h4><p>在大多数情况下，不需要手动注册 <code>ConstraintValidator</code>。当你使用 <code>@Constraint(validatedBy = EnumValidator.class)</code> 注解时，Java Bean Validation 的实现框架会自动发现并注册相应的验证器。但在一些特殊情况下，你可能需要将验证器注册为 Spring 组件或手动配置。比如</p><ul><li><p><strong>需要使用 Spring 管理的组件：</strong> 如果你的验证器需要依赖于 Spring 管理的组件（例如，使用 <code>@Autowired</code> 注解注入其他 bean），那么你可能需要将验证器注册为 Spring bean。这确保了验证器能够正确地使用 Spring 的依赖注入机制。</p></li><li><p><strong>需要通过属性文件进行配置：</strong> 如果你的验证器需要配置属性，而这些属性需要从 Spring 的 <code>application.properties</code> 或 <code>application.yml</code> 文件中获取，那么将验证器注册为 Spring bean 可以更容易地实现这一点。</p></li><li><p><strong>需要在验证器中使用 Spring AOP：</strong> 如果你希望在验证逻辑中使用 Spring AOP 切面，以便添加额外的逻辑或跟踪行为，那么将验证器注册为 Spring bean 可以让你更容易集成这些方面。<br>这种方式可以运用到一些业务校验中，比如账户注册时用户名称不能重复。定义一个校验用户唯一的注解<code>@UniqueUser</code>。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>UniqueUserValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> METHOD<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> ANNOTATION_TYPE<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> PARAMETER <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">UniqueUser</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 不合法时 抛出异常信息      */</span>      String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"值不合法"</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义一个业务的<code>Validator</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniqueUserValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>UniqueUser<span class="token punctuation">,</span> UserCreateRequestVO<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>UserCreateRequestVO value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> String userName <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> UserDO userDO <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">selectUserByName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> String userId <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> userDO <span class="token operator">==</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> userDO <span class="token operator">==</span> null <span class="token operator">||</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserRepository</span><span class="token punctuation">(</span>UserRepository userRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository <span class="token operator">=</span> userRepository<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建用户的接口中使用<code>@UniqueUser</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 创建用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@UniqueUser</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名称已存在"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟当用户名存在时，校验不通过</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109191920.png" alt="image.png"></p><blockquote><p>此时会抛出<code>javax.validation.ConstraintViolationException</code>。异常统一处理请参考：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一异常处理</a></p></blockquote><h4 id="4-自定义校验注解使用"><a href="#4-自定义校验注解使用" class="headerlink" title="4.自定义校验注解使用"></a>4.自定义校验注解使用</h4><p>我们创建一个性别的枚举类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * @description: &lt;p>&lt;/p >  * @author: 码农Academy  * @create: 2024/1/9 16:07  */</span>  <span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> SexEnum <span class="token punctuation">{</span>      <span class="token function">MAN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">WOMAN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String desc<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在入参中增加<code>sex</code>字段，并使用<code>@EmunValid</code>注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度最大为128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请填写正确的邮箱地址"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String email<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须大于18岁"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须小于60岁"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入性别"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@EnumValid</span><span class="token punctuation">(</span>enumClass <span class="token operator">=</span> SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"输入性别不合法"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer sex<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入你的兴趣爱好"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"兴趣爱好最多可以输入5个"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>      <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"体重必须大于50KG"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> BigDecimal weight<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109161520.png" alt="image.png"></p><h3 id="分组验证"><a href="#分组验证" class="headerlink" title="分组验证"></a>分组验证</h3><p>在一个应用中，同一个实体类可能会被用于不同的场景，比如用户创建、用户更新、用户删除等。每个场景对于字段的要求可能不同，有些字段在某个场景下需要验证，而在另一个场景下不需要。不同的业务操作可能对同一实体的验证有不同的需求。例如，在用户创建时可能强调用户名和密码的合法性，而在用户更新时可能更关心其他信息的完整性。</p><p>开发中我们针对这种情况，在不知道分组校验的知识时，通常采取的都是对应不同的场景或者业务创建不同的入参实体，比如创建用户<code>UserCreateRequestVO</code>，更新用户<code>UserUpdateRequestVO</code>，删除用户<code>UserDeleteRuquestVO</code>，在不同的实体中根据业务场景设置不同的校验规则。这样做虽然也可以，但是会造成类的膨胀，业务的重复实现。</p><p>而实际上用分组校验可以让你根据场景以及业务的差异性，有选择地执行特定组的验证规则。</p><h4 id="1-定义验证分组接口"><a href="#1-定义验证分组接口" class="headerlink" title="1.定义验证分组接口"></a>1.定义验证分组接口</h4><p>我们定义两个分组接口<code>CreateUserGroup</code>（用户创建组）,<code>UpdateUserGroup</code>（用户更新组）,分别继承<code>javax.validation.groups.Default</code>，标识不同的业务场景。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CreateUserGroup</span> <span class="token keyword">extends</span> <span class="token class-name">Default</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UpdateUserGroup</span> <span class="token keyword">extends</span> <span class="token class-name">Default</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分组校验的使用"><a href="#2-分组校验的使用" class="headerlink" title="2.分组校验的使用"></a>2.分组校验的使用</h4><p>在 Bean Validation 中，分组校验是通过在验证注解上指定 <code>groups</code> 属性来实现的。这个属性允许你为验证规则分配一个或多个验证组。我们设定用户创建时不传递用户ID，其余的参数必传，用户更新接口必须传递用户ID，可以不传递用户名，其他参数必须传递。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请选择用户"</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> UpdateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userId<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> CreateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度最大为128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请填写正确的邮箱地址"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String email<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须大于18岁"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须小于60岁"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入性别"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@EnumValid</span><span class="token punctuation">(</span>enumClass <span class="token operator">=</span> SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"输入性别不合法"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer sex<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入你的兴趣爱好"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"兴趣爱好最多可以输入5个"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>      <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"体重必须大于50KG"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> BigDecimal weight<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>指定了分组的校验规则，分别在对应的分组校验中生效，没有指定分组使用默认分组<code>Default</code>，即对所有的校验都生效。</p></blockquote><h4 id="3-在接口中使用分组"><a href="#3-在接口中使用分组" class="headerlink" title="3.在接口中使用分组"></a>3.在接口中使用分组</h4><p>使用 <code>@Validated</code> 注解，并指定要执行的验证组。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 创建用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>value <span class="token operator">=</span> CreateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 更新用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>value <span class="token operator">=</span> UpdateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们指定create接口指定CreateUserGroup分组，update接口指定UpdateUserGroup</p></blockquote><p>测试接口如下：</p><ul><li><p>创建用户<code>create</code>接口<br>因为<code>userId</code>可以不传递，接口可以校验通过<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109171342.png" alt="image.png"></p></li><li><p>更新用户<code>update</code>接口<br>因为必须传递<code>userId</code>, 我们不传时校验不通过，提示选择用户<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109171552.png" alt="image.png"></p></li></ul><p>传递<code>userId</code>，不传递<code>userName</code>时，校验通过<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109171703.png" alt="image.png"></p><h3 id="处理验证错误"><a href="#处理验证错误" class="headerlink" title="处理验证错误"></a>处理验证错误</h3><p>由上述测试结果中，可以看出接口抛出的一场结果并不是很友好，我们需要统一的处理一下异常以及返回结果，给予用户友好提示。具体实现，在这里不再赘述，可以移步：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一异常处理</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring Boot Validation通过简化验证流程、集成Bean Validation规范、支持分组验证以及提供友好的错误处理，为Java应用开发者提供了强大而灵活的数据验证机制。最佳实践包括在控制器层使用<code>@Validated</code>注解、合理利用各种验证注解、使用自定义验证注解解决特定业务需求，确保代码清晰简洁、符合规范，并提高系统的可维护性和用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot Validation </tag>
            
            <tag> SpringBoot参数校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java基础（三）之Java虚拟机类加载机制探究：生命周期、初始化、使用与验证</title>
      <link href="/article/jvmclassloader.html"/>
      <url>/article/jvmclassloader.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="一、java虚拟机与程序的生命周期"><a href="#一、java虚拟机与程序的生命周期" class="headerlink" title="一、java虚拟机与程序的生命周期"></a>一、java虚拟机与程序的生命周期</h3><p>在如下几种情况之下，java虚拟机将结束生命周期：</p><ul><li>执行了<code>System.exit()</code>方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或者错误而异常终止</li><li>由于操作系统用出现错误而导致java虚拟机进程终止<h3 id="二、类的加载，链接，初始化"><a href="#二、类的加载，链接，初始化" class="headerlink" title="二、类的加载，链接，初始化"></a>二、类的加载，链接，初始化</h3><h4 id="2-1-加载：查找并加载类的二进制数据"><a href="#2-1-加载：查找并加载类的二进制数据" class="headerlink" title="2.1 加载：查找并加载类的二进制数据"></a>2.1 加载：查找并加载类的二进制数据</h4></li></ul><p>类加载器并不需要某个类被首次主动使用时再加载他。JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(<code>LinkageError</code>错误)。如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。类被加载后，就进入连接阶段。</p><h4 id="2-2-连接："><a href="#2-2-连接：" class="headerlink" title="2.2 连接："></a>2.2 连接：</h4><p>将已经读入到内存的类的二进制数据合并到虚拟机的运行时环境中去。然后要经过一系列的验证。</p><h5 id="2-2-1-验证：确保被加载的类的正确性（验证字节码）"><a href="#2-2-1-验证：确保被加载的类的正确性（验证字节码）" class="headerlink" title="2.2.1 验证：确保被加载的类的正确性（验证字节码）"></a>2.2.1 验证：确保被加载的类的正确性（验证字节码）</h5><ul><li>类文件的结构检查：确保类文件遵从java类文件的固定格式。</li><li>语义检查：确保类本身符合java语言的语法规定，比如验证final类型的类没有子类，以及final类型的方法没有被覆盖。（虽然编译时就可以发现错误，但不经过编译，手动生成class文件，那么就会发现不了final类型的方法被覆盖，但是语义检查就可以发现）</li><li>字节码验证：确保字节码流可以被java虚拟机安全的执行。字节码流代表java方法（报空静态方法和实例方法），它是由被称作操作码的单字节指令组成的序列，每一个操作码后跟着一个或多个操作数。字节码验证步骤会检查每个操作码是否合法，即是否有着合法的操作数。</li><li>二进制兼容性的验证：确保相互引用的类之间的协调一致，例如在<code>Wroker</code>类的<code>gotoWork()</code>方法中会调用Car类的run()方法。java虚拟机在验证work()类时，会检查在方法区内是否存在Car类的run()方法，假如不存在（当worker类和Car类的版本不兼容，就会出现这种问题），就会抛出<code>NoSuchMethodError</code>方法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wroker</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gotoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这段代码在worker类的二进制数据中表示为符号引用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-准备：为类的静态变量分配内存，并将其初始化为默认"><a href="#2-2-准备：为类的静态变量分配内存，并将其初始化为默认" class="headerlink" title="2.2 准备：为类的静态变量分配内存，并将其初始化为默认"></a>2.2 准备：为类的静态变量分配内存，并将其初始化为默认</h5><p>在准备阶段，Java虚拟机为类的静态变量分配内存，并设置默认的初始值。例如对于一下Sample类，在准备阶端，将为int类型的静态变量a分配4个字节的内存空间，并且赋予默认值0，为long类型的静态变量b分配8个字节的内存空间，并且赋予默认值0。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-解析：把类中的符号引用转换为直接引用"><a href="#2-3-解析：把类中的符号引用转换为直接引用" class="headerlink" title="2.3  解析：把类中的符号引用转换为直接引用"></a>2.3  解析：把类中的符号引用转换为直接引用</h5><p>在解析阶段，java虚拟机会把类的二进制数据中的符号引用替换为直接引用。例如在Worker类的gotoWork()方法中会引用Car类的run()方法。</p><p>在Worker类中的二进制数据中，包含了一个对Car类的run()方法的符号引用，它由run()方法的全名和相关描述符组成。在解析阶段，Java虚拟机会把这个符号替换为一个指针，该指针指向Car类的run()方法在方法区内的内存位置。这个指针就是直接引用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wroker</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gotoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这段代码在worker类的二进制数据中表示为符号引用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-初始化：为类的静态成员变量赋予正确的初始值"><a href="#2-3-初始化：为类的静态成员变量赋予正确的初始值" class="headerlink" title="2.3 初始化：为类的静态成员变量赋予正确的初始值"></a>2.3 初始化：为类的静态成员变量赋予正确的初始值</h4><p>在初始化阶段，java虚拟机执行类的初始化语句，为类的静态变量赋予初始值。在程序中，静态变量初始化有两种途径：</p><ul><li>在静态变量的声明处进行初始化</li><li>在静态代码快中进行初始化。例如在以下代码中，静态变量a和b都被显示初始化，而静态变量c没有被显示初始化，它将保持默认值为0；但是如果要使用c，则必须进行初始化。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在静态变量声明出进行初始化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//但是如果要使用c，则必须进行初始化</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在静态代码块中进行初始化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton singleton<span class="token operator">=</span>Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"counter1= "</span><span class="token operator">+</span>singleton<span class="token punctuation">.</span>counter1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"counter2= "</span><span class="token operator">+</span>singleton<span class="token punctuation">.</span>counter2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***程序是从上向下顺序执行* new Singleton()时，counter1，counter2初始值均为0* 在通过构造方法Singleton()，均加1.则返回的值counter1，counter2均为1* 然后再程序在继续向下执行，由于counter1没有显示初始化，则值还是为1* 但是counter2经过显示初始化后，其值为0* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new语句在这是结果为counter1= 1；counter2= 0</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//private static Singleton singleton=new Singleton();//new语句在这是结果为counter1= 1；counter2= 1</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        counter1<span class="token operator">++</span><span class="token punctuation">;</span>        counter2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态变量的声明语句，以及静态代码块都被看做类的初始化语句，java虚拟机会按照初始化语句在类文件中的先后顺序来一次执行他们。</li><li>类的初始化步骤</li><li>假如这个类还没有被加载和连接，那就先进行加载和连接</li><li>假如类存在直接的父类，并且这个父类还没有被初始化，那就先初始化直接的父类。</li><li>假如父类中存在初始化语句，那就依次执行这些初始化语句。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 当X=6/3时，编译时即可算出X=2，即编译时常量，即不需要运行类，所以不打印静态代码块中的内容*当X=new Random().nextInt(100)时，编译时不能算出X的值，只有运行程序才知道，所以打印结果为：FinalTest static final 2* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X<span class="token operator">=</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印结果： 2</span>    <span class="token comment" spellcheck="true">//public static final int X=new Random().nextInt(100);//打印结果为FinalTest static final 2</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FinalTest static final"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类的初始化时机：当java虚拟机初始化一个类时，要求他的所有父类都已经被初始化，但是这条规则并不适用于接口。</li><li>在初始化一个类时，并不先初始化它所实现的接口</li><li>在初始化一个接口时，并不会先初始化他的父接口<br>因此，一个父接口并不会因为他的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test4 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Test4 static block* Parent static block* Child static block* 4* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如以下示例赋值的执行流程：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//首先在准备阶段java虚拟在内存中为a分配内存，int的初始值是0，所以此时a的值是0；在初始化阶段，给赋值为3</span><span class="token comment" spellcheck="true">//相当于：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从上到下执行</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108225351.png" alt="image.png"></p><h3 id="三、java程序对类的使用方式可分为两种："><a href="#三、java程序对类的使用方式可分为两种：" class="headerlink" title="三、java程序对类的使用方式可分为两种："></a>三、java程序对类的使用方式可分为两种：</h3><h4 id="3-1-主动使用"><a href="#3-1-主动使用" class="headerlink" title="3.1 主动使用"></a>3.1 主动使用</h4><ul><li>创建类的实例。比如：<code>new Test()</code></li><li>访问某个类或者接口的静态变量，或者对该静态变量赋值。比如：<code>int b=Test.a</code></li><li>调用类的静态方法。例如：<code>Test.doSomething()</code>;</li><li>反射(如<code>class.forName(&quot;com.jvm.classloader.test&quot;)</code>)</li><li>初始化一个类的子类(对父类的主动使用)。例如</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>java虚拟机启动时被表明为启动类的类</li></ul><p>程序中对子类的“主动使用”会导致父类被初始化，但对父类的“主动使用”并不会导致子类初始化，不可能说生成一个Object类的对象就导致系统中所有的子类都会被初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test5</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test5 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Parent2 parent<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Parent2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Test5 static block* -------------* Parent2 static block* 3* Child2 static block* 4**/</span><span class="token keyword">class</span> <span class="token class-name">Parent2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent2 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child2</span> <span class="token keyword">extends</span> <span class="token class-name">Parent2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child2 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当程序访问的静态变量或静态方法确实在当前接口定义时，才可以认为是对类或接口的主动使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child3<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        Child3<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Parent3 static block* 3* doSomething* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Parent3</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent3 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child3</span> <span class="token keyword">extends</span> <span class="token class-name">Parent3</span><span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child3 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>ClassLoader</code>类的<code>loadClass</code>方法加载一个类，并不是对类的主动使用，不会导致类的初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        ClassLoader loader<span class="token operator">=</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token operator">=</span>loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** ------------------------*Z static block* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Z</span><span class="token punctuation">{</span>  <span class="token keyword">static</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Z static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-被动使用"><a href="#3-2-被动使用" class="headerlink" title="3.2 被动使用"></a>3.2 被动使用</h4><p> 除去以上六种主动使用以外的使用都是被动使用，都不会导致类的初始化。所有的java虚拟机实现必须在每个类或接口被java程序首次主动使用时才初始化他们。<br>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其方法存进运行时数据区的方法区内。然后在堆区创建一个Java.lang.Class对象，用来封装在类在方法区内的数据结构。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108223927.png" alt="image.png"></p><h3 id="四、-加载class文件的方式"><a href="#四、-加载class文件的方式" class="headerlink" title="四、 加载class文件的方式"></a>四、 加载class文件的方式</h3><h4 id="4-1-本地系统中直接加载"><a href="#4-1-本地系统中直接加载" class="headerlink" title="4.1 本地系统中直接加载"></a>4.1 本地系统中直接加载</h4><ul><li>通过网络下载.class文件(<code>java.net.URLClassLoader(URL[] urls)</code>)</li><li>从zip，jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将java源文件动态编译为.class文件。<br>类的加载的最终产品是位于堆区中的Class对象。Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。<h4 id="4-2、两种类型的类加载器"><a href="#4-2、两种类型的类加载器" class="headerlink" title="4.2、两种类型的类加载器"></a>4.2、两种类型的类加载器</h4><h5 id="4-2-1-Java虚拟机自带的加载器"><a href="#4-2-1-Java虚拟机自带的加载器" class="headerlink" title="4.2.1 Java虚拟机自带的加载器"></a>4.2.1 Java虚拟机自带的加载器</h5></li><li>根类加载器(<code>Bootstrap</code>)。使用C++编写，程序员无法在java代码中获得该类。</li><li>扩展类加载器（<code>Extension</code>），使用java代码实现</li><li>系统类加载器(<code>System</code>)，应用加载器，使用java代码实现<h5 id="4-2-2-用户自定义的类加载器"><a href="#4-2-2-用户自定义的类加载器" class="headerlink" title="4.2.2 用户自定义的类加载器"></a>4.2.2 用户自定义的类加载器</h5></li><li><code>java.lang.ClassLoader</code>的子类</li><li>用户可以定制类的加载方式<br><code>public ClassLoader getClassLoader()</code>方法。针对这个类返回一个个加载器，但是某些实现可能会返回null代表根类加载器。如果使用根类加载器加载类，那么这个方法就会返回null；例：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootStrapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader loader<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * 打印结果为null        */</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz2</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader loader2<span class="token operator">=</span>clazz2<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * 打印结果为：sun.misc.Launcher$AppClassLoader@54a5f709 应用加载器         */</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loader2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java核心基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Java类加载 </tag>
            
            <tag> java核心基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工具类（二）之深入Guava集合操作</title>
      <link href="/article/7cd2c424.html"/>
      <url>/article/7cd2c424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><h2 id="深入Guava集合操作"><a href="#深入Guava集合操作" class="headerlink" title="深入Guava集合操作"></a>深入Guava集合操作</h2><p>在Java开发中，Google Guava库是处理集合的强大工具。起源于Google内部需求，Guava以简洁性、性能优化为理念，提供高效不可变集合和实用工具类。本文深入剖析Guava的核心功能，为开发者呈现集合操作的全新视角，无论经验水平，都能获得实用技巧和深刻见解。</p><h3 id="一、不可变集合"><a href="#一、不可变集合" class="headerlink" title="一、不可变集合"></a>一、不可变集合</h3><h4 id="1、为什么使用不可变集合"><a href="#1、为什么使用不可变集合" class="headerlink" title="1、为什么使用不可变集合"></a>1、为什么使用不可变集合</h4><p>不可变对象有很多优点，包括： </p><ul><li>当对象被不可信的库调用时，不可变形式是安全的；</li><li>不可变对象被多个线程调用时，不存在竞态条件问题</li><li>可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；</li><li>不可变对象因为有固定不变，可以作为常量来安全使用。</li></ul><h4 id="2、创建不可变集合的方式："><a href="#2、创建不可变集合的方式：" class="headerlink" title="2、创建不可变集合的方式："></a>2、创建不可变集合的方式：</h4><ul><li>copyOf方法，如ImmutableSet.copyOf(set);</li><li>of方法，如ImmutableSet.of(“a”, “b”, “c”)或 ImmutableMap.of(“a”, 1, “b”, 2); </li><li>Builder工具，如：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutableSet<span class="token operator">&lt;</span>String<span class="token operator">></span> SET <span class="token operator">=</span>             ImmutableSet<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，对有序不可变集合来说，排序是在构造集合的时候完成的，如： <code>ImmutableSortedSet.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;);</code></p><p>会在构造时就把元素排序为a, b, c, d。</p><h4 id="3、asList视图"><a href="#3、asList视图" class="headerlink" title="3、asList视图"></a>3、asList视图</h4><p>所有不可变集合都有一个asList()方法提供ImmutableList视图，来帮助你用列表形式方便地读取集合元素。例如，你可以使用sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。</p><p>asList()返回的ImmutableList通常是——并不总是——开销稳定的视图实现，而不是简单地把元素拷贝进List。也就是说，asList返回的列表视图通常比一般的列表平均性能更好，比如，在底层集合支持的情况下，它总是使用高效的contains方法。</p><h3 id="二、关联可变集合和不可变集合"><a href="#二、关联可变集合和不可变集合" class="headerlink" title="二、关联可变集合和不可变集合"></a>二、关联可变集合和不可变集合</h3><table><thead><tr><th>可变集合接口</th><th>属于JDK还是Guava</th><th>不可变版本</th></tr></thead><tbody><tr><td>Collection</td><td>JDK</td><td>ImmutableCollection</td></tr><tr><td>List</td><td>JDK</td><td>ImmutableList</td></tr><tr><td>Set</td><td>JDK</td><td>ImmutableSet</td></tr><tr><td>SortedSet/NavigableSet</td><td>JDK</td><td>ImmutableSortedSet</td></tr><tr><td>Map</td><td>JDK</td><td>ImmutableMap</td></tr><tr><td>SortedMap</td><td>JDK</td><td>ImmutableSortedMap</td></tr><tr><td>Multiset</td><td>Guava</td><td>ImmutableMultiset</td></tr><tr><td>SortedMultiset</td><td>Guava</td><td>ImmutableSortedMultiset</td></tr><tr><td>Multimap</td><td>Guava</td><td>ImmutableMultimap</td></tr><tr><td>ListMultimap</td><td>Guava</td><td>ImmutableListMultimap</td></tr><tr><td>SetMultimap</td><td>Guava</td><td>ImmutableSetMultimap</td></tr><tr><td>BiMap</td><td>Guava</td><td>ImmutableBiMap</td></tr><tr><td>ClassToInstanceMap</td><td>Guava</td><td>ImmutableClassToInstanceMap</td></tr><tr><td>Table</td><td>Guava</td><td>ImmutableTable</td></tr></tbody></table><h3 id="三、新集合类型"><a href="#三、新集合类型" class="headerlink" title="三、新集合类型"></a>三、新集合类型</h3><h4 id="1、Multiset"><a href="#1、Multiset" class="headerlink" title="1、Multiset"></a>1、Multiset</h4><p>Multiset可以多次添加相等元素，集合[set]概念的延伸，它的元素可以重复出现…与集合[set]相同而与元组[tuple]相反的是，Multiset元素的顺序是无关紧要的：Multiset {a, a, b}和{a, b, a}是相等的</p><p>可以用两种方式看待Multiset：</p><ul><li>没有元素顺序限制的ArrayList</li><li>Map&lt;E, Integer&gt;，键为元素，值为计数<h5 id="（1）、常见方法"><a href="#（1）、常见方法" class="headerlink" title="（1）、常见方法"></a>（1）、常见方法</h5></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int count(E)</td><td>给定元素在Multiset中的计数</td></tr><tr><td>Set&lt;E&gt; elementSet()</td><td>Multiset中不重复元素的集合，类型为Set&lt;E&gt;</td></tr><tr><td>Set&lt;Multiset.Entry&lt;E&gt;&gt; entrySet()</td><td>和Map的entrySet类似，返回Set&lt;Multiset.Entry&lt;E&gt;&gt;，其中包含的Entry支持getElement()和getCount()方法</td></tr><tr><td>int add(E, int)</td><td>增加给定元素在Multiset中的计数</td></tr><tr><td>boolean add(E element)</td><td>增加一个指定的元素到multiset</td></tr><tr><td>boolean contains(E element)</td><td>判断此多集中是否包含指定的元素</td></tr><tr><td>boolean containsAll(Collection&lt;\?&gt; elements)</td><td>判断此多集至少包含一个出现指定集合的所有元素</td></tr><tr><td>remove(E, int)</td><td>减少给定元素在Multiset中的计数,删除指定元素</td></tr><tr><td>removeAll(Collection&lt;?&gt; c)</td><td>删除包含在指定集合中的元素</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; e)</td><td>保持包含指定集合中的元素</td></tr><tr><td>int setCount(E, int)</td><td>设置给定元素在Multiset中的计数，不可以为负数，添加/删除指定元素，使其达到所期望的元素个数</td></tr><tr><td>int size()</td><td>返回集合元素的总个数（包括重复的元素）</td></tr><tr><td>Iterator iterator()</td><td>返回一个迭代器，包含Multiset的所有元素（包括重复的元素）</td></tr></tbody></table><h5 id="2-、示例"><a href="#2-、示例" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * MultiSet     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiSetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Multiset<span class="token operator">&lt;</span>String<span class="token operator">></span> multiset <span class="token operator">=</span> HashMultiset<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multiset<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multiset的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> multiset<span class="token punctuation">.</span><span class="token function">elementSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不重复元素："</span><span class="token operator">+</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> multiset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multiset元素："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Multiset<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token operator">>></span> entrySet <span class="token operator">=</span>  multiset<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> setMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entrySet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            setMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素详情："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>setMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multiset<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除a后，a的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含List："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含List："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）、SortedMultiset"><a href="#（3）、SortedMultiset" class="headerlink" title="（3）、SortedMultiset"></a>（3）、SortedMultiset</h5><p>SortedMultiset是Multiset 接口的变种，它支持高效地获取指定范围的子集</p><h4 id="2、MultiMap"><a href="#2、MultiMap" class="headerlink" title="2、MultiMap"></a>2、MultiMap</h4><p>Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。 可以用两种方式思考Multimap的概念：”键-单个值映射”的集合：<br>a -&gt; 1 a -&gt; 2 a -&gt;4 b -&gt; 3 c -&gt; 5<br>或者”键-值集合映射”的映射：<br>a -&gt; [1, 2, 4] b -&gt; 3 c -&gt; 5<br>一般来说，Multimap接口应该用第一种方式看待，但asMap()视图返回Map&lt;K, Collection&gt;，让你可以按另一种方式看待Multimap。重要的是，不会有任何键映射到空集合：一个键要么至少到一个值，要么根本就不在Multimap中。 很少会直接使用Multimap接口，更多时候你会用ListMultimap或SetMultimap接口，它们分别把键映射到List或Set。</p><h5 id="1-、常用方法"><a href="#1-、常用方法" class="headerlink" title="(1)、常用方法"></a>(1)、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th><th>等价于</th></tr></thead><tbody><tr><td>boolean put(K, V)</td><td>添加键到单个值的映射</td><td>multimap.get(key).add(value)</td></tr><tr><td>boolean putAll(K, Iterable&lt;V&gt;)</td><td>依次添加键到多个值的映射</td><td>Iterables.addAll(multimap.get(key), values)</td></tr><tr><td>remove(K, V)</td><td>移除键到值的映射；如果有这样的键值并成功移除，返回true。</td><td>multimap.get(key).remove(value)</td></tr><tr><td>removeAll(K)</td><td>清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。</td><td>multimap.get(key).clear()</td></tr><tr><td>replaceValues(K, Iterable&lt;V&gt;)</td><td>清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。</td><td>multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)</td></tr><tr><td>Map&lt;K,Collection&lt;V&gt;&gt; asMap()</td><td>获取MultiMap的视图，键值K，以及K对应的集合</td><td></td></tr><tr><td>void clear()</td><td>清除所有的键值对</td><td></td></tr><tr><td>boolean containsEntry(Object key,Object value)</td><td>判断是否包含key-value对应的键值对</td><td></td></tr><tr><td>boolean containsKey(Object key)</td><td>判断是否包含键值key</td><td></td></tr><tr><td>boolean containsValue(Object value)</td><td>判断是否包含值value</td><td></td></tr><tr><td>Collection&lt;Map.Entry&lt;K,V&gt;&gt; entries()</td><td>MultiMap为Map&lt;Entry&gt;情况下，返回所有的键值对集合</td><td></td></tr><tr><td>Collection&lt;V&gt; get(K k)</td><td>返回键k对应的所有集合</td><td></td></tr><tr><td>boolean isEmpty()</td><td>判断MultiMap是否是空，即不包含键值对</td><td></td></tr><tr><td>MultiSet&lt;K&gt; keys()</td><td>返回所有的键值K，包含重复</td><td></td></tr><tr><td>Set&lt;K&gt; keySet()</td><td>返回所有的键值K，不重复</td><td></td></tr><tr><td>int size()</td><td>返回键值对的数量</td><td></td></tr><tr><td>Collection&lt;V&gt; values</td><td>返回所有的value</td><td></td></tr></tbody></table><h5 id="2-、示例-1"><a href="#2-、示例-1" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * MultiMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Multimap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> multimap <span class="token operator">=</span> HashMultimap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> asMap <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"asMap视图："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>asMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Multiset<span class="token operator">&lt;</span>String<span class="token operator">></span> multisetKey <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的key:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multisetKey<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不重复的key："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>keySet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lower:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加后的lower:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"upper:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除元素后的upper："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含lower-b:"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsEntry</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含lower-b:"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsEntry</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含key(upper):"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含value(c):"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> collection <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MultiMap详情："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MultiMap所有的value："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-、Multimap不是Map"><a href="#3-、Multimap不是Map" class="headerlink" title="(3)、Multimap不是Map"></a>(3)、Multimap不是Map</h5><p>Multimap&lt;K, V&gt;不是Map&lt;K,Collection&gt;，虽然某些Multimap实现中可能使用了map。它们之间的显著区别包括：</p><ul><li><p>Multimap.get(key)总是返回非null、但是可能空的集合。这并不意味着Multimap为相应的键花费内存创建了集合，而只是提供一个集合视图方便你为键增加映射值——译者注：如果有这样的键，返回的集合只是包装了Multimap中已有的集合；如果没有这样的键，返回的空集合也只是持有Multimap引用的栈对象，让你可以用来操作底层的Multimap。因此，返回的集合不会占据太多内存，数据实际上还是存放在Multimap中。</p></li><li><p>如果你更喜欢像Map那样，为Multimap中没有的键返回null，请使用asMap()视图获取一个Map&lt;K, Collection&lt;V&gt;&gt;。（或者用静态方法Multimaps.asMap()为ListMultimap返回一个Map&lt;K, List&lt;V&gt;&gt;。对于SetMultimap和SortedSetMultimap，也有类似的静态方法存在）</p></li><li><p>当且仅当有值映射到键时，Multimap.containsKey(key)才会返回true。尤其需要注意的是，如果键k之前映射过一个或多个值，但它们都被移除后，Multimap.containsKey(key)会返回false。</p></li><li><p>Multimap.entries()返回Multimap中所有”键-单个值映射”——包括重复键。如果你想要得到所有”键-值集合映射”，请使用asMap().entrySet()。</p></li><li><p>Multimap.size()返回所有”键-单个值映射”的个数，而非不同键的个数。要得到不同键的个数，请改用Multimap.keySet().size()。</p><h5 id="4-、Multimap的各种实现"><a href="#4-、Multimap的各种实现" class="headerlink" title="(4)、Multimap的各种实现"></a>(4)、Multimap的各种实现</h5></li></ul><table><thead><tr><th>实现</th><th>键行为类似</th><th>值行为类似</th></tr></thead><tbody><tr><td>ArrayListMultimap</td><td>HashMap</td><td>ArrayList</td></tr><tr><td>HashMultimap</td><td>HashMap</td><td>HashSet</td></tr><tr><td><em>LinkedListMultimap</em></td><td><em>LinkedHashMap</em></td><td><em>LinkedList</em></td></tr><tr><td><em>LinkedHashMultimap</em></td><td>LinkedHashMap</td><td>LinkedHashMap</td></tr><tr><td>TreeMultimap</td><td>TreeMap</td><td>TreeSet</td></tr><tr><td>ImmutableListMultimap</td><td>ImmutableMap</td><td>ImmutableList</td></tr><tr><td>ImmutableSetMultimap</td><td>ImmutableMap</td><td>ImmutableSet</td></tr></tbody></table><p>除了两个不可变形式的实现，其他所有实现都支持null键和null值</p><ul><li><p>LinkedListMultimap.entries()保留了所有键和值的迭代顺序。详情见doc链接。</p></li><li><p>LinkedHashMultimap保留了映射项的插入顺序，包括键插入的顺序，以及键映射的所有值的插入顺序。 请注意，并非所有的Multimap都和上面列出的一样，使用Map&lt;K, Collection&lt;V&gt;&gt;来实现（特别是，一些Multimap实现用了自定义的hashTable，以最小化开销）</p></li></ul><h4 id="3、BiMap"><a href="#3、BiMap" class="headerlink" title="3、BiMap"></a>3、BiMap</h4><p>BiMap&lt;K, V&gt;是特殊的Map：</p><ul><li>可以用 inverse()反转BiMap&lt;K, V&gt;的键值映射</li><li>保证值是唯一的，因此 values()返回Set而不是普通的Collection</li></ul><p>在BiMap中，如果你想把键映射到已经存在的值，会抛出IllegalArgumentException异常。</p><h5 id="（1）、常用方法"><a href="#（1）、常用方法" class="headerlink" title="（1）、常用方法"></a>（1）、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>V forcePut(String key, V value)</td><td>对于特定的值，强制替换它的键</td></tr><tr><td>BiMap&lt;K,V&gt; inverse()</td><td>k-v键值对的转换，即v-k</td></tr><tr><td>V put&lt;K key,V value&gt;</td><td>关联v到k</td></tr><tr><td>void putAll(Map&lt;\? extend k,\? extend V&gt; map)</td><td>将map加入到BiMap</td></tr><tr><td>Set values()</td><td>返回BiMap映射中包含的Collection视图</td></tr><tr><td>##### (2)、BiMap的各种实现</td><td></td></tr></tbody></table><table><thead><tr><th>键–值实现</th><th>值–键实现</th><th>对应的BiMap实现</th></tr></thead><tbody><tr><td>HashMap</td><td>HashMap</td><td>HashBiMap</td></tr><tr><td>ImmutableMap</td><td>ImmutableMap</td><td>ImmutableBiMap</td></tr><tr><td>EnumMap</td><td>EnumMap</td><td>EnumBiMap</td></tr><tr><td>EnumMap</td><td>HashMap</td><td>EnumHashBiMap</td></tr></tbody></table><h5 id="（3）、示例"><a href="#（3）、示例" class="headerlink" title="（3）、示例"></a>（3）、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * BiMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">biMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BiMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> biMap <span class="token operator">=</span> HashBiMap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换后所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v <span class="token operator">=</span> biMap<span class="token punctuation">.</span><span class="token function">forcePut</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换的值："</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、Table"><a href="#4、Table" class="headerlink" title="4、Table"></a>4、Table</h4><p>Table是Guava提供的一个接口 Interface Table&lt;R,C,V&gt;，由rowKey+columnKey+value组成 它有两个键，一个值，和一个n行三列的数据表类似，n行取决于Table对对象中存储了多少个数据。</p><h5 id="（1）、常用方法-1"><a href="#（1）、常用方法-1" class="headerlink" title="（1）、常用方法"></a>（1）、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Set&lt;Table.Cell&lt;R,C,V&gt;&gt; cellSet()</td><td>返回集合中的行键，列键，值三元组</td></tr><tr><td>void clear()</td><td>清除所有的键值对</td></tr><tr><td>Map&lt;R,V&gt; column(C columnKey)</td><td>获取列键对应的键值对</td></tr><tr><td>Map&lt;C,V&gt; row(R row)</td><td>获取行键对应的列以及值</td></tr><tr><td>Set&lt;C&gt; columnKeySet()</td><td>获取所有的列键</td></tr><tr><td>Set&lt;R&gt; rowKeySet()</td><td>获取行键</td></tr><tr><td>Map&lt;C,Map&lt;R,V&gt;&gt; columnMap</td><td>返回列键对应的行键-值的视图</td></tr><tr><td>boolean contains(Object rowKey,Object columnKey)</td><td>判断是否包含指定的行键，列键</td></tr><tr><td>boolean containsColumn(Object columnKey)</td><td>判断是否包含指定的列键</td></tr><tr><td>boolean containsRow(Object rowKey)</td><td>判断是否包含指定的行键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断是否包含值</td></tr><tr><td>V get(Object rowKey,Object columnKey)</td><td>返回指定的行键，列键对应的值，不存在则返回null</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>V put(Object rowKey,Object columnKey,Object value)</td><td>put值</td></tr><tr><td>void putAll(Table&lt;\? extend R,? extend C,? extend V&gt; table)</td><td>put指定的table</td></tr><tr><td>V remove(Object rowKey,Object columnKey)</td><td>如果有，则移除指定行键，列键</td></tr><tr><td>Map&lt;R,Map&lt;C,V&gt;&gt; rowMap()</td><td>获取每个行键对应的列键，值的视图</td></tr><tr><td>int size()</td><td>集合的个数(行键/列键/值)</td></tr><tr><td>Collection&lt;V&gt; values()</td><td>集合值的集合，包括重复的</td></tr></tbody></table><h5 id="2-、示例-2"><a href="#2-、示例-2" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Table     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Table<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> table <span class="token operator">=</span> HashBasedTable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_1"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_1"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Table<span class="token punctuation">.</span>Cell<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> cellSet <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">cellSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cell <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"table中的行："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getRowKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";列："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getColumnKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";值："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"grade1对应的class："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class1对应的grade："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string">"class_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的grade:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">rowKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的class："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">columnKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> rowMap <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">rowMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rowMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>map<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row <span class="token operator">+</span><span class="token string">"行对应的列值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> columnMap <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">columnMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span>map<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>column <span class="token operator">+</span><span class="token string">"列对应的行值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含grade_1 和 class_2:"</span><span class="token operator">+</span>table<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含grade_1 和 class_2:"</span><span class="token operator">+</span>table<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）、Table有如下几种实现："><a href="#（3）、Table有如下几种实现：" class="headerlink" title="（3）、Table有如下几种实现："></a>（3）、Table有如下几种实现：</h5><ul><li><p>HashBasedTable：本质上用HashMap&lt;R, HashMap&lt;C, V&gt;&gt;实现；</p></li><li><p>TreeBasedTable：本质上用TreeMap&lt;R, TreeMap&lt;C,V&gt;&gt;实现；</p></li><li><p>ImmutableTable：本质上用ImmutableMap&lt;R, ImmutableMap&lt;C, V&gt;&gt;实现；注：ImmutableTable对稀疏或密集的数据集都有优化。</p></li><li><p>ArrayTable：要求在构造时就指定行和列的大小，本质上由一个二维数组实现，以提升访问速度和密集Table的内存利用率。ArrayTable与其他Table的工作原理有点不同。</p></li></ul><h4 id="5、ClassToInstanceMap"><a href="#5、ClassToInstanceMap" class="headerlink" title="5、ClassToInstanceMap"></a>5、ClassToInstanceMap</h4><p>ClassToInstanceMap是一种特殊的Map：它的键是类型，而值是符合键所指类型的对象。<br>为了扩展Map接口，ClassToInstanceMap额外声明了两个方法：T getInstance(Class T) 和T putInstance(Class , T)，从而避免强制类型转换，同时保证了类型安全。</p><p>ClassToInstanceMap有唯一的泛型参数，通常称为B，代表Map支持的所有类型的上界。</p><p>对于ClassToInstanceMap，Guava提供了两种有用的实现：MutableClassToInstanceMap和 ImmutableClassToInstanceMap。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * ClassToInstanceMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">classToInstanceMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ClassToInstanceMap<span class="token operator">&lt;</span>Number<span class="token operator">></span> instanceMap <span class="token operator">=</span> MutableClassToInstanceMap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>456L<span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">789.09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Integer:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Long:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、RangSet"><a href="#6、RangSet" class="headerlink" title="6、RangSet"></a>6、RangSet</h4><p>RangeSet描述了一组不相连的、非空的区间。当把一个区间添加到可变的RangeSet时，所有相连的区间会被合并，空区间会被忽略。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过深入探索Google Guava库的集合操作，我们不仅仅发现了一个功能强大的工具，更是领略到了一个高效、简洁的Java编程理念。Guava不仅提供了基础数据结构，还为开发者提供了一整套处理集合的利器，从不可变集合到高效工具类，无一不展现出其设计的巧妙之处。</p><p>在实际项目中，Guava为我们提供了更清晰、更简单的集合操作方式，帮助我们避免了许多常见的错误和异常。它的性能优化更是让我们在处理大规模数据时事半功倍。</p><p>作为Java开发者，我们应该充分了解并灵活运用Guava库，以提高代码的可读性、可维护性和性能。无论是新手还是老手，Guava都能为我们的开发工作带来便捷和效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Guava </tag>
            
            <tag> java </tag>
            
            <tag> Guava集合操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：请说一下Mysql中count(1)、count(*)以及count(列)的区别？</title>
      <link href="/article/1d31dad8.html"/>
      <url>/article/1d31dad8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>近期在Review项目代码时，发现同事们在查询MySQL行数时存在多样的方式，有的使用<code>COUNT(1)</code>, 有的用<code>COUNT(id)</code>, 还有人选择了<code>COUNT(*)</code>。这混杂的选择引发了我的思考。当然这三种count的方式也是众说纷纭，其中最大的分歧点就是<code>COUNT(*)</code>和<code>COUNT(1)</code>查询性能上，有人觉得<code>COUNT(*)</code>需要转换为<code>COUNT(1)</code>，所以<code>COUNT(1)</code>得速度更快。究竟这三种计数方式之间有何区别，它们的背后原理是怎样的呢？</p><h3 id="COUNT-含义"><a href="#COUNT-含义" class="headerlink" title="COUNT()含义"></a>COUNT()含义</h3><p>在《高性能Mysql》一书第236页中是这么解释<code>COUNT</code>的作用的：</p><blockquote><p>COUNT()是一个特殊的函数，有两种非常不同的作用:它可以统计某个列值的数量，也可以统计行数。在统计列值时要求列值是非空的(不统计NULL)。如果在COUNT()的括号中指定了列或者列的表达式，则统计的就是这个表达式有值的结果数”。因为很多人对 NULL理解有问题，所以这里很容易产生误解。<br>COUNT()的另一个作用是统计结果集的行数。当MySOL确认括号内的表达式值不可能为空时，实际上就是在统计行数。最简单的就是当我们使用COUNT(<em>)的时候，这种情况下通配符</em>并不会像我们猜想的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计所有的行数。<br>我们发现一个最常见的错误就是，在括号内指定了一个列却希望统计结果集的行数。如果希望知道的是结果集的行数，最好使用<code>COUNT(*)</code>，这样写意义清晰，性能也会很好</p></blockquote><p>由此我们也可以大概总结<code>COUNT</code>函数的种方式如下：</p><ul><li><p><code>COUNT(1)</code>: 此查询返回的是结果集中的行数，不关心具体的列内容，因此使用常数1。<br>在很多数据库系统中，这种方式被优化为与 <code>SELECT COUNT(*)</code> 相同的性能水平，因为数据库引擎通常忽略括号内的内容。</p></li><li><p><code>COUNT(*)</code>：统计整个表的行数，不考虑是否有NULL值。<br>通常优于 <code>COUNT(id)</code>，因为它不需要关心具体的列，且现代数据库引擎会对其进行特殊优化。</p></li><li><p><code>COUNT(列)</code> ：统计指定列非空值的数量。需要考虑是否有NULL值<br>此种方式取决于列是否有索引。如果 列有索引，数据库引擎可能会利用索引进行快速计数。如果没有索引，或者有大量NULL值，性能可能较差，因为需要扫描整个表。</p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="1、Mysql5-7"><a href="#1、Mysql5-7" class="headerlink" title="1、Mysql5.7"></a>1、Mysql5.7</h4><p>在<a href="https://dev.mysql.com/doc/refman/5.7/en/aggregate-functions.html#function_count" target="_blank" rel="noopener">MySql 5.7官方文档</a>中是这么介绍<code>COUNT(expr)</code>函数的</p><blockquote><p><code>COUNT(expr)</code><br>Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value.<br>If there are no matching rows, <code>COUNT()</code>returns 0.<br><code></code>mysql&gt; SELECT student.student_name,COUNT(<em>)<br>       FROM student,course<br>       WHERE student.student_id=course.student_id<br>       GROUP BY student_name;<code></code><br>`COUNT(</em>)` is somewhat different in that it returns a count of the number of rows retrieved, whether or not they contain NULL values.</p><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>Prior to MySQL 5.7.18, InnoDB processes <code>SELECT COUNT(*)</code> statements by scanning the clustered index. As of MySQL 5.7.18, InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, the clustered index is scanned.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use SHOW TABLE STATUS.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For MyISAM tables, <code>COUNT(*)</code> is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:<br><code>mysql&gt; SELECT COUNT(*) FROM student;</code><br>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly. COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p>从官方文档中我们可以看出mysql官方对<code>COUNT</code>函数的解释：</p><ul><li><p><code>COUNT(expr)</code> 返回由 SELECT 语句检索的行中 _expr_ 的非 NULL 值的数量，结果为 BIGINT 值。如果没有匹配的行，<code>COUNT()</code> 返回 0。</p></li><li><p><code>COUNT(*)</code> 有所不同，它返回所检索的行数的计数，无论它们是否包含 NULL 值。</p></li><li><p>对于事务性存储引擎（如 InnoDB），存储准确的行数是有问题的。因为多个事务可能同时影响计数，InnoDB 不会保留表中行的内部计数。<code>SELECT COUNT(*)</code> 只会计算当前事务可见的行。</p></li><li><p>在 MySQL 5.7.18 之前，InnoDB 通过扫描聚集索引处理 <code>SELECT COUNT(*)</code> 语句。从 MySQL 5.7.18 开始，除非索引或优化器提示指示使用其他索引，InnoDB 会通过遍历最小的可用二级索引来处理 <code>SELECT COUNT(*)</code> 语句。如果没有二级索引，则将扫描聚集索引。</p></li><li><p>处理 <code>SELECT COUNT(*)</code> 语句可能花费一些时间，如果索引记录没有完全在缓冲池中。为了更快的计数，可以创建一个计数器表，并根据插入和删除操作进行更新。然而，在成千上万的并发事务更新同一计数器表的情况下，该方法可能无法很好地扩展。如果粗略的行数足够，可以使用<code>SHOW TABLE STATUS</code>。</p></li><li><p><strong>InnoDB 处理 <code>SELECT COUNT(*)</code> 和 <code>SELECT COUNT(1)</code> 操作的方式相同，没有性能差异。</strong></p></li><li><p>对于 MyISAM 表，<code>COUNT(\*)</code> 在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回，因为 MyISAM 存储了准确的行数。COUNT(1) 只有在第一列被定义为 NOT NULL 时才能进行相同的优化。</p></li></ul><h4 id="2、Mysql-8-0"><a href="#2、Mysql-8-0" class="headerlink" title="2、Mysql 8.0"></a>2、Mysql 8.0</h4><p>在<a href="https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count" target="_blank" rel="noopener">Mysql8.0的文档</a>中对<code>COUNT(expr)</code>的解释是这样</p><blockquote><p><code>COUNT(expr) [over_clause]</code></p><p>Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value.</p><p>If there are no matching rows, <code>COUNT()</code> returns 0.<code>COUNT(NULL)</code>returns 0.</p><p>This function executes as a window function if over_clause is present. over_clause is as described in Section 12.20.2, “Window Function Concepts and Syntax”.</p><p><code>mysql&gt; SELECT student.student_name,COUNT(*)       FROM student,course       WHERE student.student_id=course.student_id       GROUP BY student_name;</code><br><code>COUNT(*)</code>is somewhat different in that it returns a count of the number of rows retrieved, whether or not they contain NULL values.</p><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>As of MySQL 8.0.13, <code>SELECT COUNT(*)</code> FROM tbl_name query performance for InnoDB tables is optimized for single-threaded workloads if there are no extra clauses such as WHERE or GROUP BY.</p><p>InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, InnoDB processes SELECT COUNT(*) statements by scanning the clustered index.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use SHOW TABLE STATUS.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For MyISAM tables, <code>COUNT(*)</code>is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:</p><p><code>mysql&gt; SELECT COUNT(*) FROM student;</code><br>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly. COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p>从mysql8.0的文档中我们可以看出mysql8.0对<code>COUNT</code>的解释</p><ul><li><p><code>COUNT(expr)</code> 返回在由 SELECT 语句检索的行中 <code>_expr_</code> 的非 NULL 值的数量，结果为 BIGINT 值。如果没有匹配的行，<code>COUNT()</code> 返回 0。<code>COUNT(NULL)</code> 也返回 0。</p></li><li><p><code>COUNT(*)</code> 有所不同，它返回所检索的行数的计数，无论它们是否包含 NULL 值。</p></li><li><p>对于事务性存储引擎（如 InnoDB），存储准确的行数是有问题的，因为多个事务可能同时影响计数。InnoDB 不会保留表中行的内部计数。<code>SELECT COUNT(*)</code> 只计算当前事务可见的行。</p></li><li><p>在 MySQL 8.0.13 及以后版本，对于 InnoDB 表，执行 <code>SELECT COUNT(*) FROM tbl_name</code> 查询性能在没有额外子句（如 WHERE 或 GROUP BY）的情况下进行了优化，特别适用于单线程工作负载。</p></li><li><p>InnoDB 处理 <code>SELECT COUNT(*)</code> 语句的方式：</p><ul><li>通过遍历最小可用二级索引，除非指示使用其他索引。</li><li>如果没有二级索引，InnoDB 通过扫描聚集索引来处理 <code>SELECT COUNT(*)</code> 语句。</li></ul></li><li><p>处理 <code>SELECT COUNT(*)</code> 语句可能花费一些时间，如果索引记录没有完全在缓冲池中。为了更快的计数，可以创建一个计数器表，让应用程序根据插入和删除操作进行更新。但是，这种方法在数千个并发事务同时对同一计数器表进行更新的情况下可能不会很好地扩展。如果粗略的行数足够，可以使用 <code>SHOW TABLE STATUS</code>。</p></li><li><p><strong>InnoDB 对待 <code>SELECT COUNT(*)</code> 和 <code>SELECT COUNT(1)</code> 操作的方式相同，没有性能差异。</strong></p></li><li><p>对于 MyISAM 表，<code>COUNT(*)</code> 在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回，因为 MyISAM 存储了准确的行数。COUNT(1) 只有在第一列被定义为 NOT NULL 时才能进行相同的优化。</p></li></ul><p>结合Mysql5.7与Mysql8.0的文档我们可以看出两个版本对<code>COUNT</code>的支持的差异：</p><ul><li><strong>MySQL 8.0 优化了 InnoDB 表的 <code>SELECT COUNT(*)</code> 查询性能：</strong> 在 MySQL 8.0.13 及以后版本，对于 InnoDB 表，执行 <code>SELECT COUNT(*)</code> 查询的性能进行了优化，特别适用于单线程工作负载。这是 MySQL 5.7 文档中未包含的新特性。</li><li><strong>MyISAM 表的优化说明：</strong><br>   MySQL 8.0 文档中强调了 MyISAM 表在执行 <code>COUNT(*)</code> 时的优化情况，即在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回。MySQL 5.7 文档中也提到了 MyISAM 表的优化，但对于 <code>COUNT(*)</code> 的具体优化情况没有细节。</li></ul><p>MySQL 8.0 在性能优化方面对于 InnoDB 表的 <code>SELECT COUNT(*)</code> 查询进行了特别的关注，而且在 MyISAM 表的优化方面进行了详细的说明。其他方面，两个版本在<code>COUNT()</code>函数的解释和使用上基本保持一致。</p><p>基于此我们明白，其实<code>COUNT(*)</code>和<code>COUNT(1)</code>其实是一样的，在性能上并没有差异。</p><p>那这两种方式与<code>COUNT(列)</code>的差异呢？从以上《高性能Mysql》以及Mysql官方文档中我们知道，<code>COUNT(列)</code>是统计非空列的行数，它也会遍历整张表，然后会对列对应的值做非空判断，非空的字段进行个数累加。当然这是列为主键索引时的操作。如果列不为主键索引时，那么查询时还需要进行回表操作，再根据主键获取数据，此时无疑是增加了一次IO，在性能上其实是不如<code>COUNT(*)</code>和<code>COUNT(1)</code>的。那么我们就可以知道，按照效率来看，<strong><code>count(*)</code> = count(1) &gt; count(主键) &gt; count(非主键列)</strong>。</p><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ul><li><p>如果你想知道一张表的大概行数，我们可以直接使用<code>show table status</code>命令或者咱们使用的一些mysql客户端Navicat或者datagrip都可以办到。</p></li><li><p>如果你想获取一张表的确切行数时，我可以是优先使用<strong>使用 <code>COUNT(*)</code> 获取行数</strong>，这样写法清晰，性能较好，尤其对于 InnoDB 表的优化更为明显。我们要<strong>避免使用 <code>COUNT(列)</code> 统计行数</strong>，除非你真的需要统计该列非空值的数量，否则容易产生误解。</p></li></ul><p>篇幅有限，深入验证将在后续文章中介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql的count函数 </tag>
            
            <tag> Mysql </tag>
            
            <tag> 高性能mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java基础（二）之Java线程池最全详解</title>
      <link href="/article/2d9d416b.html"/>
      <url>/article/2d9d416b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>在当今高度并发的软件开发环境中，有效地管理线程是确保程序性能和稳定性的关键因素之一。Java线程池作为一种强大的并发工具，不仅能够提高任务执行的效率，还能有效地控制系统资源的使用。<br>本文将深入探讨Java线程池的原理、参数配置、自定义以及实际应用。通过理解这些关键概念，开发者将能够更好地应对不同的并发场景，优化程序的执行效率。<br>首先，我们将介绍线程池的基本概念，解释它在并发编程中的作用和优势。随后，我们将深入研究Java线程池的工作原理，剖析其在任务提交、执行和线程管理方面的内部机制。</p><h3 id="2-Java线程池的基础概念"><a href="#2-Java线程池的基础概念" class="headerlink" title="2. Java线程池的基础概念"></a>2. Java线程池的基础概念</h3><p>在并发编程中，线程池是一种重要的设计模式，它能够有效地管理和复用线程，提高程序的性能和资源利用率。Java线程池作为Java并发包（java.util.concurrent）的一部分，为开发者提供了方便、高效的多线程处理方式。同时在阿里巴巴开发规范中，强制要使用线程池去提供线程，不允许在代码中显示的创建线程。</p><h4 id="2-1-什么是线程池？"><a href="#2-1-什么是线程池？" class="headerlink" title="2.1 什么是线程池？"></a>2.1 什么是线程池？</h4><p>线程池是由一组线程组成的线程队列，它们在程序启动时就被创建并一直存在。这些线程可被用来执行提交到线程池的各种任务，从而避免为每个任务都创建新线程。这种机制能够降低线程创建和销毁的开销，提高系统性能。</p><h4 id="2-2-线程池的工作原理"><a href="#2-2-线程池的工作原理" class="headerlink" title="2.2 线程池的工作原理"></a>2.2 线程池的工作原理</h4><p>线程池的工作原理基于任务队列和线程管理机制。当任务被提交到线程池时，线程池会选择合适的线程来执行任务。如果核心线程数未达到上限，新任务可能会导致新线程的创建。如果核心线程已满，任务将被放入任务队列等待执行。当任务队列也已满，而同时线程数未达到最大线程数，新的任务将创建临时线程来执行。</p><h4 id="2-3-线程池的优势"><a href="#2-3-线程池的优势" class="headerlink" title="2.3 线程池的优势"></a>2.3 线程池的优势</h4><p>使用线程池的优势主要体现在以下几个方面：<br><strong>减少资源消耗</strong>： 线程的创建和销毁是有开销的，线程池通过复用线程，减少了这些开销。<br><strong>提高响应速度</strong>： 由于线程池中的线程一直存在，可以更迅速地响应任务的到来。<br><strong>避免系统过载</strong>： 控制线程数量，防止系统因过多线程而过载。</p><h3 id="3-Java线程池的工作原理"><a href="#3-Java线程池的工作原理" class="headerlink" title="3. Java线程池的工作原理"></a>3. Java线程池的工作原理</h3><p>Java线程池的工作原理涉及线程的创建、任务的提交与执行，以及对线程的管理。深入理解这些机制对于优化并发程序至关重要。</p><h4 id="3-1-线程池的创建与初始化"><a href="#3-1-线程池的创建与初始化" class="headerlink" title="3.1 线程池的创建与初始化"></a>3.1 线程池的创建与初始化</h4><p>在程序启动时，线程池被创建并初始化。这一过程包括设置线程池的基本参数，如核心线程数、最大线程数、任务队列等。核心线程数是线程池中一直存活的线程数量，而最大线程数则是线程池允许创建的最大线程数量。例如创建一个固定核心线程数的线程：</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中参数<code>corePoolSize</code>即为核心线程数</p><h4 id="3-2-任务的提交与执行"><a href="#3-2-任务的提交与执行" class="headerlink" title="3.2 任务的提交与执行"></a>3.2 任务的提交与执行</h4><p>任务提交到线程池后，线程池会根据一定的策略选择线程来执行任务。首先，线程池会检查核心线程是否已满，如果未满，新的任务可能会导致新线程的创建。如果核心线程已满，任务将被放入任务队列。<br>在Java线程池中，任务的提交与执行有两个主要的方法：<code>submit</code>和<code>execute</code>。这两种方法有一些区别，主要体现在返回值、异常处理和任务包装上。</p><h5 id="3-2-1-submit方法"><a href="#3-2-1-submit方法" class="headerlink" title="3.2.1 submit方法"></a>3.2.1 submit方法</h5><p><code>submit</code>方法用于提交实现了<code>Callable</code>接口的任务，它可以返回一个<code>Future</code>对象，通过该对象可以获取任务执行的结果，取消任务等。<code>submit</code>方法还可以接受实现了<code>Runnable</code>接口的任务，但它无法获取任务的执行结果。<code>submit</code>方法在<code>ExecutorService</code>中定义的，并定义了三种重载方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span><span class="token punctuation">;</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体使用如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 提交callable任务，可以拿到返回值</span>Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> future1 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>Future<span class="token operator">&lt;</span>Void<span class="token operator">></span> future2 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future3 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要特点：</strong></p><ul><li>返回一个<code>Future</code>对象，可通过<code>Future</code>的<code>get()</code>方法可以获取到线程执行的返回值，<code>get()</code>方法是同步的，执行<code>get()</code>方法时，如果线程还没执行完，会同步等待，直到线程执行完成。</li><li>可以接受<code>Callable</code>和<code>Runnable</code>类型的任务。</li><li>执行<code>Runnable</code>和<code>Callable</code>的任务时，run()/call()方法没显式抛出异常。<h4 id="3-2-2-execute方法"><a href="#3-2-2-execute方法" class="headerlink" title="3.2.2 execute方法"></a>3.2.2 execute方法</h4><code>execute</code>方法用于提交实现了<code>Runnable</code>接口的任务，它没有返回值，因此无法获取任务的执行结果。如果任务执行过程中抛出了异常，线程池会捕获并记录该异常，但无法通过<code>execute</code>方法获知。<code>execute</code>方法是在线程池的顶级接口<code>Executor</code>中定义的，而且只有这一个接口。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>使用：<pre class="line-numbers language-java"><code class="language-java">executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体业务逻辑  </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>主要特点：</strong></p><ul><li>没有返回值，无法获取任务的执行结果。</li><li>只能接受<code>Runnable</code>类型的任务。</li></ul><p>总的来说，<code>submit</code>方法更加灵活，适用于更多场景，而<code>execute</code>方法更加简单，适用于只关心任务执行而不需要获取结果的场景。在实际应用中，根据具体需求选择合适的方法。如果需要获取任务的执行结果、取消任务等，建议使用<code>submit</code>方法。只是执行任务而不关心返回值，可以使用<code>execute</code>方法。</p><h3 id="4-线程池的参数以及配置"><a href="#4-线程池的参数以及配置" class="headerlink" title="4. 线程池的参数以及配置"></a>4. 线程池的参数以及配置</h3><p>Java线程池的性能和行为可以通过一系列参数进行调整，以满足不同的并发需求。<code>ThreadPoolExecutor</code>中提供的构造器如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPoolExecutor.png" alt="ThreadPoolExecutor.png"></p><h4 id="4-1-七大参数"><a href="#4-1-七大参数" class="headerlink" title="4.1 七大参数"></a>4.1 七大参数</h4><h5 id="4-1-核心线程数（Core-Pool-Size）"><a href="#4-1-核心线程数（Core-Pool-Size）" class="headerlink" title="4.1 核心线程数（Core Pool Size）"></a>4.1 核心线程数（Core Pool Size）</h5><p>核心线程数是线程池中一直存活的线程数量（<strong>即使它们处于空闲状态</strong>）。这些线程用于执行提交到线程池的任务。通过合理设置核心线程数，可以在系统负载增加时迅速响应任务。</p><h5 id="4-2-最大线程数（Maximum-Pool-Size）"><a href="#4-2-最大线程数（Maximum-Pool-Size）" class="headerlink" title="4.2 最大线程数（Maximum Pool Size）"></a>4.2 最大线程数（Maximum Pool Size）</h5><p>最大线程数定义了线程池中允许创建的最大线程数量。当核心线程都在执行任务，而新任务仍然到来时，线程池会创建新线程，直到达到最大线程数。超过最大线程数的任务会被拒绝。</p><h5 id="4-3-线程存活时间（Keep-Alive-Time）"><a href="#4-3-线程存活时间（Keep-Alive-Time）" class="headerlink" title="4.3 线程存活时间（Keep Alive Time）"></a>4.3 线程存活时间（Keep Alive Time）</h5><p>线程存活时间指的是非核心线程在空闲状态下的最大存活时间。当线程池中线程数量超过核心线程数时，空闲的非核心线程在经过一定时间后会被终止，从而释放系统资源。</p><h5 id="4-4-TimeUnit"><a href="#4-4-TimeUnit" class="headerlink" title="4.4 TimeUnit"></a>4.4 TimeUnit</h5><p>keepAliveTime的单位(ms、s…)</p><h5 id="4-5-工作队列（Work-Queue）"><a href="#4-5-工作队列（Work-Queue）" class="headerlink" title="4.5 工作队列（Work Queue）"></a>4.5 工作队列（Work Queue）</h5><p>工作队列用于存放等待执行的任务。不同类型的队列对线程池的行为有重要影响，例如有界队列和无界队列。有界队列在任务数达到上限时会触发拒绝策略。</p><h5 id="4-6-ThreadFactory"><a href="#4-6-ThreadFactory" class="headerlink" title="4.6 ThreadFactory"></a>4.6 ThreadFactory</h5><p>线程池中生成线程的工厂。默认使用默认工厂<code>Executors.defaultThreadFactory()</code>。但是实际使用时建议使用Guava的<code>ThreadFactory</code>自定义线程的名字，方便排查线程问题（阿里开发规范中也建议这么做）。如下：</p><pre class="line-numbers language-java"><code class="language-java">ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-7-拒绝策略（Rejected-Execution-Policy）"><a href="#4-7-拒绝策略（Rejected-Execution-Policy）" class="headerlink" title="4.7 拒绝策略（Rejected Execution Policy）"></a>4.7 拒绝策略（Rejected Execution Policy）</h5><p>拒绝策略定义了当工作队列满，并且当前工作的线程数等于最大线程数时，后续再提交的任务如何处理。例如，可以选择抛弃任务、抛出异常或在调用线程中直接执行。Java线程池提供了几种常见的拒绝策略：</p><ul><li><strong>AbortPolicy（默认策略）：</strong><br>直接抛出<code>RejectedExecutionException</code>，阻止系统继续接受新任务，保持原有状态。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>CallerRunsPolicy：</strong><br>将任务返回给调用者，由调用线程直接执行。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>DiscardPolicy：</strong><br>直接丢弃无法处理的任务，不抛出异常。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>DiscardOldestPolicy：</strong><br>当任务被拒绝添加时，会抛弃任务队列中最旧的任务也就是最先加入队列的，再把这个新任务添加进去。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="4-2-线程池提交任务执行流程"><a href="#4-2-线程池提交任务执行流程" class="headerlink" title="4.2 线程池提交任务执行流程"></a>4.2 线程池提交任务执行流程</h4><h5 id="4-2-1-执行流程"><a href="#4-2-1-执行流程" class="headerlink" title="4.2.1 执行流程"></a>4.2.1 执行流程</h5><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="线程池执行流程.png"></p><h5 id="4-2-2-实例讲解"><a href="#4-2-2-实例讲解" class="headerlink" title="4.2.2 实例讲解"></a>4.2.2 实例讲解</h5><p>某银行柜台，共有5个窗口（Maximum Pool Size），平时常开2个窗口办理业务（Core Pool Size），银行大厅摆了5个椅子（Work Queue）供客户等待。银行规定当常开的窗口都在办理业务，并且大厅椅子上都坐满了客户，那么另外3个不常开的窗口也要打开办理业务。如果这3个窗口也都全部在办理业务，后面继续来银行办理业务的客户银行将拒绝办理。如果某个员工空闲下并且超过了5（Keep Alive Time）秒钟（TimeUnit）那么他就可以关闭窗口去休息。但是必须保留2个常开的窗口。<br>我们先按照上述流程创建一个线程池：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 推荐使用Guava的ThreadFactory构建ThreadFactory，自定义线程名称 方便后续排查问题  </span>ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义号线程  </span>ExecutorService executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">// 核心线程数，即2个常开窗口  </span>        <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 最大的线程数，银行所有的窗口  </span>        <span class="token number">5</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 空闲时间  </span>        <span class="token number">5</span><span class="token punctuation">,</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 工作队列  </span>        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 线程工厂  </span>        threadFactory<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 拒绝策略  </span>        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）初始状态下，只有2个窗口为2个客户办理业务。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E6%BC%94%E7%A4%BA1.png" alt="ThreadPool_演示1.png"></p><p>（2）在客户1,客户2办理业务或者说常开窗口一直都有客户在办理业务，此时陆续有客户进来，需要在银行大厅的椅子上等待。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A32.png" alt="ThreadPool_图解2.png"></p><p>（3）直到大厅的椅子都坐满。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A35.png" alt="ThreadPool_图解5.png"></p><p>（4）此时如果在所有的窗口都在办理业务，大厅椅子坐满，如果再来一个客户，将开启3/4/5的窗口</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A37.png" alt="ThreadPool_图解7.png"></p><p>（5）此时如果在所有的窗口都在办理业务，大厅椅子坐满，还从外面再来2个客户办理业务，那么就需要把剩下的窗口都要打开去办理业务。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A38.png" alt="ThreadPool_图解8.png"></p><p>（6）此时如果再来1个客户，就会按照线程池定义的拒绝策略去执行，比如我们设置策略为：AbortPolicy，就会抛出异常。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A39.png" alt="ThreadPool_图解9.png"></p><h4 id="4-3-线程池参数配置"><a href="#4-3-线程池参数配置" class="headerlink" title="4.3 线程池参数配置"></a>4.3 线程池参数配置</h4><p>线程池的配置参数在实际应用中需要根据具体的业务场景和性能需求进行巧妙调整。这就好比在日常生活中，如果有一个任务需要三人协同完成，但却有六人前来参与，就会造成三人的资源浪费；反之，若只安排两人协作，可能会超负荷而不切实际。因此，在线程池参数配置时，过小或过大都会带来问题。</p><p>当线程池数量设置过小时，面对大量同时到达的任务或请求，可能导致这些任务在任务队列中排队等待执行。甚至在任务队列达到最大容量时，无法处理额外的任务，或者导致任务队列积压，有可能引发内存溢出（OOM）问题。这明显是一个问题，因为CPU资源无法得到充分利用。</p><p>相反，若线程数量设置过大，大量线程可能会同时争夺CPU资源，导致频繁的上下文切换，从而增加线程的执行时间，影响整体执行效率。因此，在线程池配置中需要平衡线程数量，以满足高并发场景下的任务处理需求，同时避免不必要的资源争夺和上下文切换，以保障系统的稳定性和性能。</p><p>并没有一个通用的标准来设置参数，因此需要结合实际实战经验、业务需求以及服务器资源的状况，灵活而合理地进行参数配置。最终，合适的配置才是最为优越的选择。</p><p>当然也有一个简单而广泛适用的公式，可以用于确定线程池中的线程数：</p><ol><li><strong>CPU 密集型任务（N+1）：</strong><ul><li>对于消耗主要是CPU资源的任务，可以将线程数设置为N（CPU核心数）+1。额外的一个线程用于防止线程偶发的缺页中断或其他原因导致的任务暂停，防止空闲时间的浪费。一旦任务暂停，多出来的一个线程可以充分利用CPU的空闲时间。</li></ul></li><li><strong>I/O 密集型任务（2N）：</strong><ul><li>对于主要涉及I/O交互的任务，系统会在大部分时间内处理I/O，而在线程处理I/O的时间段内不会占用CPU。因此，在I/O密集型任务中，可以配置更多的线程，具体计算方法是2N。</li></ul></li></ol><p>那我们如何判断任务是CPU密集型还是IO密集型呢？简而言之，CPU密集型任务主要利用CPU计算能力，例如对内存中大量数据进行排序。而IO密集型任务涉及网络读取、文件读取等，其特点是CPU计算耗费的时间相对较少，大部分时间花在等待IO操作完成上。</p><p>但是我们在实际的业务中会发现，我们一个服务器上可能跑多种类型的业务，不太好判断到底是CPU密集任务还是IO密集型。我们可以根据监控服务线程池资源利用情况结合业务场景动态配制合理参数。这里我们就不得不提一下美团的线程池参数动态化配置：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践 - 美团技术团队</a>。</p><h3 id="5-线程池的使用"><a href="#5-线程池的使用" class="headerlink" title="5. 线程池的使用"></a>5. 线程池的使用</h3><p>日常开发中我们可以通过<code>Executors</code>去创建线程池，例如：<br>（1）newFixedThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService1 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建固定线程数的线程池，核心线程数等于最大线程数，此时keepAliveTime失效 。但是他的工作队列的长度为<code>Integer.MAX_VALUE</code>。可能会导致堆积大量的请求，导致OOM。</p><p>（2）newSingleThreadExecutor()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService2 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建单线程的线程池，即核心线程数等于最大线程数均等于1，keepAliveTime失效 。但是他的工作队列的长度为<code>Integer.MAX_VALUE</code>。可能会导致堆积大量的请求，导致OOM。</p><p>（3）newCachedThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService3 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个核心线程数等于0，并且允许创建的最大线程数等于Integer.MAX。keepAliveTime为60秒。可能会造成创建大量的线程，从而导致OOM。</p><p>（4）newScheduledThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService4 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个允许最大线程数等于Integer.MAX，但是他使用的阻塞工作队列是<code>DelayedWorkQueue</code>。<code>DelayedWorkQueue</code>的核心数据结构是二叉最小堆的优先队列，队列满时会自动扩容。所以最大线程数没有意义，线程池中永远会保持至多有核心线程数个工作线程正在运行。</p><p><strong>注意：</strong> 以上创建线程池的方法，可以做自己Demo使用，不应该用在项目中。在阿里巴巴代码规范中，不支持使用这种方式去创建，支持手动创建线程池。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.png" alt="ThreadPool_阿里巴巴开发规范.png"></p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>Java线程池是多线程编程中的重要工具，能够有效管理和复用线程，提高系统性能和资源利用率。本文深入探讨了线程池的基础概念、工作原理、参数配置、自定义以及使用示例，并强调了注意事项。<br>通过了解线程池的工作原理，开发者可以更好地配置线程池以适应不同的并发需求。自定义线程池则使得线程池更灵活地适应特定业务场景。在实际应用中，要谨慎选择线程池类型、合理配置参数、注意任务的生命周期和线程安全等问题，以确保系统的稳定性和性能。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1、<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践 - 美团技术团队 (meituan.com)</a><br>2、《Java并发编程实战》</p>]]></content>
      
      
      <categories>
          
          <category> Java核心基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java线程池 </tag>
            
            <tag> 自定义线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工具类（一）之Guava操作字符串</title>
      <link href="/article/8fd2c424.html"/>
      <url>/article/8fd2c424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><h2 id="Guava字符串操作"><a href="#Guava字符串操作" class="headerlink" title="Guava字符串操作"></a>Guava字符串操作</h2><p>在Java开发的道路上，我们经常会面临各种各样的字符串处理任务，从简单的判空到复杂的拆分和连接操作。为了简化这些常见但有时繁琐的任务，Google推出了一款强大的Java库——Guava。Guava不仅为我们提供了丰富的集合工具，还包括了许多方便而高效的字符串处理工具。</p><p>在本文中，我们将专注于探讨Guava库中关于字符串操作的强大功能。无论您是正在寻找更好的字符串拆分方法，还是希望提高代码的可读性和性能，Guava都为您提供了解决方案。</p><h3 id="一、连接器【Joiner】"><a href="#一、连接器【Joiner】" class="headerlink" title="一、连接器【Joiner】"></a>一、连接器【Joiner】</h3><p>Joiner是字符串连接器，可以处理字符串中的null值，简洁方便。<br></p><h4 id="1、常用方法："><a href="#1、常用方法：" class="headerlink" title="1、常用方法："></a>1、常用方法：</h4><table><thead><tr><th>方法名称</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>skipNulls()</td><td>跳过空值</td><td></td></tr><tr><td>useForNull(String)</td><td>使用参数替换字符串中的null值</td><td></td></tr><tr><td>withKeyValueSeparator(String)</td><td>使用参数连接map结构</td><td></td></tr></tbody></table><h4 id="2、Joiner的使用分为三个步骤："><a href="#2、Joiner的使用分为三个步骤：" class="headerlink" title="2、Joiner的使用分为三个步骤："></a>2、Joiner的使用分为三个步骤：<br></h4><p>(1)、on方法用来设置链接符<br><br>(2)、在on方法之后 join方法之前 ，我们可以做一些扩展操作，比如s使用useForNull是为null值设置默认值。<br><br>(3)、join方法用来设置被操作的集合<br></p><h4 id="3、使用示例："><a href="#3、使用示例：" class="headerlink" title="3、使用示例："></a>3、使用示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">joinerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"World"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// skipNulls</span>    Joiner joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// useForNull</span>    joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useForNull</span><span class="token punctuation">(</span><span class="token string">"My"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// withKeyValueSeparator</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：joiner实例总是不可变的。用来定义joiner目标语义的配置方法总会返回一个新的joiner实例。这使得joiner实例都是线程安全的，你可以将其定义为static final常量。</strong></p><h3 id="二、字符串拆分器【Splitter】"><a href="#二、字符串拆分器【Splitter】" class="headerlink" title="二、字符串拆分器【Splitter】"></a>二、字符串拆分器【Splitter】</h3><p>Splitter可以被设置为按照任何模式、字符、字符串或字符匹配器拆分。返回一个Iterable&lt;T&gt;</p><h4 id="1、拆分器工厂"><a href="#1、拆分器工厂" class="headerlink" title="1、拆分器工厂"></a>1、拆分器工厂</h4><table><thead><tr><th>方法</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>Splitter.on(Char)</td><td>按照单个字符拆分</td><td>Splitter.on(“,”)</td></tr><tr><td>Splitter.on(CharMatcher)</td><td>按字符匹配器拆分</td><td>Splitter.on(CharMatcher.BREAKING_WHITESPACE)</td></tr><tr><td>Splitter.on(String)</td><td>按字符串拆分</td><td>Splitter.on(“a”)</td></tr><tr><td>Splitter.on(Pattern) <br> Splitter.onPattern(String)</td><td>按正则表达式拆分</td><td>Splitter.onPattern(“\r?\n”)</td></tr><tr><td>Splitter.fixedLength(int)</td><td>按固定长度拆分；最后一段可能比给定长度短，但不会为空。</td><td>Splitter.fixedLength(3)</td></tr></tbody></table><h4 id="2、拆分器修饰符"><a href="#2、拆分器修饰符" class="headerlink" title="2、拆分器修饰符"></a>2、拆分器修饰符</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>omitEmptyStrings()</td><td>从结果中自动忽略空字符串</td></tr><tr><td>trimResults()</td><td>移除结果字符串的前导空白和尾部空白</td></tr><tr><td>trimResults(CharMatcher)</td><td>给定匹配器，移除结果字符串的前导匹配字符和尾部匹配字符</td></tr><tr><td>limit(int)</td><td>限制拆分出的字符串数量,即只有前几个拆分符生效</td></tr><tr><td>splitToList</td><td>将拆分接口用List返回</td></tr><tr><td>withKeyValueSeparator</td><td>将String转换Map\&lt;String,String&gt;</td></tr></tbody></table><h4 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">splitterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// trimResults 去掉头尾空格 |a||b|c||</span>     List<span class="token operator">&lt;</span>String<span class="token operator">></span> splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// omitEmptyStrings 忽略空串  |a|b|c|</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 两者一起使用 a|b|c</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// limit a|b,c,,</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// withKeyValueSeparator  a=1|b=2</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> splitterMap <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"a-1;b-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：splitter实例总是不可变的。用来定义splitter目标语义的配置方法总会返回一个新的splitter实例。这使得splitter实例都是线程安全的，你可以将其定义为static final常量。</strong></p><h3 id="三、字符匹配器【CharMatcher】"><a href="#三、字符匹配器【CharMatcher】" class="headerlink" title="三、字符匹配器【CharMatcher】"></a>三、字符匹配器【CharMatcher】</h3><p>直观上可以认为CharMatcher实例代表着某一类字符，如数字或空白字符。事实上来说，CharMatcher实例就是对字符的布尔判断——CharMatcher确实也实现了Predicate&lt;Character&gt;。<br><br>使用CharMatcher的好处更在于它提供了一系列方法，让你对字符作特定类型的操作：修剪[trim]、折叠[collapse]、移除[remove]、保留[retain]等等。CharMatcher实例首先代表概念1：怎么才算匹配字符？然后它还提供了很多操作概念2：如何处理这些匹配字符？</p><h4 id="1、常见字符匹配器常量"><a href="#1、常见字符匹配器常量" class="headerlink" title="1、常见字符匹配器常量"></a>1、常见字符匹配器常量</h4><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>ANY</td><td>匹配任何字符</td></tr><tr><td>ASCII</td><td>匹配是否是ASCII字符</td></tr><tr><td>BREAKING_WHITESPACE</td><td>匹配所有可换行的空白字符(不包括非换行空白字符,例如”\u00a0”)</td></tr><tr><td>DIGIT</td><td>匹配ASCII数字</td></tr><tr><td>INVISIBLE</td><td>匹配所有看不见的字符</td></tr><tr><td>JAVA_DIGIT</td><td>匹配UNICODE数字, 使用 Character.isDigit() 实现</td></tr><tr><td>JAVA_ISO_CONTROL</td><td>匹配ISO控制字符, 使用 Charater.isISOControl() 实现</td></tr><tr><td>JAVA_LETTER</td><td>匹配字母, 使用 Charater.isLetter() 实现</td></tr><tr><td>JAVA_LETTER_OR_DIGET</td><td>匹配数字或字母</td></tr><tr><td>JAVA_LOWER_CASE</td><td>匹配小写</td></tr><tr><td>JAVA_UPPER_CASE</td><td>匹配大写</td></tr><tr><td>NONE</td><td>不匹配所有字符</td></tr><tr><td>SINGLE_WIDTH</td><td>匹配单字宽字符, 如中文字就是双字宽</td></tr><tr><td>WHITESPACE</td><td>匹配所有空白字符</td></tr></tbody></table><h4 id="2、常用操作方法"><a href="#2、常用操作方法" class="headerlink" title="2、常用操作方法"></a>2、常用操作方法</h4><pre class="line-numbers language-java"><code class="language-java">CharMatcher <span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">char</span> match<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配指定字符的Matcher </span>CharMatcher <span class="token function">isNot</span><span class="token punctuation">(</span><span class="token keyword">char</span> match<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回不匹配指定字符的Matcher &lt;br /></span>CharMatcher <span class="token function">anyOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配sequence中任意字符的Matcher</span>CharMatcher <span class="token function">noneOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回不匹配sequence中任何一个字符的Matcher</span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">inRange</span><span class="token punctuation">(</span><span class="token keyword">char</span> startInclusive<span class="token punctuation">,</span> <span class="token keyword">char</span> endInclusive<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配范围内任意字符的Matcher</span>CharMatcher <span class="token function">forPredicate</span><span class="token punctuation">(</span>Predicate\<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Charater<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回使用predicate的apply()判断匹配的Matcher </span>CharMatcher <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回以当前Matcher判断规则相反的Matcher &lt;br /></span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">and</span><span class="token punctuation">(</span>CharMatcher other<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回与other匹配条件组合做与来判断的Matcher</span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">or</span><span class="token punctuation">(</span>CharMatcher other<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回与other匹配条件组合做或来判断的Matcher</span><span class="token keyword">boolean</span> <span class="token function">matchesAnyOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//只要sequence中有任意字符能匹配Matcher,返回true </span><span class="token keyword">boolean</span> <span class="token function">matchesAllOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//sequence中所有字符都能匹配Matcher,返回true </span><span class="token keyword">boolean</span> <span class="token function">matchesNoneOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//sequence中所有字符都不能匹配Matcher,返回true </span><span class="token keyword">int</span> <span class="token function">indexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中匹配到的第一个字符的坐标 </span><span class="token keyword">int</span> <span class="token function">indexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回从start开始,在sequence中匹配到的第一个字符的坐标</span><span class="token keyword">int</span> <span class="token function">lastIndexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中最后一次匹配到的字符的坐标 </span><span class="token keyword">int</span> <span class="token function">countIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中匹配到的字符计数 </span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">removeFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除sequence中匹配到到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">retainFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//保留sequence中匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">replaceFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//替换sequence中匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除首尾匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimLeadingFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除首部匹配到的字符</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimTrailingFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除尾部匹配到的字符</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">collapseFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//将匹配到的组(连续匹配的字符)替换成replacement</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimAndCollapseFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//先trim在replace></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、示例："><a href="#3、示例：" class="headerlink" title="3、示例："></a>3、示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charMatcherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> String testStr <span class="token operator">=</span> <span class="token string">"FirstName LastName +1 123 456 789 !@#$%^&amp;*()_+|}{:\"?>&lt;"</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstNameLastName</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLetterOrDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FirstNameLastName1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// irstameastame</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countIn</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 54</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstName LastName +    !@#$%^&amp;*()_+|}{:"?>&lt;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//   1 123 456 789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// aaa1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstName LastName +* *** *** *** !@#$%^&amp;*()_+|}{:"?>&lt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：CharMatcher只处理char类型代表的字符；</strong></p><h3 id="四、字符集【Charsets】"><a href="#四、字符集【Charsets】" class="headerlink" title="四、字符集【Charsets】"></a>四、字符集【Charsets】</h3><p>Charsets针对所有Java平台都要保证支持的六种字符集提供了常量引用。尝试使用这些常量，而不是通过名称获取字符集实例。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><code>bytes = string.getBytes(Charsets.UTF_8);</code></p><h3 id="五、大小写格式【CaseFormat】"><a href="#五、大小写格式【CaseFormat】" class="headerlink" title="五、大小写格式【CaseFormat】"></a>五、大小写格式【CaseFormat】</h3><p>CaseFormat被用来方便地在各种ASCII大小写规范间转换字符串——比如，编程语言的命名规范。CaseFormat支持的格式如下：<br></p><table><thead><tr><th>格式</th><th>范例</th></tr></thead><tbody><tr><td>LOWER_CAMEL</td><td>lowerCamel</td></tr><tr><td>LOWER_HYPHEN</td><td>lower-hyphen</td></tr><tr><td>LOWER_UNDERSCORE</td><td>lower_underscore</td></tr><tr><td>UPPER_CAMEL</td><td>UpperCamel</td></tr><tr><td>UPPER_UNDERSCORE</td><td>UPPER_UNDERSCORE</td></tr></tbody></table><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">caseFormatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">,</span><span class="token string">"FIRSTNAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// firstname</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x20-总结"><a href="#x20-总结" class="headerlink" title="&#x20;总结"></a>&#x20;总结</h3><p>在使用Guava字符串处理工具时，性能是一个不可忽视的因素。Guava库经过精心设计，旨在提供高效的操作，但在一些特定场景下，合理的性能考虑仍然是必要的。</p><p>首先，Guava的字符串处理工具通常在处理大规模数据时表现出色。例如，在使用<code>Splitter</code>进行字符串拆分时，Guava能够更有效地处理大型字符串，相较于传统的字符串拆分方法，这将在处理大量文本数据时体现出明显的性能优势。</p><p>其次，Guava的一些设计目标是为了避免不必要的内存分配和拷贝，从而提高性能。例如，使用<code>Joiner</code>连接字符串时，Guava可以更智能地处理拼接过程，减少临时对象的创建，从而降低了内存开销。然而，在某些场景下，如果性能是关键问题，开发者仍需谨慎选择适当的方法和工具。Guava提供了丰富的选项，通过合理地选择工具和参数，可以使得性能得到最优化。</p><p>Guava字符串处理工具为Java开发者提供了强大而灵活的解决方案，能够简化日常的字符串操作，并在性能方面展现出色的表现。通过本文的介绍，我们深入了解了Guava中关于字符串的各种特性，从基础的判空和拆分，到高级的不可变字符串。</p><p>在使用Guava时，我们学习了如何利用<code>Splitter</code>和<code>Joiner</code>等工具执行各种字符串操作，以及如何通过<code>CharMatcher</code>处理字符匹配和替换。同时，我们也了解了不可变字符串的优势，以及在一些特定场景中的应用。</p><p>在选择使用Guava字符串处理工具时，我们需要根据具体的需求和场景来权衡灵活性和性能。Guava为我们提供了丰富的选择，让我们在处理字符串时更加便捷高效。</p><p>总的来说，Guava的字符串处理工具不仅为我们提供了更好的开发体验，同时也通过其高效的设计为项目性能提供了可靠的支持。在今后的Java开发中，深入了解并灵活应用Guava的字符串处理工具，将是提高代码质量和开发效率的不错选择。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道（一）之优化if-else的8种方案</title>
      <link href="/article/7fd1e424.html"/>
      <url>/article/7fd1e424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>我们日常开发的项目中，如果代码中存在大量的if-else语句，阅读起来非常的折磨（直接劝退），维护起来也很难，也特别容易出问题。比如说以下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ifelse%E5%9E%83%E5%9C%BE%E4%BB%A3%E7%A0%81.png" alt="ifelse垃圾代码.png"></p><p>接下来，本文介绍我们常使用的8种方法去优化if-else。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ifelse%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88.png" alt="ifelse优化方案.png"></p><h3 id="1、提前return，让正常流程走主干"><a href="#1、提前return，让正常流程走主干" class="headerlink" title="1、提前return，让正常流程走主干"></a>1、提前return，让正常流程走主干</h3><p>如果if-else代码中包含return语句，或者我们可以将包含if-else的代码从主干中抽取到一个单独方法，这样就可以在这个方法中可以return掉。这中思想也是短路求值的一种体现。把多余 else 干掉，使代码更加优雅。</p><ul><li>优化前代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// doSomething  </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// doSomething1  </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// doSomething2  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// doSomething</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token comment" spellcheck="true">//doSomething  </span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 主流程代码  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// doSomething1  </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// doSomething2  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用三目运算符"><a href="#2、使用三目运算符" class="headerlink" title="2、使用三目运算符"></a>2、使用三目运算符</h3><p>某些if-else可以优化为使用三目运算符，这样会让代码更简洁，可读性高。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> price<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span><span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> price <span class="token operator">=</span> condition1 <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>condition2 <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、使用Optional"><a href="#3、使用Optional" class="headerlink" title="3、使用Optional"></a>3、使用Optional</h3><p>我们在代码中判null会导致存在大量的if-else，这个时候我们可以考虑使用Java8的<code>Optional</code>去优化。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String s <span class="token operator">=</span> <span class="token function">handleStr</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">handleStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Null"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">handleStr</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"Null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">handleStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 其余业务逻辑，同样适用于处理一个对象，判null</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、多态"><a href="#4、多态" class="headerlink" title="4、多态"></a>4、多态</h3><p>我们可以将一些操作（比如一些状态）的一些共性的方法抽象成一个公共接口，然后针对这些操作实现这些接口完成不同的逻辑，在调用时我们只需要传入对应的操作类即可，对外的操作方法都是同一个。</p><ul><li>优化前代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProcessing</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"pending"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"paid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"shipped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span>String status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"pending"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Handling payment for pending order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理支付逻辑</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment handled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cannot ship. Payment pending."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"paid"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Handling shipping for paid order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理发货逻辑</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"shipped"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order already shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid order status: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 状态接口</span><span class="token keyword">interface</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体状态类</span><span class="token keyword">class</span> <span class="token class-name">PendingPaymentState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment handled for pending order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cannot ship. Payment pending."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PaidState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shipping handled for paid order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ShippedState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order already shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上下文类</span><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OrderState currentState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>OrderState initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentState<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentState<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>OrderState newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatePatternExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PendingPaymentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShippedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、枚举"><a href="#5、枚举" class="headerlink" title="5、枚举"></a>5、枚举</h3><p>对一些创建了枚举值，针对不同的枚举值有不同的操作时，枚举也可以消除if-else。个人感觉有点像策略模式或者表驱动。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> OperateTypeEnum<span class="token punctuation">{</span>      <span class="token function">PO</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DC_INBOUND</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DC_OUTBOUND</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token function">OperateTypeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span>Integer operator<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>PO<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getPoOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>PR<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getPrOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>DC_INBOUND<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getDcInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>DC_OUTBOUND<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getDcOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getPoOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 1L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getPrOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 2L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDcInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 3L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDcOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 4L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDwInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 5L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDwOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 6L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后的代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> OperateTypeEnum<span class="token punctuation">{</span>      <span class="token function">PO</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 1L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">PR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 2L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">DC_INBOUND</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 3L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">DC_OUTBOUND</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 4L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token function">OperateTypeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> OperateTypeEnum <span class="token function">ofCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 定义一个公共方法      */</span>      <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span>Integer operatorType<span class="token punctuation">)</span><span class="token punctuation">{</span>      OperateTypeEnum operateTypeEnum <span class="token operator">=</span> OperateTypeEnum<span class="token punctuation">.</span><span class="token function">ofCode</span><span class="token punctuation">(</span>operatorType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> operateTypeEnum<span class="token punctuation">.</span><span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式也是我再处理一些枚举时，对应不同的处理逻辑时常用的一种方式。比如根据订单类型的不同返回类型对应的数据。当然我们枚举方法中处理逻辑时如果想用bean的话，可以当做参数传入或者直接从Spring容器中获取。</p><h3 id="6、表驱动（Map-函数方法）"><a href="#6、表驱动（Map-函数方法）" class="headerlink" title="6、表驱动（Map+函数方法）"></a>6、表驱动（Map+函数方法）</h3><p>表驱动编程是一种通过查找表格而不是嵌套条件语句来实现的编程方法。可以使用数据结构（如数组、Map）来存储条件和对应的操作，这样就不必用很多的逻辑语句（if 或 case）来把它们找出来的方法。</p><ul><li>优化前代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> OrderInfoVO <span class="token function">operateOrder</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handlePoOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handleInboundOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handleOutboundOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>OrderInfoDO<span class="token punctuation">,</span> OrderInfoVO<span class="token operator">>></span> functionMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handlePoOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handleInboundOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handleOutboundOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> functionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然<code>Funtion</code>也可以根据业务需要，可以为<code>Consumer</code>，<code>Predicate</code>等。<br>不过我们也可以利用Spring的依赖注入，将其转换为对应的Map&lt;String, Bean&gt;。比如上述代码也可以这么优化：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 定义统一的处理接口      * @param orderInfo      * @return      */</span>      OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">PoOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Po      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">InboundOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Inbound      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 具体处理逻辑  </span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">InboundOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Outbound      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSerivceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> IOrderHandler<span class="token operator">></span> orderHandlerMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> OrderInfoVO <span class="token function">handleOrderInfo</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>        IOrderHandler orderHandler <span class="token operator">=</span> orderHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> orderHandler<span class="token punctuation">.</span><span class="token function">handlerOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、策略模式-工厂模式"><a href="#7、策略模式-工厂模式" class="headerlink" title="7、策略模式+工厂模式"></a>7、策略模式+工厂模式</h3><p>我们可以使用策略模式将每个条件分支抽象为一个策略类，然后在主逻辑中使用策略类来执行相应的逻辑。这种方式可以降低代码的耦合性，使得代码更加可维护和可扩展。然后再使用工厂模式定义一个策略工厂类去管理这些策略，即对外提供的都是策略工厂的方法。这种方法可以有效的去除if-else，并且代码逻辑更容易阅读维护以及扩展。<br>比如上例中，我们在处理不同订单类型时的handler类就是一个个的策略，我们也可以创建一个策略工厂类。</p><pre class="line-numbers language-java"><code class="language-java">publid <span class="token keyword">class</span> <span class="token class-name">OrderHandlerFactory</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> IOrderHandler<span class="token operator">></span> orderHandlerMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PoOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InboundOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutboundOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*** 获取具体处理的类*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> IOrderHandler <span class="token function">getOrderHandler</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> orderHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、规则引擎"><a href="#8、规则引擎" class="headerlink" title="8、规则引擎"></a>8、规则引擎</h3><p>使用规则引擎来管理条件和对应的执行逻辑。例如，Drools 是一个强大的规则引擎，它允许你定义规则并动态执行它们。再比如LiteFlow，EasyRule，都可以通过管理条件和对应的执行逻辑。可以消除if-else。规则引擎适合处理复杂的业务逻辑。通过编排条件去处理业务逻辑。后续会分享规则引擎相关的干货。有兴趣的同学可以关注公众号<code>码农Academy</code>。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>上述方案都可以达到优化if-else的效果，但是采用那种方案还是要看具体的代码逻辑以及业务处理逻辑，重要的是要评估项目的复杂性、维护性和性能需求，选择最适合项目需求的优化方案。在实际开发中，通常会根据具体情况结合多种方式来达到更好的优化效果。</p>]]></content>
      
      
      <categories>
          
          <category> 代码整洁之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码优化 </tag>
            
            <tag> 代码整洁之道 </tag>
            
            <tag> if-else优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
