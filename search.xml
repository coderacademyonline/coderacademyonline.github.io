<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>美团二面：如何保证Redis与Mysql双写一致性？连续两个面试问到了！</title>
      <link href="/article/redismysql.html"/>
      <url>/article/redismysql.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Redis作为一款高效的内存数据存储系统，凭借其优异的读写性能和丰富的数据结构支持，被广泛应用于缓存层以提升整个系统的响应速度和吞吐量。尤其是在与关系型数据库（如MySQL、PostgreSQL等）结合使用时，通过将热点数据存储在Redis中，可以在很大程度上缓解数据库的压力，提高整体系统的性能表现。</p><p>然而，在这种架构中，一个不容忽视的问题就是如何确保Redis缓存与数据库之间的双写一致性。所谓双写一致性，是指当数据在数据库中发生变更时，能够及时且准确地反映在Redis缓存中，反之亦然，以避免出现因缓存与数据库数据不一致导致的业务逻辑错误或用户体验下降。尤其在高并发场景下，由于网络延迟、并发控制等因素，保证双写一致性变得更加复杂。</p><p>在实际业务开发中，若不能妥善处理好缓存与数据库的双写一致性问题，可能会带来诸如数据丢失、脏读、重复读等一系列严重影响系统稳定性和可靠性的后果。本文将尝试剖析这一问题，介绍日常开发中常用的一些策略和模式，并结合具体场景分析不同的解决方案，为大家提供一些有力的技术参考和支持。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409020515.png" alt="image.png"></p><h2 id="谈谈分布式系统中的一致性"><a href="#谈谈分布式系统中的一致性" class="headerlink" title="谈谈分布式系统中的一致性"></a>谈谈分布式系统中的一致性</h2><p>分布式系统中的一致性指的是在多个节点上存储和处理数据时，确保系统中的数据在不同节点之间保持一致的特性。在分布式系统中，一致性通常可以分为以下几个类别：</p><ol><li><p><strong>强一致性</strong>：<br> 所有节点在任何时间都看到相同的数据。任何更新操作都会立即对所有节点可见，保证了数据的强一致性。这意味着，如果一个节点完成了写操作，那么所有其他节点读取相同的数据之后，都将看到最新的结果。强一致性通常需要付出更高的代价，例如增加通信开销和降低系统的可用性。</p></li><li><p><strong>弱一致性：</strong><br> 系统中的数据在某些情况下可能会出现不一致的状态，但最终会收敛到一致状态。弱一致性下的系统允许在一段时间内，不同节点之间看到不同的数据状态。弱一致性通常用于需要在性能和一致性之间进行权衡的场景，例如缓存系统等。</p></li><li><p><strong>最终一致性：</strong><br> 是弱一致性的一种特例，它保证了在经过一段时间后，系统中的所有节点最终都会达到一致状态。尽管在数据更新时可能会出现一段时间的不一致，但最终数据会收敛到一致状态。最终一致性通常通过一些技术手段来实现，例如基于版本向量或时间戳的数据复制和同步机制。</p></li></ol><p>除此之外，还有一些其他的一致性类别，例如：因果一致性，顺序一致性，基于本篇文章讨论的重点，我们暂且只讨论以上三种一致性类别。</p><h2 id="什么是双写一致性问题？"><a href="#什么是双写一致性问题？" class="headerlink" title="什么是双写一致性问题？"></a>什么是双写一致性问题？</h2><p>在分布式系统中，双写一致性主要指在一个数据同时存在于缓存（如Redis）和持久化存储（如数据库）的情况下，任何一方的数据更新都必须确保另一方数据的同步更新，以保持双方数据的一致状态。这一问题的核心在于如何在并发环境下正确处理缓存与数据库的读写交互，防止数据出现不一致的情况。</p><h3 id="典型场景分析"><a href="#典型场景分析" class="headerlink" title="典型场景分析"></a>典型场景分析</h3><ol><li><p><strong>写数据库后忘记更新缓存</strong>：<br> 当直接对数据库进行更新操作而没有相应地更新缓存时，后续的读请求可能仍然从缓存中获取旧数据，导致数据的不一致。</p></li><li><p><strong>删除缓存后数据库更新失败：</strong><br> 在某些场景下，为了保证数据新鲜度，会在更新数据库前先删除缓存。但如果数据库更新过程中出现异常导致更新失败，那么缓存将长时间处于空缺状态，新的查询将会直接命中数据库，加重数据库压力，并可能导致数据版本混乱。</p></li><li><p><strong>并发环境下读写操作的交错执行</strong>：<br> 在高并发场景下，可能存在多个读写请求同时操作同一份数据的情况。比如，在删除缓存、写入数据库的过程中，新的读请求获取到了旧的数据库数据并放入缓存，此时就出现了数据不一致的现象。</p></li><li><p><strong>主从复制延迟与缓存失效时间窗口冲突</strong>：<br> 对于具备主从复制功能的数据库集群，主库更新数据后，存在一定的延迟才将数据同步到从库。如果在此期间缓存刚好过期并重新从数据库加载数据，可能会从尚未完成同步的从库读取到旧数据，进而导致缓存与主库数据的不一致。</p></li></ol><p>数据不一致不仅会导致业务逻辑出错，还可能引发用户界面展示错误、交易状态不准确等问题，严重时甚至会影响系统的正常运行和用户体验。</p><h2 id="解决双写一致性问题的主要策略"><a href="#解决双写一致性问题的主要策略" class="headerlink" title="解决双写一致性问题的主要策略"></a>解决双写一致性问题的主要策略</h2><p>在解决Redis缓存与数据库双写一致性问题上，有多种策略和模式。我们主要介绍以下几种主要的策略：</p><h3 id="Cache-Aside-Pattern（旁路缓存模式）"><a href="#Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="Cache Aside Pattern（旁路缓存模式）"></a>Cache Aside Pattern（旁路缓存模式）</h3><p>Cache Aside Pattern 是一种在分布式系统中广泛采用的缓存和数据库协同工作策略，在这个模式中，数据以数据库为主存储，缓存作为提升读取效率的辅助手段。也是日常中比较常见的一种手段。其工作流程如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240407234748.png" alt="image.png"></p><p>由上图我们可以看出Cache Aside Pattern的工作原理：</p><ul><li><strong>读取操作</strong>：首先尝试从缓存中获取数据，如果缓存命中，则直接返回；否则，从数据库中读取数据并将其放入缓存，最后返回给客户端。</li><li><strong>更新操作</strong>：当需要更新数据时，首先更新数据库，然后再清除或使缓存中的对应数据失效。这样一来，后续的读请求将无法从缓存获取数据，从而迫使系统从数据库加载最新的数据并重新填充缓存。</li></ul><p>我们从更新操作上看会发现两个很有意思的问题：</p><h4 id="为什么操作缓存的时候是删除旧缓存而不是直接更新缓存？"><a href="#为什么操作缓存的时候是删除旧缓存而不是直接更新缓存？" class="headerlink" title="为什么操作缓存的时候是删除旧缓存而不是直接更新缓存？"></a><strong><mark style="background: #FF5582A6;">为什么操作缓存的时候是删除旧缓存而不是直接更新缓存？</mark></strong></h4><p>我们举例模拟下并发环境下的更新DB&amp;缓存：</p><ul><li>线程A先发起一个写操作，第一步先更新数据库，然后更新缓存</li><li>线程B再发起一个写操作，第二步更新了数据库，然后更新缓存<br>当以上两个线程的执行，如果严格先后顺序执行，那么对于更新缓存还是删除缓存去操作缓存都可以，但是如果两个线程同时执行时，由于网络或者其他原因，导致线程B先执行完更新缓存，然后线程A才会更新缓存。如下图：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240408224601.png" alt="image.png"></li></ul><p>这时候缓存中保存的就是线程A的数据，而数据库中保存的是线程B的数据。这时候如果读取到的缓存就是脏数据。但是如果使用删除缓存取代更新缓存，那么就不会出现这个脏数据。这种方式可以简化并发控制、保证数据一致性、降低操作复杂度，并能更好地适应各种潜在的异常场景和缓存策略。尽管这种方法可能会增加一次数据库访问的成本，但在实际应用中，考虑到数据的一致性和系统的健壮性，这是值得付出的折衷。</p><p>并且在写多读少的情况下，数据很多时候并不会被读取到，但是一直被频繁的更新，这样也会浪费性能。实际上，写多的场景，用缓存也不是很划算。只有在读多写少的情况下使用缓存才会发挥更大的价值。</p><h4 id="为什么是先操作数据库再操作缓存？"><a href="#为什么是先操作数据库再操作缓存？" class="headerlink" title="为什么是先操作数据库再操作缓存？"></a><strong><mark style="background: #FF5582A6;">为什么是先操作数据库再操作缓存？</mark></strong></h4><p>在操作缓存时，为什么要先操作数据库而不是先操作缓存？我们同样举例模拟两个线程，线程A写入数据，先删除缓存在更新DB，线程B读取数据。流程如下：</p><ol><li>线程A发起一个写操作，第一步删除缓存</li><li>此时线程B发起一个读操作，缓存中没有，则继续读DB，读出来一个老数据</li><li>然后线程B把老数据放入缓存中</li><li>线程A更新DB数据</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240408233213.png" alt="image.png"></p><p>所以这样就会出现缓存中存储的是旧数据，而数据库中存储的是新数据，这样就出现脏数据，所以我们一般都采取先操作数据库，在操作缓存。这样后续的读请求从数据库获取最新数据并重新填充缓存。这样的设计降低了数据不一致的风险，提升了系统的可靠性。同时，这也符合CAP定理中对于一致性（Consistency）和可用性（Availability）权衡的要求，在很多场景下，数据一致性被优先考虑。</p><p>Cache Aside Pattern相对简单直观，容易理解和实现。只需要简单的判断和缓存失效逻辑即可，对已有系统的改动较小。并且由于缓存是按需加载的，所以不会浪费宝贵的缓存空间存储未被访问的数据，同时我们可以根据实际情况决定何时加载和清理缓存。</p><p>尽管Cache Aside Pattern在大多数情况下可以保证最终一致性，但它并不能保证强一致性。在数据库更新后的短暂时间内（还未开始操作缓存），如果有读请求发生，缓存中仍是旧数据，但是实际数据库中已是最新数据，造成短暂的数据不一致。在并发环境下，特别是在更新操作时，有可能在更新数据库和删除缓存之间的时间窗口内，新的读请求加载了旧数据到缓存，导致不一致。</p><h3 id="Read-Through-Write-Through（读写穿透）"><a href="#Read-Through-Write-Through（读写穿透）" class="headerlink" title="Read-Through/Write-Through（读写穿透）"></a>Read-Through/Write-Through（读写穿透）</h3><p>Read-Through 和 Write-Through 是两种与缓存相关的策略，它们主要用于缓存系统与持久化存储之间的数据交互，旨在确保缓存与底层数据存储的一致性。</p><h4 id="Read-Through（读穿透）"><a href="#Read-Through（读穿透）" class="headerlink" title="Read-Through（读穿透）"></a>Read-Through（读穿透）</h4><p>Read-Through 是一种在缓存中找不到数据时，自动从持久化存储中加载数据并回填到缓存中的策略。具体执行流程如下：</p><ul><li>客户端发起读请求到缓存系统。</li><li>缓存系统检查是否存在请求的数据。</li><li>如果数据不在缓存中，缓存系统会透明地向底层数据存储（如数据库）发起读请求。</li><li>数据库返回数据后，缓存系统将数据存储到缓存中，并将数据返回给客户端。</li><li>下次同样的读请求就可以直接从缓存中获取数据，提高了读取效率。</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409004738.png" alt="image.png"></p><p>整体简要流程类似<code>Cache Aside Pattern</code>，但在缓存未命中的情况下，Read-Through 策略会自动隐式地从数据库加载数据并填充到缓存中，而无需应用程序显式地进行数据库查询。</p><p>Cache Aside Pattern 更多地依赖于应用程序自己来管理缓存与数据库之间的数据流动，包括缓存填充、失效和更新。而Read-Through Pattern 则是在缓存系统内部实现了一个更加自动化的过程，使得应用程序无需关心数据是从缓存还是数据库中获取，以及如何保持两者的一致性。在Read-Through 中，缓存系统承担了更多的职责，实现了更紧密的缓存与数据库集成，从而简化了应用程序的设计和实现。</p><h4 id="Write-Through（写穿透）"><a href="#Write-Through（写穿透）" class="headerlink" title="Write-Through（写穿透）"></a>Write-Through（写穿透）</h4><p>Write-Through 是一种在缓存中更新数据时，同时将更新操作同步到持久化存储的策略。具体流程如下：</p><ul><li>当客户端向缓存系统发出写请求时，缓存系统首先更新缓存中的数据。</li><li>同时，缓存系统还会把这次更新操作同步到底层数据存储（如数据库）。</li><li>当数据在数据库中成功更新后，整个写操作才算完成。</li><li>这样，无论是从缓存还是直接从数据库读取，都能得到最新一致的数据。</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409004927.png" alt="image.png"></p><p>Read-Through 和 Write-Through 的共同目标是确保缓存与底层数据存储之间的一致性，并通过自动化的方式隐藏了缓存与持久化存储之间的交互细节，简化了客户端的处理逻辑。这两种策略经常一起使用，以提供无缝且一致的数据访问体验，特别适用于那些对数据一致性要求较高的应用场景。然而，需要注意的是，虽然它们有助于提高数据一致性，但在高并发或网络不稳定的情况下，仍然需要考虑并发控制和事务处理等问题，以防止数据不一致的情况发生。</p><h3 id="Write-behind-（异步缓存写入）"><a href="#Write-behind-（异步缓存写入）" class="headerlink" title="Write behind （异步缓存写入）"></a>Write behind （异步缓存写入）</h3><p>Write Behind（异步缓存写入），也称为 Write Back（回写）或 异步更新策略，是一种在处理缓存与持久化存储（如数据库）之间数据同步时的策略。在这种模式下，当数据在缓存中被更新时，并非立即同步更新到数据库，而是将更新操作暂存起来，随后以异步的方式批量地将缓存中的更改写入持久化存储。其流程如下：</p><ul><li>应用程序首先在缓存中执行数据更新操作，而不是直接更新数据库。</li><li>缓存系统会将此次更新操作记录下来，暂存于一个队列（如日志文件或内存队列）中，而不是立刻同步到数据库。</li><li>在后台有一个独立的进程或线程定期（或者当队列积累到一定大小时）从暂存队列中取出更新操作，然后批量地将这些更改写入数据库。</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409005631.png" alt="image.png"></p><p>使用 Write Behind 策略时，由于更新并非即时同步到数据库，所以在异步处理完成之前，如果缓存或系统出现故障，可能会丢失部分更新操作。并且对于高度敏感且要求强一致性的数据，Write Behind 策略并不适用，因为它无法提供严格的事务性和实时一致性保证。Write Behind 适用于那些可以容忍一定延迟的数据一致性场景，通过牺牲一定程度的一致性换取更高的系统性能和扩展性。</p><h2 id="解决双写一致性问题的3种方案"><a href="#解决双写一致性问题的3种方案" class="headerlink" title="解决双写一致性问题的3种方案"></a>解决双写一致性问题的3种方案</h2><p>以上我们主要讲解了解决双写一致性问题的主要策略，但是每种策略都有一定的局限性，所以我们在实际运用中，还要结合一些其他策略去屏蔽上述策略的缺点。</p><h3 id="1-延时双删策略"><a href="#1-延时双删策略" class="headerlink" title="1. 延时双删策略"></a>1. 延时双删策略</h3><p>延时双删策略主要用于解决在高并发场景下，由于网络延迟、并发控制等原因造成的数据库与缓存数据不一致的问题。</p><p>当更新数据库时，首先删除对应的缓存项，以确保后续的读请求会从数据库加载最新数据。<br>但是由于网络延迟或其他不确定性因素，删除缓存与数据库更新之间可能存在时间窗口，导致在这段时间内的读请求从数据库读取数据后写回缓存，新写入的缓存数据可能还未反映出数据库的最新变更。</p><p>所以为了解决这个问题，延时双删策略在第一次删除缓存后，设定一段短暂的延迟时间，如几百毫秒，然后在这段延迟时间结束后再次尝试删除缓存。这样做的目的是确保在数据库更新传播到所有节点，并且在缓存中的旧数据彻底过期失效之前，第二次删除操作可以消除缓存中可能存在的旧数据，从而提高数据一致性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayDoubleDeleteService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> TaskScheduler taskScheduler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAndScheduleDoubleDelete</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新数据库...</span>        <span class="token function">updateDatabase</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 删除缓存</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 延迟执行第二次删除</span>        taskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span><span class="token string">"0/1 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 假设1秒后执行，实际应根据需求设置定时表达式</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新数据库的逻辑</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateDatabase</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式可以较好地处理网络延迟导致的数据不一致问题，较少的并发写入数据库和缓存，降低系统的压力。但是，延迟时间的选择需要权衡，过短可能导致实际效果不明显，过长可能影响用户体验。并且对于极端并发场景，仍可能存在数据不一致的风险。</p><h3 id="2-删除缓存重试机制"><a href="#2-删除缓存重试机制" class="headerlink" title="2. 删除缓存重试机制"></a>2. 删除缓存重试机制</h3><p>删除缓存重试机制是在删除缓存操作失败时，设定一个重试策略，确保缓存最终能被正确删除，以维持与数据库的一致性。</p><p>在执行数据库更新操作后，尝试删除关联的缓存项。如果首次删除缓存失败（例如网络波动、缓存服务暂时不可用等情况），系统进入重试逻辑，按照预先设定的策略（如指数退避、固定间隔重试等）进行多次尝试。直到缓存删除成功，或者达到最大重试次数为止。通过这种方式，即使在异常情况下也能尽量保证缓存与数据库的一致性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryableCacheService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> CacheManager cacheManager<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>maxAttempts <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> 1000L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteCacheWithRetry</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>RedisCacheManager<span class="token punctuation">)</span> cacheManager<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token string">"myCache"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evict</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAndDeleteCache</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新数据库...</span>        <span class="token function">updateDatabase</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 尝试删除缓存，失败时自动重试</span>        <span class="token function">deleteCacheWithRetry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 更新数据库的逻辑，此处仅示意</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateDatabase</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种重试方式确保缓存删除操作的成功执行，可以应对网络抖动等导致的临时性错误，提高数据一致性。但是可能占用额外的系统资源和时间，重试次数过多可能会阻塞其他操作。</p><h3 id="监听并读取biglog异步删除缓存"><a href="#监听并读取biglog异步删除缓存" class="headerlink" title="监听并读取biglog异步删除缓存"></a>监听并读取biglog异步删除缓存</h3><p>在数据库发生写操作时，将变更记录在binlog或类似的事务日志中，然后使用一个专门的异步服务或者监听器订阅binlog的变化（比如Canal），一旦检测到有数据更新，便根据binlog中的操作信息定位到受影响的缓存项。讲这些需要更新缓存的数据发送到消息队列，消费者处理消息队列中的事件，异步地删除或更新缓存中的对应数据，确保缓存与数据库保持一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinlogEventHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RocketMQTemplate rocketMQTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleBinlogEvent</span><span class="token punctuation">(</span>BinlogEvent binlogEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析binlogEvent，获取需要更新缓存的key</span>        String cacheKey <span class="token operator">=</span> <span class="token function">deriveCacheKeyFromBinlogEvent</span><span class="token punctuation">(</span>binlogEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送到RocketMQ</span>        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">asyncSend</span><span class="token punctuation">(</span><span class="token string">"cacheUpdateTopic"</span><span class="token punctuation">,</span> cacheKey<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>SendResult sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 发送成功处理</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 发送失败处理</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从binlog事件中获取缓存key的逻辑，这里仅为示意</span>    <span class="token keyword">private</span> String <span class="token function">deriveCacheKeyFromBinlogEvent</span><span class="token punctuation">(</span>BinlogEvent binlogEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>consumerGroup <span class="token operator">=</span> <span class="token string">"myConsumerGroup"</span><span class="token punctuation">,</span> topic <span class="token operator">=</span> <span class="token string">"cacheUpdateTopic"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheUpdateConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>MessageExt messageExt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>messageExt<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法的好处是将缓存的更新操作与主业务流程解耦，避免阻塞主线程，同时还能处理数据库更新后由于网络问题或并发问题导致的缓存更新滞后情况。当然，实现这一策略相对复杂，需要对数据库的binlog机制有深入理解和定制开发。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在分布式系统中，为了保证缓存与数据库双写一致性，可以采用以下方案：</p><ol><li><p><strong>读取操作</strong>：</p><ul><li>先尝试从缓存读取数据，若缓存命中，则直接返回缓存中的数据。</li><li>若缓存未命中，则从数据库读取数据，并将数据放入缓存。</li></ul></li><li><p><strong>更新操作</strong>：</p><ul><li>在更新数据时，首先在数据库进行写入操作，确保主数据库数据的即时更新。</li><li>为了减少数据不一致窗口，采用异步方式处理缓存更新，具体做法是监听数据库的binlog事件，异步进行删除缓存。</li><li>在一主多从的场景下，为了确保数据一致性，需要等待所有从库的binlog事件都被处理后才删除缓存（确保全部从库均已更新）。</li></ul></li></ol><p>同时，还需注意以下要点：</p><ul><li>对于高并发环境，可能需要结合分布式锁、消息队列或缓存失效延时等技术，进一步确保并发写操作下的数据一致性。</li><li>异步处理binlog时，务必考虑异常处理机制和重试策略，确保binlog事件能够正确处理并执行缓存更新操作。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 面试 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东一面：如何在SpringBoot启动时执行特定代码？有哪些方式？我说我不知道。。。。</title>
      <link href="/article/null.html"/>
      <url>/article/null.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><a href="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" target="_blank" rel="noopener">contact.jpg</a></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Spring Boot 提供了许多便捷的功能和特性，使得开发者可以更加轻松地构建强大、高效的应用程序。然而，在应用程序启动时执行一些初始化操作是至关重要的，它可以确保应用程序在启动后处于预期的状态，从而提供更好的用户体验和稳定性。</p><p>在应用程序启动时执行初始化操作有许多好处。首先，它可以确保应用程序在启动后的初始状态是正确的，避免了在应用程序运行时出现意外情况。其次，它可以在应用程序准备好接受请求之前完成一些必要的设置，例如加载配置、建立数据库连接、缓存预热等。总的来说，执行初始化操作可以确保应用程序以正确的方式启动，并为后续操作提供一个稳定的基础。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240401195221.png" alt="image.png"></p><h2 id="监听-ApplicationContext事件"><a href="#监听-ApplicationContext事件" class="headerlink" title="监听 ApplicationContext事件"></a>监听 ApplicationContext事件</h2><p>Spring Boot应用程序启动时执行初始化操作的方法是通过监听<code>ApplicationContext</code>事件。<code>ContextRefreshedEvent</code>事件表示<code>ApplicationContext</code>被初始化或刷新时触发的事件。通过监听这个事件，开发者可以在应用程序启动后执行一些必要的初始化操作。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240401133506.png" alt="image.png"></p><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyContextRefreshedListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ContextRefreshedEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ContextRefreshedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"监听到ContextRefreshedEvent事件，开始初始化操作。。。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式适合以下场景：</p><ol><li><p><strong>执行一次性初始化操作：</strong> 当应用程序启动时，可能需要执行一些只需在应用程序初始化阶段执行一次的操作，例如加载基础数据、建立连接等。通过监听 <code>ContextRefreshedEvent</code> 事件，可以确保这些初始化操作在应用程序启动后立即执行。</p></li><li><p><strong>初始化缓存或缓存刷新：</strong> 如果应用程序使用了缓存，可能需要在应用程序启动时初始化缓存或定期刷新缓存。通过监听 <code>ContextRefreshedEvent</code> 事件，可以在应用程序启动后立即执行缓存初始化或刷新操作，确保缓存数据是最新的。</p></li><li><p><strong>执行与外部系统的交互：</strong> 在应用程序启动时，可能需要与外部系统进行交互，例如检查外部系统的可用性、加载配置信息等。通过监听 <code>ContextRefreshedEvent</code> 事件，可以在应用程序启动后立即执行与外部系统的交互操作，确保应用程序在启动后处于正常工作状态。</p></li><li><p><strong>执行与 Spring Bean 相关的初始化操作：</strong> 在应用程序启动时，可能需要执行一些与 Spring Bean 相关的初始化操作，例如在数据库连接池初始化后执行数据库迁移、在消息队列连接初始化后执行订阅操作等。通过监听 <code>ContextRefreshedEvent</code> 事件，可以确保这些初始化操作在 Spring Bean 初始化完成后立即执行</p></li></ol><p>这种方式能够确保在 ApplicationContext 被完全初始化或刷新后执行初始化操作，可以在这个时机执行一些需要<code>ApplicationContext</code>完全准备好的操作。但是需要注意的是，ContextRefreshedEvent 事件可能会在应用程序的刷新周期内多次触发，因此在处理这个事件时需要谨慎处理，避免重复执行初始化逻辑。</p><h2 id="实现CommandLineRunner接口"><a href="#实现CommandLineRunner接口" class="headerlink" title="实现CommandLineRunner接口"></a>实现CommandLineRunner接口</h2><p><code>CommandLineRunner</code>是Spring Boot提供的一个接口，它有一个<code>run</code>方法，当Spring Boot应用上下文初始化完成后，会自动查找并执行所有实现了<code>CommandLineRunner</code>接口的Bean的<code>run</code>方法。<code>CommandLineRunner</code>接口实际上是Spring Boot对Spring框架生命周期管理的一个扩展，通过对接口的实现，我们可以在Spring Boot应用启动后的特定阶段执行自定义的初始化逻辑。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240401133303.png" alt="image.png"></p><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCommandLineRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyCommandLineRunner.run()方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用场景：</p><ol><li><strong>命令行参数处理</strong>：<code>CommandLineRunner</code>接口常用于处理从命令行传入的参数，例如运行不同模式下的任务（如dev模式、prod模式）、读取配置项等。</li><li><strong>应用启动后的一次性操作</strong>：在应用启动后，可能需要进行一些一次性执行的任务，如数据库表结构检查、初始化缓存、发送通知邮件等。</li></ol><p>使用<code>CommandLineRunner</code>接口这种方式是，我们只需要实现接口，无需关注容器的生命周期事件或手动注册监听器。但是如果是多个<code>CommandLineRunner</code>之间的执行顺序无法保证，可能会带来不确定性（如果是不关心顺序，那就不是缺点了）。另外，我们不应该在``<br><code>run</code>方法中实现过多或较为复杂的任务。</p><h2 id="实现ApplicationRunner接口"><a href="#实现ApplicationRunner接口" class="headerlink" title="实现ApplicationRunner接口"></a>实现ApplicationRunner接口</h2><p><code>ApplicationRunner</code>是Spring Boot提供的另一个接口，它也有一个<code>run</code>方法，与<code>CommandLineRunner</code>接口非常相似。当Spring Boot应用启动并且ApplicationContext初始化完成后，Spring Boot会查找并执行所有实现了<code>ApplicationRunner</code>接口的Bean的<code>run</code>方法。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240401174816.png" alt="image.png"></p><p><code>ApplicationRunner</code>的主要特点是其<code>run</code>方法接收一个<code>ApplicationArguments</code>参数，它可以更好地解析和处理命令行参数，包括选项参数（键值对）和非选项参数。</p><p>示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationArgumentProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ApplicationArgumentProcessor.run()方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用场景：</p><ol><li><strong>命令行参数解析</strong>：由于<code>ApplicationArguments</code>提供了丰富的参数解析能力，因此更适合处理带有键值对形式的命令行参数，如<code>--server-port=8080</code>，然后根据这些参数执行不同的初始化操作。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationArgumentProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> port <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">getOptionValues</span><span class="token punctuation">(</span><span class="token string">"server-port"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>parseInt<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>port<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 根据端口号进行特定的初始化操作</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>启动时初始化</strong>：同<code>CommandLineRunner</code>，也可用于执行启动后的一次性操作，例如读取配置、初始化缓存、检查系统资源等，同时可以根据解析的命令行参数决定初始化的具体内容。</li></ol><p>相比较于<code>CommandLineRunner</code>，<code>ApplicationRunner</code>提供了更强大的命令行参数解析功能，可以轻松处理各种类型的参数。可以根据命令行参数灵活调整启动时的初始化逻辑。但是其缺点同<code>CommandLineRunner</code>。</p><p><code>ApplicationRunner</code>和<code>CommandLineRunner</code>都可以用来在Spring Boot启动时执行特定代码，两者在应用场景上略有差异，具体选择哪种取决于项目的实际需求和命令行参数的复杂程度。</p><h2 id="使用-PostConstruct注解"><a href="#使用-PostConstruct注解" class="headerlink" title="使用@PostConstruct注解"></a>使用@PostConstruct注解</h2><p><code>@PostConstruct</code>注解是JSR-250规范的一部分，Spring框架对此提供了支持。当Spring容器管理的Bean完成依赖注入后，会自动调用标注有<code>@PostConstruct</code>的方法。这个注解应用于无参或void返回值的方法上，表明该方法应在依赖注入完成后，但在Bean实例正式投入使用之前调用。</p><p>在Spring Boot启动时，当Spring容器初始化并创建Bean时，如果发现某个Bean上有<code>@PostConstruct</code>注解的方法，则会在Bean的生命周期的初始化阶段调用这个方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在依赖注入完成后，执行初始化操作</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService初始化..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化数据库连接、缓存或者其他内部状态</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用场景：</p><ol><li><strong>单个Bean初始化</strong>：对于某个特定的Bean，在其所有依赖项注入完成后，需要执行一些特定的初始化操作，例如数据库连接初始化、缓存预热、初始化内部状态等。</li><li><strong>资源初始化</strong>：对于一些公共资源，如线程池、数据库连接池等，可以在对应的配置类或服务类中使用<code>@PostConstruct</code>来完成初始化设置。</li></ol><p><code>@PostConstruct</code>注解只需要在需要执行初始化操作的方法上加上即可，无需额外实现接口或关注Spring容器的生命周期事件。并且针对性强，仅针对单个Bean进行初始化操作，有助于提高代码的模块化和复用性。</p><p>但是如果有多个具有<code>@PostConstruct</code>注解的方法，它们之间没有明确的执行顺序，除非通过Bean间的依赖关系隐式确定顺序。并且针对单个Bean进行初始化操作，所以他并不适合做全局性初始化操作。</p><h2 id="Bean注解中指定初始化方法"><a href="#Bean注解中指定初始化方法" class="headerlink" title="@Bean注解中指定初始化方法"></a>@Bean注解中指定初始化方法</h2><p><code>@Bean</code>注解在Spring框架中用于定义一个Bean的实例化逻辑，通常在配置类中使用。通过在<code>@Bean</code>注解中指定<code>initMethod</code>属性，可以设置一个在Bean实例化并完成依赖注入后执行的方法。当Spring容器创建并注入完所有依赖关系后，会自动调用该Bean上指定的初始化方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrePostConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 指定初始化init     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">)</span>    BeanWayService <span class="token function">beanWayService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanWayService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanWayService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"@Bean-init-method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BeanWayService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化构造函数-BeanWayService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用场景：</p><ol><li><strong>资源初始化</strong>：例如，初始化数据库连接、网络连接、线程池等资源。</li><li><strong>Bean状态设置</strong>：在Bean实例化后，对其进行额外的状态设定或配置。</li><li><strong>缓存预热</strong>：在服务启动时预先加载部分数据至缓存中。</li></ol><p>Bean实例上定义初始化方法，与Bean紧密关联，可以精确地控制Bean在何时执行初始化操作，与Spring容器的生命周期绑定，尤其适用于那些需要在Bean实例化后立即执行的操作。。但是如果多个Bean都有初始化方法，它们之间的执行顺序难以控制，除非依赖于Spring容器中Bean的依赖注入顺序。</p><h2 id="实现InitializingBean接口"><a href="#实现InitializingBean接口" class="headerlink" title="实现InitializingBean接口"></a>实现InitializingBean接口</h2><p><code>InitializingBean</code>是Spring框架中的一个接口，它包含一个方法<code>afterPropertiesSet()</code>。当Spring容器完成了对一个Bean的所有必要属性的依赖注入后，如果该Bean实现了<code>InitializingBean</code>接口，Spring会自动调用其<code>afterPropertiesSet()</code>方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Dependency dependency<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在所有依赖注入完成后执行的初始化逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MyService初始化..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化资源、设置状态或执行其他操作</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 其他业务方法...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用场景：</p><ol><li><strong>资源初始化</strong>：如初始化数据库连接、网络连接、线程池等资源。</li><li><strong>Bean状态设置</strong>：在依赖注入完成后，设置Bean的初始状态或执行特定的配置操作。</li></ol><p><code>afterPropertiesSet()</code>方法会在所有属性注入完成后执行，确保Bean在使用前完成初始化。不需要额外的注解，只需实现接口就可以定义初始化逻辑。但是其要求Bean实现特定接口，增加了类的耦合度，同时也不符合Spring倡导的基于注解的编程风格。并且需要显式抛出异常。</p><p>相比较于<code>@PostConstruct</code>，<code>@PostConstruct</code>注解更具语义化且不强制类实现接口，降低了耦合度。推荐优先考虑使用<code>@PostConstruct</code>注解进行初始化逻辑的编写。</p><h2 id="EventListener注解"><a href="#EventListener注解" class="headerlink" title="@EventListener注解"></a>@EventListener注解</h2><p><code>@EventListener</code> 注解在Spring应用程序中定义事件监听器。通过监听 <code>ApplicationReadyEvent</code>事件，我们可以确保在应用程序完全启动并准备好接受请求时执行初始化逻辑。通过在监听器方法上添加 <code>@EventListener</code> 注解，并指定要监听的事件类型，可以在事件发生时执行相应的初始化操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupEventListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span>ApplicationReadyEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationReadyEvent</span><span class="token punctuation">(</span>ApplicationReadyEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Spring Boot应用已启动并准备就绪，开始执行初始化操作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在这里执行需要在应用启动后进行的初始化代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>适用场景：</p><ol><li><strong>应用启动后执行一次性操作</strong>：如数据初始化、缓存预热、统计信息收集等。</li><li><strong>等待所有Bean初始化后再执行</strong>：当需要确保所有Bean都已经初始化完毕再执行某些操作时。</li></ol><p>通过事件驱动的方式，将初始化逻辑与Bean的创建逻辑解耦开来，并且可以监听多种事件类型（例如：<code>ContextRefreshedEvent</code>），不仅仅是应用启动事件，还可用于其他业务场景。相比于<code>@PostConstruct</code>、<code>CommandLineRunner</code>或<code>ApplicationRunner</code>等机制，<code>@EventListener</code>监听的<code>ApplicationReadyEvent</code>在Spring Boot启动流程中的执行时机较晚，所有Bean都已经初始化并准备就绪后才会触发。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文全面探讨了Spring Boot启动阶段执行初始化操作的几种常见方法，包括监听事件、实现接口以及使用注解等多种策略，具体如下：</p><ol><li><p><strong>监听ApplicationContext事件</strong>：通过实现<code>ApplicationListener&lt;ContextRefreshedEvent&gt;</code>接口，监听<code>ContextRefreshedEvent</code>事件，可在Spring容器初始化完成后执行初始化逻辑。这种方式适用于需要在所有Bean加载完毕后进行全局性初始化操作的场景。</p></li><li><p><strong>实现CommandLineRunner接口</strong>：Spring Boot启动后，会自动调用实现了<code>CommandLineRunner</code>接口的Bean的<code>run</code>方法，该方法可以处理命令行参数并执行启动时的特定操作。适用于需要根据命令行参数执行初始化逻辑或进行启动后一次性任务的情况。</p></li><li><p><strong>实现ApplicationRunner接口</strong>：与<code>CommandLineRunner</code>类似，<code>ApplicationRunner</code>也在Spring Boot启动后执行其<code>run</code>方法，但其参数为<code>ApplicationArguments</code>，提供了更强大的命令行参数解析功能。适合处理键值对形式的命令行参数并据此执行初始化任务。</p></li><li><p><strong>使用@PostConstruct注解</strong>：在Bean的方法上添加<code>@PostConstruct</code>注解，Spring会在该Bean的所有依赖注入完成后调用该方法进行初始化。这种方法用于单个Bean初始化完成后的特定逻辑，增强了代码的模块化和可维护性。</p></li><li><p><strong>@Bean注解中指定初始化方法</strong>：通过<code>@Bean</code>注解中的<code>initMethod</code>属性指定Bean的初始化方法，该方法在Bean实例化并完成注入后由Spring容器调用。这种方法适用于需要对特定Bean进行精细化初始化管理的场景。</p></li><li><p><strong>实现InitializingBean接口</strong>：Bean实现<code>InitializingBean</code>接口并重写<code>afterPropertiesSet</code>方法，也能实现在依赖注入完成后执行初始化逻辑。虽然传统但不如使用<code>@PostConstruct</code>注解优雅，且增加了类的耦合度。</p></li><li><p><strong>使用@EventListener注解</strong>：通过监听<code>ApplicationReadyEvent</code>等事件，可以在Spring Boot应用启动并准备就绪后执行初始化任务。这种方式延迟执行，适用于在所有Bean初始化完毕且应用已经完全启动后才需要进行的操作。</p></li></ol><p>每种方法均有其适用场景和优缺点，我们应根据项目需求和具体情况选择最适合的初始化方式。通过熟练掌握和灵活运用这些方法，能够有效地管理和优化Spring Boot应用的启动流程，确保应用程序在启动之初即进入正常运作状态。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>字节二面：为什么SpringBoot的 jar 可以直接运行？我说因为内嵌了Tomcat容器，他让我出门左转。。</title>
      <link href="/article/springbootjarrun.html"/>
      <url>/article/springbootjarrun.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在传统的Java应用程序开发和部署场景中，开发者往往需要经历一系列复杂的步骤才能将应用成功部署到生产环境。例如，对于基于Servlet规范的Java Web应用，开发完成后通常会被打包成WAR格式，然后部署到像Apache Tomcat、Jetty这样的Web容器中。这一过程中，不仅要管理应用本身的编译产物，还需要处理各种第三方依赖库的版本和加载顺序，同时在服务器端进行相应的配置以确保应用正常运行。</p><p>随着Spring Boot产生，它以其开箱即用、约定优于配置的理念彻底改变了Java应用的开发体验。其中一个标志性特征便是Spring Boot应用可以被打包成一个可直接运行的jar文件，无需外部容器的支持。</p><p>当提及“Spring Boot的jar可以直接运行”，我们不禁好奇：这背后究竟是怎样的机制让一个简单的命令行操作就能启动一个完整的Web服务或任何类型的Java应用呢？本文将深入剖析Spring Boot的打包过程和运行原理，揭示其jar包是如何巧妙地集成了依赖、嵌入了Web容器、实现了自动配置等功能，从而使得开发人员能够迅速地将应用部署到任何支持Java的环境中。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329202004.png" alt="springboot的jar包为什么可以直接运行.png"></p><h2 id="SpringBoot-JAR包基础概念"><a href="#SpringBoot-JAR包基础概念" class="headerlink" title="SpringBoot JAR包基础概念"></a>SpringBoot JAR包基础概念</h2><p>Fat JAR（也称作Uber JAR，也被戏称为胖Jar）是一种特殊的Java归档（JAR）文件，它将应用程序所需的全部依赖库与应用程序自身的类文件合并到了同一个JAR文件中。在Spring Boot上下文中，Fat JAR被用于构建一种完全自包含且可独立运行的应用程序包。这样的jar文件不仅仅包含项目的主代码，还包括了所有必要的第三方库、资源文件等一切运行时所需要的组件。</p><p>Fat JAR的核心特点是“自包含”，意味着只需分发这一个文件即可部署应用，无需再额外处理众多的依赖库。这种形式极大地方便了应用的快速部署与迁移，尤其适合于云端部署或者无网络环境下的安装。</p><p>而对于普通jar包来说，它通常仅包含一个模块或应用程序的一部分，主要用来封装和组织Java类及相关资源。在Java生态系统中，一个普通的jar包可能仅是一个库，或者一组相关功能的集合，但它不会包含其他依赖的jar包，因此在运行时需要与之相关的其他库一起存在于类路径中。</p><p>相比之下，Fat JAR则解决了依赖管理的问题，通过将所有的依赖都纳入其中，避免了由于类路径设置不正确导致的“缺失类”或“找不到类”的问题。在Spring Boot项目中，通过Maven或Gradle插件可以轻易地构建出这样的Fat JAR，使得最终生成的jar文件成为一个真正的“一站式”解决方案，只需使用<code>java -jar</code>命令就可以启动整个应用程序，无需预先配置复杂的类路径环境。</p><h2 id="Spring-Boot应用打包机制"><a href="#Spring-Boot应用打包机制" class="headerlink" title="Spring Boot应用打包机制"></a>Spring Boot应用打包机制</h2><p>Spring Boot应用打包机制充分利用了Maven或Gradle构建工具的强大功能，旨在简化传统Java应用的构建与部署流程。其核心在于创建一个可执行的Fat JAR，使得开发者能够轻松地将整个Spring Boot应用及其依赖项打包成单个文件，从而实现一键启动和便捷部署。</p><p>我们以Maven打包为例：</p><p>对于使用Maven构建的Spring Boot应用，<code>spring-boot-maven-plugin</code>是关键插件，负责处理Fat JAR的构建。在pom.xml文件中，通常会看到如下配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 可选配置项，如mainClass属性指定入口类 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>${start-class}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>mvn package</code>命令，Maven首先会按照标准流程构建项目，随后<code>spring-boot-maven-plugin</code>会执行<code>repackage</code>目标，该目标会重新包装已生成的标准JAR文件，将其转换为包含所有依赖项和适当的启动器信息的Fat JAR。这样生成的JAR可以直接通过<code>java -jar</code>命令启动。</p><p>Spring Boot应用打包机制均确保了生成的包不仅包含了项目本身的类，还包含了运行时所必需的所有依赖库，以及一些特定的元数据（如MANIFEST.MF中的启动类信息）。这一特性大大简化了部署过程，并有助于提升应用的可移植性和维护性。Fat jar中的内容：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329161916.png" alt="image.png"></p><ul><li><code>META-INF/</code>: 包含MANIFEST.MF文件和其他元数据信息，其中Main-Class属性指向Spring Boot的启动类加载器。</li><li><code>BOOT-INF/classes/</code>: 存放项目自身的类文件和资源文件。</li><li><code>BOOT-INF/lib/</code>: 放置所有依赖的jar包，包括Spring Boot starter依赖以及其他第三方库。（如果项目中有静态资源文件，也会在BOOT-INF下有对应的static、templates等目录）</li></ul><h2 id="Spring-Boot启动器与Loader机制"><a href="#Spring-Boot启动器与Loader机制" class="headerlink" title="Spring Boot启动器与Loader机制"></a>Spring Boot启动器与Loader机制</h2><p>Spring Boot应用的jar包可以直接运行主要依赖于它的启动器以及Loader机制，而对于Loader机制主要利用MANIFEST.MF文件以及其内部类加载逻辑。</p><h3 id="MANIFEST-MF文件是什么？"><a href="#MANIFEST-MF文件是什么？" class="headerlink" title="MANIFEST.MF文件是什么？"></a>MANIFEST.MF文件是什么？</h3><p><code>MANIFEST.MF</code>是<code>JAR</code>文件内的一个标准元数据文件，它包含了关于JAR包的基本信息和运行指令。在Spring Boot应用的jar包中，<code>MANIFEST.MF</code>尤为重要，因为它设置了<code>Main-Class</code>属性，指示了用于启动整个应用程序的类，这个类通常是<code>org.springframework.boot.loader.JarLauncher</code>或其他由Spring Boot提供的启动器类。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329163131.png" alt="image.png"></p><p><code>Main-Class</code>属性指向的<code>JarLauncher</code>类是Spring Boot自定义的类加载器体系的一部分。<code>JarLauncher</code>继承自<code>org.springframework.boot.loader.Launcher</code>，专门用于启动以<code>Fat JAR</code>形式发布的Spring Boot应用。<code>JarLauncher</code>负责创建一个类加载器<code>LaunchedURLClassLoader</code>。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329201111.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329201136.png" alt="image.png"></p><p>当通过<code>java -jar</code>命令执行Spring Boot jar包时，JVM会依据<code>MANIFEST.MF</code>中的<code>Main-Class</code>启动指定的启动器。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329180715.png" alt="JarLauncher获取MainClass源码.png"></p><p>Spring Boot的启动器类加载器<code>LaunchedURLClassLoader</code>首先会读取MANIFEST.MF中的附加属性，如<code>Start-Class</code>（标识应用的实际主类）和<code>Spring-Boot-Lib</code>（指向内部依赖库的位置）。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329181046.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240329164025.png" alt="image.png"></p><p>启动类加载器工作流程如下：</p><ol><li><p>当启动器类加载器启动时，它会根据MANIFEST.MF中的信息来组织类路径，保证所有内部的依赖库都能正确地被加载。</p></li><li><p>加载器会区分出 <code>BOOT-INF/classes</code>中的应用程序类和 <code>BOOT-INF/lib</code> 下的依赖库，分别处理并加入到类加载器的搜索路径中。</p></li><li><p>加载器加载并执行实际的<code>Start-Class</code>，即应用的主类，触发Spring Boot框架的初始化和应用的启动流程。比如示例中的应用主类：<code>com.springboot.base.SpringBootBaseApplication</code></p></li></ol><p>Spring Boot的启动器和加载器机制有效地实现了对自包含jar包的管理和执行，我们无需关心复杂的类路径配置和依赖加载，只需通过一个简单的命令即可启动一个完整、独立运行的应用程序。</p><h2 id="内嵌Web容器"><a href="#内嵌Web容器" class="headerlink" title="内嵌Web容器"></a>内嵌Web容器</h2><p>Spring Boot的一大特色就是能够无缝整合并内嵌多种轻量级Web容器，比如：<code>Apache Tomcat</code>、<code>Jetty</code>、<code>Undertow</code>以及<code>Reactor Netty</code>（对于响应式编程模型）。内嵌Web容器的引入极大地简化了Web应用的部署流程，我们不再需要在本地或服务器上独立安装和配置Web服务器（比如以前还要在本地安装tomcat）。</p><p>当Spring Boot应用引入了<code>spring-boot-starter-web</code>依赖时，默认情况下会自动配置并启动一个内嵌的Web容器。在Spring Boot启动的过程中，内嵌容器作为应用的一部分被初始化并绑定到特定端口上，以便对外提供HTTP服务。</p><p>Spring Boot内嵌web容器的优点在于简化部署，通过将Web容器内置于应用中，只需分发单一的JAR文件，就能在干净的环境中运行应用，避免了与现有Web服务器版本冲突或配置不当等问题；同时加快了启动速度，尤其在开发和测试阶段，实现近乎即时的热重启；提高了应用的稳定性，因为开发环境和生产环境使用相同的Web容器，降低了因环境差异导致的问题；此外，虽然容器是内嵌的，但仍然可以进行全面的配置调整，如端口、连接数、SSL设置等，以满足不同场景的需求。通过内嵌Web容器，Spring Boot真正实现了“开箱即用”的理念。</p><h2 id="自动配置与类路径扫描"><a href="#自动配置与类路径扫描" class="headerlink" title="自动配置与类路径扫描"></a>自动配置与类路径扫描</h2><p>Spring Boot的核心特性之一就是其强大的自动配置能力，它允许应用在几乎零配置的情况下快速启动并运行。</p><p>当应用启动时，Spring Boot会读取<code>resource/META-INF/spring.factories</code>文件，该文件列出了所有可用的自动配置类。当它检测到应用环境中对应的自动配置类就会生效，通过<code>@Configuration</code>注解的类创建并注册Bean到Spring容器中，从而实现Bean的自动装配。</p><blockquote><p>这里说明下，在springboot3.x以后，就不在从resource/META-INF/spring.factories读取自动配置类了，而是从org.springframework.boot.autoconfigure.AutoConfiguration.imports中读取，这一点请参考文章：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484001&idx=1&sn=612052e4c0fd90ed17f6857d3c6eb7c6&chksm=c2245216f553db006877847af7d3866c5bdc6af01c05995db7316e01122d987156951c1a310e#rd" target="_blank" rel="noopener">华为二面：SpringBoot如何自定义_Starter_？</a></p></blockquote><p>并且Spring Boot还采用条件注解（如<code>@ConditionalOnClass</code>、<code>@ConditionalOnMissingBean</code>等）来智能判断何时应用特定的配置。这些注解可以根据类路径中是否存在特定类、系统属性或环境变量的值等因素，决定是否应该激活某个自动配置类。这意味着只有当满足特定条件时，相应的Bean才会被创建和注入。</p><p>而对于应用主类则是用<code>@SpringBootApplication</code>注解标识。<code>@SpringBootApplication</code>是一个复合注解，包含了<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>和<code>@ComponentScan</code>三个注解的功能。其中</p><ul><li><code>@SpringBootConfiguration</code>是一个Spring配置类，可以替代<code>@Configuration</code>注解，声明当前类是Spring配置类，里面包含了一系列<code>@Bean</code>方法或<code>@ConfigurationProperties</code>等配置。</li><li><code>@EnableAutoConfiguration</code>启用自动配置特性，告诉Spring Boot根据应用类路径中的依赖来自动配置Bean。Spring Boot会根据类路径扫描的结果，智能地决定哪些自动配置类应当生效。</li><li><code>@ComponentScan</code>会自动扫描和管理Spring组件，包括@Service、@Repository、@Controller和@Component等注解标注的类。通过该注解，Spring Boot能自动发现和管理应用中的各个组件，并将其注册为Spring容器中的Bean。</li></ul><p>通过上述机制，Spring Boot能够智能识别项目依赖、自动配置Bean，并结合类路径扫描确保所有相关的组件和服务都被正确地初始化和管理，我们就可以专注于业务逻辑的开发，而不必过多考虑基础设施层面的配置问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Boot 应用程序被打包成的jar包之所以可以直接通过 <code>java -jar</code> 命令运行，是因为Spring Boot在构建过程中做了一些特殊的设计和配置。具体原因：</p><ol><li><p><strong>Fat/Uber JAR</strong>: Spring Boot使用maven插件<code>spring-boot-maven-plugin</code>（或Gradle对应的插件）将项目及其所有依赖项打包成一个单一的、自包含的jar文件，通常称为“Fat JAR”或“Uber JAR”。这意味着不仅包含了自己的类文件，还包含了运行应用所需的所有第三方库。</p></li><li><p><strong>Manifest.MF</strong>: 在打包过程中，此插件会修改MANIFEST.MF文件，这是jar包中的一个元数据文件。在MANIFEST.MF中，特别指定了<code>Main-Class</code>属性，该属性指向Spring Boot的一个内置的启动类（如<code>org.springframework.boot.loader.JarLauncher</code>），这个启动器类知道如何正确启动Spring Boot应用程序。</p></li><li><p><strong>嵌入式Servlet容器</strong>：Spring Boot默认集成了诸如Tomcat、Jetty或Undertow等嵌入式Web容器，使得无需外部服务器环境也能运行Web应用。</p></li><li><p><strong>启动器类加载器</strong>：当通过<code>java -jar</code>运行Spring Boot应用时，JVM会根据MANIFEST.MF中的<code>Main-Class</code>找到并运行指定的启动器类。这个启动器类加载器能够解压并加载内部的依赖库，并定位到实际的应用主类（在<code>spring-boot-starter-parent</code>或<code>@SpringBootApplication</code>注解标记的类），进而执行其<code>main</code>方法。</p></li><li><p><strong>类路径扫描和自动配置</strong>：Spring Boot应用通过特定的类路径扫描机制和自动配置功能，能够在启动时识别出应用所依赖的服务和组件，并自动配置它们，大大简化了传统Java应用的配置和部署过程。</p></li></ol><p>Spring Boot通过精心设计的打包流程和启动器类，使得生成的jar包可以直接作为一个独立的应用程序运行，极大地简化了部署和运维复杂度。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高生产力！这10个Lambda表达式必须掌握，开发效率嘎嘎上升！</title>
      <link href="/article/uselambda.html"/>
      <url>/article/uselambda.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在Java8及更高版本中，Lambda表达式的引入极大地提升了编程的简洁性和效率。本文将围绕十个关键场景，展示Lambda如何助力提升开发效率，让代码更加精炼且易于理解。</p><h3 id="集合遍历"><a href="#集合遍历" class="headerlink" title="集合遍历"></a>集合遍历</h3><p>传统的for-each循环对集合进行遍历虽然直观，但在处理大量数据时显得冗长。例如：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda表达式后，代码变得更加紧凑：</p><pre class="line-numbers language-java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h3><p>在以前我们对集合中的元素进行排序时，需要实现<code>Comparable</code>接口，或者使用<code>Comparator</code>比较器，在其中定义排序规则。</p><pre class="line-numbers language-java"><code class="language-java">Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda可以进行简化：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span>Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> Comparator<span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="集合过滤"><a href="#集合过滤" class="headerlink" title="集合过滤"></a>集合过滤</h3><p>以往的过滤操作以往需要编写繁琐的条件判断。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> filterList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        filterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda可以进行简化：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> filterList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>关于Stream的使用方法请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484002&idx=1&sn=0e064f7d653f3cf748c8a5725de39b88&chksm=c2245215f553db03a69a3240c22a5574abad783eb090ffcf857a5ae3905fedfe79656448281c#rd" target="_blank" rel="noopener">提高Java开发生产力，我选Stream,真香啊</a></p></blockquote><h3 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h3><p>如以下操作，将一个集合变成另外一个集合</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> upperCaseList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>    upperCaseList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而Lambda表达式可用于将集合中的元素直接转换成新的形式：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> upperList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        upperList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> lengthList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lengthList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="规约操作"><a href="#规约操作" class="headerlink" title="规约操作"></a>规约操作</h3><p>规约操作，即对一个集合中的元素进行求和，求平均数等</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+=</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda简化</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>intValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integr<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span> peoples <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> ages <span class="token operator">=</span> peoples<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于Stream的使用方法请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484002&idx=1&sn=0e064f7d653f3cf748c8a5725de39b88&chksm=c2245215f553db03a69a3240c22a5574abad783eb090ffcf857a5ae3905fedfe79656448281c#rd" target="_blank" rel="noopener">提高Java开发生产力，我选Stream,真香啊</a></p></blockquote><h3 id="分组操作"><a href="#分组操作" class="headerlink" title="分组操作"></a>分组操作</h3><p>对一个集合基于特定规则对集合进行分组，即将<code>List&lt;Object&gt;</code>转换为<code>Map&lt;Object, List&lt;Object&gt;&gt;</code></p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Person<span class="token operator">></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Person<span class="token operator">>></span> groupMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Person person <span class="token operator">:</span> personList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Integer age <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>groupMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        groupMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    groupMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda简化：</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Person<span class="token operator">>></span> groupMap <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还有另外一种<code>List&lt;Object&gt;</code>转换为<code>Map&lt;Object, Object&gt;</code>:</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Person<span class="token operator">></span> personList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Person<span class="token operator">></span> personMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Person person <span class="token operator">:</span> personList<span class="token punctuation">)</span> <span class="token punctuation">{</span>   personMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda简化：</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Person<span class="token operator">></span> groupMap <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Person<span class="token operator">:</span><span class="token operator">:</span>id<span class="token punctuation">,</span> Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>关于Stream的使用方法请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484002&idx=1&sn=0e064f7d653f3cf748c8a5725de39b88&chksm=c2245215f553db03a69a3240c22a5574abad783eb090ffcf857a5ae3905fedfe79656448281c#rd" target="_blank" rel="noopener">提高Java开发生产力，我选Stream,真香啊</a></p></blockquote><h3 id="使用函数式接口"><a href="#使用函数式接口" class="headerlink" title="使用函数式接口"></a>使用函数式接口</h3><p>现在有一个函数式接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">MyInterface</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常规做法在使用函数式接口时：</p><pre class="line-numbers language-java"><code class="language-java">MyInterface myInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>myInterface<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token string">"I am 码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lamba进行优化：</p><pre class="line-numbers language-java"><code class="language-java">MyInterface myInterface <span class="token operator">=</span> s <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>myInterface<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token string">"I am 码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h3><p>以往创建线程的方式：</p><pre class="line-numbers language-java"><code class="language-java">Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, 码农Academy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda简化后：</p><pre class="line-numbers language-java"><code class="language-java">Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, 码农Academy!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者使用线程池方式</span>ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">longRunningTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><p>Optional可以避免空指针异常。</p><pre class="line-numbers language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> optional <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String value <span class="token operator">=</span> optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理value</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lambda简化：</p><pre class="line-numbers language-java"><code class="language-java">Optional<span class="token operator">&lt;</span>String<span class="token operator">></span> optional <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> <span class="token function">handleValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>关于使用Optional解决空指针的用法，可以参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247483945&idx=1&sn=2b6fb82c3cfbbe6fe21837bf279ee1ed&chksm=c224525ef553db4836168c38f63da29e18acaeb31f34f4b0f54b18a23057d58a7ac78507b461#rd" target="_blank" rel="noopener">聊一聊日常开发中如何避免那无处不在的让人头疼的NullPointerException</a></p></blockquote><h3 id="Stream的流水操作"><a href="#Stream的流水操作" class="headerlink" title="Stream的流水操作"></a>Stream的流水操作</h3><p>在处理业务时，我们需要对一个集合进行一系列的操作时，比如如下：<br>`</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用Stream API与Lambda结合，实现链式操作，使代码更清晰易读：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>parseInt<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>比如我们使用Lambda结合Stream实现一个去重操作：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 根据学生姓名查询除重复元素     * @param students     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">repeatStudentsTest</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// list 对应的 Stream</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> repeatStudents <span class="token operator">=</span>   students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 获得元素出现频率的 Map，键为元素，值为元素出现的次数</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 所有 entry 对应的 Stream</span>                <span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 过滤出元素出现次数大于 1 的 entry（过滤出来的是重复的，若这里条件是等于，即可达到去重的目的）</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>entry <span class="token operator">-</span><span class="token operator">></span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 获得 entry 的键（重复元素）对应的 Stream</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>entry <span class="token operator">-</span><span class="token operator">></span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 转化为 List</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        repeatStudents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>repeatStudent <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>repeatStudent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lambda的断点调试"><a href="#Lambda的断点调试" class="headerlink" title="Lambda的断点调试"></a>Lambda的断点调试</h3><p>关于使用Idea开发式，以前对代码断点时确实无法进入到lamda表达式里面，但是随着Idea的升级，已经解决了这个问题，可以在Lambda表达式的内部进行断点</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240328232041.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240328232503.png" alt="image.png"></p><h3 id="Lambda易读"><a href="#Lambda易读" class="headerlink" title="Lambda易读"></a>Lambda易读</h3><p>有人可能会认为Lambda表达式的代码阅读起来有些吃力，当然也是可以理解，其主要原因有如下几个方面：</p><ol><li><p><strong>匿名性</strong>：Lambda表达式本质上是匿名函数，没有显式的方法名称，因此，初次接触或不熟悉其语法的读者可能难以快速理解其意图，尤其是在较复杂的上下文中。</p></li><li><p><strong>简洁性</strong>：Lambda表达式的目的是为了简化代码，它往往非常紧凑，可能会把原本分散在多个行或方法中的逻辑压缩到一行甚至一部分内。这样的代码密度可能导致理解上的难度，特别是当逻辑较为复杂时。</p></li><li><p><strong>抽象层次</strong>：Lambda表达式常与函数式接口一起使用，这意味着理解Lambda表达式需要知道它所对应接口的行为约定。如果读者不了解接口的具体功能，那么Lambda表达式就可能变得难以解读。</p></li><li><p><strong>函数式编程范式</strong>：对于习惯于命令式编程风格的开发者来说，函数式编程的思维方式和Lambda表达式的使用可能需要一定适应期。尤其是涉及到闭包、高阶函数等概念时，如果不熟悉这些概念，理解Lambda表达式的逻辑会更加困难。</p></li><li><p><strong>依赖上下文</strong>：Lambda表达式经常用于流(Stream)操作、事件监听、回调函数等场景，其含义高度依赖于上下文环境。在缺少充分注释或文档的情况下，阅读者可能需要花费更多精力去推理其作用。</p></li></ol><p>但是，随着Java 8以来函数式编程特性的普及，越来越多的Coder们开始接受并熟练使用Lambda表达式。适当的代码组织、注释和遵循良好的编程规范有助于降低Lambda表达式带来的阅读障碍。并且随着经验的增长和技术背景的丰富，我们会逐渐认识到Lambda表达式的优点，即它可以增强代码的可读性和简洁性，尤其在处理数据流和进行函数组合时。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>熟练运用Lambda表达式能够显著提升代码质量与开发效率，使得代码逻辑更加简明扼要，同时也增强了程序的可读性与维护性。不断学习和实践这些技巧，你的开发效率必将迎来质的飞跃。并且Lambda与Stream一起使用才能发挥他们最大的优点。关于Stream的使用方法请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484002&idx=1&sn=0e064f7d653f3cf748c8a5725de39b88&chksm=c2245215f553db03a69a3240c22a5574abad783eb090ffcf857a5ae3905fedfe79656448281c#rd" target="_blank" rel="noopener">提高Java开发生产力，我选Stream,真香啊</a></p>]]></content>
      
      
      <categories>
          
          <category> lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda </tag>
            
            <tag> Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团一面：项目中使用过Redis吗？我说用Redis做缓存。他对我哦了一声</title>
      <link href="/article/redisused.html"/>
      <url>/article/redisused.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Redis，作为一种开源的、基于内存且支持持久化的键值存储系统，以其卓越的性能、丰富灵活的数据结构和高度可扩展性在全球范围内广受欢迎。Redis不仅提供了一种简单直观的方式来存储和检索数据，更因其支持数据结构如字符串、哈希、列表、集合、有序集合等多种类型，使得其在众多场景下表现出强大的适用性和灵活性。</p><p>Redis的核心特点包括：</p><ol><li><strong>高性能</strong>：基于内存操作，读写速度极快，特别适用于对性能要求高的实时应用。</li></ol><blockquote><p>关于Redis高性能的原因，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484198&idx=1&sn=32b0992f1b7d9862e2c983f9cb2e633f&chksm=c2245351f553da472f19d57c7d7dfa56c58e8ea4a9e814fc2d4a8fadf72afeadae4b0b0bec35#rd" target="_blank" rel="noopener">京东二面：Redis为什么快？我说Redis是纯内存操作的，然后他对我笑了笑。。。。。。</a></p></blockquote><ol start="2"><li><strong>数据持久化</strong>：支持RDB和AOF两种持久化方式，确保即使在服务器重启后也能恢复数据。</li><li><strong>分布式的特性</strong>：通过主从复制、哨兵模式或集群模式，Redis可以轻松地构建高可用和可扩展的服务。</li><li><strong>丰富的数据结构</strong>：提供了多种数据结构支持，便于开发人员根据实际需求进行数据建模和处理。</li></ol><p>Redis的广泛应用跨越了多个行业和技术领域，诸如网站加速、缓存服务、会话管理、实时统计、排行榜、消息队列、分布式锁、社交网络功能、限流控制等。本文将深入探讨Redis在这些场景下的具体应用方法及其背后的工作原理，旨在帮助开发者更好地理解和掌握Redis，以应对各种复杂的业务需求，并充分发挥其潜能。同时，我们也将关注如何在实践中平衡Redis的性能、安全性、一致性等方面的挑战，为实际项目带来更高的价值。</p><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><p>在高并发访问的场景下，数据库经常成为系统的瓶颈。Redis因其内存存储、读取速度快的特点，常被用作数据库查询结果的缓存层，有效降低数据库负载，提高整体系统的响应速度。这也是我们使用场景频率最高的一个。</p><p>通常我们选择使用String类型来存储数据库查询结果，如单个实体对象的JSON序列化形式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Product<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用@Cacheable注解进行缓存</span>    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"productCache"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">"#id"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Product <span class="token function">getProductById</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此处是从数据库或其他数据源获取商品的方法</span>        <span class="token comment" spellcheck="true">// 在实际场景中，如果缓存命中，则不会执行下面的数据库查询逻辑</span>        <span class="token keyword">return</span> <span class="token function">getProductFromDatabase</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而使用Redis作为缓存使用时，有一些特别需要注意的事项：</p><ol><li><strong>缓存穿透</strong>：当查询的数据在数据库和缓存中均不存在时，可能会导致大量的无效请求直接打到数据库。可通过布隆过滤器预防缓存穿透。</li><li><strong>缓存雪崩</strong>：若大量缓存在同一时刻失效，所有请求都会涌向数据库，造成瞬时压力过大。可通过设置合理的过期时间分散、预加载或采用Redis集群等方式避免。</li><li><strong>缓存一致性</strong>：当数据库数据发生变化时，需要及时更新缓存，避免数据不一致。可以采用主动更新策略（如监听数据库binlog）或被动更新策略（如在读取时判断数据新鲜度）。</li></ol><p>而对于数据缓存，我们常使用的业务场景如热点数据存储、全页缓存等。</p><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><p>在说会话管理之前，我们来简单介绍一下<code>Spring Session</code>。<br>Spring Session 是 Spring Framework 的一个项目，旨在简化分布式应用程序中的会话管理。在传统的基于 Servlet 的应用程序中，会话管理是通过 HttpSession 接口实现的，但在分布式环境中，每个节点上的 HttpSession 不能简单地共享，因此需要一种机制来管理会话并确保会话在集群中的一致性。</p><p>Spring Session 提供了一种简单的方法来解决这个问题，它将会话数据从容器（如 Tomcat 或 Jetty）中分离出来，并存储在外部数据存储（如 Redis、MongoDB、JDBC 等）中。这样，不同节点上的应用程序实例可以共享相同的会话数据，实现分布式环境下的会话管理。</p><p>所以在Web应用中，Redis用于会话管理时，可以取代传统基于服务器内存或Cookie的会话存储方案。通过将会话数据序列化后存储为Redis中的键值对，实现跨多个服务器实例的会话共享。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.session<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-session-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在启动类中，使用<code>@EnableRedisHttpSession</code>启用Redis作为会话存储。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableRedisHttpSession</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSessionConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里假设你已经在application.properties或application.yml中配置了Redis的信息</span>        <span class="token comment" spellcheck="true">// 根据实际情况填写Redis服务器地址、端口等信息</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LettuceConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是一个简单的<code>Spring Session</code>使用<code>Redis</code>进行会话管理的示例代码。通过这种方式，我们可以轻松地在分布式环境中管理会话，并确保会话数据的一致性和可靠性。如果需要了解一些具体的用法，请自行参考<code>Spring Session</code>。</p><h3 id="排行榜与计分板"><a href="#排行榜与计分板" class="headerlink" title="排行榜与计分板"></a>排行榜与计分板</h3><p>有序集合（Sorted Sets）是Redis的一种强大数据结构，可以用来实现动态排行榜，每个成员都有一个分数，按分数排序。有序集合中的每一个成员都有一个分数（score），成员依据其分数进行排序，且成员本身是唯一的。</p><p>当需要给某个用户增加积分或改变其排名时，可以使用<code>ZADD</code>命令向有序集合中添加或更新成员及其分数。例如，<code>ZADD leaderboard score member</code>，这里的<code>ranking</code>是有序集合的名称，<code>score</code>是用户的积分值，<code>member</code>是用户ID。</p><p>查询排行榜时，可以使用<code>ZRANGE</code>命令获取指定范围内的成员及其分数，例如，<code>ZRANGE ranking 0 -1 WITHSCORES</code>，这条命令会返回集合中所有的成员及其对应的分数，按照分数从低到高排序。</p><p>若要按照分数从高到低显示排行榜，使用<code>ZREVRANGE</code>命令，如<code>ZREVRANGE ranking 0 -1 WITHSCORES</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RankingService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToRanking</span><span class="token punctuation">(</span>String playerName<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> playerName<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>RankingInfo<span class="token operator">></span> <span class="token function">getRanking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>RankingInfo<span class="token operator">></span> rankingInfos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">>></span> rankingSet <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rangeWithScores</span><span class="token punctuation">(</span><span class="token string">"ranking"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">></span> tuple <span class="token operator">:</span> rankingSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RankingInfo rankingInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RankingInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rankingInfo<span class="token punctuation">.</span><span class="token function">setPlayerName</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rankingInfo<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rankingInfos<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rankingInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"playerName: "</span> <span class="token operator">+</span> tuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", score: "</span> <span class="token operator">+</span> tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rankingInfos<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们模拟请求，往redis中填入一些数据，在获取排行榜：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240327163807.png" alt="image.png"><br>在实际场景中，有序集合非常适合处理实时动态变化的排行榜数据，比如京东的月度销量榜单、商品按时间的上新排行榜等，因为它的更新和查询操作都是原子性的，并且能高效地支持按分数排序的操作。</p><h3 id="计数器与统计"><a href="#计数器与统计" class="headerlink" title="计数器与统计"></a>计数器与统计</h3><p>Redis的原子性操作如<code>INCR</code>和<code>DECR</code>可以用于计数，确保在高并发环境下的计数准确性。比如在流量统计、电商网站商品的浏览量、视频网站视频的播放数赞等场景的应用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CounterService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementLikeCount</span><span class="token punctuation">(</span>String postId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>postId <span class="token operator">+</span> <span class="token string">":likes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decrementLikeCount</span><span class="token punctuation">(</span>String postId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>postId <span class="token operator">+</span> <span class="token string">":likes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getLikeCount</span><span class="token punctuation">(</span>String postId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>postId <span class="token operator">+</span> <span class="token string">":likes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用Redis实现点赞，统计等功能时一定要考虑设置计数值的最大值或最小值限制，以及过期策略。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="分布式锁-1"><a href="#分布式锁-1" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>Redis的<code>SETNX</code>（设置并检查是否存在）和<code>EXPIRE</code>命令组合可以实现分布式锁，因其操作时原子性的，所以可以确保在分布式环境下同一资源只能被一个客户端修改。</p><p>使用 Redis 实现分布式锁通常会使用 Redis 的 SETNX 命令。这个命令用于设置一个键的值，如果这个键不存在的话，它会设置成功并返回 1，如果这个键已经存在，则设置失败并返回 0。结合 Redis 的 EXPIRE 命令，可以为这个键设置一个过期时间，确保即使获取锁的客户端异常退出，锁也会在一段时间后自动释放。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DistributedLock</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">acquireLock</span><span class="token punctuation">(</span>String lockKey<span class="token punctuation">,</span> String requestId<span class="token punctuation">,</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Boolean result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> requestId<span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseLock</span><span class="token punctuation">(</span>String lockKey<span class="token punctuation">,</span> String requestId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>requestId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用分布式锁时，务必确保在加锁和解锁操作之间处理完临界区代码，否则可能出现死锁。并且要注意锁定超时时间应当合理设置，以避免锁定资源长时间无法释放。</p><blockquote><p>关于分布式锁，推荐使用一些第三方的分布式锁框架，例如Redisson</p></blockquote><h4 id="全局ID"><a href="#全局ID" class="headerlink" title="全局ID"></a>全局ID</h4><p>在全局ID生成的场景中，我们可以使用 Redis 的原子递增操作来实现。通过对 Redis 中的一个特定的 key 进行原子递增操作，可以确保生成的ID是唯一的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniqueIdGenerator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">generateUniqueId</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="库存扣减"><a href="#库存扣减" class="headerlink" title="库存扣减"></a>库存扣减</h4><p>在扣减库存的场景中，我们可以使用 Redis 的原子递减操作来实现。将库存数量存储在 Redis 的一个特定key中（例如仓库编码:SKU），然后通过递减操作来实现库存的扣减。这样可以保证在高并发情况下，库存扣减的原子性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StockService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**商品库存的key*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String STOCK_PREFIX <span class="token operator">=</span> <span class="token string">"stock:%s:%s"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 扣减库存     * @param warehouseCode     * @param productId     * @param quantity     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">decreaseStock</span><span class="token punctuation">(</span>String warehouseCode<span class="token punctuation">,</span> String productId<span class="token punctuation">,</span> <span class="token keyword">long</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>STOCK_PREFIX<span class="token punctuation">,</span> warehouseCode<span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        Long stock <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stock <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h4><p>在秒杀场景中，使用Lua脚本。Lua 脚本可以在 Redis 服务器端原子性地执行多个命令，这样可以避免在多个命令之间出现竞态条件。</p><p>我们使用Lua脚本来检查库存是否足够并进行扣减操作。如果库存足够，则减少库存并返回 true；如果库存不足，则直接返回 false。通过 Lua 脚本的原子性执行，可以确保在高并发情况下，库存扣减操作的正确性和一致性。</p><p>我们先定义一个扣减库存的lua脚本，使用Lua脚本一次性执行获取库存、判断库存是否充足以及扣减库存这三个操作，确保了操作的原子性</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 获取Lua脚本参数：商品ID和要购买的数量</span><span class="token keyword">local</span> productId <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> amount <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 获取当前库存</span><span class="token keyword">local</span> currentStock <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'seckill:product:'</span><span class="token operator">..</span>productId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 判断库存是否充足</span><span class="token keyword">if</span> currentStock <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> currentStock <span class="token operator">&lt;</span> amount <span class="token keyword">then</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token comment" spellcheck="true">-- 扣减库存</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'DECRBY'</span><span class="token punctuation">,</span> <span class="token string">'seckill:product:'</span><span class="token operator">..</span>productId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 返回成功标志</span><span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在秒杀服务中使用Redis的<code>DefaultRedisScript</code>执行lua脚本，完成秒杀</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeckillService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化RedisScript对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> DefaultRedisScript<span class="token operator">&lt;</span>Long<span class="token operator">></span> seckillScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        seckillScript<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"rate_limiter.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        seckillScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">seckillyLua</span><span class="token punctuation">(</span>String productId<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置Lua脚本参数</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> args <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行Lua脚本</span>        Long result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>seckillScript<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果执行结果为1，表示秒杀成功</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> 1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于秒杀场景，我们也可以使用<code>WATCH</code>命令监视库存键，然后尝试获取并扣减库存。如果在<code>WATCH</code>之后、<code>EXEC</code>之前库存发生了变化，<code>exec</code>方法会返回<code>null</code>，此时我们取消<code>WATCH</code>并重新尝试整个流程，直到成功扣减库存为止。这样就实现了基于Redis乐观锁的秒杀场景，有效防止了超卖现象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 秒杀方法     * @param productId 商品ID     * @param amount 要购买的数量     * @return 秒杀成功与否     */</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">seckilByWatch</span><span class="token punctuation">(</span>String productId<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 乐观锁事务操作</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// WATCH指令监控库存键</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"stock:"</span> <span class="token operator">+</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取当前库存</span>            String currentStockStr <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"stock:"</span> <span class="token operator">+</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStockStr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 库存不存在，可能是商品已售罄或异常情况</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> currentStock <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>currentStockStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断库存是否充足</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentStock <span class="token operator">&lt;</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 库存不足，取消WATCH并退出循环</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">unwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 开启Redis事务</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行扣减库存操作</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token string">"stock:"</span> <span class="token operator">+</span> productId<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行其他与秒杀相关的操作，如增加订单、更新用户余额等...</span>            <span class="token comment" spellcheck="true">// 提交事务，如果在此期间库存被其他客户端修改，则exec返回null</span>            List<span class="token operator">&lt;</span>Object<span class="token operator">></span> results <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果事务执行成功，跳出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>results<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="消息队列与发布-订阅"><a href="#消息队列与发布-订阅" class="headerlink" title="消息队列与发布/订阅"></a>消息队列与发布/订阅</h3><p>Redis的发布/订阅（Pub/Sub）模式，可以实现一个简单的消息队列。发布/订阅模式允许消息的发布者（发布消息）和订阅者（接收消息）之间解耦，消息的发布者不需要知道消息的接收者是谁，从而实现了一对多的消息传递。</p><p>首先我们需要定义一个消息监听器，我们可以实现这个借口并实现其中的方法来处理接收到的消息。这样可以根据具体的业务需求来定义消息的处理逻辑。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>String channel<span class="token punctuation">,</span> String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们就可以定义消息的生产者以及消费者。<code>publish</code> 方法用于向指定频道发布消息，我们使用 RedisTemplate 的 <code>convertAndSend</code> 方法来发送消息到指定的频道。<br>而<code>subscribe</code>方法用于订阅指定的频道，并设置消息监听器。当有消息发布到指定的频道时，消息监听器会收到消息并进行处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageQueue</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>String channel<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>String channel<span class="token punctuation">,</span> MessageListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            listener<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> channel<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Redis的发布订阅模式实现一个轻量级的队列时要注意：Pub/Sub是非持久化的，一旦消息发布，没有订阅者接收的话，消息就会丢失。还有就是Pub/Sub不适合大规模的消息堆积场景，因为它不保证消息顺序和重复消费，更适合实时广播型消息推送。</p><h3 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h3><p>在社交网络中，Redis可以利用集合(Set)、哈希(Hash)和有序集合(Sorted Set)等数据结构构建用户关系图谱。</p><p>使用哈希（Hash）数据结构存储用户的个人资料信息，每个用户对应一个哈希表，其中包含用户的各种属性，比如用户名、年龄、性别等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RelationshipGraphService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**用户资料*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_PROFILE_PREFIX <span class="token operator">=</span> <span class="token string">"user_profile:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存储用户个人资料     * @param userId     * @param profile     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserProfile</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> profile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> USER_PROFILE_PREFIX <span class="token operator">+</span> userId<span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> profile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户个人资料     * @param userId     * @return     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getUserProfile</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> USER_PROFILE_PREFIX <span class="token operator">+</span> userId<span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用集合（Set）数据结构来存储用户的好友关系。每个用户都有一个集合，其中包含了他的所有好友的用户ID。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RelationshipGraphService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**用户好友*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FRIENDS_PREFIX <span class="token operator">=</span> <span class="token string">"friends:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 添加好友关系     * @param userId     * @param friendId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFriend</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String friendId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> FRIENDS_PREFIX <span class="token operator">+</span> userId<span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> friendId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户的所有好友     * @param userId     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getFriends</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> FRIENDS_PREFIX <span class="token operator">+</span> userId<span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，我们还可以实现点赞的业务场景</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 点赞     * @param objectId     * @param userId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">like</span><span class="token punctuation">(</span>String objectId<span class="token punctuation">,</span> String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将点赞人放入zset中</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getLikeKey</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 取消点赞     * @param objectId     * @param userId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlike</span><span class="token punctuation">(</span>String objectId<span class="token punctuation">,</span> String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 减少点赞人数</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token function">getLikeKey</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否点赞     * @param objectId     * @param userId     * @return     */</span>    <span class="token keyword">public</span> Boolean <span class="token function">isLiked</span><span class="token punctuation">(</span>String objectId<span class="token punctuation">,</span> String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span><span class="token function">getLikeKey</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取点赞数     * @param objectId     * @return     */</span>    <span class="token keyword">public</span> Long <span class="token function">getLikeCount</span><span class="token punctuation">(</span>String objectId<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token function">getLikeKey</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取所有点赞的用户     * @param objectId     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getLikedUsers</span><span class="token punctuation">(</span>String objectId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span><span class="token function">getLikeKey</span><span class="token punctuation">(</span>objectId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">getLikeKey</span><span class="token punctuation">(</span>String objectId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"likes:"</span> <span class="token operator">+</span> objectId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用有序集合（Sorted Set）数据结构来存储用户的关注者列表。有序集合中的成员是关注者的用户ID，而分数可以是关注时间或者其他指标，比如活跃度。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RelationshipGraphService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**用户关注者*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FOLLOWERS_PREFIX <span class="token operator">=</span> <span class="token string">"followers:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 添加关注者     * @param userId     * @param followerId     * @param score     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFollower</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String followerId<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> FOLLOWERS_PREFIX <span class="token operator">+</span> userId<span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> followerId<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户的关注者列表（按照关注时间排序）     * @param userId     * @return     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getFollowers</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> FOLLOWERS_PREFIX <span class="token operator">+</span> userId<span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外，我们还可以实现可能认识的人，共同好友等业务场景。</p><h3 id="限流与速率控制"><a href="#限流与速率控制" class="headerlink" title="限流与速率控制"></a>限流与速率控制</h3><p>Redis可以精确地实施限流策略，如使用INCR命令结合Lua脚本实现滑动窗口限流。</p><p>创建一个Lua脚本，该脚本负责检查在一定时间段内请求次数是否超过限制。</p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- rate_limiter.lua</span><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> limit <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">local</span> timeWindow <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- 时间窗口，例如单位为秒</span><span class="token comment" spellcheck="true">-- 获取当前时间戳</span><span class="token keyword">local</span> currentTime <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'TIME'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 获取最近timeWindow秒内的请求次数</span><span class="token keyword">local</span> count <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZCOUNT'</span><span class="token punctuation">,</span> key <span class="token operator">..</span> <span class="token string">':requests'</span><span class="token punctuation">,</span> currentTime <span class="token operator">-</span> timeWindow<span class="token punctuation">,</span> currentTime<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 如果未超过限制，则累加请求次数，并返回true</span><span class="token keyword">if</span> count <span class="token operator">&lt;</span> limit <span class="token keyword">then</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZADD'</span><span class="token punctuation">,</span> key <span class="token operator">..</span> <span class="token string">':requests'</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">,</span> currentTime<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token keyword">else</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限流服务中Redis使用<code>DefaultRedisScript</code>执行Lua脚本</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**限流Key*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TATE_LIMITER_KEY <span class="token operator">=</span> <span class="token string">"rate-limit:%s"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**规定的时间窗口内允许的最大请求数量*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer LIMIT <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**限流策略的时间窗口长度，单位是秒*/</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Integer TIME_WINDOW <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化RedisScript对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> DefaultRedisScript<span class="token operator">&lt;</span>Long<span class="token operator">></span> rateLimiterScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        rateLimiterScript<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"rate_limiter.lua"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rateLimiterScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 限流方法 1分钟内最多100次请求     * @param userId     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">allowRequest</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>TATE_LIMITER_KEY<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> args <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>LIMIT<span class="token punctuation">)</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>TIME_WINDOW<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行Lua脚本</span>        Long result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>rateLimiterScript<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结果为1表示允许请求，0表示请求被限流</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> 1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位运算与位图应用"><a href="#位运算与位图应用" class="headerlink" title="位运算与位图应用"></a>位运算与位图应用</h3><p>Redis的位图（BitMap）是一种特殊的数据结构，它允许我们在单一的字符串键（String Key）中存储一系列二进制位（bits），每个位对应一个布尔值（0或1），并通过偏移量（offset）来定位和操作这些位。位图极大地节省了存储空间，尤其适合于大规模数据的标记、统计和筛选场景。</p><p>在位图中，每一位相当于一个标识符，例如可以用来表示用户是否在线、商品是否有库存、用户是否已读邮件等。相对于传统的键值对存储。位图可以非常快速地统计满足特定条件的元素个数，如统计在线用户数、激活用户数等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserOnlineStatusService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ONLINE_STATUS_KEY <span class="token operator">=</span> <span class="token string">"online_status"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String RETENTION_RATE_KEY_PREFIX <span class="token operator">=</span> <span class="token string">"retention_rate:"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DAILY_ACTIVITY_KEY_PREFIX <span class="token operator">=</span> <span class="token string">"daily_activity:"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置用户在线状态为在线     * @param userId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserOnline</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>ONLINE_STATUS_KEY<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置用户在线状态为离线     * @param userId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserOffline</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>ONLINE_STATUS_KEY<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户在线状态     * @param userId     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isUserOnline</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBit</span><span class="token punctuation">(</span>ONLINE_STATUS_KEY<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 统计在线用户数量     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">countOnlineUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token function">getCount</span><span class="token punctuation">(</span>ONLINE_STATUS_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 记录用户的留存情况     * @param userId     * @param daysAgo     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recordUserRetention</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> daysAgo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RETENTION_RATE_KEY_PREFIX <span class="token operator">+</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span>daysAgo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定日期的留存率     * @param daysAgo     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRetentionRate</span><span class="token punctuation">(</span><span class="token keyword">int</span> daysAgo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> RETENTION_RATE_KEY_PREFIX <span class="token operator">+</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span>daysAgo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> totalUsers <span class="token operator">=</span> <span class="token function">countOnlineUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> retainedUsers <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> retainedUsers <span class="token operator">/</span> totalUsers <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 记录用户的每日活跃情况     * @param userId     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recordUserDailyActivity</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> DAILY_ACTIVITY_KEY_PREFIX <span class="token operator">+</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取指定日期的活跃用户数量     * @param date     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">countDailyActiveUsers</span><span class="token punctuation">(</span>LocalDate date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> DAILY_ACTIVITY_KEY_PREFIX <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getCount</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取最近几天每天的活跃用户数量列表     * @param days     * @return     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token function">getDailyActiveUsers</span><span class="token punctuation">(</span><span class="token keyword">int</span> days<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LocalDate currentDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Long<span class="token operator">></span> results <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> days<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LocalDate date <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            String key <span class="token operator">=</span> DAILY_ACTIVITY_KEY_PREFIX <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            results<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getCount</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> results<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取key下的数量     * @param key     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getCount</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span>RedisCallback<span class="token operator">&lt;</span>Long<span class="token operator">></span><span class="token punctuation">)</span> connection <span class="token operator">-</span><span class="token operator">></span> connection<span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最新列表"><a href="#最新列表" class="headerlink" title="最新列表"></a>最新列表</h3><p>Redis的List（列表）是一个基于双向链表实现的数据结构，允许我们在列表头部（左端）和尾部（右端）进行高效的插入和删除操作。<br><code>LPUSH</code>命令：全称是<code>LIST PUSH LEFT</code>，用于将一个或多个值插入到列表的最左边（头部），在这里用于将最新生成的内容ID推送到列表顶部，保证列表中始终是最新的内容排在前面。</p><p><code>LTRIM</code>命令用于修剪列表，保留指定范围内的元素，从而限制列表的长度。在这个场景中，每次添加新ID后都会执行<code>LTRIM</code>操作，只保留最近的N个ID，确保列表始终保持固定长度，即只包含最新的内容ID。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LatestListService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LATEST_LIST_KEY <span class="token operator">=</span> <span class="token string">"latest_list"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 添加最新内容ID到列表头部     * @param contentId 内容ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLatestContent</span><span class="token punctuation">(</span>String contentId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> listOps <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listOps<span class="token punctuation">.</span><span class="token function">leftPush</span><span class="token punctuation">(</span>LATEST_LIST_KEY<span class="token punctuation">,</span> contentId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 限制列表最多存储N个ID，假设N为100</span>        listOps<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>LATEST_LIST_KEY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取最新的N个内容ID     * @param count 要获取的数量，默认为10     * @return 最新的内容ID列表     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getLatestContentIds</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> listOps <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> listOps<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>LATEST_LIST_KEY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h3><p>借助Redis的Set数据结构以及其内置的<code>Spop</code>命令，我们能够高效且随机地选定抽奖获胜者。Set作为一种不允许包含重复成员的数据集合，其特性天然适用于防止抽奖过程中出现重复参与的情况，确保每位参与者仅拥有一个有效的抽奖资格。</p><p>由于Set内部元素的排列不具备确定性，这意味着在对集合执行随机获取操作时，每一次选取都将独立且不可预测，这与抽奖活动中所要求的随机公平原则高度契合。</p><p>Redis的<code>Spop</code>命令允许我们在单个原子操作下，不仅随机选取，还会从Set中移除指定数量（默认为1）的元素。这一原子操作机制尤为关键，在高并发环境下，即便有多个请求同时进行抽奖，<code>Spop</code>也能够确保同一时刻只有一个请求能成功获取并移除一个元素，有效避免了重复选择同一位参与者作为获奖者的可能性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LotteryService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PARTICIPANTS_SET_KEY <span class="token operator">=</span> <span class="token string">"lottery:participants"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 添加参与者到抽奖名单     * @param participant 参与者ID     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">joinLottery</span><span class="token punctuation">(</span>String participant<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>PARTICIPANTS_SET_KEY<span class="token punctuation">,</span> participant<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抽取一名幸运儿     * @return 幸运儿ID     */</span>    <span class="token keyword">public</span> String <span class="token function">drawWinner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用Spop命令随机抽取一个参与者</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>PARTICIPANTS_SET_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抽取N个幸运儿     * @param count 抽取数量     * @return 幸运儿ID列表     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">drawWinners</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span>PARTICIPANTS_SET_KEY<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Stream类型"><a href="#Stream类型" class="headerlink" title="Stream类型"></a>Stream类型</h3><p>Redis Stream作为一种自Redis 5.0起引入的高级数据结构，专为存储和处理有序且持久的消息流而设计。可视作一个分布式的、具备持久特性的消息队列，通过唯一的键名来标识每个Stream，其中容纳了多个携带时间戳和唯一标识符的消息实体。</p><p>每条存储于Stream中的消息都具有全球唯一的message ID，该ID内嵌时间戳和序列编号，旨在确保即使在复杂的集群部署中仍能保持消息的严格时序性。这些消息内容会持久存储在Redis中，确保即使服务器重启也能安全恢复。</p><p>生产者利用<code>XADD</code>指令将新消息添加到Stream中，而消费者则通过<code>XREAD</code>或针对多消费者组场景优化的<code>XREADGROUP</code>命令来读取并处理消息。<code>XREADGROUP</code>尤其擅长处理多消费者组间的公平分配和持久订阅，确保消息的公正、有序送达各个消费者。</p><p>Stream核心特性之一是支持消费者组机制，消费者组内的不同消费者可独立地消费消息，并通过<code>XACK</code>命令确认已消费的消息，从而实现了消息的持久化消费和至少一次（at-least-once）交付保证。当消息量超出消费者处理能力时，未处理的消息可在Stream中积压，直到达到预设的最大容量限制。此外，还能设定消息的有效期（TTL），逾期未被消费的消息将自动剔除。即使在网络传输过程中消息遭受损失，亦可通过message ID保障消息的幂等性重新投递。尽管网络条件可能导致消息到达消费者的时间顺序与生产者发出的顺序有所偏差，但Stream机制确保了每个消息在其内在的时间上下文中依然保持着严格的顺序关系。</p><p>Redis Stream作为一个集消息持久化、多消费者公平竞争、消息追溯和排序等功能于一体的强大消息队列工具，已在日志采集、实时数据分析、活动追踪等诸多领域展现出卓越的适用性和价值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogCollector</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOGS_STREAM_KEY <span class="token operator">=</span> <span class="token string">"logs"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String GROUP_NAME <span class="token operator">=</span> <span class="token string">"log_consumers"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONSUMER_NAME <span class="token operator">=</span> <span class="token string">"log_consumer"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送日志事件至 Redis Stream</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendLogEvent</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StreamOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">,</span> Object<span class="token operator">></span> streamOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RecordId messageId <span class="token operator">=</span> streamOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>StreamRecords<span class="token punctuation">.</span><span class="token function">newRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">ofStrings</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withStreamKey</span><span class="token punctuation">(</span>LOGS_STREAM_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实时消费日志事件</span>    <span class="token keyword">public</span> StreamRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">consumeLogs</span><span class="token punctuation">(</span><span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Consumer consumer <span class="token operator">=</span> Consumer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>CONSUMER_NAME<span class="token punctuation">,</span> GROUP_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        StreamOffset<span class="token operator">&lt;</span>String<span class="token operator">></span> offset <span class="token operator">=</span> StreamOffset<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>LOGS_STREAM_KEY<span class="token punctuation">,</span> ReadOffset<span class="token punctuation">.</span><span class="token function">lastConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StreamReadOptions<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> readOptions <span class="token operator">=</span> StreamReadOptions<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readOptions<span class="token punctuation">,</span> StreamOffset<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>LOGS_STREAM_KEY<span class="token punctuation">,</span> ReadOffset<span class="token punctuation">.</span><span class="token function">lastConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GEO类型"><a href="#GEO类型" class="headerlink" title="GEO类型"></a>GEO类型</h3><p>Redis的GEO数据类型自3.2版本起引入，专为存储和高效操作含有经纬度坐标的地理位置信息而设计。开发人员利用这一类型可以轻松管理地理位置数据，同时兼顾内存效率和响应速度。</p><p>利用<code>GEOADD</code>命令，可以将带有精确经纬度坐标的数据点归档至指定键名下的集合中。</p><p>可借助<code>GEOPOS</code>命令获取某一成员的具体经纬度坐标。</p><p>通过<code>GEODIST</code>命令，可以准确计算任意两个地理位置成员之间的地球表面距离，支持多种计量单位，包括米、千米、英里和英尺。</p><p>使用<code>GEORADIUS</code>命令，系统可以根据指定的经纬度中心点及半径范围检索出处于该区域内的所有成员地理位置。</p><p><code>GEORADIUSBYMEMBER</code>命令也用于范围查询，但其查询依据是选定成员自身的位置，以此为圆心划定搜索范围。</p><p>GEO类型在许多场景下都非常有用，例如移动应用中的附近好友查找、商店位置搜索、物流配送中的最近司机调度等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FriendService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FRIEND_LOCATIONS_KEY <span class="token operator">=</span> <span class="token string">"friend_locations"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> GeoOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> FriendLocation<span class="token operator">></span> geoOperations<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自动装配GeoOperations</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFriendLocation</span><span class="token punctuation">(</span>FriendLocation location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        geoOperations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>FRIEND_LOCATIONS_KEY<span class="token punctuation">,</span> location<span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> location<span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>FriendLocation<span class="token operator">></span> <span class="token function">findFriendsNearby</span><span class="token punctuation">(</span><span class="token keyword">double</span> myLongitude<span class="token punctuation">,</span> <span class="token keyword">double</span> myLatitude<span class="token punctuation">,</span> Distance radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Circle circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>myLongitude<span class="token punctuation">,</span> myLatitude<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> geoOperations<span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span>FRIEND_LOCATIONS_KEY<span class="token punctuation">,</span> circle<span class="token punctuation">,</span> Metric<span class="token punctuation">.</span>KILOMETERS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Redis作为一款高性能、内存型的NoSQL数据库，凭借其丰富的数据结构、极高的读写速度以及灵活的数据持久化策略，在现代分布式系统中扮演着至关重要的角色。它的关键价值体现在以下几个方面：</p><ol><li><p>缓存优化：Redis将频繁访问的数据存储在内存中，显著减少了数据库的读取压力，提升了系统的整体性能和响应速度。</p></li><li><p>分布式支持：通过主从复制、哨兵和集群模式，Redis实现了高度可扩展性和高可用性，满足大规模分布式系统的需求。</p></li><li><p>数据结构多样性：Redis支持字符串、哈希、列表、集合、有序集合、Bitmaps、HyperLogLog、Geo等多样化的数据结构，为多种应用场景提供了便利，如排行榜、社交关系、消息队列、计数器、限速器等。</p></li><li><p>实时处理与分析：随着Redis 5.0引入Stream数据结构，使得Redis在日志收集、实时分析、物联网数据流处理等方面有了更多的可能性。</p></li><li><p>地理位置服务：GEO类型提供了便捷的空间索引和距离计算功能，使得Redis能够在电商、出行、社交等领域提供附近地点搜索、路线规划等服务。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>淘宝二面：MySQL里有2000万条数据，但是Redis中只存20万的数据，如何保证redis中的数据都是热点数据?</title>
      <link href="/article/redislfu.html"/>
      <url>/article/redislfu.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在当今互联网领域，尤其在大型电商平台如淘宝这样的复杂分布式系统中，数据的高效管理和快速访问至关重要。面对数以千万计的商品、交易记录以及其他各类业务数据，如何在MySQL等传统关系型数据库之外，借助内存数据库Redis的力量，对部分高频访问数据进行高效的缓存处理，是提升整个系统性能的关键一环。</p><p>比如淘宝，京东，拼多多等电商系统每日处理的订单量级庞大，其数据库中存储的商品、用户信息及相关交易数据可达数千万条。为了降低数据库查询的压力，加速数据读取，Redis常被用于搭建二级缓存系统，以容纳部分最为活跃的“热点数据”。然而，在资源有限的情况下，如何确保仅有的20万条缓存数据精准匹配到系统中的热点数据，避免频繁的冷数据替换热数据导致的缓存失效，这就涉及到了一套精密的数据管理策略和缓存淘汰机制的设计。</p><p>本文将围绕这一实战场景展开讨论：在MySQL拥有2000万条数据的前提下，如何确保Redis仅缓存的20万条数据全都是系统中的热点数据，从而最大程度上发挥缓存的优势，提高系统的响应速度和并发能力，进而提升用户的购物体验和服务质量。通过对Redis内部机制的深入理解以及对业务场景的精细分析，我们将揭示一套综合运用各种技术手段来确保Redis中热点数据准确有效的管理方案。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240402001538.png" alt="image.png"></p><h2 id="技术背景"><a href="#技术背景" class="headerlink" title="技术背景"></a>技术背景</h2><p>在探讨如何确保Redis中存储的20万数据均为热点数据之前，首先需要明确MySQL与Redis在实际业务环境中的互补关系以及Redis自身的内存管理和数据淘汰机制。</p><h3 id="MySQL与Redis的关系及应用场景"><a href="#MySQL与Redis的关系及应用场景" class="headerlink" title="MySQL与Redis的关系及应用场景"></a>MySQL与Redis的关系及应用场景</h3><p>MySQL作为一种成熟的关系型数据库管理系统，适用于存储大量持久化且具有复杂关系的数据，其强大的事务处理能力和安全性保障了数据的一致性和完整性。但在大规模并发环境下，尤其是对那些读多写少、访问频次极高的热点数据，直接从MySQL中读取可能会成为系统性能瓶颈。</p><p>Redis则是一种高性能的内存键值数据库，以其极快的速度和灵活的数据结构著称。在淘宝这类大型电商平台中，Redis主要用于缓存频繁访问的数据，例如热门商品信息、用户购物车、会话状态等，以此减轻主数据库的压力，提高响应速度，增强系统的可扩展性和容错性。</p><blockquote><p>对于Redis高性能原理，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484198&idx=1&sn=32b0992f1b7d9862e2c983f9cb2e633f&chksm=c2245351f553da472f19d57c7d7dfa56c58e8ea4a9e814fc2d4a8fadf72afeadae4b0b0bec35#rd" target="_blank" rel="noopener">京东二面：Redis为什么快？我说Redis是纯内存操作的，然后他对我笑了笑。</a><br>对于Redis的使用的业务场景，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484244&idx=1&sn=b1c1f81d63b5334260500fec82bb3f53&chksm=c2245323f553da350a87c63701e89a6556599814c93ca7d85c41424d07778c0ed721c6424c92#rd" target="_blank" rel="noopener">美团一面：项目中使用过Redis吗？我说用Redis做缓存。他对我哦了一声</a></p></blockquote><h3 id="Redis内存管理和数据淘汰机制简介"><a href="#Redis内存管理和数据淘汰机制简介" class="headerlink" title="Redis内存管理和数据淘汰机制简介"></a>Redis内存管理和数据淘汰机制简介</h3><p>Redis的所有数据都存储在内存中，这意味着它的容量相较于磁盘存储更为有限。为了解决内存容量不足的问题，Redis提供了多种数据淘汰策略。其中，与保证热点数据密切相关的是LFU（Least Frequently Used）策略，它能够根据数据对象的访问频次，将访问次数最少（即最不常用）的数据淘汰出内存，以便为新的数据腾出空间。</p><blockquote><p>对于Redis高性能的一方面原因就是Redis高效的管理内存，具体请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484198&idx=1&sn=32b0992f1b7d9862e2c983f9cb2e633f&chksm=c2245351f553da472f19d57c7d7dfa56c58e8ea4a9e814fc2d4a8fadf72afeadae4b0b0bec35#rd" target="_blank" rel="noopener">京东二面：Redis为什么快？我说Redis是纯内存操作的，然后他对我笑了笑。</a></p></blockquote><p>此外，Redis允许用户根据自身需求选择不同的淘汰策略，例如“volatile-lfu”只针对设置了过期时间的key采用LFU算法，“allkeys-lfu”则对所有key都执行LFU淘汰规则。</p><h3 id="热点数据定义及其识别方法"><a href="#热点数据定义及其识别方法" class="headerlink" title="热点数据定义及其识别方法"></a>热点数据定义及其识别方法</h3><p>热点数据是指在一定时间内访问频率极高、对系统性能影响重大的数据集。在电商平台中，这可能表现为热销商品详情、活动页面信息、用户高频查询的搜索关键词等。识别热点数据主要依赖于对业务日志、请求统计和系统性能监控工具的分析，通过收集和分析用户行为数据，发现并量化哪些数据是系统访问的热点，以便有针对性地将它们缓存至Redis中。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>在实际应用中，确保Redis中存储的数据为热点数据，我们可以从以下几个方案考虑实现。</p><h3 id="LFU淘汰策略"><a href="#LFU淘汰策略" class="headerlink" title="LFU淘汰策略"></a>LFU淘汰策略</h3><p>Redis中的LFU（Least Frequently Used）淘汰策略是一种基于访问频率的内存管理机制。当Redis实例的内存使用量达到预先设定的最大内存限制（由<code>maxmemory</code>配置项指定）时，LFU策略会根据数据对象的访问频次，将访问次数最少（即最不常用）的数据淘汰出内存，以便为新的数据腾出空间。</p><p>LFU算法的核心思想是通过跟踪每个键的访问频率来决定哪些键应当优先被淘汰。具体实现上，Redis并非实时精确地计算每个键的访问频率，而是采用了近似的LFU方法，它为每个键维护了一个访问计数器（counter）。每当某个键被访问时，它的计数器就会递增。随着时间推移，Redis会依据这些计数器的值来决定淘汰哪些键。</p><p>在Redis 4.0及其后续版本中，LFU策略可以通过设置<code>maxmemory-policy</code>配置项为<code>allkeys-lfu</code>或<code>volatile-lfu</code>来启用。其中：</p><ul><li><code>allkeys-lfu</code>：适用于所有键，无论它们是否有过期时间，都会基于访问频率淘汰键。</li><li><code>volatile-lfu</code>：仅针对设置了过期时间（TTL）的键，按照访问频率淘汰键。</li></ul><p>Redis实现了自己的LFU算法变体，它使用了一个基于访问计数和老化时间的组合策略来更好地适应实际情况。这意味着不仅考虑访问次数，还会考虑到键的访问频率随时间的变化，防止长期未访问但曾经很热门的键占据大量内存空间而不被淘汰。在实现上，Redis使用了一种称为“频率跳表（frequency sketch）”的数据结构来存储键的访问频率，允许快速查找和更新计数器。为了避免长期未访问但计数器较高的键永久保留，Redis会在一段时间后降低键的访问计数，模拟访问频率随时间衰减的效果。</p><p>在Redis中使用LFU淘汰策略，在配置文件<code>redis.conf</code>中找到<code>maxmemory-policy</code>选项，将其设置为LFU相关策略之一：</p><pre class="line-numbers language-Ini"><code class="language-Ini">maxmemory-policy allkeys-lfu # 对所有键启用LFU淘汰策略 # 或者 maxmemory-policy volatile-lfu # 对有过期时间的键启用LFU淘汰策略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>确保你也设置了Redis的最大内存使用量（<code>maxmemory</code>），只有当内存到达这个上限时，才会触发淘汰策略：</p><pre class="line-numbers language-Ini"><code class="language-Ini">maxmemory <size_in_bytes> # 指定Redis可以使用的最大内存大小<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>LFU策略旨在尽可能让那些近期最不活跃的数据优先被淘汰，以此保持缓存中的数据相对活跃度更高，提高缓存命中率，从而提升系统的整体性能。（这也是我们面试中需要回答出来的答案）</p><h3 id="LRU淘汰策略"><a href="#LRU淘汰策略" class="headerlink" title="LRU淘汰策略"></a>LRU淘汰策略</h3><p>Redis中的LRU（Least Recently Used）淘汰策略是一种用于在内存不足时自动删除最近最少使用的数据以回收内存空间的方法。尽管Redis没有完全精确地实现LRU算法（因为这在O(1)时间内实现成本较高），但Redis确实提供了一种近似LRU的行为。</p><p>当我们配置了最大内存限制，如果内存超出这个限制时，Redis会选择性地删除一些键值对来腾出空间。Redis提供了几种不同的淘汰策略，其中之一就是<code>volatile-lru</code>和<code>allkeys-lru</code>，这两种都试图模拟LRU行为。</p><ul><li><strong>volatile-lru</strong>：仅针对设置了过期时间（TTL）的键，按照最近最少使用的原则来删除键。</li><li><strong>allkeys-lru</strong>：不论键是否设置过期时间，都会根据最近最少使用的原则来删除键。</li></ul><p>Redis实现LRU的方式并不是真正意义上的双向链表加引用计数这样的完整LRU结构，因为每个键值对的插入、删除和访问都需要维持这样的数据结构会带来额外的开销。所以Redis实现LRU会采取以下方式进行：</p><ol><li>Redis内部为每个键值对维护了一个“空转时间”（idle time）的字段，它是在Redis实例启动后最后一次被访问或修改的时间戳。</li><li>当内存达到阈值并触发淘汰时，Redis不会遍历整个键空间找出绝对意义上的最近最少使用的键，而是随机抽取一批键检查它们的空转时间，然后删除这批键中最久未被访问的那个。<br>Redis在大多数情况下能较好地模拟LRU效果，有助于保持活跃数据在内存中，减少因频繁换入换出带来的性能损失。</li></ol><p>内存淘汰策略通常是在Redis服务器端的配置文件（如<code>redis.conf</code>）中设置，而不是在应用中配置。你需要在Redis服务器端的配置中设置<code>maxmemory-policy</code>参数为<code>allkeys-lru</code>。（同LFU策略）</p><p>使用Redis的LRU淘汰策略实现热点数据的方式，简单易行，能较好地应对大部分情况下的热点数据问题。但是若访问模式复杂或数据访问分布不均匀，单纯的LRU策略可能不够精准，不能确保绝对的热点数据留存。</p><h3 id="结合访问频率设定过期时间"><a href="#结合访问频率设定过期时间" class="headerlink" title="结合访问频率设定过期时间"></a>结合访问频率设定过期时间</h3><p>在实际应用中，除了依赖Redis的淘汰策略外，还可以结合业务逻辑，根据数据的访问频率动态设置Key的过期时间。例如，当某个Key被频繁访问时，延长其在Redis中的有效期，反之则缩短。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateKeyTTL</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">int</span> ttlInSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> ttlInSeconds<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 示例调用，当检测到某个数据访问增多时，增加其缓存过期时间</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">markAsHotSpot</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">updateKeyTTL</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将热点数据缓存时间延长至1小时</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式灵活性强，可根据实际访问情况动态调整缓存策略。但是需要在应用程序中进行较多定制开发，以捕捉并响应数据访问的变化。</p><h3 id="基于时间窗口的缓存淘汰策略"><a href="#基于时间窗口的缓存淘汰策略" class="headerlink" title="基于时间窗口的缓存淘汰策略"></a>基于时间窗口的缓存淘汰策略</h3><p>在给定的时间窗口（如过去1小时、一天等）内，对每个数据项的访问情况进行实时跟踪和记录，可以使用计数器或其他数据结构统计每条数据的访问次数。到达时间窗口边界时，计算每个数据项在该窗口内的访问频率，这可以是绝对访问次数、相对访问速率或者其他反映访问热度的指标。根据预先设定的阈值，将访问次数超过阈值的数据项加入Redis缓存，或者将其缓存时间延长以确保其能在缓存中停留更久。而对于访问次数低于阈值的数据项，要么从缓存中移除，要么缩短其缓存有效期，使其更容易被后续淘汰策略处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeWindowCacheEvictionService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> AtomicInteger<span class="token operator">></span> accessCounts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 时间窗口长度（例如，1小时）</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> TIME_WINDOW_MILLIS <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> TIME_WINDOW_MILLIS<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">evictBasedOnFrequency</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        accessCounts<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> accessCount <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>accessCount <span class="token operator">></span> THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 假设THRESHOLD是访问次数阈值</span>                <span class="token comment" spellcheck="true">// 将数据存入或更新到Redis缓存，并设置较长的过期时间</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDataFromDB</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CACHE_EXPIRATION_TIME<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 访问次数低，从缓存中移除或缩短过期时间</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 清零访问计数器，准备下一个时间窗口</span>        accessCounts<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trackDataAccess</span><span class="token punctuation">(</span>String dataId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accessCounts<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>dataId<span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于@Scheduled是Springboot中实现定时任务的一种方式，对于其他几种方式，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484100&idx=1&sn=17f9a506495eb273baa47d2d2efc16d1&chksm=c22452b3f553dba504ce7e13393184898696e6709a09427f741134107285c8f1550ecf03eddc#rd" target="_blank" rel="noopener">玩转SpringBoot：SpringBoot的几种定时任务实现方式</a></p></blockquote><p>通过这种方法，系统能够基于实际访问情况动态调整缓存内容，确保Redis缓存中存放的总是具有一定热度的数据。当然，这种方法需要与实际业务场景紧密结合，并结合其他缓存策略共同作用，以实现最优效果。同时，需要注意此种策略可能带来的额外计算和存储成本。</p><h3 id="手动缓存控制"><a href="#手动缓存控制" class="headerlink" title="手动缓存控制"></a>手动缓存控制</h3><p>针对已识别的热点数据，可以通过监听数据库变更或业务逻辑触发器主动将数据更新到Redis中。例如，当商品销量剧增变为热点商品时，立即更新Redis缓存。</p><p>这种方式可以确保热点数据及时更新，提高了缓存命中率。</p><h3 id="利用数据结构优化"><a href="#利用数据结构优化" class="headerlink" title="利用数据结构优化"></a>利用数据结构优化</h3><p>使用Sorted Set等数据结构可以进一步精细化热点数据管理。例如，记录每个商品最近的访问的活跃时间，并据此决定缓存哪些商品数据。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 商品访问活跃时更新其在Redis中的排序</span>String goodsActivityKey <span class="token operator">=</span> <span class="token string">"goods_activity"</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>goodsActivityKey<span class="token punctuation">,</span> sku<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定时清除较早的非热点商品数据</span><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 0 3 * * ?"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 每天凌晨3点清理前一天的数据</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanInactiveUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> yesterdayTimestamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeRangeByScore</span><span class="token punctuation">(</span>goodsActivityKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> yesterdayTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式能够充分利用Redis内建的数据结构优势，实现复杂的数据淘汰逻辑。</p><h2 id="实际业务中实践方案"><a href="#实际业务中实践方案" class="headerlink" title="实际业务中实践方案"></a>实际业务中实践方案</h2><p>在例如淘宝这样庞大的电商生态系统中，面对MySQL中海量的业务数据和Redis有限的内存空间，我们采用了多元化的策略以确保缓存的20万数据是真正的热点数据。</p><h3 id="LFU策略的运用"><a href="#LFU策略的运用" class="headerlink" title="LFU策略的运用"></a>LFU策略的运用</h3><p>自Redis 4.0起，我们可以通过配置Redis淘汰策略为近似的LFU（<code>volatile-lfu</code> 或 <code>allkeys-lfu</code>），使得Redis能够自动根据数据访问频率进行淘汰决策。LFU策略基于数据的访问次数，使得访问越频繁的数据越不容易被淘汰，从而更好地保持了热点数据在缓存中的存在。</p><h3 id="访问频率动态调整"><a href="#访问频率动态调整" class="headerlink" title="访问频率动态调整"></a>访问频率动态调整</h3><p>除了依赖Redis内置的LFU淘汰策略，我们还可以实现应用层面的访问频率追踪和响应式缓存管理。例如，每当商品被用户访问时，系统会更新该商品在Redis中的访问次数，同时根据访问频率动态调整缓存过期时间，确保访问频率高的商品在缓存中的生存期得到延长。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Product<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateProductViewCount</span><span class="token punctuation">(</span>String productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 更新产品访问次数</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">"product:view_count:"</span> <span class="token operator">+</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 根据访问次数调整缓存过期时间</span>        Long viewCount <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"product:view_count:"</span> <span class="token operator">+</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>viewCount <span class="token operator">></span> THRESHOLD_VIEW_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token string">"product:info:"</span> <span class="token operator">+</span> productId<span class="token punctuation">,</span> LONGER_CACHE_EXPIRATION<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据结构优化"><a href="#数据结构优化" class="headerlink" title="数据结构优化"></a>数据结构优化</h3><p>我们还可以利用Redis丰富的数据结构，如有序集合（Sorted Sets）和哈希（Hashes），来实现商品热度排行、用户行为分析等功能。例如，通过Sorted Set存储商品的浏览量，自动按照浏览量高低进行排序，并淘汰访问量低的商品缓存。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 更新商品浏览量并同步到Redis有序集合</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateProductRanking</span><span class="token punctuation">(</span>String productId<span class="token punctuation">,</span> <span class="token keyword">long</span> newViewCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"product_ranking"</span><span class="token punctuation">,</span> productId<span class="token punctuation">,</span> newViewCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自动淘汰浏览量低的商品缓存</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeRange</span><span class="token punctuation">(</span><span class="token string">"product_ranking"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>TOP_RANKED_PRODUCT_COUNT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文详细阐述了在电商平台例如淘宝及其他类似场景下，如何结合LFU策略与访问频率调整，优化Redis中20万热点数据的管理。通过配置Redis近似的LFU淘汰策略，结合应用层面对访问频率的实时追踪与响应式调整，以及利用多样化的Redis数据结构如有序集合和哈希表，成功实现了热点数据的精确缓存与淘汰。</p><p>通过电商平台的一些实际业务实践证明，这种综合策略可以有效提升缓存命中率，降低数据库访问压力，确保缓存资源始终服务于访问最频繁的数据。未来随着数据挖掘与分析技术的进步，以及Redis或其他内存数据库功能的拓展，预计将进一步细化和完善热点数据的识别与管理机制。例如，探索更具前瞻性的预测性缓存策略，或是结合机器学习模型对用户行为进行深度分析，以更精准地预判和存储未来的热点数据。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java22重磅发布！！！！卷不动了，真的卷不动了。。。。</title>
      <link href="/article/java22.html"/>
      <url>/article/java22.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>就在3月19日，Java22重磅发布。Java22新增了12项增强功能，其中包括七个预览特性和一个孵化器特性，这些功能都显著到足以引起JDK增强提案（JEPs）的关注。它们涵盖了Java语言、其API、性能以及JDK中包含的工具的改进。</p><p>真的卷不动了，，前段时间才将项目升级到Java17。。。。</p><p>接下来我们看看具体的新特性介绍。。。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321151838.png" alt="image.png"></p><h3 id="Java语言上的改进"><a href="#Java语言上的改进" class="headerlink" title="Java语言上的改进"></a>Java语言上的改进</h3><h4 id="Unnamed-Variables-amp-Patterns-JEP-456"><a href="#Unnamed-Variables-amp-Patterns-JEP-456" class="headerlink" title="Unnamed Variables &amp; Patterns - JEP 456"></a>Unnamed Variables &amp; Patterns - JEP 456</h4><p>匿名变量和模式。当需要但未使用变量声明或嵌套模式时，提高了可读性。这两者都用下划线字符表示。</p><p><strong>优化：</strong></p><ol><li><strong>捕获开发人员意图，即给定的绑定或Lambda参数未使用，并强制执行该属性以澄清程序并减少错误的机会。</strong></li></ol><p>比如我们可以在循环中这样使用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span>Iterable<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Order _ <span class="token operator">:</span> orders<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Unnamed variable</span>        total<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> total<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">sideEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> i <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者<code>while</code>循环：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    var x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var _ <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Unnamed variable</span>    var _ <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Unnamed variable</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>通过识别必须声明但未使用的变量（例如，在捕获子句中）来提高所有代码的可维护性。</strong> </li></ol><pre class="line-numbers language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> i <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Unnamed variable</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bad number: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个<code>catch</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Unnamed variable</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Unnamed variable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者这样使用<code>try...resource</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>var _ <span class="token operator">=</span> ScopedContext<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Unnamed variable</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> no use of acquired resource <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在lamba中我们可以这样使用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">,</span>                                   _ <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"NODATA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Unnamed variable</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><strong>允许在单个 case 标签中出现多个模式，如果它们都没有声明任何模式变量。</strong></li></ol><p>例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>ball<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> RedBall _   <span class="token operator">-</span><span class="token operator">></span> <span class="token function">process</span><span class="token punctuation">(</span>ball<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unnamed pattern variable</span>    <span class="token keyword">case</span> BlueBall _  <span class="token operator">-</span><span class="token operator">></span> <span class="token function">process</span><span class="token punctuation">(</span>ball<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unnamed pattern variable</span>    <span class="token keyword">case</span> GreenBall _ <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Unnamed pattern variable</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">switch</span> <span class="token punctuation">(</span>box<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token function">Box</span><span class="token punctuation">(</span>RedBall _<span class="token punctuation">)</span>   <span class="token operator">-</span><span class="token operator">></span> <span class="token function">processBox</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Unnamed pattern variable</span>    <span class="token keyword">case</span> <span class="token function">Box</span><span class="token punctuation">(</span>BlueBall _<span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token function">processBox</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Unnamed pattern variable</span>    <span class="token keyword">case</span> <span class="token function">Box</span><span class="token punctuation">(</span>GreenBall _<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unnamed pattern variable</span>    <span class="token keyword">case</span> <span class="token function">Box</span><span class="token punctuation">(</span>var _<span class="token punctuation">)</span>       <span class="token operator">-</span><span class="token operator">></span> <span class="token function">pickAnotherBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Unnamed pattern variable</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种改进允许我们省略名称，未命名的模式变量使得基于类型模式的运行时数据探索在switch语句块以及使用instanceof运算符时，视觉上更加清晰明了。</p><ol start="4"><li><strong>通过省略不必要的嵌套类型模式来改善记录模式的可读性。</strong></li></ol><h4 id="Statements-before-super-JEP-447"><a href="#Statements-before-super-JEP-447" class="headerlink" title="Statements before super - JEP 447"></a>Statements before super - JEP 447</h4><p>构造器中的前置语句。在构造函数中，允许在显式构造函数调用之前出现不引用正在创建的实例的语句。</p><p><strong>优化：</strong></p><ol><li><strong>为开发人员提供更大的自由度来表达构造函数的行为，从而使当前必须因子化为辅助静态方法、辅助中间构造函数或构造函数参数的逻辑能够更自然地放置。</strong></li></ol><p>有时我们需要验证传递给超类构造函数的参数。虽然我们可以在事后进行参数验证，但这意味着可能会进行不必要的操作。例如如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PositiveBigInteger</span> <span class="token keyword">extends</span> <span class="token class-name">BigInteger</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">PositiveBigInteger</span><span class="token punctuation">(</span><span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// Potentially unnecessary work</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"non-positive value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java22中的做法是声明一个能够快速失败的构造函数，即在调用超类构造函数之前先验证其参数。目前我们只能采用内联方式实现这一点，即借助于辅助静态方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PositiveBigInteger</span> <span class="token keyword">extends</span> <span class="token class-name">BigInteger</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">PositiveBigInteger</span><span class="token punctuation">(</span><span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token function">verifyPositive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">verifyPositive</span><span class="token punctuation">(</span><span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"non-positive value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以将验证逻辑直接包含在构造函数内部，这段代码将会更具可读性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PositiveBigInteger</span> <span class="token keyword">extends</span> <span class="token class-name">BigInteger</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">PositiveBigInteger</span><span class="token punctuation">(</span><span class="token keyword">long</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"non-positive value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>保留了构造函数在类实例化期间按自上而下顺序运行的现有保证，确保子类构造函数中的代码不能干扰超类实例化。</strong></li></ol><p>为了给超类构造函数提供参数，我们必须执行另外的计算，再次不得不借助于辅助方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Sub</span><span class="token punctuation">(</span>Certificate certificate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token function">prepareByteArray</span><span class="token punctuation">(</span>certificate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 辅助方法</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">prepareByteArray</span><span class="token punctuation">(</span>Certificate certificate<span class="token punctuation">)</span> <span class="token punctuation">{</span>         var publicKey <span class="token operator">=</span> certificate<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>publicKey <span class="token operator">==</span> null<span class="token punctuation">)</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"null certificate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> RSAKey rsaKey <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">case</span> DSAPublicKey dsaKey <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">default</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>超类构造函数接受一个字节数组作为参数，而子类构造函数接受一个<code>Certificate</code>对象作为参数。为了满足超类构造函数调用必须为子类构造函数中的第一条语句这一限制，我们声明了一个辅助方法<code>prepareByteArray</code>来为此调用准备参数。</p><p>如果能够将参数准备代码直接嵌入到构造函数中，这段代码会更具可读性。在Java22中我们可以这么做：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Sub</span><span class="token punctuation">(</span>Certificate certificate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        var publicKey <span class="token operator">=</span> certificate<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>publicKey <span class="token operator">==</span> null<span class="token punctuation">)</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"null证书"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> byteArray <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> RSAKey rsaKey <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// RSA密钥转换为字节数组</span>            <span class="token keyword">case</span> DSAPublicKey dsaKey <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// DSA公钥转换为字节数组</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">default</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 其他情况处理逻辑</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>不需要对Java虚拟机进行任何更改。这种 Java 语言特性仅依赖于 JVM 当前验证和执行构造函数中显式构造函数调用之前出现的代码的能力。</strong></li></ol><h4 id="String-Templates-JEP-459"><a href="#String-Templates-JEP-459" class="headerlink" title="String Templates - JEP 459:"></a>String Templates - JEP 459:</h4><p>字符串模板。字符串模板通过将文本文字与嵌入表达式和模板处理器相结合，以产生专门的结果，来补充 Java 的现有字符串文字和文本块。</p><p><strong>优化:</strong></p><ol><li><strong>通过简化在运行时计算值的字符串的表达方式，简化了编写 Java 程序。</strong></li><li><strong>通过使文本和表达式混合的表达更易于阅读，无论文本是否适合单个源行（如字符串文字）或跨越多个源行（如文本块）。</strong></li><li><strong>通过支持模板及其嵌入表达式的验证和转换，改进了由用户提供的值组成字符串并将其传递给其他系统（例如，构建数据库查询）的 Java 程序的安全性。</strong></li><li>**保持了灵活性，允许Java库定义在字符串模板中使用的格式化语法。</li><li><strong>简化了接受非Java语言（例如<code>SQL</code>、<code>XML</code> 和 <code>JSON</code>）编写的字符串的 API 的使用。</strong></li><li><strong>允许创建从文本文字和嵌入表达式计算出的非字符串值，而无需通过中间字符串表示转换。</strong></li></ol><p>字符串的模板可以直接在代码中表达，就像注释字符串一样，Java 运行时会自动将特定于模板的规则应用于字符串。从模板编写字符串将使开发人员不必费力地转义每个嵌入表达式、调用<code>validate()</code>整个字符串或使用<code>java.util.ResourceBundle</code>来查找本地化字符串。</p><p>比如我们可以构造一个表示JSON文档的字符串，然后将其提供给JSON解析器：</p><pre class="line-numbers language-java"><code class="language-java">String name    <span class="token operator">=</span> <span class="token string">"Joan Smith"</span><span class="token punctuation">;</span>String phone   <span class="token operator">=</span> <span class="token string">"555-123-4567"</span><span class="token punctuation">;</span>String address <span class="token operator">=</span> <span class="token string">"1 Maple Drive, Anytown"</span><span class="token punctuation">;</span>String json <span class="token operator">=</span> <span class="token string">""</span>"    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token operator">:</span>    <span class="token string">"%s"</span><span class="token punctuation">,</span>        <span class="token string">"phone"</span><span class="token operator">:</span>   <span class="token string">"%s"</span><span class="token punctuation">,</span>        <span class="token string">"address"</span><span class="token operator">:</span> <span class="token string">"%s"</span>    <span class="token punctuation">}</span>    <span class="token string">""</span>"<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>JSONObject doc <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串的 JSON 结构可以直接在代码中表达，Java运行时会<code>JSONObject</code>自动将字符串转换为。无需通过解析器进行手动绕行。<br>我们使用基于模板的字符串组合机制，我们就可以提高几乎每个Jav 程序的可读性和可靠性。这种功能将提供插值的好处，就像在其他编程语言中看到的那样，但不太容易引入安全漏洞。它还可以减少使用将复杂输入作为字符串的库的繁琐。</p><p>我们还可以使用模板<code>STR</code>处理器，<code>STR</code>是 Java 平台中定义的模板处理器。它通过将模板中的每个嵌入表达式替换为该表达式的（字符串化）值来执行字符串插值。<code>STR</code>是<code>public</code> <code>static</code> <code>final</code>自动导入到每个Java源文件中的字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Embedded expressions can be strings</span>String firstName <span class="token operator">=</span> <span class="token string">"Bill"</span><span class="token punctuation">;</span>String lastName  <span class="token operator">=</span> <span class="token string">"Duck"</span><span class="token punctuation">;</span>String fullName  <span class="token operator">=</span> STR<span class="token punctuation">.</span><span class="token string">"\{firstName} \{lastName}"</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token string">"Bill Duck"</span>String sortName  <span class="token operator">=</span> STR<span class="token punctuation">.</span><span class="token string">"\{lastName}, \{firstName}"</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token string">"Duck, Bill"</span><span class="token comment" spellcheck="true">// Embedded expressions can perform arithmetic</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> STR<span class="token punctuation">.</span><span class="token string">"\{x} + \{y} = \{x + y}"</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token string">"10 + 20 = 30"</span><span class="token comment" spellcheck="true">// Embedded expressions can invoke methods and access fields</span>String s <span class="token operator">=</span> STR<span class="token punctuation">.</span><span class="token string">"You have a \{getOfferType()} waiting for you!"</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token string">"You have a gift waiting for you!"</span>String t <span class="token operator">=</span> STR<span class="token punctuation">.</span><span class="token string">"Access at \{req.date} \{req.time} from \{req.ipAddress}"</span><span class="token punctuation">;</span><span class="token operator">|</span> <span class="token string">"Access at 2022-03-25 15:34 from 8.8.8.8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板表达式的模板可以跨越多行源代码，使用类似于文本块的语法。</p><pre class="line-numbers language-java"><code class="language-java">String title <span class="token operator">=</span> <span class="token string">"My Web Page"</span><span class="token punctuation">;</span>String text  <span class="token operator">=</span> <span class="token string">"Hello, world"</span><span class="token punctuation">;</span>String html <span class="token operator">=</span> STR<span class="token punctuation">.</span><span class="token string">""</span>"        <span class="token operator">&lt;</span>html<span class="token operator">></span>          <span class="token operator">&lt;</span>head<span class="token operator">></span>            <span class="token operator">&lt;</span>title<span class="token operator">></span>\<span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>          <span class="token operator">&lt;</span>body<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>\<span class="token punctuation">{</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>        <span class="token string">""</span>"<span class="token punctuation">;</span><span class="token operator">|</span> <span class="token string">""</span>"<span class="token operator">|</span> <span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">|</span>   <span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">|</span>     <span class="token operator">&lt;</span>title<span class="token operator">></span>My Web Page<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">|</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">|</span>   <span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">|</span>     <span class="token operator">&lt;</span>p<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">|</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">|</span> <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span class="token operator">|</span> <span class="token string">""</span>"String name    <span class="token operator">=</span> <span class="token string">"Joan Smith"</span><span class="token punctuation">;</span>String phone   <span class="token operator">=</span> <span class="token string">"555-123-4567"</span><span class="token punctuation">;</span>String address <span class="token operator">=</span> <span class="token string">"1 Maple Drive, Anytown"</span><span class="token punctuation">;</span>String json <span class="token operator">=</span> STR<span class="token punctuation">.</span><span class="token string">""</span>"    <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token operator">:</span>    <span class="token string">"\{name}"</span><span class="token punctuation">,</span>        <span class="token string">"phone"</span><span class="token operator">:</span>   <span class="token string">"\{phone}"</span><span class="token punctuation">,</span>        <span class="token string">"address"</span><span class="token operator">:</span> <span class="token string">"\{address}"</span>    <span class="token punctuation">}</span>    <span class="token string">""</span>"<span class="token punctuation">;</span><span class="token operator">|</span> <span class="token string">""</span>"<span class="token operator">|</span> <span class="token punctuation">{</span><span class="token operator">|</span>     <span class="token string">"name"</span><span class="token operator">:</span>    <span class="token string">"Joan Smith"</span><span class="token punctuation">,</span><span class="token operator">|</span>     <span class="token string">"phone"</span><span class="token operator">:</span>   <span class="token string">"555-123-4567"</span><span class="token punctuation">,</span><span class="token operator">|</span>     <span class="token string">"address"</span><span class="token operator">:</span> <span class="token string">"1 Maple Drive, Anytown"</span><span class="token operator">|</span> <span class="token punctuation">}</span><span class="token operator">|</span> <span class="token string">""</span>"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Implicitly-Declared-Classes-and-Instance-Main-Methods-JEP-463"><a href="#Implicitly-Declared-Classes-and-Instance-Main-Methods-JEP-463" class="headerlink" title="Implicitly Declared Classes and Instance Main Methods - JEP 463:"></a>Implicitly Declared Classes and Instance Main Methods - JEP 463:</h4><p>隐式声明的类和实例主方法。这项Java增强引入了隐式声明的类以及实例主方法的功能，允许开发人员在不明确显式声明类的情况下编写类结构，并能够在类实例上直接定义和执行类似于传统<code>main</code>方法的入口点。这一特性旨在简化编程模型，特别是对于初学者和小型脚本场景，使得无需了解大型程序设计所需的完整类声明结构也能快速编写可运行的Java代码。</p><p><strong>优化：</strong><br>总体来说可以快速学习Java。</p><ol><li>提供了平稳的入门 Java 编程的途径，因此教Java的可以逐渐介绍概念。 </li><li>帮助初学者以简洁的方式编写基本程序，并随着他们的技能增长而逐渐增加他们的代码。 </li><li>减少了编写简单程序（如脚本和命令行实用程序）的仪式感。 </li><li>不会引入单独的 Java 语言初学者方言。 </li><li>不会引入单独的初学者工具链；初学者的生程序应该使用编译和运行任何Java程序的相同工具。</li></ol><p>我们以入门Java的第一行代码<code>Hello World</code>为例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java22还可以隐式声明一个类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还可以这样：</p><pre class="line-numbers language-java"><code class="language-java">String <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，使用字段，如：</p><pre class="line-numbers language-java"><code class="language-java">String greeting <span class="token operator">=</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java-API库上的改进"><a href="#Java-API库上的改进" class="headerlink" title="Java API库上的改进"></a>Java API库上的改进</h3><h4 id="Foreign-Function-amp-Memory-API-JEP-454"><a href="#Foreign-Function-amp-Memory-API-JEP-454" class="headerlink" title="Foreign Function &amp; Memory API - JEP 454:"></a>Foreign Function &amp; Memory API - JEP 454:</h4><p>外部函数和内存API。允许Java程序与Java运行时之外的代码和数据进行交互。通过高效地调用外部函数（即JVM外部的代码）和安全地访问外部内存（即JVM不管理的内存），该API使Java程序能够调用本地库并处理本地数据，而无需JNI的脆弱性和危险性。</p><p><strong>优化</strong></p><ol><li>生产率 —— 用简洁、可读和纯 Java 的 API 替换原生方法和 Java 本机接口（JNI）的脆弱机制。 </li><li>性能 —— 提供与 JNI 和 sun.misc.Unsafe 相当甚至更好的外部函数和内存访问开销。 </li><li>广泛的平台支持 —— 在 JVM 运行的每个平台上启用本地库的发现和调用。 </li><li>统一性 —— 提供对结构化和非结构化数据的操作方式，无限大小，多种内存类型（例如，本机内存、持久内存和托管堆内存）。 </li><li>健全性 —— 即使在多个线程之间分配和释放内存时，也保证不会出现使用后释放的错误。 </li><li>完整性 —— 允许程序执行与本地代码和数据有关的不安全操作，但默认情况下向用户警告此类操作。</li></ol><p>Java22提供外部函数和内存API（FFM API）定义类和接口，以便开发者使用他们可以</p><ul><li>控制外部内存<br>  （<code>MemorySegment</code>、<code>Arena</code> 和 <code>SegmentAllocator</code>）的分配和释放，</li><li>操作和访问结构化的外部存储器<br> <code>MemoryLayout</code>和<code>VarHandle</code></li><li>调用外部函数<br>（<code>Linker</code>、<code>SymbolLookup</code>、<code>FunctionDescriptor</code> 和 <code>MethodHandle</code>）。</li></ul><p>FFM API在<code>java.lang.foreign</code>包中。</p><h4 id="Class-File-API-JEP-457"><a href="#Class-File-API-JEP-457" class="headerlink" title="Class-File API - JEP 457:"></a>Class-File API - JEP 457:</h4><p>类文件API。提供了用于解析、生成和转换 Java 类文件的标准 API。</p><p><strong>优化：</strong></p><ol><li>提供用于处理类文件的API，该类文件跟踪Java虚拟机规范定义的文件格式。class</li><li>使JDK组件能够迁移到标准 API，并最终迁移到标准API删除第三方ASM库的JDK内部副本。</li></ol><p>Java22为 Class-File API 采用了以下设计目标和原则。</p><ul><li><p>类文件实体由不可变对象表示<br>所有类文件 实体，例如字段、方法、属性、字节码指令、注释等， 由不可变对象表示。这有利于在以下情况下进行可靠共享 正在转换类文件。</p></li><li><p>树结构表示<br>类文件具有树结构。一个类 有一些元数据（名称、超类等）和可变数量的字段， 方法和属性。字段和方法本身具有元数据，并进一步 包含属性，包括属性。属性 further 包含指令、异常处理程序等。用于 导航和生成类文件应反映此结构。CodeCode</p></li><li><p>用户驱动的导航<br>我们通过类文件树的路径是 由用户选择驱动。如果用户只关心字段上的注释，那么 我们只需要解析结构内部的注释属性;我们不应该研究任何一个类 属性或方法的主体，或字段的其他属性。用户 应该能够处理复合实体，例如方法，无论是作为单个实体 单位或作为其组成部分的流，根据需要。field_info</p></li><li><p>懒惰<br>用户驱动的导航可显著提高效率，例如 不解析超过满足用户要求的类文件 需要。如果用户不打算深入研究方法的内容，那么我们 不需要解析比需要更多的结构 下一个类文件元素开始的位置。我们可以懒洋洋地膨胀和缓存， 用户请求时的完整表示形式。method_info</p></li><li><p>统一的流式处理和具体化视图<br>与 ASM 一样，我们希望同时支持两者 类文件的流式处理和实例化视图。流视图是 适用于大多数用例，而物化视图更 一般，因为它支持随机访问。我们可以提供一个物化的观点 通过懒惰比 ASM 便宜，这是由不变性实现的。我们可以， 此外，对齐流式视图和实例化视图，以便它们使用通用的 词汇表，可以协调使用，因为每个用例都很方便。</p></li><li><p>紧急转换<br>如果类文件解析和生成 API 是 充分对齐，那么转换可以是一个紧急属性，可以 不需要自己的特殊模式或重要的新 API 图面。（ASM实现 这是通过为读者和作者使用通用的访客结构来实现的。如果类， 字段、方法和代码体是可读和可写的，作为 元素，则可以将转换视为对此的平面映射操作 流，由 lambda 定义。</p></li><li><p>细节隐藏<br>类文件的许多部分（常量池、引导方法 表、堆栈图等）派生自类文件的其他部分。它 要求用户直接构建这些是没有意义的;这是额外的工作 对于用户来说，并增加了出错的机会。API 将自动 生成与其他实体紧密耦合的实体 添加到类文件中的字段、方法和指令。</p></li></ul><p><code>Class-File API</code> 在 <code>java.lang.classfile</code> 包和子包中。 它定义了三个主要抽象：</p><ul><li><p>元素是对类文件某部分的一种不可变描述，可能是一个指令、属性、字段、方法，甚至是整个类文件。有些元素，如方法，是复合元素；除了本身是元素外，它们还包含自身的元素，可以作为一个整体处理，也可以进一步分解。</p></li><li><p>每种类型的复合元素都有一个对应的构建器，该构建器拥有特定的构建方法（例如，ClassBuilder::withMethod），并且也是相应元素类型的消费者。</p></li><li><p>最后，变换代表了一个函数，它接收一个元素和一个构建器，并调解如何（如果有的话）将该元素转换为其他元素。</p></li></ul><h4 id="Stream-Gatherers-JEP-461"><a href="#Stream-Gatherers-JEP-461" class="headerlink" title="Stream Gatherers - JEP 461:"></a>Stream Gatherers - JEP 461:</h4><p>流收集器。增强了 Stream API，以支持自定义中间操作。这将允许流管道以不易通过现有内置中间操作实现的方式转换数据。</p><p><strong>优化：</strong></p><ul><li>使流管道更加灵活和富有表现力。</li><li>尽可能允许自定义中间操作来操作无限大小的流。</li></ul><p>流(Stream)::gather(Gatherer) 是一种新的中间流操作，通过应用用户自定义实体——收集器(Gatherer)来处理流中的元素。利用gather操作，我们可以构建高效且适用于并行处理的流，实现几乎所有的中间操作。Stream::gather(Gatherer) 在中间操作中的作用类似于Stream::collect(Collector)在终止操作中的作用。</p><p>Gatherer用于表示对流中元素的转换，它是java.util.stream.Gatherer接口的一个实例。Gatherer可以以一对一、一对多、多对一或多对多的方式转换元素。它可以跟踪已处理过的元素以影响后续元素的转换，支持短路操作以将无限流转换为有限流，并能启用并行执行。例如，一个Gatherer可以从输入流中按条件转换一个输入元素为一个输出元素，直到某一条件变为真，此时开始将一个输入元素转换为两个输出元素。</p><p>Gatherer由四个协同工作的函数定义：</p><ol><li><p>可选初始化函数提供了在处理流元素过程中维持私有状态的对象。例如，Gatherer可以存储当前元素，以便下次应用时比较新元素和前一个元素，并仅输出两者中较大的那个。实际上，这种Gatherer将两个输入元素转换为一个输出元素。</p></li><li><p>整合函数整合来自输入流的新元素，可能检查私有状态对象，并可能向输出流发出元素。它还可以在到达输入流末尾之前提前终止处理；例如，一个搜索整数流中最大值的Gatherer在检测到Integer.MAX_VALUE时可以终止处理。</p></li><li><p>可选组合函数可用于在输入流标记为并行时并行评估Gatherer。若Gatherer不支持并行，则仍可作为并行流管道的一部分，但在评估时将以顺序方式进行。这对于某些本质上有序因而无法并行化的操作场景非常有用。</p></li><li><p>可选完成函数在没有更多输入元素要消费时被调用。该函数可以检查私有状态对象，并可能发出额外的输出元素。例如，在输入元素中搜索特定元素的Gatherer在其完成器被调用时，若未能找到目标元素，可以通过抛出异常等方式报告失败。</p></li></ol><p>当调用Stream::gather时，执行以下等效步骤：</p><ol><li><p>创建一个Downstream对象，当接收到Gatherer输出类型的元素时，将其传递到管道中的下一阶段。</p></li><li><p>通过调用其initializer的get()方法获取Gatherer的私有状态对象。</p></li><li><p>通过调用其integrator()方法获取Gatherer的整合器。</p></li><li><p>当存在更多输入元素时，调用整合器的integrate(…)方法，传入状态对象、下一个元素和下游对象。若该方法返回false，则终止处理。</p></li><li><p>获取Gatherer的完成器并使用状态对象和下游对象对其调用。</p></li></ol><p>现有Stream接口中声明的所有中间操作都可以通过调用带有实现该操作的Gatherer的gather方法来实现。例如，对于一个T类型元素的流，Stream::map通过应用一个函数将每个T元素转换为U元素并将其向下传递；这实质上就是一个无状态的一对一Gatherer。另一个例子是Stream::filter，它采用一个谓词决定输入元素是否应向下传递；这只是一个无状态的一对多Gatherer。事实上，从概念上讲，每一个流管道都可以等同于：</p><pre class="line-numbers language-java"><code class="language-java">source<span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Structured-Concurrency-JEP-462"><a href="#Structured-Concurrency-JEP-462" class="headerlink" title="Structured Concurrency - JEP 462:"></a>Structured Concurrency - JEP 462:</h4><p>结构化并发。简化了并发编程。结构化并发将在不同线程中运行的相关任务组视为单个工作单元，从而简化了错误处理和取消，提高了可靠性并增强了可观察性。</p><p><strong>优化：</strong></p><ol><li>促进一种并发编程风格，能够消除由于取消和关闭产生的常见风险，例如线程泄露和取消延迟。</li><li>提升并发代码的可观测性。</li></ol><p>结构化并发API的主要类是<code>java.util.concurrent</code>包中的<code>StructuredTaskScope</code>类。此类允许开发人员将任务结构化为一组并发子任务，并将它们作为一个整体进行协调管理。子任务通过分别创建新线程（fork）并在之后作为一个整体等待它们完成（join）和可能的情况下作为一个整体取消它们。子任务的成功结果或异常将被父任务聚合并处理。<code>StructuredTaskScope</code>确保了子任务的生命周期被限定在一个清晰的词法作用域内，在这个作用域内，任务与其子任务的所有交互，包括分叉（<code>fork</code>）、同步（<code>join</code>）、取消（<code>cancellation</code>）、错误处理和结果合成都在此发生。</p><p>使用StructuredTaskScopes实例：</p><pre class="line-numbers language-java"><code class="language-java">Response <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ExecutionException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>var scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope<span class="token punctuation">.</span>ShutdownOnFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Supplier<span class="token operator">&lt;</span>String<span class="token operator">></span>  user  <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Supplier<span class="token operator">&lt;</span>Integer<span class="token operator">></span> order <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">fetchOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scope<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 同步两个子任务</span>             <span class="token punctuation">.</span><span class="token function">throwIfFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 并传播错误信息</span>        <span class="token comment" spellcheck="true">// 这里，两个子任务都已经成功，所以组合它们的结果</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里理解涉及线程的生命周期变得简单：在所有情况下，它们的生命周期都被限制在一个词法作用域内，即<code>try-with-resources</code>语句的主体内。此外，使用<code>StructuredTaskScope</code>确保了一系列有价值的特性：</p><ol><li><p>错误处理与短路机制——如果<code>findUser()</code>或<code>fetchOrder()</code>子任务之一失败，尚未完成的另一个子任务将被取消。（这是由<code>ShutdownOnFailure</code>实现的关闭策略管理的，也有可能实现其他策略）。</p></li><li><p>取消传播——如果在调用<code>join()</code>之前或期间执行<code>handle()</code>方法的线程被中断，则当线程退出作用域时，两个子任务都将自动取消。</p></li><li><p>清晰性——上述代码具有清晰的结构：设置子任务，等待它们完成或被取消，然后决定是否成功（并处理已完成子任务的结果）或失败（子任务已经结束，因此无需进一步清理）。</p></li><li><p>可观测性——如下面所述，线程转储能够清晰地显示任务层级关系，执行<code>findUser()</code>和<code>fetchOrder()</code>的线程在转储中显示为scope的子线程。</p></li></ol><h4 id="Scoped-Values-JEP-464"><a href="#Scoped-Values-JEP-464" class="headerlink" title="Scoped Values - JEP 464:"></a>Scoped Values - JEP 464:</h4><p>作用域值优化。在线程内和跨线程之间有效共享不可变数据。这个Java增强它旨在提供一种机制，允许开发者在Java应用程序中安全地在线程内部以及跨线程之间共享不可变数据。该特性旨在替代或改善现有的ThreadLocal机制，提供一种更加可控、易于管理和高效的解决方案，尤其是在涉及大规模并发处理和跨层数据传递场景时。通过范围值，开发人员可以更好地组织和管理在特定作用域内有效的变量，同时确保资源的有效利用和数据的安全共享。</p><p><strong>优化：</strong></p><ul><li>易用性 — 理解数据流应当轻松直观。</li><li>可理解性 — 共享数据的生命周期可以从代码的语法结构中清晰可见。</li><li>健壮性 — 调用者共享的数据只能被合法的被调用者获取。</li><li>性能 — 数据能够有效地在大量线程间高效共享。</li></ul><p>作用域值是一种容器对象，允许方法在同一个线程内安全高效地将其数据值与直接和间接的被调用者共享，同时也能与子线程共享，而无需依赖方法参数。它是一个类型为<code>ScopedValue</code>的变量，通常被声明为<code>final static</code>字段，并设置为<code>private</code>访问权限，以防止其他类的代码直接访问。</p><p>类似线程局部变量，作用域值关联了多个值，每个线程对应一个。具体使用的值取决于哪个线程调用了它的方法。不同于线程局部变量，范围限定值只被写入一次，并且在线程执行期间只能在一定时间段内可用。</p><p>作用域值的使用如下所示。一些代码调用<code>ScopedValue.where</code>，提供一个范围限定值及其要绑定的对象。调用run方法会绑定该范围限定值，为当前线程提供一个特定的副本，然后执行作为参数传递的<code>lambda</code>表达式。在run方法执行期间，<code>lambda</code>表达式或从中直接或间接调用的任何方法，都可以通过值的<code>get()</code>方法读取范围限定值。当run方法执行完毕后，该绑定关系会被销毁。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">static</span> ScopedValue<span class="token operator">&lt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>> NAME <span class="token operator">=</span> ScopedValue<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在某个方法中</span>ScopedValue<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>NAME<span class="token punctuation">,</span> <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> NAME<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 调用方法 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在lambda表达式中直接或间接调用的方法中</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> NAME<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码的结构明确了线程可以读取其作用域值副本的时间段。这个有限的生命周期极大地简化了对线程行为的推理。数据从调用者单向传输至直接和间接的被调用者，一眼就能看出。不存在能让远端代码随时改变范围限定值的set方法。这也有助于提高性能：无论调用者和被调用者的栈距离如何，通过get()方法读取作用域值的速度常常与读取局部变量一样快。</p><h4 id="Vector-API-JEP-460"><a href="#Vector-API-JEP-460" class="headerlink" title="Vector API - JEP 460:"></a>Vector API - JEP 460:</h4><p>矢量API。一个能够在支持的CPU架构上运行时可靠编译为最优矢量指令的API，从而实现优于等效标量计算的性能。<br>本JEP提议在JDK 22中重新孵化该API，相比于JDK 21版本，API进行了些许增强。实现内容包括bug修复和性能优化。主要变更如下：<br>支持通过任意原始元素类型的数组支持的堆内存<code>MemorySegments</code>进行矢量访问。在此之前，访问仅限于由字节数组支持的堆内存<code>MemorySegments</code>。</p><p><strong>优化：</strong></p><ol><li><p>清晰简洁的API<br>API应该能够清晰简洁地表述一系列由循环内矢量操作序列组成的各种矢量计算，可能还包括控制流程。应支持针对矢量大小或每矢量的通道数进行泛型表达，从而使这类计算能够在支持不同矢量大小的硬件之间移植。</p></li><li><p>平台无关性<br>API应独立于CPU架构，支持在多种支持矢量指令的架构上实现。按照Java API的一贯原则，在平台优化和可移植性产生冲突时，我们会倾向于使API更具可移植性，即使这意味着某些特定于平台的惯用法无法在便携代码中表达。</p></li><li><p>在x64和AArch64架构上的可靠运行时编译和高性能<br>在具备能力的x64架构上，Java运行时环境，特别是HotSpot C2编译器，应将矢量操作编译为相应的高效矢量指令，比如Streaming SIMD Extensions (SSE) 和Advanced Vector Extensions (AVX)支持的那些指令。开发者应有信心他们所表达的矢量操作将可靠地紧密映射到相关的矢量指令上。在具备能力的ARM AArch64架构上，C2同样会将矢量操作编译为NEON和SVE支持的矢量指令。</p></li><li><p>优雅降级<br>有时矢量计算可能无法完全在运行时表述为矢量指令序列，可能是因为架构不支持所需的某些指令。在这种情况下，Vector API实现应能够优雅降级并仍然正常运作。这可能包括在矢量计算无法高效编译为矢量指令时发出警告。在不支持矢量的平台上，优雅降级将生成与手动展开循环相竞争的代码，其中展开因子为所选矢量的通道数。</p></li><li><p>与<code>Project Valhalla</code>项目的契合<br><code>Vector API</code>的长期目标是利用<code>Project Valhalla</code>对Java对象模型的增强功能。主要来说，这意味着将<code>Vector API</code>当前基于值的类更改为值类，以便程序能够处理值对象，即缺乏对象标识性的类实例。因此，<code>Vector API</code>将在多个版本中孵化，直至<code>Project Valhalla</code>的必要特性作为预览功能可用。一旦这些Valhalla特性可用，我们将调整Vector API及其实现以使用这些特性，并将<code>Vector API</code>本身提升为预览功能。</p></li></ol><p>向量由抽象类<code>Vector&lt;E&gt;</code>表示。类型变量E被实例化为矢量覆盖的标量基本整数或浮点元素类型的装箱类型。一个向量还具有形状属性，该属性定义了矢量的大小（以位为单位）。当矢量计算由<code>HotSpot C2</code>编译器编译时，向量的形状决定了<code>Vector&lt;E&gt;</code>实例如何映射到硬件矢量寄存器。向量的长度，即车道数或元素个数，等于矢量大小除以元素大小。</p><p>支持的一系列元素类型（E）包括Byte、Short、Integer、Long、Float和Double，分别对应于标量基本类型byte、short、int、long、float和double。</p><p>支持的一系列形状对应于64位、128位、256位和512位的矢量大小，以及最大位数。512位形状可以将字节打包成64个车道，或者将整数打包成16个车道，具有这种形状的矢量可以一次性操作64个字节或16个整数。max-bits形状支持当前架构的最大矢量尺寸，这使得API能够支持<code>ARM SVE</code>平台，该平台实现可以支持从128位到2048位，以128位为增量的任何固定尺寸。</p><h3 id="性能上的改进"><a href="#性能上的改进" class="headerlink" title="性能上的改进"></a>性能上的改进</h3><h4 id="Regional-Pinning-for-G1-JEP-423"><a href="#Regional-Pinning-for-G1-JEP-423" class="headerlink" title="Regional Pinning for G1 - JEP 423:"></a>Regional Pinning for G1 - JEP 423:</h4><p>区域固定。通过在G1中实现区域固定（regional pinning），从而在Java Native Interface (JNI) 临界区域内不需要禁用垃圾收集，以此来减少延迟。</p><p><strong>优化：</strong></p><ol><li>不会因JNI临界区域导致线程停滞。</li><li>不会因JNI临界区域而导致垃圾收集启动时增加额外延迟。</li><li>当没有JNI临界区域活动时，GC暂停时间不会出现倒退。</li><li>当JNI临界区域活动时，GC暂停时间只会有最小程度的倒退。</li></ol><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><h4 id="Launch-Multi-File-Source-Code-Programs-JEP-458"><a href="#Launch-Multi-File-Source-Code-Programs-JEP-458" class="headerlink" title="Launch Multi-File Source-Code Programs - JEP 458:"></a>Launch Multi-File Source-Code Programs - JEP 458:</h4><p>启动多文件源代码程序。允许用户在不首先编译程序的情况下运行由多个 Java 源代码文件提供的程序。</p><p><strong>优化：</strong></p><ol><li>通过使从小型程序向大型程序的过渡更加渐进，使开发人员能够选择何时以及何时费力地配置构建工具，提高了开发人员的生产力。</li></ol><p>Java22增强了Java启动器的源文件模式，使其能够运行以多份Java源代码文件形式提供的程序。</p><p>举例来说，假设一个目录包含了两个文件：Prog.java和Helper.java，每个文件各声明一个类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Prog.java</span><span class="token keyword">class</span> <span class="token class-name">Prog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> Helper<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Helper.java</span><span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行命令<code>java Prog.java</code>将会在内存中编译Prog类并调用其main方法。由于Prog类中的代码引用了Helper类，启动器会在文件系统中查找Helper.java文件，并在内存中编译Helper类。如果Helper类中的代码又引用了其他类，例如HelperAux类，那么启动器还会找到HelperAux.java并对其进行编译。</p><p>当不同.java文件中的类互相引用时，Java启动器并不保证按照特定顺序或时间点编译这些.java文件。例如，启动器可能先编译Helper.java再编译Prog.java。有些代码可能在程序开始执行前就已经被编译，而其他代码可能在需要时才懒加载编译。</p><p>只有被程序引用到的类所在的.java文件才会被编译。这样一来，开发者可以在尝试新版本代码时不必担心旧版本会被意外编译。例如，假设目录中还包含OldProg.java文件，其中包含Progr类的一个旧版本，该版本期望Helper类有一个名为go的方法而不是run方法。当运行Prog.java时，存在包含潜在错误的OldProg.java文件并不会影响程序执行。</p><p>一个.java文件中可以声明多个类，且会被一起编译。在一个.java文件中共声明的类优先于在其他.java文件中声明的类。例如，假设上面的Prog.java文件扩展后也在其中声明了Helper类，尽管Helper.java文件中已有一个同名类。当Prog.java中的代码引用Helper时，会使用在Prog.java中共同声明的那个类；启动器不会去搜索Helper.java文件。</p><p>源代码程序中禁止重复的类声明。也就是说，同一个.java文件内或构成程序的不同.java文件之间的类声明，如果名称相同，则不允许存在。假设经过编辑后，Prog.java和Helper.java最终变成以下形式，其中类Aux意外地在两个文件中都被声明：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Prog.java</span><span class="token keyword">class</span> <span class="token class-name">Prog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> Helper<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Aux<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Aux</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Helper.java</span><span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Aux</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行命令<code>java Prog.java</code>会编译Prog.java中的Prog和Aux类，调用Prog类的main方法，然后——由于main方法引用了Helper——查找并编译Helper.java中的Helper和Aux类。Helper.java中对Aux类的重复声明是不允许的，所以程序会停止运行，启动器报告错误。</p><p>当通过Java启动器传递单个.java文件名称时，就会触发其源文件模式。如果提供了额外的文件名，它们会成为主方法的参数。例如，运行命令<code>java Prog.java Helper.java</code>会导致字符串数组”Helper.java”作为参数传给Prog类的main方法。</p><h3 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h3><p>除了JEP中描述的更改之外，发行说明中还列出了许多较小的更新，这些更新对许多应用程序开发者有重要意义。其中包括废弃过时的API和移除先前已经弃用的API。</p><ol><li>向keytool和jarsigner添加了更多算法。</li><li>垃圾回收器吞吐量方面的改进，特别是在“年轻代”垃圾回收方面。</li><li>改进了系统模块描述符的版本报告功能。</li><li>提高了对原生代码“等待”处理选项的完善。</li><li>Unicode通用区域数据仓库已更新至版本44。</li><li>支持从字节码加载的类型上的类型注解。</li><li>ForkJoinPool和ForkJoinTask现在能更好地处理不可中断任务。</li><li>对客户端与服务器TLS连接属性配置提供了更多的灵活性。</li><li>提高了对原生内存跟踪的功能，包括峰值使用情况的报告。</li><li>最后，如同所有特性发布版一样，JDK 22包含了数百项性能、稳定性和安全性更新，包括适应底层操作系统和固件更新及标准变化。用户和应用程序开发者通常在不知不觉中受益于这些变化。</li></ol><p>最后，JDK 22是通过六个月的发布节奏按时交付的13th功能版本。由于预期改进源源不断，这种程度的可预测性使开发人员能够轻松管理创新的采用。Oracle 不会为 JDK 22 提供长期支持，在 2023 年 9 月之前提供更新，之后它将被 Oracle JDK 23 取代。最近的长期维护版本是Java 21。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321150929.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东二面：Redis为什么快？我说Redis是纯内存访问的，然后他对我笑了笑。。。。。。</title>
      <link href="/article/redishighperformance.html"/>
      <url>/article/redishighperformance.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Redis是一个高性能的开源内存数据库，以其快速的读写速度和丰富的数据结构支持而闻名。作为一个轻量级、灵活的键值存储系统，Redis在各种应用场景下都展现出了惊人的性能优势。无论是作为缓存工具、会话管理组件、消息传递媒介，还是在实时数据处理任务和复杂的分布式系统架构中，Redis均扮演了至关重要的角色。而Redis为什么快的原因也是我们尝尝遇见的高频面试问题。接下来我们就一起探讨一下Redis快的原因。</p><p>本文将深入探讨Redis之所以快速处理大规模数据的原因。我们将从Redis基于内存操作的特性、高效的内存数据结构、单线程模型、I/O多路复用技术、底层模型和优化技术、持久化机制以及网络通信协议等多个方面进行分析和讨论。通过深入了解Redis内部机制和性能优化技术，我们可以更好地理解Redis之所以快速的根本原因，以及如何在实际应用中充分发挥其优势。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321233047.png" alt="image.png"></p><h3 id="完全基于内存"><a href="#完全基于内存" class="headerlink" title="完全基于内存"></a>完全基于内存</h3><p>Redis作为一种内存导向型数据库系统，其关键特性在于将所有数据实体，包括键值对及其相关的复杂数据结构，完全寄宿于内存之中。相较于依赖磁盘存储的传统数据库系统，Redis巧妙地运用内存的高速读写特性，显著提升了系统的响应速率与整体性能表现。</p><p>内存相对于磁盘具备无可比拟的读写速度优势，使得Redis能够即时、高效地处理数据存取。在读取操作层面，Redis无需经过耗时的磁盘I/O过程，只需在内存空间内迅速定位所需数据，从而显著降低了访问延迟；而在写入操作时，Redis同样直接作用于内存区域，新数据能即刻生效，仅在执行持久化策略时，例如RDB快照或AOF日志记录，数据才会被异步地或按需地同步至磁盘，以确保即使在系统重启后数据仍能得以恢复，但此过程并不会妨碍Redis在常规操作中维持其卓越的性能表现。</p><p>说到这，我们就会想到，一台服务器的内存不是无限的，相反的是比较紧张的，Redis基于内存操作，那么Redis究竟是如何在有限内存空间中进行精细且高效的内存管理呢？</p><h4 id="过期键删除"><a href="#过期键删除" class="headerlink" title="过期键删除"></a>过期键删除</h4><p>Redis支持为键设置过期时间（TTL），并且在键过期后会通过两种方式自动删除它们：</p><ol><li><p><strong>惰性删除（Lazy Expire）</strong>：在访问某个键时，Redis会检查该键是否已经过期，如果已经过期，则在访问时将其删除。这意味着只有当有客户端尝试访问过期的键时，Redis才会执行删除操作。这种方式的优势在于避免了不必要的操作，只有在需要时才进行删除，但缺点是可能会导致过期键在一段时间内仍然占用内存。</p></li><li><p><strong>定期删除（Active Expire）</strong>：Redis周期性地（默认每秒10次）随机抽取一部分键，并检查它们的过期时间。如果发现某个键已经过期，则立即将其删除。这种方式可以保证过期键在一定时间内被及时删除，避免了过期键长时间占用内存。但定期删除会带来额外的CPU消耗，因为需要在每次抽取时检查键的过期时间。</p></li></ol><p>这两种方式结合起来，可以有效地管理和清理过期键，保证Redis的内存使用在合理范围内。同时，我们在日常开发中可以根据具体业务场景和需求调整过期策略的配置，以达到最佳的性能和内存利用率。</p><h4 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h4><p>内存淘汰策略是Redis用于释放内存空间的一种机制，当内存空间不足时（达到或超过了配置的<code>maxmemory</code>），Redis会根据预先设置的淘汰策略来选择要删除的键，从而释放内存空间。通过合理选择和配置内存淘汰策略，可以有效地管理内存使用，防止内存溢出，并保证系统的稳定性和性能。</p><p>常见的内存淘汰策略：</p><ol><li><p><strong>LRU（最近最少使用）</strong>：<br>LRU策略会删除最近最少被访问的键。Redis会记录每个键最后一次被访问的时间戳，并定期检查这些时间戳，选择最久未被访问的键进行删除。LRU策略适用于缓存场景，通常最久未被访问的键可能是最不常用的，因此删除这些键可以释放更多的内存空间。</p></li><li><p><strong>LFU（最不经常使用）</strong>：<br>LFU策略会删除最不经常被访问的键。Redis会记录每个键被访问的频率，并定期检查这些频率，选择访问频率最低的键进行删除。LFU策略适用于对访问频率较低的键进行淘汰，从而释放内存空间。</p></li><li><p><strong>TTL（键的过期时间）</strong>：<br>TTL策略会删除已经过期的键。Redis会定期检查键的过期时间，并删除已经过期的键。通过设置键的过期时间，可以自动清理不再需要的数据，释放内存空间。</p></li><li><p><strong>随机删除</strong>：<br>随机删除策略会随机选择一些键进行删除。虽然这种策略不考虑键的使用频率或过期时间，但在某些情况下可能会是一种简单且有效的淘汰方式，尤其是在内存空间不足时。</p></li><li><p><strong>淘汰固定数量的键</strong>：<br>淘汰固定数量的键策略会选择要删除的键的数量，然后按照一定的规则（如LRU或LFU）来选择要删除的键。这种策略可以保证每次淘汰都释放固定数量的内存空间。</p></li></ol><p>当Redis的内存使用达到配置的<code>maxmemory</code>限制时，就会触发内存淘汰策略，以释放内存空间。合理选择内存淘汰策略，并根据系统的需求设置<code>maxmemory</code>参数，可以有效地管理内存使用，保证系统的稳定性和性能。通过合理配置内存限制和内存淘汰策略，可以有效地管理Redis的内存使用，保证系统在内存空间不足时能够及时释放内存，避免因内存溢出而导致系统性能下降或者崩溃。</p><blockquote><p>修改内存<code>maxmemory</code>只需要在<code>redis.conf</code>配置文件中配置<code>maxmemory-policy</code>参数即可。</p></blockquote><h4 id="内存碎片管理"><a href="#内存碎片管理" class="headerlink" title="内存碎片管理"></a>内存碎片管理</h4><p>内存碎片整理是指对Redis中的内存空间进行重新排列和整理，以减少内存碎片的数量和大小。内存碎片是指已分配但不再使用的内存块，这些内存块虽然被标记为已分配，但实际上并未被有效利用，造成了内存的浪费。</p><p>在Redis中，由于数据的增删改查操作不断进行，会导致内存空间中出现大量的内存碎片。这些内存碎片虽然单个很小，但如果积累起来会导致内存碎片化，降低内存利用率，影响系统的性能和稳定性。</p><p>为了解决内存碎片化的问题，Redis会定期进行内存碎片整理操作。内存碎片整理过程包括以下几个步骤：</p><ol><li><p><strong>遍历内存空间</strong>：Redis会遍历整个内存空间，检查每个内存块的状态，包括已分配和未分配的内存块。</p></li><li><p><strong>合并相邻的空闲内存块</strong>：Redis会尝试合并相邻的空闲内存块，将它们合并成一个更大的内存块。这样可以减少内存碎片的数量，提高内存利用率。</p></li><li><p><strong>移动数据</strong>：如果有必要，Redis可能会将数据从一个内存块移动到另一个内存块，以便更好地组织内存空间。这个过程可能会比较耗时，因为需要将数据从一个位置复制到另一个位置。</p></li><li><p><strong>释放不再使用的内存块</strong>：最后，Redis会释放那些不再使用的内存块，以便它们可以被重新分配给新的数据。</p></li></ol><p>通过定期进行内存碎片整理操作，Redis可以保持内存空间的连续性，减少内存碎片化的程度，提高内存利用率，从而提高系统的性能和稳定性。但是，内存碎片整理过程可能会消耗一定的系统资源，尤其是在内存碎片较多的情况下。所以，通常情况下，Redis会选择在系统负载较低的时候进行碎片整理操作，以避免对系统性能产生不利影响。</p><h3 id="高效的内存数据结构"><a href="#高效的内存数据结构" class="headerlink" title="高效的内存数据结构"></a>高效的内存数据结构</h3><p>Redis作为一个内存数据库系统，提供了丰富且高效的内存数据结构，包括字符串（<code>String</code>）、列表（<code>List</code>）、集合（<code>Set</code>）、有序集合（<code>Sorted Set</code>）、哈希（<code>Hash</code>）等。这些数据结构不仅具有简单易用的特点，还能够在内存中高效地存储和操作数据，为Redis的快速性能提供了坚实的基础。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240320224800.png" alt="image.png"></p><h4 id="动态字符串"><a href="#动态字符串" class="headerlink" title="动态字符串"></a>动态字符串</h4><p>动态字符串是一种能够动态扩展长度的字符串实现方式。在许多编程语言和数据结构中都有类似的实现，如C语言中的动态数组（dynamic array）。而SDS是Redis中的一种简单动态字符串结构，它是一种动态大小的字节数组，用于存储和操作字符串数据。SDS是Redis内部数据结构的基础，也是字符串数据结构的底层实现。它的结构如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * redis中保存字符串对象的结构 */</span><span class="token keyword">struct</span> sdshdr <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用于记录buf数组中使用的字节的数目，和SDS存储的字符串的长度相等 </span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用于记录buf数组中没有使用的字节的数目 </span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//字节数组，用于储存字符串</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//buf的大小等于len+free+1，其中多余的1个字节是用来存储’\0’的</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>C</code>语言中传统字符串是使用长度为N+1的字符数组来表示长度为 的字符串，并且字符串数组的最后一个元素总是空字符<code>&#39;\0&#39;</code>。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240320230831.png" alt="image.png"></p><p>如果我们想要获取上述<code>CODERACADEMY</code>的长度，我们需要从头开始遍历，直到遇到 ‘\0’ 为止。</p><p>而Redis的SDS的数据结构使用一个<code>len</code>字段记录当前字符串的长度，使用<code>free</code>表示空闲的长度。想要获取长度只需要获取<code>len</code>字段即可。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240320231520.png" alt="image.png"></p><p>我们可以看出<code>C</code>语言获取字符串长度的时间复杂度为<code>O(N)</code>，而SDS获取字符串长度的时间复杂度为<code>O(1)</code>。除此之外，SDS相对于C语言字符串还有如下区别：</p><table><thead><tr><th>特征</th><th>C语言字符串</th><th>SDS</th></tr></thead><tbody><tr><td>类型</td><td>静态字符数组</td><td>动态字符串结构</td></tr><tr><td>内存管理</td><td>需手动分配和释放内存</td><td>自动扩展和释放内存</td></tr><tr><td>存储空间</td><td>需要提前预留足够的空间</td><td>根据需要动态调整大小</td></tr><tr><td>长度计算</td><td>需要遍历整个字符串计算长度</td><td>O(1)复杂度直接获取字符串长度</td></tr><tr><td>二进制安全</td><td>不二进制安全</td><td>二进制安全</td></tr><tr><td>缓冲区溢出保护</td><td>不提供缓冲区溢出保护</td><td>提供缓冲区溢出保护</td></tr><tr><td>操作复杂度</td><td>操作复杂度随字符串长度增加而增加</td><td>操作复杂度不受字符串长度影响</td></tr><tr><td>可拓展性</td><td>不易扩展，需要手动处理内存扩展</td><td>自动扩展，支持动态调整大小</td></tr><tr><td>细说下来，SDS相对于C语言字符串有如下优点：</td><td></td><td></td></tr></tbody></table><ol><li><p><strong>二进制安全</strong>： SDS可以存储任意二进制数据，而不仅仅是文本字符串。这意味着SDS可以存储包括图片、视频、音频等在内的各种二进制数据，而不会受到特殊字符或者空字符的限制，具有更广泛的适用性。</p></li><li><p><strong>动态扩展</strong>： SDS的大小可以根据存储的字符串长度动态调整，可以根据实际需要动态分配和释放内存空间。这种动态扩展的能力使得SDS能够处理任意长度的字符串数据，而不受到固定大小的限制。</p></li><li><p><strong>O(1)复杂度的操作</strong>： SDS支持常数时间复杂度的操作，包括添加字符、删除字符、修改字符等。无论字符串的长度是多少，这些操作的时间开销都是固定的，具有高效的性能。</p></li><li><p><strong>缓冲区溢出保护</strong>： SDS在存储字符串时，会自动添加一个空字符(‘\0’)作为字符串的结束标志，保证字符串的有效性和安全性。这种缓冲区溢出保护能够防止缓冲区溢出的问题，提高了系统的稳定性和安全性。</p></li><li><p><strong>惰性空间释放</strong>： 当SDS缩短字符串时，并不会立即释放多余的空间，而是将多余的空间保留下来，以备后续的再利用。这种惰性空间释放的策略可以减少内存分配和释放的开销，提高内存利用率。</p></li></ol><p>这些优点使得SDS在Redis中被广泛应用于存储和操作字符串数据，为Redis的高性能和高可靠性提供了坚实的基础。</p><h4 id="双端链表"><a href="#双端链表" class="headerlink" title="双端链表"></a>双端链表</h4><p>Redis中的双端链表是一种经过优化的数据结构，用于存储有序的元素集合。它具有双向链接的特性，每个节点都包含指向前一个节点和后一个节点的指针。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240320234725.png" alt="image.png"></p><p>双端链表中的节点是链表的基本构建单元，它存储了链表中的数据元素以及指向前一个节点和后一个节点的指针。在Redis中，双端链表节点的定义通常如下：</p><pre class="line-numbers language-C"><code class="language-C">typedef struct listNode {    struct listNode *prev;  // 指向前一个节点的指针    struct listNode *next;  // 指向后一个节点的指针    void *value;            // 存储的数据元素} listNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双端链表中的节点包含了以下几个关键属性：</p><ol><li><p><strong>prev指针</strong>：<code>prev</code>指针是指向前一个节点的指针，它指向链表中当前节点的前一个节点。如果当前节点是链表的头节点，则<code>prev</code>指针为<code>NULL</code>。通过<code>prev</code>指针，可以在双端链表中方便地向前遍历节点。</p></li><li><p><strong>next指针</strong>：<code>next</code>指针是指向后一个节点的指针，它指向链表中当前节点的后一个节点。如果当前节点是链表的尾节点，则<code>next</code>指针为<code>NULL</code>。通过<code>next</code>指针，可以在双端链表中方便地向后遍历节点。</p></li><li><p><strong>value数据域</strong>：<code>value</code>数据域用于存储链表节点所包含的数据元素。这个数据元素可以是任意类型的数据，因此在Redis中的双端链表中，通常使用<code>void *</code>类型来表示。这种设计使得双端链表可以存储任意类型的数据元素。</p></li></ol><p>通过这些属性，双端链表节点构成了链表的基本组成部分，它们通过<code>prev</code>和<code>next</code>指针连接在一起，形成了双向链接的链表结构。</p><p>对于链表中描述链表整体属性的元数据，它的结构如下：</p><pre class="line-numbers language-C"><code class="language-C">typedef struct list {    listNode *head;  // 头节点指针    listNode *tail;  // 尾节点指针    unsigned long len;  // 链表长度    // 其他字段...} list;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从结构中可以看出元数据中还有两个特殊的节点：头节点（head node）和尾节点（tail node），它们分别位于链表的头部和尾部。而他们的作用如下：</p><ol><li><p><strong>头节点（head node）</strong>：<br>头节点是双端链表中的第一个节点，也是链表的入口。它通常用于存储链表的起始位置信息，以便快速定位链表的起始位置。在双端链表中，头节点的特点是没有前一个节点，即头节点的<code>prev</code>指针为<code>NULL</code>。头节点通常用于存储链表的头部元数据或者哨兵节点。</p></li><li><p><strong>尾节点（tail node）</strong>：<br>尾节点是双端链表中的最后一个节点，也是链表的结束位置。它通常用于存储链表的结束位置信息，以便快速定位链表的结束位置。在双端链表中，尾节点的特点是没有后一个节点，即尾节点的<code>next</code>指针为<code>NULL</code>。尾节点通常用于存储链表的尾部元数据或者哨兵节点。</p></li></ol><p>在Redis中，通常会使用头节点和尾节点来表示双端链表的起始位置和结束位置，以方便对链表进行操作。Redis中的双端链表常见操作如下：</p><ul><li>头节点（head）：表示双端链表的头部节点，通过头节点可以快速定位链表的起始位置，通常用于添加和删除链表的头部元素。</li><li>尾节点（tail）：表示双端链表的尾部节点，通过尾节点可以快速定位链表的结束位置，通常用于添加和删除链表的尾部元素。</li></ul><p>通过头节点和尾节点，可以方便地对双端链表进行头部插入、尾部插入、头部删除、尾部删除等操作，从而实现了对双端链表的高效操作。</p><p>除了上述头尾节点以外，链表的元数据中还有<code>len</code>参数，这个参数用于记录链表的当前长度。每当链表中添加或删除节点时，Redis会相应地更新<code>len</code>字段的值，以反映链表的当前长度。这个参数与SDS里类似，获取链表长度时不用再遍历整个链表，直接拿到<code>len</code>值就可以了，这个时间复杂度是 O(1)。</p><h4 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h4><p>Redis中的压缩列表（ziplist）是一种特殊的数据结构，用于存储列表和哈希数据类型中的元素。压缩列表通过将多个小的数据单元压缩在一起，以节省内存空间，并提高访问效率。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321000741.png" alt="image.png"></p><p>对于压缩列表，它的主要作用如下：</p><ol><li><p><strong>紧凑的存储形式</strong>： 压缩列表以一种紧凑的方式存储数据，将多个元素紧密地排列在一起，节省了存储空间。在压缩列表中，相邻的元素可以共享同一个内存空间，这种紧凑的存储形式可以大大减少内存的消耗。</p></li><li><p><strong>灵活的编码方式</strong>： 压缩列表中的每个元素都可以采用不同的编码方式进行存储，包括整数编码、字符串编码和字节数组编码等。根据元素的类型和大小，压缩列表会选择合适的编码方式来存储数据，以进一步节省内存空间。</p></li><li><p><strong>快速的随机访问</strong>： 压缩列表支持快速的随机访问操作，可以通过下标索引来访问压缩列表中的任意元素。由于压缩列表采用紧凑的存储形式，因此可以通过简单的偏移计算来实现快速的元素访问，具有较高的访问效率。</p></li><li><p><strong>动态调整大小</strong>： 压缩列表支持动态调整大小，可以根据实际需要自动扩展或收缩内存空间。当压缩列表中的元素数量增加时，可以动态地分配额外的内存空间，以容纳更多的元素；当元素数量减少时，可以释放多余的内存空间，以节省内存资源。</p></li><li><p><strong>适用于小型数据集</strong>： 压缩列表适用于存储小型数据集，例如长度较短的列表或者哈希表。由于压缩列表采用紧凑的存储形式，并且支持快速的随机访问，因此特别适合于存储数量较少但访问频繁的数据。</p></li></ol><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p>在Redis中，字典（dictionary）是一种用于存储键值对数据的数据结构，也称为哈希表（hash table）。字典是Redis中最常用的数据结构之一，具有快速查找、动态调整大小、哈希冲突处理、迭代器支持等特点，适用于各种数据存储和操作需求，实现键值对存储和快速查找。</p><p>字典以键值对的形式存储数据，每个键都与一个值相关联。在Redis中，键和值都可以是任意类型的数据，如字符串、整数、列表或哈希表。</p><p>字典利用哈希表实现，具备快速查找的特性。通过将键映射到哈希表的索引位置，字典能以常数时间复杂度（O(1)）内查找、插入和删除键值对，即使在大型数据集中也能保持高效。</p><p>此外，字典支持动态调整大小，随着键值对数量的变化，能自动扩展或收缩内存空间，以适应数据量的变化。</p><p>在存储数据时，如果产生了哈希冲突，字典可以采用开放寻址法或链表法等策略，根据哈希表的大小和负载因子选择合适的冲突解决方法，确保查找性能高效。</p><h4 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h4><p>跳跃表（Skip List）是一种基于链表的数据结构，它利用多级索引来加速查找操作，类似于平衡树，但实现起来更加简单，具有较好的平均查找性能。在Redis中，跳跃表用于有序集合（Sorted Set）数据类型的实现，提供了高效的有序数据存储和检索功能。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321002222.png" alt="image.png"></p><p>跳跃表通过维护多级索引，每个级别的索引都是原始链表的子集，用于快速定位元素。每个节点在不同级别的索引中都有一个指针，通过这些指针，可以在不同级别上进行快速查找，从而提高了查找效率。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321002315.png" alt="image.png"></p><p>跳跃表的平均查找性能为O(log n)，与平衡树相当，但实现起来更加简单。跳跃表通过多级索引来实现快速查找，使得查找时间随着数据量的增加而呈对数增长。但是跳跃表的空间复杂度相对较高，因为它需要额外的空间来维护多级索引。不过跳跃表的空间占用通常是合理的，且具有可控性，可以根据实际需求调整级别和索引节点的数量，以平衡空间和性能的需求。</p><p>除此之外，跳跃表支持动态调整大小，可以根据实际需要自动扩展或收缩内存空间。当有序集合中的元素数量增加时，跳跃表会动态地增加级别和索引节点，以提高查找效率；当元素数量减少时，可以收缩跳跃表的大小，以节省内存资源。并且跳跃表的插入和删除操作具有较高的效率，通过维护多级索引，可以在O(log n)的时间复杂度内完成插入和删除操作。</p><h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><p>Redis中的单线程模型是指Redis在其核心数据处理部分采用单一的主线程来执行网络IO操作、接收客户端命令请求、执行命令操作以及返回结果。Redis服务端的网络IO和键值对读写操作都由一个线程统一负责，而诸如持久化、集群数据同步等任务则是由其他线程来执行。在单线程模型下，Redis服务器是单线程运行的，即每个客户端的请求都是依次顺序执行的。</p><p>而使用单线程所带来的好处：</p><ol><li><p><strong>避免上下文切换</strong>：<br>多线程环境下，线程间的上下文切换会带来额外的CPU开销。Redis通过单线程模型消除了多线程环境下的上下文切换成本，使得CPU资源更多地用于执行实际的命令处理。</p></li><li><p><strong>简化数据操作的并发控制</strong>：<br>单线程模型确保了同一时间内只有一个操作在处理数据，因此不需要使用锁机制来保护数据的完整性，避免了多线程编程中常见的锁竞争和死锁问题，从而提高了系统的执行效率。</p></li><li><p><strong>内存操作性能优越</strong>：<br>Redis是一个基于内存操作的数据库，大部分操作都在内存中完成，本身就有很高的执行速度。单线程模型下，内存操作无需考虑并发控制，因此能够实现更高的内存读写效率。</p></li></ol><p>在日常开发中，我们通常会使用并发编程来提高服务的吞吐量。这时，我们可能会产生一个疑问：Redis的单线程模型是否能够充分利用CPU资源呢？</p><p>实际上，由于Redis是基于内存的操作，使用Redis时，CPU很少会成为瓶颈。相反，Redis主要受限于服务器内存和网络带宽。例如，在典型的Linux系统上，通过使用pipelining技术，Redis能够实现较高的吞吐量，每秒可以处理大量的请求。因此，如果应用程序主要使用O(N)或O(log(N))的命令，它几乎不会对CPU资源造成过多的负载。综上所述，考虑到单线程模型的实现简单且CPU很少成为瓶颈，因此采用单线程方案是合理的选择。</p><p>单线程模型限制了Redis的并发能力。由于只有一个线程在处理请求，无法充分利用多核处理器的性能优势，所以可能到达服务端的请求不可能被立即处理。那么Redis是如何保证单线程的资源利用率和处理效率呢？</p><p><strong>IO多路复用技术</strong>：<br> Redis通过使用IO多路复用技术（如epoll、kqueue或select等），在一个线程内同时监听多个socket连接，当有网络事件发生时（如读写就绪），再逐一处理。这样可以处理大量并发连接，并在单线程中高效地调度网络事件，使得单线程也能应对高并发场景。所以Redis服务端，整体来看，就是一个以事件驱动的程序，它的操作都是基于事件的方式进行的。Redis的事件驱动架构如图：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321222650.png" alt="Redis的事件驱动架构.png"></p><p>Redis的事件驱动架构是一种基于非阻塞I/O多路复用技术设计的高效处理并发请求的机制。在Redis中，事件驱动架构通过监听和处理各种网络I/O事件以及定时事件，使得Redis服务端能够在一个线程内高效地服务于多个客户端连接，并执行相关的命令操作。</p><p>事件驱动架构主要由以下几个组成部分构成：</p><ol><li><p><strong>套接字（Socket）</strong>：<br>套接字是客户端与Redis服务端之间进行通信的基础接口，用于双向数据传输。</p></li><li><p><strong>I/O多路复用</strong>：<br>Redis服务端通过使用如epoll、kqueue等I/O多路复用技术，可以同时监听多个套接字上的读写事件。当某个客户端的套接字上有数据可读或可写时，内核会通知Redis服务端，而无需Redis反复检查每一个套接字状态。</p></li></ol><p>Redis默认使用的IO多路复用技术确实是epoll。其主要优点如下：</p><ul><li><p><strong>并发连接限制</strong><br>相比于select和poll，epoll没有预设的并发连接数限制，能够处理的并发连接数只受限于系统资源，适合处理大规模并发连接。</p></li><li><p><strong>内存拷贝优化</strong><br>epoll采用事件注册机制，仅关注和通知就绪的文件描述符，无需像select和poll那样在每次调用时都拷贝整个文件描述符集合，从而减少了内存拷贝的开销。</p></li><li><p><strong>活跃连接感知</strong><br>epoll提供了水平触发（level-triggered）和边缘触发（edge-triggered）两种模式，可以更准确地感知活跃连接，仅当有事件发生时才唤醒处理，避免了无效的轮询操作，提升了事件处理的效率。</p></li><li><p><strong>高效事件处理</strong><br>epoll利用红黑树存储待监控的文件描述符，并使用内核层面的回调机制，当有文件描述符就绪时，会直接通知应用程序，从而减少了CPU空转和上下文切换的成本。</p></li></ul><ol start="3"><li><p><strong>文件事件分派器（File Event Demultiplexer）</strong>：<br>文件事件分派器是Redis事件驱动的核心组件，它负责将内核传递过来的就绪事件分发给对应的处理器。在Redis中，每个套接字都关联了一个或多个事件处理器，如客户端连接请求处理器、命令请求处理器和命令响应处理器等。</p></li><li><p><strong>事件处理器（Event Handlers）</strong>：<br>事件处理器是Redis中处理特定事件的实际执行者。当文件事件分派器接收到一个就绪事件时，它会调用对应的事件处理器来执行相应操作，如读取客户端的命令请求，执行命令并对结果进行编码，然后将响应数据写回客户端。</p></li></ol><p>而对于Redis中设计的事件主要分为两个大类：</p><ul><li><strong>文件事件（File Events）</strong>：主要对应网络I/O操作，包括客户端连接请求（AE_READABLE事件）、客户端命令请求（AE_READABLE事件）和服务端命令回复（AE_WRITABLE事件）。</li><li><strong>时间事件（Time Events）</strong>：对应定时任务，如键值对过期检查、持久化操作等。所有时间事件都被存放在一个无序链表中，每当时间事件执行器运行时，会遍历链表并处理已到达预定时间的事件。</li></ul><p>通过事件驱动架构，Redis能够在一个线程内并发处理大量客户端请求，而无需为每个客户端创建独立的线程。此外，由于Redis的高效内存管理、数据结构优化和单线程模型，避免了多线程环境下的锁竞争和上下文切换开销，从而实现了极高的吞吐量和响应速度。</p><blockquote><p>在Redis 6.x版本中，虽然引入了多线程处理网络IO的部分，但核心命令执行依然保持单线程事件驱动的模型，以维持Redis原有的性能优势。</p></blockquote><h3 id="IO多路复用模型"><a href="#IO多路复用模型" class="headerlink" title="IO多路复用模型"></a>IO多路复用模型</h3><p>IO多路复用的核心在于内核关注的是应用程序的文件描述符而非直接监控连接本身。客户端运行时产生的不同事件类型的套接字操作，会被内核捕获。在服务器端，I/O多路复用机制负责收集这些事件并将它们加入事件队列，随后通过文件事件分发器分发至对应事件处理器进行处理。</p><p>以Redis为例，在其单线程模型下，内核不间断地监测所有客户端socket的连接请求和数据传输状况。只要检测到任何socket上有待处理的动作，便会立即将控制权转交给Redis线程。这样一来，尽管仅依靠单线程，Redis仍能有效地处理多个并发的IO流。</p><p>select/epoll等IO多路复用技术提供了一种基于事件触发的回调模式，每当有不同事件发生时，Redis能够迅速调用相应的事件处理器，始终保持在处理事件的状态，从而提升了其响应速度。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240321231215.png" alt="高性能 IO 多路复用.png"><br>由于Redis线程并不会因为等待某个特定socket的IO操作完毕而停滞，它可以流畅地在多个客户端间切换，即时响应每个客户端的不同请求，从而实现在单线程环境下对大量并发连接的有效处理和高并发性能。</p><h3 id="简单高效的通信协议"><a href="#简单高效的通信协议" class="headerlink" title="简单高效的通信协议"></a>简单高效的通信协议</h3><p>Redis Cluster在集群内部通信中借鉴了Gossip协议的理念，采用了一种基于Gossip风格的消息传播机制。这种机制能够有效地将集群状态和节点信息在集群中的各个节点间进行快速传播和同步。类比于流行病的传播模型，Gossip协议允许节点随机选择邻居节点进行通信，从而在全网状结构中快速传播更新。</p><p>Redis Cluster、Consul和Apache Cassandra等分布式系统都采用了Gossip协议或者类似的机制来维护集群的健康状态和一致性。通过Gossip协议，节点们可以高效地共享和更新集群的元数据，如节点加入、离开、故障转移等信息。</p><p>然而，纯粹的Gossip协议在实践中可能存在信息冗余的问题，即已接收到某一信息的节点在后续的传播中可能会收到相同的信息。为了避免这种冗余和提高通信效率，这些系统通常会对Gossip协议进行优化，例如在节点间记录已知信息的状态，避免重复传播已知的更新。即便如此，Gossip协议仍然是在大规模分布式系统中实现高可用性和强一致性的有效手段，其高效性体现在只需局部通信即可逐渐达成全局一致性，同时具备良好的扩展性和容错性。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后，我们来总结一下，如何在面试中回答Redis为什么快的原因：</p><ol><li><p><strong>纯内存操作</strong>：<br>Redis利用内存进行数据存储，其操作基于内存读写，由于内存访问速度远超硬盘，使得Redis在处理数据时具有极高的读写速度。特别是对于简单的存取操作，由于线程在内存中执行的时间非常短，主要的时间消耗在于网络I/O，因此Redis在处理大量快速读写请求时表现出卓越的性能。</p></li><li><p><strong>单线程模型</strong>：<br>Redis采用单线程模型处理客户端请求，这一设计确保了操作的原子性，避免了多线程环境下的上下文切换和锁竞争问题。这使得Redis在处理命令请求时能够保持高度的确定性和一致性，同时也简化了编程模型，降低了并发控制的复杂性。</p></li><li><p><strong>IO多路复用技术</strong>：<br>Redis通过采用IO多路复用模型，如epoll，能够在一个线程中高效地处理多个客户端连接。单线程轮询监听多个套接字描述符，并将数据库的读、写、连接建立和关闭等操作转化为事件，通过自定义的事件分离器和事件处理器来高效地处理这些事件，从而避免了在等待IO操作时的阻塞。</p></li><li><p><strong>高效数据结构</strong>：</p></li></ol><ul><li><p>Redis的整体设计围绕高效数据结构展开，其中包括但不限于全局哈希表（字典），该结构提供O(1)的平均时间复杂度，并通过rehash操作动态调整哈希桶数量，减少哈希冲突，采用渐进式rehash避免一次性操作过大导致的阻塞。</p></li><li><p>除此之外，Redis还广泛应用了多种优化过的数据结构，如压缩表（ziplist）用于存储短数据以节省内存，跳跃表（skiplist）用于有序集合提供快速的范围查询，以及其他如列表、集合等数据结构，均针对不同场景进行深度优化，确保了在读取和操作数据时的高性能。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Redis </tag>
            
            <tag> Redis为什么快 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团一面：说说synchronized的实现原理？问麻了。。。。</title>
      <link href="/article/synchronizedyuanli.html"/>
      <url>/article/synchronizedyuanli.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在现代软件开发领域，多线程并发编程已经成为提高系统性能、提升用户体验的重要手段。然而，多线程环境下的数据同步与资源共享问题也随之而来，处理不当可能导致数据不一致、死锁等各种并发问题。为此，Java语言提供了一种内置的同步机制——<code>synchronized</code>关键字，它能够有效地解决并发控制的问题，确保共享资源在同一时间只能由一个线程访问，从而维护程序的正确性与一致性。</p><p><code>synchronized</code>作为Java并发编程的基础构建块，其简洁易用的语法形式背后蕴含着复杂的底层实现原理和技术细节。深入理解<code>synchronized</code>的运行机制，不仅有助于我们更好地利用这一特性编写出高效且安全的并发程序，同时也有利于我们在面对复杂并发场景时，做出更为明智的设计决策和优化策略。</p><p>本文将从<code>synchronized</code>的基本概念出发，逐步剖析其内在的工作机制，探讨诸如监视器（Monitor）等关键技术点，并结合实际应用场景来展示<code>synchronized</code>的实际效果和最佳实践。通过对<code>synchronized</code>底层实现原理的深度解读，旨在为大家揭示Java并发世界的一隅，提升对并发编程的认知高度和实战能力。</p><h3 id="synchronized是什么？"><a href="#synchronized是什么？" class="headerlink" title="synchronized是什么？"></a>synchronized是什么？</h3><p><code>synchronized</code>是Java中实现线程同步的关键字，主要用于保护共享资源的访问，确保在多线程环境中同一时间只有一个线程能够访问特定的代码段或方法。它提供了互斥性和可见性两个重要特性，确保了线程间操作的原子性和数据的一致性。</p><h4 id="synchronized的特性"><a href="#synchronized的特性" class="headerlink" title="synchronized的特性"></a>synchronized的特性</h4><p><code>synchronized</code>关键字具有三个基本特性，分别是互斥性、可见性和有序性。</p><h5 id="互斥性"><a href="#互斥性" class="headerlink" title="互斥性"></a>互斥性</h5><p><code>synchronized</code>关键字确保了在其控制范围内的代码在同一时间只能被一个线程执行，实现了资源的互斥访问。当一个线程进入了<code>synchronized</code>代码块或方法时，其他试图进入该同步区域的线程必须等待，直至拥有锁的线程执行完毕并释放锁。</p><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p><code>synchronized</code>还确保了线程间的数据可见性。一旦一个线程在<code>synchronized</code>块中修改了共享变量的值，其他随后进入同步区域的线程可以看到这个更改。这是因为<code>synchronized</code>的解锁过程包含了将工作内存中的最新值刷新回主内存的操作，而加锁过程则会强制从主内存中重新加载变量的值。</p><h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p><code>synchronized</code>提供的第三个特性是有序性，它可以确保在多线程环境下，对于同一个锁的解锁操作总是先行于随后对同一个锁的加锁操作。这就意味着，通过<code>synchronized</code>建立起了线程之间的内存操作顺序关系，有效地解决了由于编译器和处理器优化可能带来的指令重排序问题。</p><h4 id="synchronized可以实现哪锁？"><a href="#synchronized可以实现哪锁？" class="headerlink" title="synchronized可以实现哪锁？"></a>synchronized可以实现哪锁？</h4><p>有上述synchronized的特性，我们可以知道synchronized可以实现这些锁：</p><ol><li><strong>可重入锁（Reentrant Lock）</strong>：<code>synchronized</code> 实现的锁是可重入的，这意味着同一个线程可以多次获取同一个锁，而不会被阻塞。这种锁机制允许线程在持有锁的情况下再次获取相同的锁，避免了死锁的发生。</li><li><strong>排它锁/互斥锁/独占锁</strong>：<code>synchronized</code> 实现的锁是互斥的，也就是说，在同一时间只有一个线程能够获取到锁，其他线程必须等待该线程释放锁才能继续执行。这确保了同一时刻只有一个线程可以访问被锁定的代码块或方法，从而保证了数据的一致性和完整性。</li><li><strong>悲观锁</strong>：<code>synchronized</code> 实现的锁属于悲观锁，因为它默认情况下假设会发生竞争，并且会导致其他线程阻塞，直到持有锁的线程释放锁。悲观锁的特点是对并发访问持保守态度，认为会有其他线程来竞争共享资源，因此在访问共享资源之前会先获取锁。</li><li><strong>非公平锁：</strong> <code>synchronized</code>在早期的Java版本中，默认实现的是非公平锁，也就是说，线程获取锁的顺序并不一定按照它们请求锁的顺序来进行，而是允许“插队”，即已经在等待队列中的线程可能被后来请求锁的线程抢占。</li></ol><blockquote><p>有关Java中的锁的分类，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484197&idx=1&sn=ab41ad6749b26afb598766352b9d2fb2&chksm=c2245352f553da4424aabbf165b90f56e666c8cebf1fcea2b08f240d0ad5924cde5a0b6fcd90#rd" target="_blank" rel="noopener">阿里二面：Java中锁的分类有哪些？你能说全吗？</a></p></blockquote><h4 id="synchronized使用方式"><a href="#synchronized使用方式" class="headerlink" title="synchronized使用方式"></a>synchronized使用方式</h4><p><code>synchronized</code>关键字可以修饰方法、代码块或静态方法，用于确保同一时间只有一个线程可以访问被<code>synchronized</code>修饰的代码片段。</p><h5 id="修饰实例方法"><a href="#修饰实例方法" class="headerlink" title="修饰实例方法"></a><strong>修饰实例方法</strong></h5><p>当<code>synchronized</code>修饰实例方法时，锁住的是当前实例对象（this）。这意味着在同一时刻，只能有一个线程访问此方法，所有对该对象实例的其他同步方法调用将会被阻塞，直到该线程释放锁。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedInstanceMethod</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修饰实例方法，锁住的是当前实例对象</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SynchronizedInstanceMethod sim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedInstanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sim<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>sim<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final counter value: "</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>像上述这个例子，大家在接触多线程时一定会看过或者写过类似的代码，<code>i++</code>在多线程的情况下是线程不安全的，所以我们使用<code>synchronized</code>作用在累加的方法上，使其变成线程安全的。上述打印结果为：</p><pre class="line-numbers language-java"><code class="language-java">Final block counter value<span class="token operator">:</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而对于<code>synchronized</code>作用于实例方法上时，锁的是当前实例对象，但是如果我们锁住的是不同的示例对象，那么<code>synchronized</code>就不能保证线程安全了。如下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedInstanceMethod</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修饰实例方法，锁住的是当前实例对象</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynchronizedInstanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynchronizedInstanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final counter value: "</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果为：</p><pre class="line-numbers language-java"><code class="language-java">Final counter value<span class="token operator">:</span> <span class="token number">1491</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修饰静态方法"><a href="#修饰静态方法" class="headerlink" title="修饰静态方法"></a><strong>修饰静态方法</strong></h5><p>若<code>synchronized</code>修饰的是静态方法，那么锁住的是类的Class对象，因此，无论多少个该类的实例存在，同一时刻也只有一个线程能够访问此静态同步方法。针对修饰实例方法的线程不安全的示例，我们只需要在<code>synchronized</code>修饰的实例方法上加上<code>static</code>，将其变成静态方法，此时<code>synchronized</code>锁住的就是类的class对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedStaticMethod</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修饰实例方法，锁住的是当前实例对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynchronizedStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SynchronizedStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final counter value: "</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果为：</p><pre class="line-numbers language-java"><code class="language-java">Final counter value<span class="token operator">:</span> <span class="token number">2000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修饰代码块"><a href="#修饰代码块" class="headerlink" title="修饰代码块"></a><strong>修饰代码块</strong></h5><p>通过指定对象作为锁，可以更精确地控制同步范围。这种方式允许在一个方法内部对不同对象进行不同的同步控制。可以指定一个对象作为锁，只有持有该对象锁的线程才能执行被<code>synchronized</code>修饰的代码块。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedBlock</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这个this还可以是SynchronizedBlock.class，说明锁住的是class对象</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SynchronizedBlock block <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final counter value: "</span> <span class="token operator">+</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>synchronized</code> 内置锁作为一种对象级别的同步机制，其作用在于确保临界资源的互斥访问，实现线程安全。它本质上锁定的是对象的监视器(Object Monitor)，而非具体的引用变量。这种锁具有可重入性，即同一个线程在已经持有某对象锁的情况下，仍能再次获取该对象的锁，这显著增强了线程安全代码的编写便利性，并在一定程度上有助于降低因线程交互引起的死锁风险。</p><blockquote><p>关于如何避免死锁，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484107&idx=1&sn=7da10c91cb4b60ed53cc88c90a9ae5a2&chksm=c22452bcf553dbaad7ec7a7e9b69afa8ee9f7d25afea81cd31e84894ed7919b65172479080df#rd" target="_blank" rel="noopener">阿里二面：如何定位&amp;避免死锁？连着两个面试问到了！</a></p></blockquote><h3 id="synchronized的底层原理"><a href="#synchronized的底层原理" class="headerlink" title="synchronized的底层原理"></a>synchronized的底层原理</h3><p>在JDK 1.6之前，<code>synchronized</code>关键字所实现的锁机制确实被认为是重量级锁。这是因为早期版本的Java中，synchronized的实现依赖于操作系统的互斥量（Mutexes）来实现线程间的同步，这涉及到了从用户态到内核态的切换以及线程上下文切换等相对昂贵的操作。一旦一个线程获得了锁，其他试图获取相同锁的线程将会被阻塞，这种阻塞操作会导致线程状态的改变和CPU资源的消耗，因此在高并发、低锁竞争的情况下，这种锁机制可能会成为性能瓶颈。</p><p>而在JDK 1.6中，对synchronized进行了大量优化，其中包括引入了偏向锁（Biased Locking）、轻量级锁（Lightweight Locking）的概念。接下来我们先说一下JDK1.6之前<code>synchronized</code>的原理。</p><h4 id="对象的组成结构"><a href="#对象的组成结构" class="headerlink" title="对象的组成结构"></a>对象的组成结构</h4><p>在JDK1.6之前，在Java虚拟机中，Java对象的内存结构主要有<strong>对象头（Object Header）</strong>，<strong>实例数据（Instance Data）</strong>，<strong>对齐填充（Padding）</strong> 三个部分组成。</p><ol><li><p><strong>对象头（Object Header）</strong>：<br>对象头主要包含了两部分信息：Mark Word（标记字段）和指向类元数据（Class Metadata）的指针。Mark Word 包含了一些重要的标记信息，比如对象是否被锁定、对象的哈希码、GC相关信息等。类元数据指针指向对象的类元数据，用于确定对象的类型信息、方法信息等。</p></li><li><p><strong>实例数据（Instance Data）</strong>：<br>实例数据是对象的成员变量和实例方法所占用的内存空间，它们按照声明的顺序依次存储在对象的实例数据区域中。实例数据包括对象的所有非静态成员变量和非静态方法。</p></li><li><p><strong>填充（Padding）</strong>：<br>在JDK 1.6及之前的版本中，为了保证对象在内存中的存储地址是8字节的整数倍，可能会在对象的实例数据之后添加一些填充字节。这些填充字节的目的是对齐内存地址，提高内存访问效率。填充字节通常不包含任何实际数据，只是用于占位。</p></li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240330001119.png" alt="JDK1.6之前对象结构.png"></p><h5 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h5><p>在JDK 1.6之前的Java HotSpot虚拟机中，对象头的基本组成依然包含Mark Word和类型指针（Klass Pointer），但当时对于锁的实现还没有引入偏向锁和轻量级锁的概念，因此对象头中的Mark Word在处理锁状态时比较简单，主要是用来存储锁的状态信息以及与垃圾收集相关的数据。在一个32位系统重对象头大小通常约为32位，而在64位系统中大小通常为64位。<br><strong>对象头组成部分：</strong></p><ol><li><strong>Mark Word（标记字）</strong>：<br>在早期版本的HotSpot虚拟机中，Mark Word主要存储的信息包括：</li></ol><ul><li>对象的hashCode（在没有锁定时）。</li><li>对象的分代年龄（用于垃圾回收算法）。</li><li>锁状态信息，如无锁、重量级锁状态（在使用<code>synchronized</code>关键字时）。</li><li>对象的锁指针（Monitor地址，当对象被重量级锁锁定时，存储的是指向重量级锁（Monitor）的指针）。</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240330235206.png" alt="HotSpot虚拟机对象头Mark Word.png"></p><p>对象头中的Mark Word是一个非固定的数据结构，它会根据对象的状态复用自己的存储空间，存储不同的数据。在Java HotSpot虚拟机中，Mark Word会随着程序运行和对象状态的变化而存储不同的信息。其信息变化如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240330234451.png" alt="image.png"></p><p>从存储信息的变化可以看出：</p><ul><li>对象头的最后两位存储了锁的标志位，01表示初始状态，即未加锁。此时，对象头内存储的是对象自身的哈希码。无锁和偏向锁的锁标志位都是01，只是在前面的1bit区分了这是无锁状态还是偏向锁状态。</li><li>当进入偏向锁阶段时，对象头内的标志位变为01，并且存储当前持有锁的线程ID。这意味着只有第一个获取锁的线程才能继续持有锁，其他线程不能竞争同一把锁。</li><li>在轻量级锁阶段，标志位变为00，对象头内存储的是指向线程栈中锁记录的指针。这种情况下，多个线程可以通过比较锁记录的地址与对象头内的指针地址来确定自己是否拥有锁。</li></ul><p>其中轻量级锁和偏向锁是Java 6 对 synchronized 锁进行优化后新增加的。重量级锁也就是通常说synchronized的对象锁，锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。</p><ol start="2"><li><p><strong>类型指针（Klass Pointer 或 Class Pointer）</strong>：<br>类型指针指向对象的类元数据（Class Metadata），即对象属于哪个类的类型信息，用于确定对象的方法表和字段布局等。在一个32位系统重大小通常约为32位，而在64位系统中大小通常为64位。</p></li><li><p><strong>数组长度（Array Length）</strong>（仅对数组对象适用）：<br>如果对象是一个数组，对象头中会额外包含一个字段来存储数组的长度。在一个32位系统中大小通常约为32位，而在64位系统中大小通常为64位。</p></li></ol><h4 id="监视器（Monitor）"><a href="#监视器（Monitor）" class="headerlink" title="监视器（Monitor）"></a>监视器（Monitor）</h4><p>在Java中，每个对象都与一个Monitor关联，Monitor是一种同步机制，负责管理线程对共享资源的访问权限。当一个Monitor被线程持有时，对象便处于锁定状态。Java的<code>synchronized</code>关键字在JVM层面上通过<code>MonitorEnter</code>和<code>MonitorExit</code>指令实现方法同步和代码块同步。<code>MonitorEnter</code>尝试获取对象的Monitor所有权（即获取对象锁），<code>MonitorExit</code>确保每个MonitorEnter操作都有对应的释放操作。</p><p>在HotSpot虚拟机中，Monitor具体由ObjectMonitor实现，其结构如下：</p><pre class="line-numbers language-C++"><code class="language-C++">ObjectMonitor() {    _header       = NULL;    _count        = 0; //锁计数器，表示重入次数，每当线程获取锁时加1，释放时减1。    _waiters      = 0, //等待线程总数，不一定在实际的ObjectMonitor中有直接体现，但在管理线程同步时是一个重要指标。    _recursions   = 0; //与_count类似，表示当前持有锁的线程对锁的重入次数。    _object       = NULL; // 通常指向关联的Java对象，即当前Monitor所保护的对象。    _owner        = NULL; // 持有ObjectMonitor对象的线程地址，即当前持有锁的线程。    _WaitSet      = NULL; //存储那些调用过`wait()`方法并等待被唤醒的线程队列。    _WaitSetLock  = 0 ; // 用于保护_WaitSet的锁。    _Responsible  = NULL ;    _succ         = NULL ;    _cxq          = NULL ; //阻塞在EntryList上的单向线程列表，可能用于表示自旋等待队列或轻量级锁的自旋链表。    FreeNext      = NULL ; // 在对象Monitor池中可能用于链接空闲的ObjectMonitor对象。    _EntryList    = NULL ; // 等待锁的线程队列，当线程请求锁但发现锁已被持有时，会被放置在此队列中等待。    _SpinFreq     = 0 ;    _SpinClock    = 0 ;    OwnerIsThread = 0 ; // 标志位，可能用于标识_owner是否指向一个真实的线程对象。  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中最重要的就是<code>_owner</code>、<code>_WaitSet</code>、<code>_EntryList</code>和<code>count</code>几个字段，他们之间的转换关系：</p><ol><li><p><strong><code>_owner</code></strong>:<br>当一个线程首次成功执行<code>synchronized</code>代码块或方法时，会尝试获取对象的Monitor（即<code>ObjectMonitor</code>），并将自身设置为<code>_owner</code>。该线程此刻拥有了对象的锁，可以独占访问受保护的资源。</p></li><li><p><strong><code>_EntryList</code> → <code>_owner</code></strong>:<br>当多个线程同时尝试获取锁时，除第一个成功获取锁的线程外，其余线程会进入<code>_EntryList</code>排队等待。一旦<code>_owner</code>线程释放锁，<code>_EntryList</code>中的下一个线程将有机会获取锁并成为新的<code>_owner</code>。</p></li><li><p><strong><code>_owner</code> → <code>_WaitSet</code></strong>:<br>当<code>_owner</code>线程在持有锁的情况下调用<code>wait()</code>方法时，它会释放锁（即<code>_owner</code>置为<code>NULL</code>），并把自己从<code>_owner</code>转变为等待状态，然后将自己添加到<code>_WaitSet</code>中。这时，线程进入等待状态，暂停执行，等待其他线程通过<code>notify()</code>或<code>notifyAll()</code>唤醒。</p></li><li><p><strong><code>_WaitSet</code> → <code>_EntryList</code></strong>:<br>当其他线程调用<code>notify()</code>或<code>notifyAll()</code>方法时，会选择一个或全部在<code>_WaitSet</code>中的线程，将它们从<code>_WaitSet</code>移除，并重新加入到<code>_EntryList</code>中。这样，这些线程就有机会再次尝试获取锁并成为新的<code>_owner</code>。</p></li></ol><p>有上述转换关系我们可以发现，当多线程访问同步代码时：</p><ol><li>线程首先尝试进入_EntryList竞争锁，成功获取Monitor后，将_owner设置为当前线程并将count递增。</li><li>若线程调用wait()方法，会释放Monitor、清空_owner，并将线程移到_WaitSet中等待被唤醒。</li><li>当线程执行完毕或调用notify()/notifyAll()唤醒等待线程后，会释放Monitor，使得其他线程有机会获取锁。</li></ol><p>在Java对象的对象头（Mark Word）中，存储了与锁相关的状态信息，这使得任意Java对象都能作为锁来使用，同时，notify/notifyAll/wait等方法正是基于Monitor锁对象来实现的，因此这些方法必须在<code>synchronized</code>代码块中调用。</p><p>我们查看上述同步代码块<code>SynchronizedBlock</code>的字节码文件：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240331225537.png" alt="image.png"></p><p>从上述字节码中可以看到同步代码块的实现是由<code>monitorenter</code> 和<code>monitorexit</code>指令完成的，其中<code>monitorenter</code>指令所在的位置是同步代码块开始的位置，第一个<code>monitorexit</code>指令是用于正常结束同步代码块的指令，第二个<code>monitorexit</code>指令是用于异常结束时所执行的释放Monitor指令。</p><blockquote><p>关于查看class文件的字节码文件，有两种方式：1、通过命令:  javap -verbose &lt;class路径&gt;/class文件。2、IDEA中通过插件：<code>jclasslib Bytecode viewer</code>。</p></blockquote><p>我们再看一下作用于同步方法的字节码：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240331232333.png" alt="image.png"></p><p>我们可以看出同步方法上没有<code>monitorenter</code> 和 <code>monitorexit</code> 这两个指令了，而在查看该方法的class文件的结构信息时发现了<code>Access flags</code>后边的synchronized标识，该标识表明了该方法是一个同步方法。Java虚拟机通过该标识可以来辨别一个方法是否为同步方法，如果有该标识，线程将持有Monitor，在执行方法，最后释放Monitor。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240331230937.png" alt="image.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>synchronized</code>作用于同步代码块时的原理：<br>Java虚拟机使用monitorenter和monitorexit指令实现同步块的同步。monitorenter指令在进入同步代码块时执行，尝试获取对象的Monitor（即锁），monitorexit指令在退出同步代码块时执行，释放Monitor。</p><p>而对于方法级别的同步的原理：<br>Java虚拟机通过在方法的访问标志（Access flags）中设置ACC_SYNCHRONIZED标志来实现方法同步。当一个方法被声明为<code>synchronized</code>时，编译器会在生成的字节码中插入monitorenter和monitorexit指令，确保在方法执行前后正确地获取和释放对象的Monitor。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里二面：Java中锁的分类有哪些？你能说全吗？</title>
      <link href="/article/javalockcategory.html"/>
      <url>/article/javalockcategory.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在多线程并发编程场景中，锁作为一种至关重要的同步工具，承担着协调多个线程对共享资源访问秩序的任务。其核心作用在于确保在特定时间段内，仅有一个线程能够对资源进行访问或修改操作，从而有效地保护数据的完整性和一致性。锁作为一种底层的安全构件，有力地防止了竞态条件和数据不一致性的问题，尤其在涉及多线程或多进程共享数据的复杂场景中显得尤为关键。</p><p>而了解锁的分类，能帮助我们何种业务场景下使用选择哪种锁。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/Java%E4%B8%AD%E9%94%81%E5%88%86%E7%B1%BB.jpg" alt="Java中锁分类.jpg"></p><h3 id="基于锁的获取与释放方式分类"><a href="#基于锁的获取与释放方式分类" class="headerlink" title="基于锁的获取与释放方式分类"></a>基于锁的获取与释放方式分类</h3><p>计划于所得获取与释放方式进行分类，Java中的锁可以分为：显式锁和隐式锁。</p><h4 id="隐式锁"><a href="#隐式锁" class="headerlink" title="隐式锁"></a>隐式锁</h4><p>Java中的隐式锁（也称为内置锁或自动锁）是通过使用<code>synchronized</code>关键字实现的一种线程同步机制。当一个线程进入被<code>synchronized</code>修饰的方法或代码块时，它会自动获得对象级别的锁，退出该方法或代码块时则会自动释放这把锁。</p><p>在Java中，隐式锁的实现机制主要包括以下两种类型：</p><ol><li><p><strong>互斥锁（Mutex）</strong>： 虽然Java标准库并未直接暴露操作系统的互斥锁提供使用，但在Java虚拟机对<code>synchronized</code>关键字处理的底层实现中，当锁竞争激烈且必须升级为重量级锁时，会利用操作系统的互斥量机制来确保在同一时刻仅允许一个线程持有锁，从而实现严格的线程互斥控制。</p></li><li><p><strong>内部锁（Intrinsic Lock）或监视器锁（Monitor Lock）</strong>： Java语言为每个对象内建了一个监视器锁，这是一个更高级别的抽象。我们可以通过使用<code>synchronized</code>关键字即可便捷地管理和操作这些锁。当一个线程访问被<code>synchronized</code>修饰的方法或代码块时，会自动获取相应对象的监视器锁，并在执行完毕后自动释放，这一过程对用户透明，故被称为隐式锁。每个Java对象均与一个监视器锁关联，以此来协调对该对象状态访问的并发控制。</p></li></ol><p><strong>优点：</strong></p><ol><li><strong>简洁易用</strong>：程序员无需手动管理锁的获取和释放过程，降低了编程复杂性。</li><li><strong>安全性</strong>：隐式锁确保了线程安全，避免了竞态条件，因为一次只有一个线程能持有锁并执行同步代码块。</li><li><strong>异常处理下的自动释放</strong>：即使在同步代码块中抛出异常，隐式锁也会在异常退出时被释放，防止死锁。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>锁定粒度</strong>：隐式锁的粒度通常是对象级别，这意味着如果一个大型对象的不同部分实际上可以独立地被不同线程访问，但由于整个对象被锁定，可能导致不必要的阻塞和较低的并发性能。</li><li><strong>不灵活</strong>：相对于显示锁（如<code>java.util.concurrent.locks.Lock</code>接口的实现类），隐式锁的功能较有限，无法提供更细粒度的控制，如尝试获取锁、定时等待、可中断的获取锁等高级特性。</li><li><strong>锁竞争影响</strong>：在高并发环境下，若多个线程竞争同一把锁，可能会引发“锁争用”，导致性能下降，特别是在出现锁链和死锁的情况下。</li></ol><p><strong>适用场景：</strong> 隐式锁适用于相对简单的多线程同步需求，尤其是在只需要保护某个对象状态完整性，且无需过多关注锁策略灵活性的场合。对于要求更高并发性和更复杂锁管理逻辑的应用场景，显示锁通常是一个更好的选择。</p><h4 id="显式锁"><a href="#显式锁" class="headerlink" title="显式锁"></a>显式锁</h4><p>显式锁是由<code>java.util.concurrent.locks.Lock</code>接口及其诸多实现类提供的同步机制，相较于通过<code>synchronized</code>关键字实现的隐式锁机制，显式锁赋予开发者更为精细和灵活的控制能力，使其能够在多线程环境中精准掌控同步动作。显式锁的核心作用在于确保在任何时刻仅有一个线程能够访问关键代码段或共享数据，从而有效防止数据不一致性问题和竞态条件。</p><p>相较于隐式锁，显式锁提供了更为多样化的锁操作选项，包括但不限于支持线程在等待锁时可被中断、根据先后顺序分配锁资源的公平锁与非公平锁机制，以及能够设定锁获取等待时间的定时锁功能。这些特性共同增强了显式锁在面对复杂并发场景时的适应性和可调控性，使之成为解决高度定制化同步需求的理想工具。</p><p><strong>日常开发中，常见的显式锁分类有如下几种：</strong></p><ol><li><strong>ReentrantLock</strong>：可重入锁，继承自<code>Lock</code>接口，支持可中断锁、公平锁和非公平锁的选择。可重入意味着同一个线程可以多次获取同一线程持有的锁。</li><li><strong>ReentrantReadWriteLock</strong>：读写锁，提供了两个锁，一个是读锁，允许多个线程同时读取；另一个是写锁，同一时间内只允许一个线程写入，写锁会排斥所有读锁和写锁。</li><li><strong>StampedLock</strong>：带版本戳的锁，提供了乐观读、悲观读写模式，适合于读多写少的场景，可以提升系统性能。</li></ol><p><strong>优点：</strong></p><ol><li><strong>灵活控制</strong>：显式锁提供了多种获取和释放锁的方式，可以根据实际需求进行选择，比如中断等待锁的线程，设置超时获取锁等。</li><li><strong>性能优化</strong>：在某些特定场景下，显式锁可以提供比隐式锁更好的性能表现，尤其是当需要避免死锁或优化读多写少的情况时。</li><li><strong>公平性选择</strong>：显式锁允许创建公平锁，按照线程请求锁的顺序给予响应，保证所有线程在等待锁时有一定的公平性。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>使用复杂</strong>：相较于隐式锁，显式锁需要手动调用<code>lock()</code>和<code>unlock()</code>方法，增加了编程复杂性，如果不正确地使用（如忘记释放锁或未捕获异常导致锁未释放），容易造成死锁或其他并发问题。</li><li><strong>性能开销</strong>：在某些简单场景下，显式锁的额外API调用和锁状态管理可能带来额外的性能开销，尤其当公平锁启用时，由于需要维护线程队列和线程调度，可能会影响整体性能。</li><li><strong>错误可能性</strong>：由于显式锁的操作更加细致，因此更容易出错，开发者需要具备较高的并发编程意识和技能才能妥善使用。</li></ol><h3 id="基于对资源的访问权限"><a href="#基于对资源的访问权限" class="headerlink" title="基于对资源的访问权限"></a>基于对资源的访问权限</h3><p>按照线程对资源的访问权限来分类，可以将锁分为：独占锁（Exclusive Lock）和共享锁（Shared Lock）。</p><h4 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h4><p>独占锁（Exclusive Lock），又称排他锁或写锁，是一种同步机制，它确保在任一时刻，最多只有一个线程可以获得锁并对受保护的资源进行访问或修改。一旦线程获得了独占锁，其他所有试图获取同一锁的线程将被阻塞，直到拥有锁的线程释放锁为止。独占锁主要用于保护那些在并发环境下会被多个线程修改的共享资源，确保在修改期间不会有其他线程干扰，从而维护数据的一致性和完整性。</p><p>对于独占锁就像图书馆里的某本书，这本书只有唯一的一本。当一个读者想要借阅这本书时，他会去图书管理员那里登记并拿到一个“借书凭证”（相当于独占锁）。此时，这本书就被锁定了，其他读者无法借阅这本书，直至第一个读者归还书本并交回“借书凭证”。这就像是线程获得了独占锁，只有拥有锁的线程可以修改或操作资源（书本），其他线程必须等待锁的释放才能执行相应的操作。</p><p>而独占锁的实现方式，主要有如下两种：</p><ol><li><code>synchronized</code>关键字：通过<code>synchronized</code>关键字实现的隐式锁，它是独占锁的一种常见形式，任何时刻只有一个线程可以进入被<code>synchronized</code>修饰的方法或代码块。</li><li><code>ReentrantLock</code>：可重入的独占锁，提供了更多的控制方式，包括可中断锁、公平锁和非公平锁等。</li></ol><p><strong>优点：</strong></p><ol><li><strong>简单易用</strong>：对于<code>synchronized</code>关键字，语法简单直观，易于理解和使用。</li><li><strong>线程安全</strong>：确保了对共享资源的独占访问，避免了并发环境下的数据竞争问题。</li><li><strong>可重入性</strong>：像<code>ReentrantLock</code>这样的锁，支持同一个线程重复获取同一把锁，提高了线程间协作的便利性。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>粒度固定</strong>：对于<code>synchronized</code>，锁的粒度是固定的，无法动态调整，可能导致不必要的阻塞。</li><li><strong>缺乏灵活性</strong>：隐式锁不能主动中断等待锁的线程，也无法设置超时等待。</li><li><strong>性能瓶颈</strong>：在高度竞争的环境中，<code>synchronized</code>可能会造成上下文切换频繁，效率低下；而显式锁虽提供了更灵活的控制，但如果使用不当也可能导致额外的性能损失。</li></ol><h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h4><p>共享锁（Shared Lock）也称为<strong>读锁</strong>（Read Lock），是一种多线程或多进程并发控制的同步机制，它允许多个线程同时读取共享资源，但不允许任何线程修改资源。在数据库系统和并发编程中广泛使用，确保在并发读取场景下数据的一致性。</p><p>共享锁就像图书馆里有一套多人阅读的杂志合订本，这套合订本可以被多个读者同时翻阅，但是任何人都不能带走或在上面做标记。当一个读者要阅读时，他会向图书管理员申请“阅读凭证”（相当于共享锁）。如果有多个读者想阅读，图书管理员会给他们每人一份阅读凭证，这样大家都可以坐在阅览室里一起阅读这套合订本，但是都不能单独占有或改变它。在并发编程中，多个线程可以同时获取共享锁进行读取操作，但都不能修改数据，这就像是多个线程同时持有共享锁读取资源，但不允许在此期间进行写操作。</p><p>实现共享锁的关键机制是<strong>读写锁（ReadWriteLock）</strong>，这是一种特殊类型的共享锁机制，它巧妙地将对共享资源的访问权限划分为了读取权限和写入权限两类。在读写锁的控制下，多个线程可以同时进行对共享数据的读取操作，形成并发读取，而对数据的写入操作则采取独占式处理，确保同一时间段内仅有一个线程执行写入操作。在写入操作正在进行时，无论是其他的读取操作还是写入操作都会被暂时阻塞，直至写操作结束。</p><p>读写锁包含两种锁模式：<strong>读锁（ReadLock）</strong> 和 <strong>写锁（WriteLock）</strong>。当多个线程需要访问同一份共享数据时，只要这些线程都是进行读取操作，则都能成功获取并持有读锁，从而实现并行读取。然而，一旦有线程尝试进行写入操作，那么不论是其他正在执行读取的线程还是准备进行写入的线程，都无法继续获取读锁或写锁，直至当前写操作全部完成并释放写锁。这样，读写锁有效地平衡了读取密集型任务的并发性和写入操作的原子性要求。</p><p><strong>优点：</strong></p><ol><li><strong>提高并发性</strong>：对于读多写少的场景，共享锁可以使多个读取操作并行执行，显著提高系统的并发性能。</li><li><strong>数据保护</strong>：在读取阶段避免了数据被意外修改，确保读取到的是稳定的数据状态。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>写操作阻塞</strong>：只要有共享锁存在，其他事务就不能对数据加排他锁（Exclusive Lock）进行写操作，这可能导致写操作长时间等待，降低系统的写入性能。</li><li><strong>可能导致死锁</strong>：在复杂的事务交互中，如果没有合适的锁管理策略，共享锁可能会参与到死锁循环中，导致事务无法正常完成。</li><li><strong>数据一致性问题</strong>：虽然共享锁能保护读取过程中数据不被修改，但并不能阻止数据在读取操作之后立即被其他事务修改，对于要求强一致性的应用可能不够。</li></ol><p>如以下使用共享锁示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SharedResource</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantReadWriteLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantReadWriteLock<span class="token punctuation">.</span>ReadLock readLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantReadWriteLock<span class="token punctuation">.</span>WriteLock writeLock <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyData</span><span class="token punctuation">(</span><span class="token keyword">int</span> newData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取写锁（独占锁），在同一时刻只有一个线程可以获取写锁</span>        writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Modify Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 修改数据</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> newData<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 数据修改相关操作...</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 无论如何都要确保解锁</span>            writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取读锁（共享锁），允许多个线程同时获取读锁进行读取操作</span>        readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Read Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读取数据，此时其他读取线程也可以同时读取，但不允许写入</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放读锁</span>            readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SharedResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread reader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Reader 1 reads: "</span> <span class="token operator">+</span> resource<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Reader1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread reader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Reader 2 reads: "</span> <span class="token operator">+</span> resource<span class="token punctuation">.</span><span class="token function">readData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Reader1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> resource<span class="token punctuation">.</span><span class="token function">modifyData</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Writer1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等待所有线程执行完成</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            reader1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reader2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240317234536.png" alt="image.png"></p><p>在这个示例中，使用了 <code>ReentrantReadWriteLock</code> 来控制对 <code>data</code> 的读写操作。<code>readData()</code> 方法使用读锁，允许多个线程同时读取数据，而 <code>modifyData()</code> 方法使用写锁，确保同一时间只有一个线程可以修改数据。这样就可以在并发场景下既保证数据读取的并发性，又避免了数据因并发写入而造成的不一致性问题。</p><h3 id="基于锁的占有权是否可重入"><a href="#基于锁的占有权是否可重入" class="headerlink" title="基于锁的占有权是否可重入"></a>基于锁的占有权是否可重入</h3><p>按照锁的占有权是否可以重入，可以把锁分为：可重入锁以及不可重入锁。</p><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><p>可重入锁（Reentrant Lock）作为一种线程同步机制，具备独特的重入特性，即当线程已经获取了锁后，它可以再次请求并成功获得同一把锁，从而避免了在递归调用或嵌套同步块中产生的死锁风险。这意味着在执行锁保护的代码区域时，即便调用了其他同样被该锁保护的方法或代码片段，持有锁的线程也能顺利完成操作。</p><p>在多线程环境下，可重入锁扮演着至关重要的角色，它严格限制了同一时间只能有一个线程访问特定的临界区，有效防止了并发访问引发的数据不一致和竞态条件问题。此外，通过允许线程在持有锁的状态下重新获取该锁，可重入锁巧妙地解决了同类锁之间由于互相等待而形成的潜在死锁状况，从而提升了多线程同步的安全性和可靠性。</p><p>可重入锁主要可以通过以下三种方式实现：</p><ol><li><p><code>synchronized</code>关键字：<code>synchronized</code>关键字实现的隐式锁就是一种可重入锁。</p></li><li><p><code>ReentrantLock</code>：<code>java.util.concurrent.locks.ReentrantLock</code>类实现了<code>Lock</code>接口，提供了显式的可重入锁功能，它允许更细粒度的控制，例如支持公平锁、非公平锁，以及可中断锁、限时锁等。</p></li><li><p><code>ReentrantReadWriteLock</code>：<code>ReentrantReadWriteLock</code> 是一种特殊的可重入锁，它通过读写锁的设计，既实现了可重入特性的线程安全，又能高效地处理读多写少的并发场景。</p><p><strong>优点：</strong></p></li><li><p><strong>线程安全性</strong>：确保了在多线程环境下的数据一致性。</p></li><li><p><strong>可重入性</strong>：简化了代码编写，特别是在递归调用或嵌套同步块的场景中。</p></li><li><p><strong>灵活性</strong>：显式可重入锁（如ReentrantLock）提供了更多控制选项，如尝试获取锁、设置锁的公平性、中断等待线程等。</p></li></ol><p><strong>缺点：</strong></p><ol><li><strong>使用复杂性</strong>：相比于隐式锁（synchronized），显式锁需要手动管理锁的获取和释放，增加了编程复杂性和出错概率。</li><li><strong>性能开销</strong>：在某些情况下，显式锁可能因为额外的API调用和状态管理而带来一定的性能开销。</li><li><strong>死锁风险</strong>：如果开发者不谨慎地管理锁的获取和释放顺序，或者滥用锁的特性，可能会导致死锁的发生。尤其是对于显式锁，如果未正确释放，可能会导致资源无法回收。</li></ol><p>以下为可重入锁使用示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReentrantLockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 假设这是一个需要同步访问的共享资源</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sharedResource<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在锁保护下执行操作</span>            sharedResource<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这里假设有个内部方法也需要同步访问sharedResource</span>            <span class="token function">doSomeOtherWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 无论发生什么情况，最后都要释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 可重入的内部方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSomeOtherWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为当前线程已经持有锁，所以可以再次获取</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行依赖于sharedResource的操作</span>            sharedResource <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Inner method executed with sharedResource: "</span> <span class="token operator">+</span> sharedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ReentrantLockExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLockExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>example<span class="token operator">:</span><span class="token operator">:</span>increment<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>example<span class="token operator">:</span><span class="token operator">:</span>increment<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等待两个线程执行完毕</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 输出最终的sharedResource值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final sharedResource value: "</span> <span class="token operator">+</span> example<span class="token punctuation">.</span>sharedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240318003051.png" alt="image.png"></p><p>示例中，<code>increment()</code>方法和内部的<code>doSomeOtherWork()</code>方法都需要在获取锁的情况下执行。由于ReentrantLock是可重入的，所以在<code>increment()</code>方法内部调用<code>doSomeOtherWork()</code>时，线程仍然可以成功获取锁，并继续执行操作。当所有操作完成时，通过<code>finally</code>块确保了锁的释放。这样可以避免死锁，并确保在多线程环境下对共享资源的访问是线程安全的。</p><h4 id="不可重入锁"><a href="#不可重入锁" class="headerlink" title="不可重入锁"></a>不可重入锁</h4><p>不可重入锁（Non-reentrant Lock）是一种线程同步机制，它的核心特征在于禁止同一个线程在已经持有锁的前提下再度获取相同的锁。若一个线程已取得不可重入锁，在其执行路径中遇到需要再次获取该锁的场景时，该线程将会被迫等待，直至原先获取的锁被释放，其他线程才有可能获取并执行相关临界区代码。</p><p>此类锁机制同样服务于多线程环境下的资源共享保护，旨在确保同一时间内仅有单一线程能够访问临界资源，从而有效规避数据不一致性和竞态条件等问题。相较于可重入锁，不可重入锁在递归调用或涉及锁嵌套的复杂同步场景下表现出局限性，因其可能导致线程阻塞和潜在的死锁风险，降低了线程同步的灵活性和安全性。在实际开发中，除非有特殊的需求或场景约束，否则更建议采用可重入锁以实现更为稳健高效的线程同步控制。</p><p>在Java标准库中并没有直接提供名为“不可重入锁”的内置锁，通常我们会通过对比ReentrantLock（可重入锁）来理解不可重入锁的概念。理论上，任何不具备可重入特性的锁都可以认为是不可重入锁。但在实际应用中，Java的<code>synchronized</code>关键字修饰的方法或代码块在早期版本中曾经存在过类似不可重入的行为，但在目前Java的所有版本中，<code>synchronized</code>关键字所实现的锁实际上是可重入的。</p><p><strong>优点：</strong></p><ol><li><strong>简单性</strong>：从实现角度来看，不可重入锁可能在设计和实现上相对简单，因为它不需要处理递归锁定的复杂性。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>容易引发死锁</strong>：如果在一个线程已持有不可重入锁的情况下，它又试图再次获取同一把锁，那么就可能导致死锁。因为线程自身无法进一步推进，也无法释放已持有的锁，其他线程也无法获取锁，从而形成死锁状态。</li><li><strong>限制性较强</strong>：不可重入锁极大地限制了线程的自由度，特别是在递归调用或含有嵌套锁的复杂同步结构中，往往无法满足需求。</li><li><strong>线程栈跟踪复杂</strong>：对于编程者而言，需要更加小心地管理锁的层次结构，以防止无意间陷入死锁或资源浪费的情况。</li></ol><h3 id="基于锁的获取公平性"><a href="#基于锁的获取公平性" class="headerlink" title="基于锁的获取公平性"></a>基于锁的获取公平性</h3><p>按照获取锁的公平性，也即请求顺序，将锁分为公平锁盒非公平锁。</p><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>公平锁是一种线程调度策略，在多线程环境下，当多个线程尝试获取锁时，锁的分配遵循“先请求先服务”（First-Come, First-Served, FCFS）原则，即按照线程请求锁的顺序来分配锁资源。这意味着等待时间最长的线程将优先获得锁。公平锁可以有效避免某个线程长期得不到锁而导致的饥饿现象，所有线程都有平等获取锁的机会。它确保了线程的调度更加有序，减少了不公平竞争导致的不确定性。</p><p>公平锁的实现，可以通过<code>java.util.concurrent.locks.ReentrantLock</code>的构造函数传入<code>true</code>参数，可以创建一个公平的<code>ReentrantLock</code>实例。</p><pre class="line-numbers language-java"><code class="language-java">ReentrantLock fairLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个公平锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优点：</strong></p><ol><li><strong>公平性</strong>：所有线程都遵循先来后到的原则，不会出现新来的线程总是抢占锁的现象，提高了系统的公平性和稳定性。</li><li><strong>避免线程饥饿</strong>：减少或消除了由于锁的不公平分配而导致的线程长时间等待锁的情况。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>性能开销</strong>：公平锁在每次释放锁后，都需要检查是否有等待时间更长的线程，这通常涉及到线程调度的额外开销，可能会降低系统的整体并发性能。</li><li><strong>线程上下文切换频繁</strong>：为了实现公平性，可能需要频繁地进行线程上下文切换，而这本身就是一种相对昂贵的操作。</li><li><strong>可能导致“convoy effect”</strong>：即大量线程因等待前面线程释放锁而形成队列，即使后来的线程只需要很短时间处理，也会不得不等待整个队列中的线程依次完成，从而降低了系统的吞吐量。</li></ol><p>以下使用公平锁示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FairLockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock fairLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用true参数创建公平锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">criticalSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fairLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取公平锁</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在此区域内的代码是临界区，同一时间只有一个线程可以执行</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" entered the critical section at "</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 模拟耗时操作</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            fairLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放公平锁</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> FairLockExample example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FairLockExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runnable task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            example<span class="token punctuation">.</span><span class="token function">criticalSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建并启动多个线程</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240318005153.png" alt="image.png"><br>在这个示例中，我们创建一个公平锁，我们创建了多个线程，每个线程都在执行<code>criticalSection</code>方法，该方法内部的代码块受到公平锁的保护，因此在任何时候只有一个线程能在临界区内执行。当多个线程尝试获取锁时，它们会按照请求锁的顺序来获取锁，确保线程调度的公平性。</p><h4 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h4><p>非公平锁是一种线程调度策略，在多线程环境下，当多个线程尝试获取锁时，锁的分配不遵循“先请求先服务”（First-Come, First-Served, FCFS）原则，而是允许任何等待锁的线程在锁被释放时尝试获取，即使其他线程已经在等待队列中等待更长时间。非公平锁在某些场景下可以提高系统的并发性能，因为它允许刚释放锁的线程或者其他新到达的线程立刻获取锁，而不是强制排队等待。</p><p>实现方式也同公平锁，也是通过<code>java.util.concurrent.locks.ReentrantLock</code>的构造函数，但是我们要传入<code>false</code>参数，可以创建一个非公平的<code>ReentrantLock</code>实例。</p><pre class="line-numbers language-java"><code class="language-java">ReentrantLock fairLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建一个非公平锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>优点：</strong></p><ol><li><strong>性能优化</strong>：非公平锁在某些条件下可能会提供更高的系统吞吐量，因为它允许线程更快地获取锁，减少线程上下文切换次数，尤其在锁竞争不激烈的场景下，这种效果更为明显。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>线程饥饿</strong>：非公平锁可能导致某些线程长时间无法获取锁，即存在线程饥饿的风险，因为新到达的线程可能连续多次获取锁，而早前就已经在等待的线程始终得不到执行机会。</li><li><strong>难以预测的线程调度</strong>：非公平锁会导致线程调度的不确定性增大，不利于系统的稳定性和性能分析。</li><li><strong>潜在的连锁反应</strong>：非公平锁可能导致线程之间的依赖关系变得复杂，可能会引发连锁反应，影响整体系统的性能和稳定性。</li></ol><h3 id="基于对共享资源的访问方式"><a href="#基于对共享资源的访问方式" class="headerlink" title="基于对共享资源的访问方式"></a>基于对共享资源的访问方式</h3><p>我们常说或者常用的悲观锁以及乐观锁就是以对共享资源的访问方式来区分的。</p><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>悲观锁（Pessimistic Lock）是一种并发控制策略，它假设在并发环境下，多个线程对共享资源的访问极有可能发生冲突，因此在访问资源之前，先尝试获取并锁定资源，直到该线程完成对资源的访问并释放锁，其他线程才能继续访问。悲观锁的主要作用是在多线程环境中防止数据被并发修改，确保数据的一致性和完整性。当一个线程获取了悲观锁后，其他线程必须等到锁释放后才能访问相应资源，从而避免了数据竞态条件和脏读等问题。悲观锁适合写操作较多且读操作较少的并发场景。</p><p>而悲观锁的实现可以通过<code>synchronized</code>关键字实现的对象锁或类锁。或者通过<code>java.util.concurrent.locks.Lock</code>接口的实现类，如<code>ReentrantLock</code>。</p><p>悲观锁虽然在并发场景下数据的一致性和完整性。但是他却有一些缺点，例如：</p><ol><li><strong>性能开销</strong>：频繁的加锁和解锁操作可能带来较大的性能消耗，尤其是在高并发场景下，可能导致线程频繁上下文切换。</li><li><strong>可能导致死锁</strong>：如果多个线程间的锁获取顺序不当，容易造成死锁。</li><li><strong>资源利用率低</strong>：在读多写少的场景下，悲观锁可能导致大量的读取操作等待，降低系统的并发能力和响应速度。</li></ol><p>以下我们使用显式锁<code>ReentrantLock</code>实现一个悲观锁的示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>ReentrantLock<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 持有锁进行存款操作</span>            balance <span class="token operator">+=</span> amount<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 更新账户余额的其他逻辑...</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保证锁一定会被释放</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 持有锁进行取款操作</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">>=</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 更新账户余额的其他逻辑...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁并不是Java本身提供的某种内置锁机制，而是指一种并发控制策略，它基于乐观假设：即在并发访问环境下，认为数据竞争不太可能发生，所以在读取数据时并不会立即加锁。乐观锁适用于读多写少的场景或者并发较少的场景。</p><p>Java中的乐观锁通过<code>CAS（Compare and Swap / Compare and Set）</code>算法实现，而数据库层面我们常使用版本号或者时间戳等进行控制。</p><p><strong>CAS（Compare and Swap / Compare and Set）</strong>： Java提供了<code>java.util.concurrent.atomic</code>包中的原子类，如<code>AtomicInteger</code>、<code>AtomicLong</code>等，它们通过CAS操作来实现乐观锁。CAS操作是一个原子指令，它只会修改数据，当且仅当该数据的当前值等于预期值时才进行修改。例如，<code>AtomicInteger</code>中的<code>compareAndSet</code>方法就是在乐观锁思想下实现的一种无锁化更新操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span>AtomicInteger counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 乐观锁更新示例</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> expected <span class="token operator">=</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> updated <span class="token operator">=</span> expected <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>expected<span class="token punctuation">,</span> updated<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 更新成功，退出循环</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 更新失败，意味着有其他线程在此期间改变了值，继续尝试</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong></p><ul><li><strong>更高的并发性能</strong>：因为在读取阶段不加锁，所以理论上可以支持更多的并发读取操作。</li><li><strong>降低死锁可能性</strong>：因为不存在长时间的加锁过程，从而减少了死锁的发生机会。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>冲突处理成本</strong>：如果并发更新较为频繁，乐观锁会导致大量事务因并发冲突而重试甚至失败，这在某些情况下反而会增加系统开销。</li><li><strong>循环依赖问题</strong>：在遇到连续的并发更新时，乐观锁可能导致事务不断重试，形成“ABA”问题（即某个值被改回原值后再次更改）。</li></ul><h3 id="基于锁的升级以及优化"><a href="#基于锁的升级以及优化" class="headerlink" title="基于锁的升级以及优化"></a>基于锁的升级以及优化</h3><p>在Java中，JVM为了解决多线程环境下的同步问题，对锁机制进行了优化，将其分为偏向锁、轻量级锁和重量级锁三种状态。</p><h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>偏向锁是一种Java虚拟机（JVM）在多线程环境下优化同步性能的锁机制，它适用于大多数时间只有一个线程访问同步代码块的场景。当一个线程访问同步代码块时，JVM会把锁偏向于这个线程，后续该线程在进入和退出同步代码块时，无需再做任何同步操作，从而大大降低了获取锁和释放锁的开销。偏向锁是Java内存模型中锁的三种状态之一，位于轻量级锁和重量级锁之前。</p><p><strong>优点</strong>：<br>对于没有或很少发生锁竞争的场景，偏向锁可以显著减少锁的获取和释放所带来的性能损耗。</p><p><strong>缺点</strong>：</p><ul><li><p><strong>额外存储空间</strong>：偏向锁会在对象头中存储一个偏向线程ID等相关信息，这部分额外的空间开销虽然较小，但在大规模并发场景下，累积起来也可能成为可观的成本。</p></li><li><p><strong>锁升级开销</strong>：当一个偏向锁的对象被其他线程访问时，需要进行撤销（revoke）操作，将偏向锁升级为轻量级锁，甚至在更高竞争情况下升级为重量级锁。这个升级过程涉及到CAS操作以及可能的线程挂起和唤醒，会带来一定的性能开销。</p></li><li><p><strong>适用场景有限</strong>：偏向锁最适合于绝大部分时间只有一个线程访问对象的场景，这样的情况下，偏向锁的开销可以降到最低，有利于提高程序性能。但如果并发程度较高，或者线程切换频繁，偏向锁就可能不如轻量级锁或重量级锁高效。</p></li></ul><h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>轻量级锁是一种在Java虚拟机（JVM）中实现的同步机制，主要用于提高多线程环境下锁的性能。它不像传统的重量级锁那样，每次获取或释放锁都需要操作系统级别的互斥操作，而是尽量在用户态完成锁的获取与释放，避免了频繁的线程阻塞和唤醒带来的开销。轻量级锁的作用主要是减少线程上下文切换的开销，通过自旋（spin-wait）的方式让线程在一段时间内等待锁的释放，而不是立即挂起线程，这样在锁竞争不是很激烈的情况下，能够快速获得锁，提高程序的响应速度和并发性能。</p><p>在Java中，轻量级锁主要作为JVM锁状态的一种，它介于偏向锁和重量级锁之间。当JVM发现偏向锁不再适用（即锁的竞争不再局限于单个线程）时，会将锁升级为轻量级锁。</p><p>轻量级锁适用于同步代码块执行速度快、线程持有锁的时间较短且锁竞争不激烈的场景，如短期内只有一个或少数几个线程竞争同一线程资源的情况。</p><p>在Java中，轻量级锁的具体实现体现在<code>java.util.concurrent.locks</code>包中的<code>Lock</code>接口的一个具体实现：<code>java.util.concurrent.locks.ReentrantLock</code>，它支持可配置为公平或非公平模式的轻量级锁机制，当使用默认构造函数时，默认是非公平锁（类似于轻量级锁的非公平性质）。不过，JVM的内置<code>synchronized</code>关键字在JDK 1.6之后引入了锁升级机制，也包含了偏向锁和轻量级锁的优化。</p><p><strong>优点</strong>：</p><ul><li><strong>低开销</strong>：轻量级锁通过CAS操作尝试获取锁，避免了重量级锁中涉及的线程挂起和恢复等高昂开销。</li><li><strong>快速响应</strong>：在无锁竞争或者锁竞争不激烈的情况下，轻量级锁使得线程可以迅速获取锁并执行同步代码块。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>自旋消耗</strong>：当锁竞争激烈时，线程可能会长时间自旋等待锁，这会消耗CPU资源，导致性能下降。</li><li><strong>升级开销</strong>：如果自旋等待超过一定阈值或者锁竞争加剧，轻量级锁会升级为重量级锁，这个升级过程本身也有一定的开销。</li></ul><h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h4><p>重量级锁是指在多线程编程中，为了保护共享资源而采取的一种较为传统的互斥同步机制，通常涉及到操作系统的互斥量（Mutex）或者监视器锁（Monitor）。在Java中，通过<code>synchronized</code>关键字实现的锁机制在默认情况下就是重量级锁。确保任何时刻只有一个线程能够访问被锁定的资源或代码块，防止数据竞争和不一致。保证了线程间的协同工作，确保在并发环境下执行的线程按照预定的顺序或条件进行操作。</p><p>在Java中，重量级锁主要指的是由<code>synchronized</code>关键字实现的锁，它在JVM内部由Monitor实现，属于内建的锁机制。另外，<code>java.util.concurrent.locks</code>包下的<code>ReentrantLock</code>等类也可实现重量级锁，这些锁可以根据需要调整为公平锁或非公平锁。</p><p><strong>优点</strong>：</p><ul><li><strong>强一致性</strong>：重量级锁提供了最强的线程安全性，确保在多线程环境下数据的完整性和一致性。</li><li><strong>简单易用</strong>：<code>synchronized</code>关键字的使用简洁明了，不易出错。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>性能开销大</strong>：获取和释放重量级锁时需要操作系统介入，可能涉及线程的挂起和唤醒，造成上下文切换，这对于频繁锁竞争的场景来说性能代价较高。</li><li><strong>延迟较高</strong>：线程获取不到锁时会被阻塞，导致等待时间增加，进而影响系统响应速度。</li></ul><p><strong>重量级锁适用于</strong>：</p><ul><li>高并发且锁竞争激烈的场景，因为在这种情况下，保证数据的正确性远比微小的性能损失重要。</li><li>对于需要长时间持有锁的操作，因为短暂的上下文切换成本相对于长时间的操作来说是可以接受的。</li><li>当同步代码块中涉及到IO操作、数据库访问等耗时较长的任务时，重量级锁能够较好地防止其它线程饿死。</li></ul><p>在Java中，偏向锁、轻量级锁和重量级锁之间的转换是Java虚拟机（JVM）为了优化多线程同步性能而设计的一种动态调整机制。转换条件如下：</p><ol><li><p><strong>偏向锁到轻量级锁的转换</strong>：<br>当有第二个线程尝试获取已经被偏向的锁时，偏向锁就会失效并升级为轻量级锁。这是因为偏向锁假定的是只有一个线程反复获取锁，如果有新的线程参与竞争，就需要进行锁的升级以保证线程间的互斥。</p></li><li><p><strong>轻量级锁到重量级锁的转换</strong>：<br>当轻量级锁尝试获取失败（CAS操作失败），即出现了锁竞争时，JVM会认为当前锁的持有者无法很快释放锁，因此为了避免后续线程无休止地自旋等待，会将轻量级锁升级为重量级锁。这个转换过程通常发生在自旋尝试获取锁达到一定次数（自旋次数是可配置的）或者系统处于高负载状态时。</p></li><li><p><strong>偏向锁到重量级锁的转换</strong>：<br>如果当前线程不是偏向锁指向的线程，那么首先会撤销偏向锁（解除偏向状态），然后升级为轻量级锁，之后再根据轻量级锁的规则判断是否需要进一步升级为重量级锁。</p></li></ol><p>锁状态的转换是为了在不同的并发环境下，既能保证数据的正确性，又能尽可能地提高系统性能。JVM会根据实际情况自动调整锁的状态，无需我们手动干预。</p><h3 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h3><p>分段锁（Segmented Lock 或 Partitions Lock）是一种将数据或资源划分为多个段（segments），并对每个段分配单独锁的锁机制。这样做的目的是将锁的粒度细化，以便在高并发场景下提高系统的并发性能和可扩展性，特别是针对大型数据结构如哈希表时非常有效。通过减少锁的粒度，可以使得在多线程环境下，不同线程可以同时访问不同段的数据，减小了锁争抢，提高了系统的并行处理能力。在大规模数据结构中，如果只有一个全局锁，可能会因为热点区域引发大量的锁竞争，分段锁则能有效地分散锁的压力。</p><p>Java中，分段锁在实现上可以基于哈希表的分段锁，例如Java中的<code>ConcurrentHashMap</code>，将整个哈希表分割为多个段（Segment），每个段有自己的锁，这样多个线程可以同时对不同段进行操作。例外也可以基于数组或链表的分段锁，根据数据索引将数据分布到不同的段，每段对应一个独立的锁。</p><p>分段锁可以提高并发性能，减少锁竞争，增加系统的并行处理能力。其优点：</p><ol><li><strong>减小锁的粒度</strong>：通过将一个大的锁分解为多个小锁，确实可以提高并发程度，降低锁的粒度，减少单点瓶颈，提高系统性能。</li><li><strong>减少锁冲突</strong>：确实可以降低不同线程间对锁资源的竞争，减少线程等待时间，从而提升并发度。</li><li><strong>提高系统的可伸缩性</strong>：通过分段，可以更好地支持分布式和集群环境下的系统扩展，增强系统的并发处理能力和可扩展性。</li></ol><p>分段锁也有一些缺点：</p><ol><li><strong>增加了锁的管理复杂度</strong>：确实需要额外的内存和复杂度来管理和维护多个锁，确保锁的正确使用和释放，以及在不同分段间的一致性和可靠性。</li><li><strong>可能导致线程饥饿</strong>：分段不合理或者热点分段可能导致某些线程长时间等待锁资源，出现线程饥饿问题。</li><li><strong>可能会降低并发度</strong>：如果分段策略设计不当，可能会增加锁竞争，降低并发性能。设计合理的分段策略和锁协调机制对于分段锁的效能至关重要，同时也增加了开发和维护的复杂度。</li><li><strong>内存占用</strong>：每个分段所需的锁信息和相关数据会占用额外的内存空间，对系统内存有一定的消耗。</li></ol><p>分段锁适用于大数据结构的并发访问，如高并发环境下对哈希表的操作。以及分布式系统中，某些分布式缓存或数据库系统也采用类似的分片锁策略来提高并发性能。</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>自旋锁（Spin Lock）是一种简单的锁机制，用于多线程环境中的同步控制，它的工作原理是当一个线程试图获取已经被另一个线程持有的锁时，该线程不会立即进入睡眠状态（阻塞），而是不断地循环检查锁是否已经被释放，直到获取到锁为止。这种“循环等待”的行为被称为“自旋”。自旋锁主要用于保证同一时刻只有一个线程访问临界区资源，防止数据竞争。相比传统阻塞式锁，自旋锁在持有锁的线程很快释放锁的情况下，可以减少线程的上下文切换开销。</p><p>我们使用<code>AtomicInteger</code>实现一个简单的自旋锁：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicInteger<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SimpleSpinLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicInteger locked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>locked<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自旋等待</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 已经获取锁，执行临界区代码</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        locked<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>自旋锁优点</strong>：</p><ul><li>对于持有锁时间很短的场景，自旋锁能有效减少线程上下文切换，提高系统性能。</li><li>自旋锁适用于多处理器或多核心系统，因为在这种环境下，线程可以在等待锁释放时继续占用CPU时间。</li></ul><p><strong>自旋锁缺点</strong>：</p><ul><li>如果持有锁的线程需要很长时间才能释放锁，自旋锁会导致等待锁的线程持续消耗CPU资源，浪费CPU周期。</li><li>在单处理器系统中，自旋锁的效率不高，因为等待锁的线程无法执行任何有用的工作，只是空转。</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>说到各种锁，就会想到死锁问题，对于死锁有兴趣的可以参考这篇文章：<br>这里就不过多赘述。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了多种Java中的锁机制，包括可重入锁（Reentrant Lock）、公平锁、非公平锁、悲观锁、乐观锁、偏向锁、轻量级锁、重量级锁、分段锁以及自旋锁。这些锁各有优缺点和适用场景，如可重入锁支持递归锁定，悲观锁确保数据一致性但可能引起性能开销，乐观锁在读多写少场景下表现优异，偏向锁和轻量级锁用于优化单线程重复访问，重量级锁提供严格的互斥性，分段锁通过减小锁粒度提高并发性能，而自旋锁则在短时间内获取锁的场景中能减少线程上下文切换。根据不同的并发需求和性能考量，开发者可以选择合适的锁机制。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里二面：谈谈ThreadLocal的内存泄漏问题？问麻了。。。。</title>
      <link href="/article/javathreadoom.html"/>
      <url>/article/javathreadoom.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><code>ThreadLocal</code>在Java多线程编程中扮演着重要的角色，它提供了一种线程局部存储机制，允许每个线程拥有独立的变量副本，从而有效地避免了线程间的数据共享冲突。ThreadLocal的主要用途在于，当需要为每个线程维护一个独立的上下文变量时，比如每个线程的事务ID、用户登录信息、数据库连接等，可以减少对同步机制如<code>synchronized</code>关键字或Lock类的依赖，提高系统的执行效率和简化代码逻辑。</p><p>但是我们在使用<code>ThreadLocal</code>时，经常因为使用不当导致内存泄漏。此时就需要我们去探究一下<code>ThreadLocal</code>在哪些场景下会出现内存泄露？哪些场景下不会出现内存泄露？出现内存泄露的根本原因又是什么呢？如何避免内存泄露？</p><h3 id="ThreadLocal原理"><a href="#ThreadLocal原理" class="headerlink" title="ThreadLocal原理"></a>ThreadLocal原理</h3><p><code>ThreadLocal</code>的实现基于每个线程内部维护的一个<code>ThreadLocalMap</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/* ThreadLocal values pertaining to this thread. This map is maintained     * by the ThreadLocal class. */</span>    ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap threadLocals <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ThreadLocalMap</code>是<code>ThreadLocal</code>类的一个静态内部类，<code>ThreadLocal</code>本身不能存储数据，它在作用上更像一个工具类，<code>ThreadLocal</code>类提供了<code>set(T value)</code>、<code>get()</code>等方法来操作<code>ThreadLocalMap</code>存储数据。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span>            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadLocalMap map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ThreadLocalMap<span class="token punctuation">.</span>Entry e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                T result <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ThreadLocalMap <span class="token function">getMap</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而<code>ThreadLocalMap</code>内部维护了一个<code>Entry</code>数据，用来存储数据，<code>Entry</code>继承了<code>WeakReference</code>，所以<code>Entry</code>的key是一个弱引用，可以被GC回收。<code>Entry</code>数组中的每一个元素都是一个<code>Entry</code>对象。每个<code>Entry</code>对象中存储着一个<code>ThreadLocal</code>对象与其对应的value值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/** The value associated with this ThreadLocal. */</span>            Object value<span class="token punctuation">;</span>            <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于弱引用的知识点，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484175&idx=1&sn=54d9a58aeff35e3eafa45ed2c10995cc&chksm=c2245378f553da6ec9708c3cb453ffc12395fa9a4bcca7709f45204102e081a422035bec624b#rd" target="_blank" rel="noopener">美团一面：说一说Java中的四种引用类型？</a></p></blockquote><p>而<code>Entry</code>数组中<code>Entry</code>对象的下标位置是通过<code>ThreadLocal</code>的<code>threadLocalHashCode</code>计算出来的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">ThreadLocalMap</span><span class="token punctuation">(</span>ThreadLocalMap parentMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> parentTable <span class="token operator">=</span> parentMap<span class="token punctuation">.</span>table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> parentTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">setThreshold</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">:</span> parentTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            ThreadLocal<span class="token operator">&lt;</span>Object<span class="token operator">></span> key <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object value <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">childValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                Entry c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通过key的threadLocalHashCode计算下标，这个key就是ThreadLocall对象</span>                <span class="token keyword">int</span> h <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                table<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>                size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而从<code>Entry</code>数组中获取对应key即<code>ThreadLocal</code>对应的value值时，也是通过key的<code>threadLocalHashCode</code>计算下标，从而可以快速的返回对应的<code>Entry</code>对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Entry <span class="token function">getEntry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 通过key的threadLocalHashCode计算下标，这个key就是ThreadLocall对象</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Entry e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">getEntryAfterMiss</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Thread</code>中，可以存储多个<code>ThreadLocal</code>对象。<code>Thread</code>、<code>ThreadLocal</code>、<code>ThreadLocalMap</code>以及<code>Entry</code>数组的关系如下图：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240315011902.png" alt="image.png"></p><h3 id="ThreadLocal在哪些场景下不会出现内存泄露？"><a href="#ThreadLocal在哪些场景下不会出现内存泄露？" class="headerlink" title="ThreadLocal在哪些场景下不会出现内存泄露？"></a>ThreadLocal在哪些场景下不会出现内存泄露？</h3><p>当一个对象失去所有强引用，或者它仅被弱引用、软引用、虚引用关联时，垃圾收集器（GC）通常都能识别并回收这些对象，从而避免内存泄漏的发生。当我们在手动创建线程时，若将变量存储到<code>ThreadLocal</code>中，那么在<code>Thread</code>线程正常运行的过程中，它会维持对内部<code>ThreadLocalMap</code>实例的引用。只要该<code>Thread</code>线程持续执行任务，这种引用关系将持续存在，确保<code>ThreadLocalMap</code>实例及其中存储的变量不会因无引用而被GC回收。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240315012011.png" alt="image.png"></p><p>当线程执行完任务并正常退出后，线程与内部<code>ThreadLocalMap</code>实例之间的强引用关系随之断开，这意味着线程不再持有<code>ThreadLocalMap</code>的引用。在这种情况下，失去强引用的<code>ThreadLocalMap</code>对象将符合垃圾收集器（GC）的回收条件，进而被自动回收。与此同时，鉴于<code>ThreadLocalMap</code>内部的键（<code>ThreadLocal</code>对象）是弱引用，一旦<code>ThreadLocalMap</code>被回收，若此时没有其他强引用指向这些<code>ThreadLocal</code>对象，它们也将被GC一并回收。因此，在线程结束其生命周期后，与之相关的<code>ThreadLocalMap</code>及其包含的<code>ThreadLocal</code>对象理论上都能够被正确清理，避免了内存泄漏问题。</p><blockquote><p>实际应用中还需关注<code>ThreadLocalMap</code>中存储的值（非键）是否为强引用类型，因为即便键（<code>ThreadLocal</code>对象）被回收，如果值是强引用且没有其他途径释放，仍可能导致内存泄漏。</p></blockquote><h3 id="ThreadLocal在哪些场景下会出现内存泄露？"><a href="#ThreadLocal在哪些场景下会出现内存泄露？" class="headerlink" title="ThreadLocal在哪些场景下会出现内存泄露？"></a>ThreadLocal在哪些场景下会出现内存泄露？</h3><p>在实际项目开发中，如果为每个任务都手动创建线程，这是一件很耗费资源的方式，并且在阿里巴巴的开发规范中也提到，不推荐使用手动创建线程，推荐使用线程池来执行相对应的任务。那么当我们使用线程池时，线程池中的线程跟<code>ThrealLocalMap</code>的引用关系如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240315012056.png" alt="image.png"></p><p>在使用线程池处理任务时，每一个线程都会关联一个独立的<code>ThreadLocalMap</code>对象，用于存储线程本地变量。由于线程池中的核心线程在完成任务后不会被销毁，而是保持活动状态等待接收新的任务，这意味着核心线程与其内部持有的<code>ThreadLocalMap</code>对象之间始终保持着强引用关系。因此，只要核心线程存活，其所对应的<code>ThreadLocal</code>对象和<code>ThreadLocalMap</code>不会被垃圾收集器（GC）自动回收，此时就会存在内存泄露的风险。</p><blockquote><p>关于Java中的线程池参数以及原理，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247483691&idx=1&sn=d337d486b2862f82b682a602756befcf&chksm=c224515cf553d84a88438a9be4209ec3a3fe34512af4e1e2624460df682863f90fd3f881c166#rd" target="_blank" rel="noopener">Java线程池最全讲解</a></p></blockquote><h3 id="出现内存泄露的根本原因"><a href="#出现内存泄露的根本原因" class="headerlink" title="出现内存泄露的根本原因"></a>出现内存泄露的根本原因</h3><p>由上述<code>ThreadLocalMap</code>的结构图以及<code>ThreadLocalMap</code>的源码中，我们知道<code>ThreadLocalMap</code>中包含一个<code>Entry</code>数组，而<code>Entry</code>数组中的每一个元素就是<code>Entry</code>对象，<code>Entry</code>对象中存储的Key就是<code>ThreadLocal</code>对象，而value就是要存储的数据。其中，<code>Entry</code>对象中的Key属于弱引用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/** The value associated with this ThreadLocal. */</span>            Object value<span class="token punctuation">;</span>            <span class="token function">Entry</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k<span class="token punctuation">,</span> Object v<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                value <span class="token operator">=</span> v<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而对于弱引用<code>WeakReference</code>，在引用的对象使用完毕之后，即使内存足够，GC也会对其进行回收。</p><blockquote><p>关于弱引用的知识点，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484175&idx=1&sn=54d9a58aeff35e3eafa45ed2c10995cc&chksm=c2245378f553da6ec9708c3cb453ffc12395fa9a4bcca7709f45204102e081a422035bec624b#rd" target="_blank" rel="noopener">美团一面：说一说Java中的四种引用类型？</a></p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240315222242.png" alt="image.png"></p><p>当<code>Entry</code>对象中的Key被GC自动回收后，对应的<code>ThreadLocal</code>被GC回收掉了，变成了null，但是<code>ThreadLocal</code>对应的value值依然被<code>Entry</code>引用，不能被GC自动回收。这样就造成了内存泄漏的风险。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240315222830.png" alt="image.png"></p><p>在线程池环境下使用<code>ThreadLocal</code>存储数据时，内存泄露的风险主要源自于线程生命周期管理及<code>ThreadLocalMap</code>内部结构的设计。由于线程池中的核心线程在完成任务后会复用，每个线程都会维持对各自关联的<code>ThreadLocalMap</code>对象的强引用，这确保了只要线程持续存在，其对应的<code>ThreadLocalMap</code>就无法被垃圾收集器（GC）自动回收。</p><p>进一步分析，<code>ThreadLocalMap</code>内部采用一个Entry数组来保存键值对，其中每个条目的Key是当前线程中对应<code>ThreadLocal</code>实例的弱引用，这意味着当外部不再持有该<code>ThreadLocal</code>实例的强引用时，Key部分能够被GC正常回收。然而，关键在于Entry的Value部分，它直接或间接地持有着强引用的对象，即使Key因为弱引用特性被回收，但Value所引用的数据却不会随之释放，除非明确移除或者整个<code>ThreadLocalMap</code>随着线程结束而失效。</p><p>所以，在线程池中，如果未正确清理不再使用的<code>ThreadLocal</code>变量，其所持有的强引用数据将在多个任务执行过程中逐渐积累并驻留在线程的<code>ThreadLocalMap</code>中，从而导致潜在的内存泄露风险。</p><h3 id="ThreadLocal如何避免内存泄漏"><a href="#ThreadLocal如何避免内存泄漏" class="headerlink" title="ThreadLocal如何避免内存泄漏"></a>ThreadLocal如何避免内存泄漏</h3><p>经过上述<code>ThreadLocal</code>原理以及发生内存泄漏的分析，我们知道防止内存泄漏，我们一定要在完成线程内的任务后，调用<code>ThreadLocal</code>的<code>remove()</code>方法来清除当前线程中<code>ThreadLocal</code>所对应的值。其<code>remove</code>方法源码如下：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ThreadLocalMap m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>remove()</code>方法中，首先根据当前线程获取<code>ThreadLocalMap</code>类型的对象，如果不为空，则直接调用该对象的有参<code>remove()</code>方法移除value的值。<code>ThreadLocalMap</code>的<code>remove</code>方法源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> key<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         e <span class="token operator">!=</span> null<span class="token punctuation">;</span>         e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由上述<code>ThreadLocalMap</code>中的<code>set()</code>方法知道<code>ThreadLocal</code>中<code>Entry</code>下标是通过计算<code>ThreadLocal</code>的<code>hashCode</code>获得了，而<code>remove()</code>方法要找到需要移除value所在<code>Entry</code>数组中的下标时，也时通过当前<code>ThreadLocal</code>对象的<code>hashCode</code>获的，然后找到它的下标之后，调用<code>expungeStaleEntry</code>将其value也置为null。我们继续看一下<code>expungeStaleEntry</code>方法的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">expungeStaleEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> staleSlot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// expunge entry at staleSlot</span>    tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> null<span class="token punctuation">;</span>    tab<span class="token punctuation">[</span>staleSlot<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Rehash until we encounter null</span>    Entry e<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>staleSlot<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span>         i <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadLocal<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> k <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> null<span class="token punctuation">;</span>            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> k<span class="token punctuation">.</span>threadLocalHashCode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Unlike Knuth 6.4 Algorithm R, we must scan until</span>                <span class="token comment" spellcheck="true">// null because multiple entries could have been stale.</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>tab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    h <span class="token operator">=</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                tab<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>expungeStaleEntry()</code>方法中，会将<code>ThreadLocal</code>为null对应的<code>value</code>设置为null，同时会把对应的<code>Entry</code>对象也设置为null，并且会将所有<code>ThreadLocal</code>对应的value为null的<code>Entry</code>对象设置为null，这样就去除了强引用，便于后续的GC进行自动垃圾回收，也就避免了内存泄露的问题。即调用完<code>remove</code>方法之后，<code>ThreadLocalMap</code>的结构图如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240315225318.png" alt="image.png"></p><blockquote><p>在<code>ThreadLocal</code>中，不仅仅是<code>remove()</code>方法会调用<code>expungeStaleEntry()</code>方法，在<code>set()</code>方法和<code>get()</code>方法中也可能会调用<code>expungeStaleEntry()</code>方法来清理数据。这种设计确保了即使没有显式调用<code>remove()</code>方法，系统也会在必要时自动清理不再使用的<code>ThreadLocal</code>变量占用的内存资源。</p></blockquote><p>需要我们特别注意的是，尽管<code>ThreadLocal</code>提供了<code>remove</code>这种机制来防止内存泄漏，但它并不会自动执行相关的清理操作。所以为了确保资源有效释放并避免潜在的内存泄露问题，我们应当在完成对<code>ThreadLocal</code>对象中数据的使用后，及时调用其<code>remove()</code>方法。我们最好(也是必须)是在<code>try-finally</code>代码块结构中，在<code>finally</code>块中明确地执行<code>remove()</code>方法，这样即使在处理过程中抛出异常，也能确保<code>ThreadLocal</code>关联的数据被清除，从而有利于GC回收不再使用的内存空间，避免内存泄漏。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文探讨了<code>ThreadLocal</code>的工作原理以及其内存泄漏问题及解决策略。<code>ThreadLocal</code>通过为每个线程提供独立的变量副本，实现多线程环境下的数据隔离。其内部通过<code>ThreadLocalMap</code>与当前线程绑定，利用弱引用管理键值对。但是，如果未及时清理不再使用的<code>ThreadLocal</code>变量，可能导致内存泄漏，尤其是在线程池场景下。解决办法包括在完成任务后调用remove方法移除无用数据。正确理解和使用<code>ThreadLocal</code>能够有效提升并发编程效率，但务必关注潜在的内存泄漏风险。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> ThreadLocal </tag>
            
            <tag> 内存泄漏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团一面：说一说Java中的四种引用类型？</title>
      <link href="/article/javareference.html"/>
      <url>/article/javareference.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在JDK1.2之前Java并没有提供软引用、弱引用和虚引用这些高级的引用类型。而是提供了一种基本的引用类型，称为<code>Reference</code>。并且当时Java中的对象只有两种状态：被引用和未被引用。当一个对象被引用时，它将一直存在于内存中，直到它不再被任何引用指向时，才会被垃圾回收器回收。而被引用也就是强引用。</p><p>而在JDK1.2之后对引用的概念进行了扩充，分为了强引用(<code>StrongReference</code>)、软引用(<code>SoftReference</code>)、弱引用(<code>WeakReference</code>)和虚引用(<code>PhantomReference</code>)，这4种引用的强度依次减弱。他们的关系如下如：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240313234439.png" alt="image.png"></p><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>强引用是Java中最常见的引用类型。当你创建一个对象并将其赋值给一个变量时，这个变量会持有该对象的强引用。</p><pre class="line-numbers language-java"><code class="language-java">Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只要order还指向Order对象，那么Order对象就不会被回收</span>order <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 强引用都被设置为 null 时，不可达，则Order对象被回收</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只要存在强引用指向对象，垃圾回收器将永远不会回收该对象，即使内存不足也不会回收。这可能导致内存溢出，因为即使内存不足，JVM也不会回收强引用对象。当强引用都被设置为null时，对象变成不可达状态，垃圾回收器会在适当的时候将其回收。</p><p>比如以下示例，我们创建一个2M的数组，但是我们设置JVM参数：<code>-Xms2M -Xmx3M</code>，将JVM的初始内存设为2M，最大可用内存为3M。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//定义一个2M的数组  </span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们执行方法后，发现报错：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240313235904.png" alt="image.png"><br>对于强引用，即使内存不够使用，直接报错OOM，强引用也不会被回收。</p><p>对于强引用，就好比生活中，当我们拥有家里的钥匙时，我们可以随时进入你的家，即使我们不需要进入，也能确保我们可以进入。钥匙是我们进入家的强引用。只有当我们不再拥有钥匙时，我们才无法进入家，类似于当没有强引用指向一个对象时，该对象才能被垃圾回收。</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>在JDK1.2之后，用<code>java.lang.ref.SoftReference</code>类来表示软引用。软引用允许对象在内存不足时被垃圾回收器回收。如果一个对象只有软引用指向它，当系统内存不足时，垃圾回收器会尝试回收这些对象来释放内存，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。软引用适用于需要缓存大量对象，但又希望在内存不足时释放部分对象以避免内存溢出的情况，用于实现缓存时，当内存紧张时，可以释放部分缓存对象以保证系统的稳定性。</p><p>以下示例我们设置JVM参数为：<code>-Xms3M -Xmx5M</code>，然后连续创建了10个大小为1M的字节数组，并赋值给了软引用，然后循环遍历将这些对象打印出来。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          SoftReference<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主动通知垃圾回收  </span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>l <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          Object obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SoftReference<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> l<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Object: "</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们执行代码之后：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240314003505.png" alt="image.png"><br>对于打印结果中，只有最后一个对象保留了下来，其他的obj全都被置空回收了。即说明了在内存不足的情况下，软引用将会被自动回收。</p><p>对于弱引用，就像我们医药箱里的备用药，当我们需要药品时，我们会先看看医药箱里是否有备用药。如果医药箱里有足够的药品（内存足够），我们就可以使用备用药；但如果医药箱里的备用药不够了（内存不足），我们可能会去药店购买。在内存不足时，垃圾回收器可能会回收软引用对象，类似于我们在医药箱里的备用药被用完时去药店购买。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>JDK1.2之后，用<code>java.lang.ref.WeakReference</code>来表示弱引用。弱引用与软引用类似，但强度更弱。即使内存足够，只要没有强引用指向一个对象，垃圾回收器就可以随时回收该对象。弱引用适用于需要临时引用对象的场景，如临时缓存或临时存储对象。也可以用于解决对象之间的循环引用问题，避免内存泄漏。</p><p>对于上述示例中，我们将数组赋值给弱引用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          WeakReference<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主动通知垃圾回收  </span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>l <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          Object obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>WeakReference<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> l<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Object: "</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果发现所有的对象都是null，即都被回收了。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240314003920.png" alt="image.png"></p><p>对于弱引用，就像我们正在旅行，使用一张一次性地图。我们只在需要导航时使用地图，一旦旅行结束，我们就不再需要地图了。这时我们可以选择扔掉地图，类似于弱引用，在垃圾回收器运行时，无论内存是否充足，对象都可能被回收。</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>在 JDK1.2之后，用<code>java.lang.ref.PhantomReference</code>类来表示虚引用。虚引用是最弱的引用类型，它几乎对对象没有任何影响，不能通过虚引用获取对象，也不能通过它来阻止对象被垃圾回收。从源码中可以看出它只有一个构造函数和一个 get() 方法，而且它的 get() 方法仅仅是返回一个null，也就是说将永远无法通过虚引用来获取对象，虚引用必须要和 ReferenceQueue 引用队列一起使用。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240314004609.png" alt="image.png"></p><p>虚引用可以用于在对象被回收时进行后续操作，如对象资源释放或日志记录，常用于跟踪对象被垃圾回收的状态，执行一些清理工作。</p><p>而对于弱引用，就像我们去商店，商店入口处的门闩并不直接影响你进入房屋，但它会在有人进入或离开时发出声音，提醒你有人进店(欢迎光临)或者离开(欢迎再来)。类似地，虚引用并不直接影响对象的生命周期，但它可以在对象被回收时发出通知，让你有机会进行一些后续操作，比如资源释放或者记录日志。</p><h3 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h3><p>引用队列（<code>ReferenceQueue</code>）是Java中的一个特殊队列，用于配合软引用、弱引用和虚引用，实现更灵活的对象引用和回收管理。</p><p>引用队列的主要作用是跟踪对象的垃圾回收过程。当一个软引用、弱引用或虚引用指向的对象被垃圾回收器回收时，如果它们与一个引用队列关联，那么这些引用就会被自动加入到引用队列中。通过监视引用队列中的对象，我们可以了解到对象的回收状态，从而执行一些额外的操作，比如资源释放或日志记录等。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java中的四种引用类型各具特点，可根据程序需求选择合适的引用类型。强引用保证对象不被意外回收，软引用和弱引用用于实现缓存或解决内存敏感问题，而虚引用则用于对象回收后的通知和清理操作。合理使用引用类型可以更好地管理内存和避免内存泄漏问题。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
            <tag> Java引用类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里二面：Kafka中如何保证消息的顺序性？这周被问到两次了</title>
      <link href="/article/kafkasequentialmessages.html"/>
      <url>/article/kafkasequentialmessages.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在现代分布式系统中，消息顺序消费扮演着至关重要的角色。特别是在涉及事务处理、日志追踪、状态机更新等场景时，消息的处理顺序直接影响着系统的正确性和一致性。例如，金融交易系统中，账户间的转账操作必须严格按照发出请求的顺序进行处理，否则可能导致资金不匹配；同样，在构建实时流处理系统时，事件的时间戳顺序可能关系到最终结果的准确性。</p><p>然而，在分布式环境中，保证消息顺序消费并非易事。消息队列中的消息可能会因为网络延迟、系统故障、并发处理等多种因素导致乱序。此外，随着系统规模的增长，如何在保证消息顺序的同时，有效提升消息处理的吞吐量和响应时间，成为了一个颇具挑战性的课题。</p><p>Apache Kafka作为一个高性能、分布式的消息发布订阅系统，特别关注了消息顺序处理的需求。Kafka采用了分区（Partition）的设计，确保了单一分区内消息的严格顺序。每个分区内部的消息是由一个生产者不断追加的，因此消费者可以从分区的开始位置顺序消费这些消息。此外，Kafka允许用户通过自定义分区策略，依据消息键（Key）将具有顺序要求的消息路由到特定分区，从而在多分区环境下仍然能够相对保证消息顺序消费。与此同时，Kafka也支持灵活的消费者组配置，允许通过控制消费者线程数和消费行为，以在保证顺序的前提下尽可能提高系统处理效率。</p><h3 id="Kafka中的消息顺序保证原理"><a href="#Kafka中的消息顺序保证原理" class="headerlink" title="Kafka中的消息顺序保证原理"></a>Kafka中的消息顺序保证原理</h3><p>在Apache Kafka中，消息顺序性的保障主要依托于其独特的分区（Partition）机制以及消息键（Key）的使用。</p><h4 id="1-分区（Partition）的作用与消息顺序性的内在关联"><a href="#1-分区（Partition）的作用与消息顺序性的内在关联" class="headerlink" title="1. 分区（Partition）的作用与消息顺序性的内在关联"></a>1. 分区（Partition）的作用与消息顺序性的内在关联</h4><p>Kafka的主题（Topic）可以被划分为多个分区，每个分区都是一个独立的顺序日志存储。如下图所示，每个分区内部的消息按照其生成的先后顺序排列，形成一个有序链表结构。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240313184441.png" alt="image.png"></p><p>当生产者向主题发送消息时，可以选择指定消息的键（Key）。若未指定或Key为空，消息将在各个分区间平均分布；若指定了Key，Kafka会根据Key和分区数计算出一个哈希值，确保具有相同Key的消息会被发送到同一个分区，从而确保这些消息在分区内部是有序的。</p><h4 id="2-单分区内的消息顺序性保证"><a href="#2-单分区内的消息顺序性保证" class="headerlink" title="2. 单分区内的消息顺序性保证"></a>2. 单分区内的消息顺序性保证</h4><p>在单个<code>Kafka分</code>区中，消息的顺序性得到了严格的保证。新产生的消息总是附加到分区日志的末端，消费者按照消息在分区中的物理顺序进行消费。如下图所示，每个分区内部的消息具有明确的偏移量（<code>Offset</code>），消费者按照递增的Offset顺序消费消息。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240313185439.png" alt="image.png"></p><h4 id="3-利用键（Key）实现消息到特定分区的路由策略"><a href="#3-利用键（Key）实现消息到特定分区的路由策略" class="headerlink" title="3. 利用键（Key）实现消息到特定分区的路由策略"></a>3. 利用键（Key）实现消息到特定分区的路由策略</h4><p>通过为消息设置Key，Kafka可以确保具有相同Key的消息被路由到同一个分区，这就为实现消息顺序消费提供了基础。以下是一个简单的键路由策略的伪代码表示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyBasedPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AtomicInteger counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 示例中使用一个原子整数作为轮询计数器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> Object key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> Cluster cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>PartitionInfo<span class="token operator">></span> partitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionsForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numPartitions <span class="token operator">=</span> partitions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 假设key是String类型，可以根据业务需求转换key类型并计算分区索引</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> partition <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> numPartitions<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 简单的哈希取模分区策略</span>            <span class="token comment" spellcheck="true">// 或者实现更复杂的逻辑，比如根据key的某些特性路由到固定分区</span>            <span class="token keyword">return</span> partition<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果没有key，或者key不是预期类型，可以采用默认的轮询方式</span>            <span class="token keyword">return</span> counter<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> numPartitions<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述策略，我们可以根据业务需求将相关联的消息路由到特定分区，从而在该分区范围内保证消息的顺序消费。而在全局层面，需要业务逻辑本身支持消息的局部顺序性，并通过合理设置分区数和消费者数量，兼顾消息顺序与处理效率之间的平衡。</p><h3 id="Kafka原生保证消息顺序消费的实现"><a href="#Kafka原生保证消息顺序消费的实现" class="headerlink" title="Kafka原生保证消息顺序消费的实现"></a>Kafka原生保证消息顺序消费的实现</h3><p>在<code>Apache Kafka</code>中，原生实现消息顺序消费主要围绕分区（<code>Partition</code>）和消费者组（<code>Consumer Group</code>）机制展开。以下是如何通过Kafka原生功能确保消息顺序消费的具体步骤和示例：</p><p> <strong>生产者侧</strong>：首先，确保消息按照需要的顺序发送到<code>Kafka</code>。若需要全局顺序，所有的消息应被发送到同一个分区。为此，可以通过设置消息键（key）并将所有消息映射到同一个确定的分区上。例如，可以自定义分区器，或者依赖Kafka默认的分区器，后者会基于消息键的哈希值均匀分布到各个分区，但具有相同键的消息会被路由到同一分区。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用默认分区器，确保相同key的消息进入同一分区</span>Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> StringSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span> JsonSerializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不自定义分区器，则使用默认分区器，根据key的哈希值决定分区</span>KafkaProducer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发送消息时设置key，确保相同key的消息进入同一分区</span>producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"toc-topic"</span><span class="token punctuation">,</span> <span class="token string">"toc-key"</span><span class="token punctuation">,</span> orderMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>消费者侧</strong>：<br> <strong>消费者组</strong>：在消费者组层面，确保每个分区仅被组内一个消费者实例消费，这样才能保证该分区内的消息顺序消费。可通过设置消费者组内消费者的并发度为分区数或小于分区数来达到这个目的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 设置消费者组并控制并发度等于分区数</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span> <span class="token string">"toc-consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>MAX_POLL_RECORDS_CONFIG<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一次只消费一条，增强顺序消费效果</span>props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>AUTO_OFFSET_RESET_CONFIG<span class="token punctuation">,</span> <span class="token string">"earliest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从头开始消费</span>KafkaConsumer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"toc-topic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConsumerRecords<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 按照消费到的消息顺序处理</span>        <span class="token function">processMessageInOrder</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 控制消费速率并提交offset</span>    consumer<span class="token punctuation">.</span><span class="token function">commitAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需保证具有相同键的消息顺序，生产者可以通过设置消息键确保这些消息被路由到同一分区。消费者只需在自己负责的分区上按照接收到的顺序处理消息即可。</p><p>通过以上方式，Kafka原生支持了消息的局部顺序消费（单个分区内），以及在特定条件下（如通过消息键路由）的全局顺序消费。然而，全局顺序消费可能牺牲系统的扩展性和并行处理能力，因此在实际应用中需要根据业务需求和性能指标做权衡和优化。</p><p>而单分区确实能保证消息顺序消费，但是在并发高的业务场景中，处理消息的效率很地下，那么我们如何在保证顺序消费的前提下又要提高处理效率呢？</p><h3 id="多分区下的顺序消费策略"><a href="#多分区下的顺序消费策略" class="headerlink" title="多分区下的顺序消费策略"></a>多分区下的顺序消费策略</h3><h4 id="多分区顺序消费"><a href="#多分区顺序消费" class="headerlink" title="多分区顺序消费"></a>多分区顺序消费</h4><p>在多分区场景下，实现全局顺序消费的一种策略是通过定制分区策略，确保具有顺序要求的消息被路由到特定的分区。这种方式适用于那些需要根据业务标识（如订单ID、用户ID等）保持消息顺序的场景。</p><p>借助自定义分区器，可以确保具有相同业务标识的消息被发送到同一分区，从而在单个分区内部保持消息顺序。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderIdPartitioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span>String topic<span class="token punctuation">,</span> Object key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> Cluster cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假设key是我们需要排序的订单ID</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> numPartitions <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">partitionCountForTopic</span><span class="token punctuation">(</span>topic<span class="token punctuation">)</span><span class="token punctuation">;</span>            String orderId <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> key<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这里只是简单示例，实际项目中应根据业务逻辑制定合适哈希算法</span>            <span class="token keyword">int</span> partition <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>orderId<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> numPartitions<span class="token punctuation">;</span>            <span class="token keyword">return</span> partition<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若key非字符串类型，可以采用默认分区策略</span>            <span class="token keyword">return</span> DEFAULT_PARTITION<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们注册并使用自定义分区器，确保消息按照业务标识路由到正确的分区。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaProducerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> KafkaTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> configProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 其他配置...</span>        configProps<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>PARTITIONER_CLASS_CONFIG<span class="token punctuation">,</span> OrderIdPartitioner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DefaultKafkaProducerFactory<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> producerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configProps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>producerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异步处理与队列缓冲"><a href="#异步处理与队列缓冲" class="headerlink" title="异步处理与队列缓冲"></a>异步处理与队列缓冲</h4><p>为了在多分区环境中既能保证消息顺序消费，又能提高处理效率，在多分区顺序消费的基础上可以引入内存队列（如Java中的<code>BlockingQueue</code>）作为缓冲区，并结合多线程异步处理，提高消费端消费消息的能力。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240314124302.png" alt="image.png"></p><p>消费者接收到消息后，将消息放入内存队列中：</p><pre class="line-numbers language-java"><code class="language-java">BlockingQueue<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">>></span> messageQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">"your-topic"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        messageQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 错误处理...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，使用线程池消费队列中的消息，确保消息按照放入队列的顺序处理：</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>NUM_THREADS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> record<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        record <span class="token operator">=</span> messageQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">processMessage</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 错误处理...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processMessage</span><span class="token punctuation">(</span>ConsumerRecord<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> OrderMsg<span class="token operator">></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 按照顺序处理消息</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在应用关闭时，记得关闭线程池</span>executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式，即使在多分区的情况下，系统依然能够保证具有相同业务标识的消息顺序消费，同时通过异步处理和队列缓冲提升了整体的处理效率。然而，这也意味着需要处理好队列溢出、线程同步等问题，以确保系统的稳定性和可靠性。</p><blockquote><p>关于线程池的原理以及使用，请移步：</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Apache Kafka在消息顺序消费方面的设计体现了其高度的灵活性和可扩展性。通过巧妙利用分区机制，Kafka能够在单个分区内部提供严格的顺序保证，这为需要消息顺序处理的业务场景提供了坚实的基础。通过自定义分区策略，尤其是利用消息键（Key）实现消息到特定分区的路由，Kafka能够确保具有相同键值的消息保持顺序，这对于很多业务逻辑而言至关重要。</p><p>与此同时，Kafka支持消费者组概念，使得一组消费者可以订阅同一个主题，每个分区在同一时刻仅由消费者组中的一个消费者实例消费，从而保证了分区内部消息的顺序消费。通过结合微批处理、批量提交等优化实践，Kafka能够进一步提高消息处理效率，同时兼顾系统性能与消息顺序性。</p><p>然而，在实际应用中，尤其是在多分区场景下，完全保证全局消息顺序可能会牺牲一定的系统扩展性和处理性能。因此，在设计和实施消息顺序消费方案时，需要综合考虑以下几个方面：</p><ol><li><p><strong>系统性能</strong>：通过合理的分区策略和消费者并发度设置，优化资源利用率，提升系统吞吐量。</p></li><li><p><strong>消息顺序性</strong>：针对不同业务需求，灵活运用分区和键值策略，保证关键业务流程的消息顺序。</p></li><li><p><strong>系统可用性</strong>：设计有效的错误处理与重试机制，确保在发生故障时仍能保持消息的可靠传递，同时不影响正常消息的顺序消费。</p></li></ol><p>Apache Kafka在消息顺序消费领域展现了强大的灵活性和适应性，允许我们在保障消息顺序性的同时，优化系统性能和可用性。在面对实际业务需求时，务必根据具体情况权衡利弊，制定最适合的解决方案，以期在保障业务流程正确执行的同时，实现系统的高效稳定运行。</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 架构之道 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求求你别再用COUNT(*)判断数据存不存在了</title>
      <link href="/article/mysqldataexists.html"/>
      <url>/article/mysqldataexists.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在日常业务系统开发中，我们尝尝有这样的一个需求：判断某个值在数据库中是否存在。常见的做法之一是使用<code>COUNT(*)</code>或者<code>COUNT(1)</code>函数，但是，在仅需判断记录是否存在而不关注具体数量的情况下，采用<code>EXISTS</code>子句或<code>LIMIT 1</code>查询往往能提供更高的查询性能和更低的系统资源消耗。</p><h3 id="COUNT-函数的局限性"><a href="#COUNT-函数的局限性" class="headerlink" title="COUNT()函数的局限性"></a>COUNT()函数的局限性</h3><p>使用<code>COUNT(*)</code>或者<code>COUNT(1)</code>先查询出来这个值在数据库中对应的记录的行数，然后在代码中判断sql返回的数据条数是否大于0，即可确认是否存在。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">WHERE</span> order_no <span class="token operator">=</span> <span class="token string">'c535cd19-9d1d-46'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后代码中判断：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> orderMapper<span class="token punctuation">.</span><span class="token function">countOrder</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单号已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单号不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然这种写法没有问题，能得到是否大于0的结论，可以实现业务需求，但是呢，<code>COUNT(*)</code>会遍历所有满足条件的行，即便你并不关心具体的行数，也会消耗较大的系统资源。特别是当表的数据量非常大时，这种查询可能导致性能瓶颈。尽管在有适当索引的情况下，MySQL可以有效地处理<code>COUNT(*)</code>查询，但在仅需判断是否存在的情况下，利用索引的优势不如<code>EXISTS</code>和<code>LIMIT 1</code>明显。并且<code>EXISTS</code>和<code>LIMIT 1</code>也可以利用索引。</p><blockquote><p>关于COUNT()函数更多的介绍，请移步：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247483708&idx=1&sn=955f1e999c0b6ac9b865c683661156e3&chksm=c224514bf553d85d275828bc615f76bdd85a9257be67b789fa39c1d4f76f28c55903dc7ed6f1#rd" target="_blank" rel="noopener">面试官：请说一下Mysql中_count_(1)、_count_(*)以及_count_(列)的区别？</a></p></blockquote><h3 id="EXISTS子句的优势"><a href="#EXISTS子句的优势" class="headerlink" title="EXISTS子句的优势"></a>EXISTS子句的优势</h3><p><code>EXISTS</code>子句是用来检查是否存在满足条件的行。例如上述示例修改为：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_order <span class="token keyword">WHERE</span> order_no <span class="token operator">=</span> <span class="token string">'c535cd19-9d1d-46'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240308133621.png" alt="image.png"></p><p><code>EXISTS</code>子句内的查询返回至少一行数据时，它将立刻返回<code>TRUE</code>（即1）。这意味着一旦找到匹配项，<code>MySQL</code>就可以停止进一步的扫描，因此在只需判断记录是否存在时，其性能表现优于<code>COUNT(*)</code>。<code>EXISTS</code>子句更适合于复杂的嵌套查询中，作为逻辑判断条件。</p><blockquote><p>关于EXISTS子句更多的介绍，请移步：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247483813&idx=1&sn=4b12acc4ac76e7af2cbcf34c8b63cc50&chksm=c22451d2f553d8c4f37dd823db95305bc6cf764bb861e00ad386b37c1d4631306cae130b9f71#rd" target="_blank" rel="noopener">面试官：Mysql中_EXISTS_与IN有哪些使用差异?</a></p></blockquote><h3 id="LIMIT-1-优势"><a href="#LIMIT-1-优势" class="headerlink" title="LIMIT 1 优势"></a>LIMIT 1 优势</h3><p><code>LIMIT</code>的用法就不多介绍了。而<code>LIMIT 1</code>查询在找到第一条满足条件的记录时就结束搜索。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_order <span class="token keyword">WHERE</span> order_no <span class="token operator">=</span> <span class="token string">'c535cd19-9d1d-46'</span> <span class="token keyword">LIMIT</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240308134444.png" alt="image.png"></p><p><code>LIMIT 1</code>查询同样会在找到第一条满足条件的记录时就结束搜索，因此在判断是否存在记录时具备很高的效率。并且，与<code>EXISTS</code>相比，<code>LIMIT 1</code>还额外提供了匹配记录的具体信息。这对于那些在判断存在性的同时还需要获取记录部分内容或全部内容的场景来说，是一个理想的解决方案。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><p><code>EXISTS</code>适用于只需要知道记录是否存在的情况，尤其适合在复杂查询的子查询中作为条件判断。</p></li><li><p><code>LIMIT 1</code>适用于在确定记录存在时同时需要获取该记录部分或全部数据的场合。</p></li><li><p><code>COUNT(*)</code>在需要统计满足特定条件的记录总数时更为适用。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在仅仅需要判断数据库中是否存在满足特定条件的记录时，使用<code>EXISTS</code>子句或带有<code>LIMIT 1</code>的查询不仅能够提高查询效率，减少资源消耗，还能根据需求灵活地获取相关数据。尽管<code>COUNT(*)</code>在统计记录数量上有其不可替代的价值，但在判断记录是否存在这一特定任务上，我们应该优先考虑更加高效且针对性强的<code>EXISTS</code>和<code>LIMIT 1</code>查询策略。这样才能更好地优化数据库性能，提升应用响应速度。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql优化 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还在用Calendar操作Date？Java8都弃用了，还不知道它的这款强大的工具吗？</title>
      <link href="/article/null.html"/>
      <url>/article/null.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在过去的Java版本中，日期和时间的处理主要依赖于<code>java.util.Date</code>和<code>java.util.Calendar</code>类，然而随着业务系统的复杂以及技术层面的提升，这些传统的日期时间类暴露出了若干显著的不足之处。随着<code>Java8</code>的发布，其引入了一套全新的日期时间API，彻底改变了我们处理日期和时间的方式。</p><h3 id="传统的日期时间类"><a href="#传统的日期时间类" class="headerlink" title="传统的日期时间类"></a>传统的日期时间类</h3><p>相比较Java8中新引入的<code>java.time</code>包下的时间处理类，传统的日期时间处理类在易用性，线程安全，不支持市时区等缺点。</p><ol><li><strong>设计复杂性</strong>：<code>Date</code>类的设计较为简单，但它实际上混合了日期和时间信息，并且没有提供直观的方法来单独操作日期或时间部分。<code>Calendar</code>类虽然提供了更多灵活性，但由于其内部状态和方法的复杂性，使得开发者在使用过程中容易出现错误和混淆，尤其是在进行日期时间计算和格式化时。比如：</li></ol><pre class="line-numbers language-java"><code class="language-java">Date currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 输出原始的日期时间，通常不是人类可读格式   Fri Mar 08 03:13:47 CST 2024</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 要改变日期的某个部分，必须先将其转换为 Calendar，然后设置  </span>Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  calendar<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>currentDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 修改日期的天数  </span>calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p><strong>线程安全性</strong>：<code>Date</code>和 <code>Calendar</code>类，以及格式化日期的SimpleDateFormat类都不是线程安全的，这意味着在多线程环境下的并发访问可能会导致数据不一致。</p><ul><li><p><code>Date</code>类内部维护了一个 long 类型的瞬时值，当调用如<code>setTime()</code>方法来更新这个瞬时值时，不同的线程同时调用就会互相覆盖彼此的值，造成数据不一致。</p></li><li><p><code>Calendar</code>类不仅包含了日期和时间信息，还有一系列内部状态变量，如年、月、日、小时、分钟、秒等。<code>Calendar</code>类的方法通常会修改这些内部状态，例如 <code>add()</code>、<code>set()</code> 等。在多线程环境下，若多个线程尝试同时修改同一个 <code>Calendar</code> 实例，也会导致不可预期的结果。</p></li><li><p><code>SimpleDateFormat</code>类在执行格式化和解析日期时间操作时，内部会维护一个 <code>Calendar</code>对象以及其他一些状态变量。在 <code>format()</code> 或 <code>parse()</code> 方法执行过程中，这些状态会被更新以完成格式转换。并且<code>SimpleDateFormat</code>中的方法并非原子操作，因此在多线程并发调用时，可能在一个线程还未完成整个操作时就被另一个线程打断，导致错误的日期时间处理结果。</p></li></ul></li><li><p><strong>时区处理能力</strong>：<code>Date</code>类虽能表示时间戳，但它不直接关联时区信息，难以进行时区相关的转换。而 <code>Calendar</code> 虽然支持时区，但操作过程相当复杂。</p></li><li><p><strong>精度差异</strong>：<code>Date</code>类精度只到毫秒级。</p></li></ol><h3 id="Java8中日期时间类"><a href="#Java8中日期时间类" class="headerlink" title="Java8中日期时间类"></a>Java8中日期时间类</h3><p>Java8中引入的<code>LocalDate</code>，<code>LocalTime</code>，<code>LocalDateTime</code>这几个位于<code>java.time</code>下的类克服了上述传统类别的局限性，提供了更强大、直观和精准的日期时间处理能力，成为现代Java开发中处理日期时间首选的工具类。相比较传统的日期时间类，具备以下显著优势：</p><ol><li><p><strong>功能丰富</strong><br><code>java.time</code>包下的类如 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>ZonedDateTime</code> 等都有明确的职责划分，分别处理日期、时间、日期时间以及带时区的日期时间，结构清晰，易于理解和使用。并且它们提供了一系列直观、面向对象的API，如 <code>plusXxx()</code>、<code>minusXxx()</code>、<code>withXxx()</code>等方法，使日期时间操作变得简单明了。</p></li><li><p><strong>时区支持</strong><br>除此之外，还支持时区，通过<code>ZonedDateTime</code>和 <code>ZoneId</code>等类提供了对时区的更好支持，可以方便地进行时区转换和处理。</p></li><li><p><strong>线程安全</strong><br>这些类都是不可变对象，线程安全，可以在多线程环境下安全使用，不会出现因并发操作导致的数据不一致问题。</p></li><li><p><strong>更高的精度</strong><br>支持纳秒级精度，相比 <code>Date</code> 类的毫秒精度更胜一筹。</p></li></ol><p><code>java.time</code>下主要有如下一些关键类：</p><ol><li><p><strong>LocalDate</strong><br><code>LocalDate</code>类表示一个不包含时间信息的日期，只包含年、月、日三个部分，且不关联任何特定时区。</p></li><li><p><strong>LocalTime</strong><br><code>LocalTime</code>类表示一个不包含日期信息的具体时间，包含时、分、秒和纳秒四个部分。</p></li><li><p><strong>LocalDateTime</strong><br><code>LocalDateTime</code>类结合了日期和时间，表示一个具体的日期和时间点，但是不包含时区信息。</p></li><li><p><strong>ZonedDateTime</strong><br><code>ZonedDateTime</code>类表示一个带有时区的日期时间，它可以明确表示某一特定时区内的某一确切时间点。</p></li><li><p><strong>Instant</strong><br><code>Instant</code>类表示时间线上某一瞬时点，通常以Unix纪元（1970-01-01T00:00:00Z）以来的秒数和纳秒数表示，它是全球通用的时间点表示。</p></li><li><p><strong>Period</strong><br><code>Period</code>类用于表示两个日期之间的期间，包括年、月、日的数量。</p></li><li><p><strong>Duration</strong><br><code>Duration</code>类表示两个时间点之间的时间差，包含秒和纳秒的持续时间，主要用于表示时间间隔而非日历单位。</p></li><li><p><strong>DateTimeFormatter</strong><br><code>DateTimeFormatter</code>类用于日期时间的格式化和解析，提供了标准化和自定义的日期时间格式化方式。</p></li><li><p><strong>TemporalAdjusters</strong><br><code>TemporalAdjusters</code>类提供了一系列实用方法，用于调整日期时间，例如获取下一个工作日、月初、月末等。</p></li></ol><p>这些类共同构成了一个强大、灵活且易于使用的日期时间处理体系，大大改善了Java在处理日期时间问题时的效率和准确性。接下来我们在使用上分别介绍这些类，以及使用他们的方式，感受他们的强大。</p><h3 id="Java8中日期时间类使用"><a href="#Java8中日期时间类使用" class="headerlink" title="Java8中日期时间类使用"></a>Java8中日期时间类使用</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><h5 id="NOW方法获取当前-时刻、日期、时间"><a href="#NOW方法获取当前-时刻、日期、时间" class="headerlink" title="NOW方法获取当前 时刻、日期、时间"></a>NOW方法获取当前 时刻、日期、时间</h5><pre class="line-numbers language-java"><code class="language-java">LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-consle"><code class="language-consle">localTime：15:28:45.241181localDate：2024-03-11localDateTime：2024-03-11T15:28:45.260655<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>针对<code>LocalTime</code>，<code>LocalDateTime</code>获取当前时刻默认会带有毫秒，如果不需要毫秒的话，可以通过设置纳秒为0 保留秒 <code>1秒 = 十亿纳秒</code> 。例如：</p><pre class="line-numbers language-java"><code class="language-java">LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withNano</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withNano</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-text"><code class="language-text">localTime：15:32:31localDateTime：2024-03-11T15:32:31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而对于<code>LocalDateTime</code>获取当前日期，默认<code>toString</code>会带有<code>T</code>分隔日期和时间,在项目中，可以通过全局序列化，进行统一的时间格式输出为 <code>yyyy-MM-dd HH:mm:ss</code>。但是一般不建议这么干，毕竟改变全局序列化配置，建议不使用<code>toString</code>，可以使用<code>DateTimeFormatter</code>进行自定义转换。</p><h5 id="of-方法指定年、月、日、时刻创建"><a href="#of-方法指定年、月、日、时刻创建" class="headerlink" title="of()方法指定年、月、日、时刻创建"></a>of()方法指定年、月、日、时刻创建</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// of方法直接传递对应的年、月、日  </span>LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>MARCH<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">ofYearDay</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 北京时间对应的时区  </span>ZoneId chinaTimeZone <span class="token operator">=</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建一个 Instant，这里使用当前时间的 InstantInstant instant = Instant.now();  </span>localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> chinaTimeZone<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用ofEpochDay()方法，则EpochDay为从公元1970年1月1日（Unix纪元）开始的第多少天  </span>localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">ofEpochDay</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> chinaTimeZone<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 根据一天中的总秒数构建时间</span>localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">ofSecondOfDay</span><span class="token punctuation">(</span>localTime<span class="token punctuation">.</span><span class="token function">toSecondOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> Month<span class="token punctuation">.</span>MARCH<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用LocalDate和LocalTime组合构造  </span>localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>localDate<span class="token punctuation">,</span> localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>instant<span class="token punctuation">,</span> chinaTimeZone<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-text"><code class="language-text">localDate：2024-03-11localDate：2024-03-11localDate：2024-03-11localDate：2024-03-11localDate：2024-03-11localTime：01:30localTime：01:30:30localTime：16:41:37.893310localTime：16:41:37localDateTime：2024-03-11T01:30:30localDateTime：2024-03-11T01:30:30localDateTime：2024-03-11T16:41:37localDateTime：2024-03-11T16:41:37.893310<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="from-方法转换"><a href="#from-方法转换" class="headerlink" title="from()方法转换"></a>from()方法转换</h5><p><code>from()方法</code>将<code>TemporalAccessor</code>类型（如<code>ZonedDateTime</code>）转换为相对应的日期或者时间。<code>TemporalAccessor</code>接口是一个用于读取或写入日期、时间或者日期时间的通用接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个ZonedDateTime实例  </span>ZonedDateTime zonedDateTime <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>zonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-text"><code class="language-text">localTime：17:18:27.942911localDate：2024-03-11localDateTime：2024-03-11T17:18:27.942911<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="parse-方法转换"><a href="#parse-方法转换" class="headerlink" title="parse()方法转换"></a>parse()方法转换</h5><p>将字符串按照指定格式（可选）解析为对应的日期时间类。</p><pre class="line-numbers language-java"><code class="language-java">LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"17:25:30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"17:25:30"</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2024-03-11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2024/03/11"</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2024-03-11T17:25:30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2024/03/11 17:25:30"</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-text"><code class="language-text">localTime：17:25:30localTime：17:25:30localDate：2024-03-11localDate：2024-03-11localDateTime：2024-03-11T17:25:30localDateTime：2024-03-11T17:25:30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="日期时间类的相互转换"><a href="#日期时间类的相互转换" class="headerlink" title="日期时间类的相互转换"></a>日期时间类的相互转换</h4><h5 id="LocalTime、LocalDate、LocalDateTime-相互转化"><a href="#LocalTime、LocalDate、LocalDateTime-相互转化" class="headerlink" title="LocalTime、LocalDate、LocalDateTime 相互转化"></a>LocalTime、LocalDate、LocalDateTime 相互转化</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LocalTime + LocalDate = LocalDateTime</span>LocalDateTime localDateTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atDate</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>localDateTime <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atTime</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDateTime 转 LocalDate</span>LocalDate localDate <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDateTime 转 LocalTime</span>LocalTime localTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTime："</span><span class="token operator">+</span>localTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取今日开始时间 2024-03-11T00:00</span>localDateTime <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取今日开始时间 2024-03-11T00:00</span>LocalDateTime startDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span>MIN<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"startDateTime："</span><span class="token operator">+</span> startDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取今日结束时间 2024-03-11T23:59:59.999999999</span>LocalDateTime endDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"endDateTime："</span><span class="token operator">+</span> endDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-text"><code class="language-text">localDateTime：2024-03-11T18:04:22.348539localDateTime：2024-03-11T18:04:22.370562localDateTime：2024-03-11T18:04:22.370768localDate：2024-03-11localTime：18:04:22.371062localDateTime：2024-03-11T00:00startDateTime：2024-03-11T00:00endDateTime：2024-03-11T23:59:59.999999999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="String-与-LocalTime、LocalDate、LocalDateTime-相互转化"><a href="#String-与-LocalTime、LocalDate、LocalDateTime-相互转化" class="headerlink" title="String 与 LocalTime、LocalDate、LocalDateTime 相互转化"></a>String 与 LocalTime、LocalDate、LocalDateTime 相互转化</h5><p>主要使用<code>format</code> 和 <code>parse</code> 进行转换，使用方法基本相同。使用 <code>DateTimeFormatter.ofPattern()</code> 定义时间格式，再进行转换。<br><code>DateTimeFormatter</code>线程安全。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LocalTime 转 String 自定义输出格式，例如：**时**分**秒 该转化的 00 不会被省略</span>String localTimeStr <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"HH时mm分ss秒"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localTimeStr:"</span><span class="token operator">+</span>localTimeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>String localDateStr <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateStr:"</span><span class="token operator">+</span>localDateStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDateTime 转 String</span>String localDateTimeStr <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTimeStr:"</span><span class="token operator">+</span>localDateTimeStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String 转 LocalDateTime</span>LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2023-04-14 15:59:40"</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-text"><code class="language-text">localTimeStr:19时02分58秒localDateStr:2024-03-11localDateTimeStr:2024-03-11 19:02:58localDateTime：2023-04-14T15:59:40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Date-与-LocalDate、LocalDateTime-相互转化"><a href="#Date-与-LocalDate、LocalDateTime-相互转化" class="headerlink" title="Date 与 LocalDate、LocalDateTime 相互转化"></a>Date 与 LocalDate、LocalDateTime 相互转化</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Date 转 LocalDateTime</span>Date currentDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 转换为Instant </span>Instant instant <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过zoneId设置时区(这里使用系统时区)，转换为带带时区的 ZoneDateTime</span>ZonedDateTime zonedDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 然后通过ZonedDateTime转换为LocalDateTime</span>LocalDateTime localDateTime <span class="token operator">=</span> zonedDateTime<span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDateTime 转 Date，同理也是通过ZonedDateTime转换为Date</span>Date localDateTimeToDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDateTimeToDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Date转LocalDate 同理 LocalDateTime转换</span>LocalDate localDate <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span>localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDate 转 Date  需要先将 LocalDate 转 LocalDateTime</span>Date localDateToDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里介绍一下ZoneId。<code>java.time.ZoneId</code>是Java 8中<code>java.time</code>包中用于表示时区的类。时区是地球上的地理位置，用于确定在该位置观察太阳升落以及规定当地居民生活和商业活动时间的标准时间。<code>ZoneId</code>使用IANA时区数据库提供的时区标识符，这个标识符是唯一的，这些标识符通常是地区/城市对，例如“Asia/Shanghai”代表中国上海所在的时区，<code>America/New_York</code>代表美国纽约城市。<br>其实例获取有两种方式：</p><ul><li><code>ZoneId.systemDefault()</code>：获取系统默认的时区ID。</li><li><code>ZoneId.of(String zoneId)</code>：根据提供的时区ID字符串获取ZoneId实例。至于zoneId的值，可以查看源码。可以通过<code>ZoneId.getAvailableZoneIds()</code>查看获取。<h5 id="Long-与-LocalDate、LocalDateTime-相互转化"><a href="#Long-与-LocalDate、LocalDateTime-相互转化" class="headerlink" title="Long 与 LocalDate、LocalDateTime 相互转化"></a>Long 与 LocalDate、LocalDateTime 相互转化</h5>时间戳转换。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> timeMillis <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 时间戳(Long) 转 LocalDateTime</span>LocalDateTime localDateTime <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>localDateTime <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTime："</span><span class="token operator">+</span>localDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDateTime 转 时间戳(Long) 秒级</span><span class="token keyword">long</span> localDateTimeToSecond <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTimeToSecond："</span><span class="token operator">+</span> localDateTimeToSecond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDateTime 转 时间戳(Long) 毫秒级</span><span class="token keyword">long</span> localDateTimeToMilliSecond <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateTimeToMilliSecond："</span><span class="token operator">+</span> localDateTimeToMilliSecond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 时间戳(Long) 转 LocalDate</span>LocalDate localDate <span class="token operator">=</span> Instant<span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDate："</span><span class="token operator">+</span> localDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDate 转 时间戳(Long) 秒级</span><span class="token keyword">long</span> localDateToSecond <span class="token operator">=</span>  LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateToSecond："</span><span class="token operator">+</span> localDateToSecond<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// LocalDate 转 时间戳(Long) 毫秒级</span><span class="token keyword">long</span> localDateToMilliSecond <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"localDateToMilliSecond："</span><span class="token operator">+</span> localDateToMilliSecond<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-text"><code class="language-text">localDateTime：2024-03-11T19:37:02.335localDateTime：2024-03-11T19:37:02.335localDateTimeToSecond：1710157022localDateTimeToMilliSecond：1710157022365localDate：2024-03-11localDateToSecond：1710086400localDateToMilliSecond：1710086400000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>java.time.ZoneOffset</code>是Java8中<code>java.time</code>包内用来表示时区偏移量的类，它表示的是格林尼治标准时间或协调世界时间（UTC）基础上的固定偏移量。每一个时区都可以通过一个或多个偏移量来表示，比如“+02:00”表示比UTC时间快两个小时的时区偏移。<br>其实例创建有如下方式：</p><ul><li><code>ZoneOffset.ofHours(int hours)</code>：根据小时数创建偏移量，例如 <code>ZoneOffset.ofHours(2)</code> 表示比UTC早2小时的时区。</li><li><code>ZoneOffset.ofHoursMinutes(int hours, int minutes)</code>：根据小时数和分钟数创建偏移量。</li><li><code>ZoneOffset.ofHoursMinutesSeconds(int hours, int minutes, int seconds)</code>：根据小时、分钟和秒数创建偏移量。</li><li><code>ZoneOffset.ofTotalSeconds(int totalSeconds)</code>：根据相对于UTC的总秒数创建偏移量。</li><li><code>ZoneOffset.of(String offsetId)</code>：根据偏移量ID（如 “+02:00”）创建实例。</li></ul><h4 id="日期时间类的操作"><a href="#日期时间类的操作" class="headerlink" title="日期时间类的操作"></a>日期时间类的操作</h4><h5 id="日期时间的增减"><a href="#日期时间的增减" class="headerlink" title="日期时间的增减"></a>日期时间的增减</h5><p><code>java.time</code> 包中日期时间类（如 <code>LocalDateTime</code>、<code>LocalDate</code> 和 <code>LocalTime</code>）可以通过<code>plusXxx()</code> 和 <code>minusXxx()</code> 方法，用于对日期时间对象进行加减操作，以增加或减少指定的时间或日期单位。</p><p><strong>1、LocalDateTime 加减</strong>：  </p><ul><li><code>plusHours(int hours)</code>, <code>plusMinutes(int minutes)</code>, <code>plusSeconds(int seconds)</code>：分别用于向 <code>LocalDateTime</code> 对象添加指定的小时数、分钟数和秒数。<ul><li><code>plus(1, ChronoUnit.XXX)</code>：这里的 <code>ChronoUnit</code> 参数可以是 <code>HOURS</code>、<code>MINUTES</code>、<code>SECONDS</code> 等，也可以是 <code>YEARS</code>、<code>MONTHS</code>、<code>DAYS</code>、<code>WEEKS</code> 等，用于向日期时间对象添加指定单位的数量。</li><li><code>plus(Duration duration)</code>：使用 <code>Duration</code> 对象来增加时间，<code>Duration</code> 可以包含秒和纳秒的精度。</li><li><code>plus(Period period)</code>：使用 <code>Period</code> 对象来增加日期，<code>Period</code> 可以表示年、月、日的数量。</li><li>与<code>plusXxx()</code> 方法相对应，<code>minusXxx()</code> 方法用于从日期时间对象中减少指定的单位。例如 <code>minusHours(int hours)</code>、<code>minusMinutes(int minutes)</code>、<code>minusSeconds(int seconds)</code> 等方法用于减少小时、分钟、秒数。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LocalDateTime 加减</span>LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下为增加时、分、秒</span>LocalDateTime plusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>plusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>plusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>plusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下为增加年、月、日</span>plusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>plusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>plusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>plusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>plusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下为减少时、分、秒</span>LocalDateTime minusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下为减少年、月、日</span>minusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDateTime："</span><span class="token operator">+</span>minusLocalDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、LocalDate 加减</strong>：</p><ul><li>同样的，<code>plusYears(int years)</code>, <code>plusMonths(int months)</code>, <code>plusDays(int days)</code> 分别用于增加年、月、日。</li><li><code>plus(1, ChronoUnit.XXX)</code>和<code>plus(Duration/Period duration/period)</code> 方法在此同样适用，用于增加指定的日期单位。</li><li>与<code>plusXxx()</code> 方法相对应，<code>minusXxx()</code> 方法用于从日期时间对象中减少指定的单位。例如 <code>minusYears(int years)</code>、<code>minusMonths(int months)</code>、<code>minusWeeks(int weeks)</code>、<code>minusDays(int days)</code> 等方法用于减少年、月、周、天数。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LocalDate 加减</span>LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate plusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDate："</span><span class="token operator">+</span>plusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDate："</span><span class="token operator">+</span>plusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDate："</span><span class="token operator">+</span>plusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalDate："</span><span class="token operator">+</span>plusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate minusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">minusYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDate："</span><span class="token operator">+</span>minusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDate："</span><span class="token operator">+</span>minusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>YEARS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MONTHS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>WEEKS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDate："</span><span class="token operator">+</span>minusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofYears</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofWeeks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Period<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDate："</span><span class="token operator">+</span>minusLocalDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>3、LocalTime 加减</strong>： </p><ul><li><code>plusHours(int hours)</code>, <code>plusMinutes(int minutes)</code>, <code>plusSeconds(int seconds)</code>：分别用于向 <code>LocalTime</code> 对象添加指定的小时数、分钟数和秒数。</li><li>同样支持 <code>plus(1, ChronoUnit.XXX)</code> 和 <code>plus(Duration duration)</code> 方法，用于增加时间单位。</li><li>与 <code>plusXxx()</code> 方法相对应，<code>minusXxx()</code> 方法用于从日期时间对象中减少指定的单位。<code>minus(1, ChronoUnit.XXX)</code>, <code>minus(Duration duration)</code>, <code>minus(Period period)</code> 方法也分别用于减少指定的日期或时间单位。例如 <code>minusHours(int hours)</code>、<code>minusMinutes(int minutes)</code>、<code>minusSeconds(int seconds)</code> 等方法用于减少小时、分钟、秒数。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// LocalTime 加减</span>LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime plusLocalTime <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">plusHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalTime："</span><span class="token operator">+</span>plusLocalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalTime <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalTime："</span><span class="token operator">+</span>plusLocalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>plusLocalTime <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plusLocalTime："</span><span class="token operator">+</span>plusLocalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime minusLocalTime <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">minusHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusMinutes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minusSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalTime："</span><span class="token operator">+</span>minusLocalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalTime <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>HOURS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalTime<span class="token punctuation">)</span><span class="token punctuation">;</span>minusLocalTime <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ChronoUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"minusLocalDateTime："</span><span class="token operator">+</span>minusLocalTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="日期时间修改指定值"><a href="#日期时间修改指定值" class="headerlink" title="日期时间修改指定值"></a>日期时间修改指定值</h5><p><code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>ZonedDateTime</code>可以通过相对应的<code>withXxx()</code>方法修改指定的值。</p><p><strong>1、LocalDate</strong>：</p><ul><li><code>LocalDate.withYear(int year)</code>：修改年份字段。</li><li><code>LocalDate.withMonth(int month)</code>：修改月份字段（注意月份是从1开始计数的）。</li><li><code>LocalDate.withDayOfMonth(int dayOfMonth)</code>：修改日期字段。</li></ul><pre class="line-numbers language-java"><code class="language-java">LocalDate localDate <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate newDate <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2025</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMonth</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"newDate："</span><span class="token operator">+</span>newDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2、LocalTime</strong>：</p><ul><li><code>LocalTime.withHour(int hour)</code>：修改小时字段。</li><li><code>LocalTime.withMinute(int minute)</code>：修改分钟字段。</li><li><code>LocalTime.withSecond(int second)</code>：修改秒字段。</li><li><code>LocalTime.withNano(int nanoOfSecond)</code>：修改纳秒字段。</li></ul><pre class="line-numbers language-java"><code class="language-java">LocalTime localTime <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalTime newTime <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMinute</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>SECOND_OF_MINUTE<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"newTime："</span><span class="token operator">+</span>newTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>3、LocalDateTime</strong>：</p><ul><li><code>LocalDateTime.withYear(int year)</code></li><li><code>LocalDateTime.withMonth(int month)</code></li><li><code>LocalDateTime.withDayOfMonth(int dayOfMonth)</code></li><li><code>LocalDateTime.withHour(int hour)</code></li><li><code>LocalDateTime.withMinute(int minute)</code></li><li><code>LocalDateTime.withSecond(int second)</code></li><li><code>LocalDateTime.withNano(int nanoOfSecond)</code></li></ul><pre class="line-numbers language-java"><code class="language-java">LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime newDateTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2025</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMonth</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withHour</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMinute</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ChronoField<span class="token punctuation">.</span>SECOND_OF_MINUTE<span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"newDateTime："</span><span class="token operator">+</span> newDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4、ZonedDateTime</strong>：</p><ul><li>除了上述的日期和时间字段外，还有时区相关的 <code>withZoneSameInstant(ZoneId zone)</code> 方法，可以改变时区的同时保持同一瞬间不变。</li></ul><pre class="line-numbers language-java"><code class="language-java">ZonedDateTime zonedDateTime <span class="token operator">=</span> ZonedDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Europe/London"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZonedDateTime newZonedDateTime <span class="token operator">=</span> zonedDateTime<span class="token punctuation">.</span><span class="token function">withZoneSameInstant</span><span class="token punctuation">(</span>ZoneId<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"America/New_York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"newZonedDateTime："</span><span class="token operator">+</span> newZonedDateTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除此之外，调整日期时间还可以通过<code>TemporalAdjusters</code>，<code>TemporalAdjuster</code> 是一个函数式接口，用于根据给定的规则调整日期时间对象。Java8的 <code>java.time.temporal</code> 包中预定义了一系列常用的 <code>TemporalAdjuster</code> 实现，例如获取下一个工作日、月初、月末等。</p><pre class="line-numbers language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下一个工作日</span>LocalDate nextWorkingDay <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>MONDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果11号不是周一，则返回下一个周一的日期</span><span class="token comment" spellcheck="true">// 下一个月的第一天</span>LocalDate firstDayNextMonth <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">firstDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回4月1日</span><span class="token comment" spellcheck="true">// 当月的最后一个工作日</span>LocalDate lastWorkingDay <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">lastInMonth</span><span class="token punctuation">(</span>DayOfWeek<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回3月最后一个周五的日期</span><span class="token comment" spellcheck="true">// 自定义 TemporalAdjuster</span>TemporalAdjuster adjuster <span class="token operator">=</span> temporal <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> temporal<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>TemporalAdjusters<span class="token punctuation">.</span><span class="token function">lastDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>LocalDate tenthDayNextMonthEnd <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>adjuster<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回4月最后一个日期，前提是先加10天</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="日期时间的比较"><a href="#日期时间的比较" class="headerlink" title="日期时间的比较"></a>日期时间的比较</h5><p>在Java8及其以后版本的日期时间API中，<code>isBefore()</code> 和 <code>isAfter()</code> 方法是 <code>java.time</code> 包中的 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>ZonedDateTime</code> 等日期时间类所共有的方法，用于比较两个日期时间对象的先后顺序。</p><p><strong>isBefore()</strong>：</p><ul><li>此方法用于判断当前对象是否早于另一个日期时间对象。</li><li>如果当前对象的时间点在参数对象之前，则返回 <code>true</code>；否则返回 <code>false</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isEarlier <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 true，因为 date1 在 date2 之前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>isAfter()</strong>：</p><ul><li>此方法用于判断当前对象是否晚于另一个日期时间对象。</li><li>如果当前对象的时间点在参数对象之后，则返回 <code>true</code>；否则返回 <code>false</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">LocalDateTime time1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime time2 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> isLater <span class="token operator">=</span> time1<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回 true，因为 time1 在 time2 之后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>compareTo()</strong><br>在Java 8的 <code>java.time</code> 包中，大部分日期时间类如 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code>、<code>ZonedDateTime</code> 都实现了 <code>Comparable</code> 接口，从而可以直接使用 <code>compareTo()</code> 方法进行比较。<code>compareTo()</code> 方法用于比较两个日期时间对象的先后顺序，返回值含义如下：</p><ul><li>如果当前对象早于（时间点在前）参数对象，返回负数。</li><li>如果当前对象等于参数对象，返回0。</li><li>如果当前对象晚于（时间点在后）参数对象，返回正数。</li></ul><pre class="line-numbers language-java"><code class="language-java">LocalDate date1 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDate date2 <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> comparisonResult <span class="token operator">=</span> date1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>comparisonResult <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date1 is before date2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>comparisonResult <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date1 is after date2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date1 is equal to date2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LocalDateTime dateTime1 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LocalDateTime dateTime2 <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> timeComparisonResult <span class="token operator">=</span> dateTime1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>dateTime2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><p>在Java8的 <code>java.time</code> 包中，各个日期时间类如 <code>LocalDate</code>、<code>LocalTime</code>、<code>LocalDateTime</code> 提供了一系列 <code>get</code> 方法，用于获取特定字段的值。</p><p>获取日期中的特定字段：</p><pre class="line-numbers language-java"><code class="language-java">LocalDate date <span class="token operator">=</span> LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取当月的第几天，此处返回11</span><span class="token keyword">int</span> monthValue <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取月份值，此处返回3</span>Month month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取Month枚举，此处返回March</span><span class="token keyword">int</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取年份，此处返回2024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于时间部分，类似地可以获取小时、分钟、秒和纳秒：</p><pre class="line-numbers language-java"><code class="language-java">LocalTime time <span class="token operator">=</span> LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> hour <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取小时数，此处返回10</span><span class="token keyword">int</span> minute <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取分钟数，此处返回30</span><span class="token keyword">int</span> second <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取秒数，此处返回45</span><span class="token keyword">int</span> nano <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取纳秒数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在SpringBoot中使用"><a href="#在SpringBoot中使用" class="headerlink" title="在SpringBoot中使用"></a>在SpringBoot中使用</h4><p><code>SpringBoot</code>默认集成了<code>Jackson</code>作为<code>JSON</code>处理库，<code>Jackson</code>已经能自动处理 <code>LocalDate</code>、<code>LocalTime</code> 和 <code>LocalDateTime</code> 类型。</p><p>如果需要使用自定义日期时间格式，我们有两种方式：</p><p><strong>手动更改全局配置</strong>： 如果需要自定义日期格式，可以通过 <code>ObjectMapper</code> 的配置类来注册自定义的日期格式化器：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JacksonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="token function">jsonCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">simpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用Java 8时间API的日期格式器</span>            builder<span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StdDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withColonInTimeZone</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注册LocalDateTime的序列化和反序列化模块</span>            builder<span class="token punctuation">.</span><span class="token function">modules</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JavaTimeModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>手动绑定格式化配置</strong><br>SpringBoot支持自动绑定HTTP请求参数到控制器方法参数中，包括 <code>LocalDate</code>、<code>LocalTime</code> 和 <code>LocalDateTime</code> 类型。客户端需发送符合日期格式的字符串，Spring Boot会自动转换成相应类型。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/events"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Event<span class="token operator">></span> <span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span> LocalDate date<span class="token punctuation">,</span>                                             <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span> LocalTime startTime<span class="token punctuation">,</span>                                             <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span> LocalDateTime timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者请求或者响应VO中：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span>  LocalDate date<span class="token punctuation">;</span>        <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span>         <span class="token keyword">private</span> LocalTime startTime<span class="token punctuation">;</span>        <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span>  LocalDateTime timestamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mybatis中使用"><a href="#Mybatis中使用" class="headerlink" title="Mybatis中使用"></a>Mybatis中使用</h4><p>在MyBatis中查询MySQL数据库时，使用Java 8的 <code>java.time.LocalDate</code>、<code>java.time.LocalTime</code> 和 <code>java.time.LocalDateTime</code>类型。</p><ol><li><strong>数据库表结构</strong>： 在MySQL数据库中，通常需要使用适合的日期时间类型来存储这些Java 8的日期时间对象。例如：<ul><li><code>LocalDate</code> 对应<code>MySQL</code>的<code>DATE</code>类型。</li><li><code>LocalTime</code> 对应<code>MySQL</code> 的 <code>TIME</code> 类型。</li><li><code>LocalDateTime</code> 对应<code>MySQL</code>的 <code>DATETIME</code>或<code>TIMESTAMP</code>类型。</li></ul></li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test_date<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span><span class="token punctuation">,</span>    test_local_date <span class="token keyword">DATE</span> <span class="token punctuation">,</span>    test_local_time TIME<span class="token punctuation">,</span>    test_local_date_time <span class="token keyword">DATETIME</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'日期时间测试'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>实体类映射</strong>： 在Java实体类中，对应字段应声明为 <code>LocalDate</code>、<code>LocalTime</code> 或 <code>LocalDateTime</code> 类型。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDate</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 自增主键    */</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDate testLocalDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalTime testLocalTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> LocalDateTime testLocalDateTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.<strong>MyBatis配置</strong>：</p><ul><li><strong>自动类型转换</strong>：如果你使用的是较新的MyBatis版本（&gt;=3.4.5），MyBatis已经内置了对Java 8日期时间类型的处理。这意味着在执行SQL查询时，MyBatis会自动将数据库中的日期时间字段转换为相应的Java8类型。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TestDate testDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testDate<span class="token punctuation">.</span><span class="token function">setTestLocalDate</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testDate<span class="token punctuation">.</span><span class="token function">setTestLocalTime</span><span class="token punctuation">(</span>LocalTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testDate<span class="token punctuation">.</span><span class="token function">setTestLocalDateTime</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    testDateMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>testDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQueryDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    TestDate testDate <span class="token operator">=</span> testDateMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testLocalDate:"</span><span class="token operator">+</span>testDate<span class="token punctuation">.</span><span class="token function">getTestLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testLocalTime:"</span><span class="token operator">+</span>testDate<span class="token punctuation">.</span><span class="token function">getTestLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testLocalDateTime:"</span><span class="token operator">+</span>testDate<span class="token punctuation">.</span><span class="token function">getTestLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240312201356.png" alt="image.png"></p><ul><li><strong>自定义TypeHandler</strong>：如果MyBatis版本较低或者需要自定义日期时间格式，你可能需要自定义 <code>TypeHandler</code> 来处理 <code>LocalDate</code>、<code>LocalTime</code> 和 <code>LocalDateTime</code> 与数据库字段间的转换。关于Mybatis使用自定义TypeHandler，请异步：</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>综上所述，本文深入探讨了Java 8引入的全新日期时间API相较于传统的Date和Calendar类的优势及实际应用。鉴于Java 8新日期时间API在设计上的先进性和易用性，我们强烈建议开发者积极采纳并替换掉陈旧的Date和Calendar类，转而采用如LocalDate、LocalDateTime、ZonedDateTime等现代日期时间类。</p><p>Java 8新日期时间API提供了更为清晰、直观的操作接口，支持不可变对象设计模式，增强了类型安全性，并具备丰富的日期时间运算、解析与格式化功能，显著提高了代码质量与可读性。此外，新API对日期时间单位的精确度控制、时区管理以及与其他日期时间规范的兼容性等方面均表现出卓越的表现力和灵活性，使得开发者在处理各类复杂日期时间逻辑时能够更加得心应手，提升开发效率。</p><p>因此，无论是处于对代码现代化改造的需求，还是出于提高开发效率和程序稳定性的考量，迁移到Java 8的新日期时间API无疑是明智之举。通过充分利用这些强大且功能完备的工具，开发者将在日期时间处理领域实现飞跃，为项目的长期维护和发展打下坚实基础。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯二面：如何保证接口幂等性？高并发下的接口幂等性如何实现？</title>
      <link href="/article/springbootidempotent.html"/>
      <url>/article/springbootidempotent.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="什么是接口幂等性"><a href="#什么是接口幂等性" class="headerlink" title="什么是接口幂等性"></a>什么是接口幂等性</h3><p>接口幂等性这一概念源于数学，原意是指一个操作如果连续执行多次所产生的结果与仅执行一次的效果相同，那么我们就称这个操作是幂等的。在互联网领域，特别是在Web服务、API设计和分布式系统中，接口幂等性具有非常重要的意义。</p><p>具体到HTTP接口或者服务间的API调用，接口幂等性就可以理解为当客户端对同一接口发起多次相同的请求时，服务端系统也应该确保只执行一次相应的操作，并且不论接收到了多少次请求，系统的状态变更始终是一致的，不会因为重复的请求而导致数据的错误。</p><p>比如我们常常遇到的订单创建，支付等业务。</p><ul><li>如果一个“创建订单”接口实现了幂等性，当收到两次同样的创建请求时，系统应该要么拒绝第二个请求（因为它已经是重复请求），要么确保只有一个订单被创建，而不是两个完全一样的订单。</li><li>对于一个“支付”接口，幂等性要求即便用户由于网络原因反复点击支付按钮，服务端也只会扣除用户账户一次金额，避免重复扣费。</li></ul><h3 id="导致接口幂等性问题的原因"><a href="#导致接口幂等性问题的原因" class="headerlink" title="导致接口幂等性问题的原因"></a>导致接口幂等性问题的原因</h3><p>要向杜绝幂等性，那么我们就要之道导致接口幂等性问题的原因有哪些。接口幂等性问题通常由以下多种原因引起：</p><ol><li><p><strong>网络波动不稳定</strong>：<br>网络通信中的丢包、延迟等情况可能导致客户端未收到服务端的响应或服务端未收到客户端的请求，此时客户端可能会重试发送请求，导致接口被重复调用。</p></li><li><p><strong>用户操作</strong>：<br>用户快速重复点击导致，例如用户在等待响应时，由于不确定是否操作成功，可能会多次点击提交按钮，进而发送多次相同的请求。再比如页用户频繁刷新页面，尤其是在某些提交操作尚未完成时，刷新页面可能会重新发送请求。还有用户可能在浏览器上点击回退然后再重复之间的提交操作，这都可能会导致重新发送请求。</p></li><li><p><strong>重试机制</strong>：<br>在高可用性设计中，客户端常常设置有重试机制，当请求失败或超时时会自动重新发起请求。而在分布式系统中，服务间调用也可能有重试策略，以应对临时故障。比如Nginx重试，RPC重试，或者调用方业务层中进行重试。</p></li><li><p><strong>定时任务或异步处理</strong>：<br>在定时任务中如果定时任务调度或逻辑设计不当，可能会导致同一任务被执行多次。或者在消息队列中，消息可能会因为异常等原因被重复消费。</p></li><li><p><strong>并发控制</strong>：<br>缺乏有效的并发控制手段，导致在并发环境下，针对同一资源的操作被多次执行。</p></li></ol><p>总的来说，导致接口幂等性问题可以粗略的归类于两种情况：前端调用以及服务端调用，那么我们可以针对这两种情况看一下如何去保证接口幂等。</p><h3 id="如何保证接口幂等？"><a href="#如何保证接口幂等？" class="headerlink" title="如何保证接口幂等？"></a>如何保证接口幂等？</h3><h4 id="前端调用"><a href="#前端调用" class="headerlink" title="前端调用"></a>前端调用</h4><h5 id="页面控制"><a href="#页面控制" class="headerlink" title="页面控制"></a>页面控制</h5><p>页面调用接口时可以通过禁用（如按钮置灰或显示加载状态）防止用户在请求未完成前重复点击，从而减少不必要的重复请求和可能的数据冲突。虽然在前端进行按钮置灰等操作可以辅助提高系统的幂等性表现，但是这个方式只是从用户体验和用户行为控制的角度来避免重复提交的一种方法，并没有从系统设计层面完全解决接口本身的幂等性问题。</p><h5 id="使用RPG模式"><a href="#使用RPG模式" class="headerlink" title="使用RPG模式"></a>使用RPG模式</h5><p><code>PRG（POST/Redirect/GET）</code>模式是一种前端交互策略，旨在解决用户刷新页面时可能导致表单数据重复提交的问题。它巧妙地利用了HTTP协议的特性，具体的交互流程如下：</p><ol><li>用户在网页表单中填写数据，并通过POST请求将其发送至服务器进行处理，例如创建新资源或更新现有数据。</li><li>服务器接收到POST请求后，对提交的数据进行有效处理和持久化存储，并在操作成功后不直接返回处理结果，而是通过HTTP响应码302或303实现重定向，指示客户端发起一个新的GET请求去访问一个特定的URL。</li><li>客户端遵照服务器的重定向指示，自动发送GET请求访问新的URL，此时返回的页面将展示之前POST操作处理完毕的结果。</li><li>当用户在此后刷新页面时，浏览器只会按照常规方式重新发起GET请求，而非重新提交POST数据，因此有效地避免了重复提交引发的潜在问题</li></ol><h5 id="Token机制"><a href="#Token机制" class="headerlink" title="Token机制"></a>Token机制</h5><p>Token机制是一种广泛应用互联网领域的认证与授权方法，特别是Web服务系统。token可以理解为一种安全凭证，它是由服务端生成并颁发给客户端的一段经过加密处理的字符串或数据结构，用来代表用户的某种状态或权限。</p><p>通过Token机制，我们可以解决接口幂等性问题。在接口中，我们允许重复提交，但是要保证重复提交不产生副作用，比如点击n次只产生一条记录，客户端每次请求都需要携带一个唯一的Token，而服务器则验证这个Token的有效性。如果服务器收到了一个已经使用过的Token就会认为这是一个重复请求并拒绝处理，从而确保接口的幂等性具体流握如下Token机制是一种常用的方法，用于确保接口的幂等性和防止重复请求。具体流程如下：</p><ol><li><p><strong>生成Token</strong><br>当用户开始执行一个需要确保幂等性的操作（如支付、下单、更新用户信息等）时，服务端会生成一个唯一的、有时效性的token。这个token可以是一个随机字符串或者带有时间戳和其他相关信息的哈希值，确保其唯一性。</p></li><li><p><strong>存储Token</strong><br>生成的token会被存储在服务端的一个临时存储介质中，如Redis、Memcached或数据库，同时设置一个合理的过期时间（例如15分钟）。</p></li><li><p><strong>传递Token</strong><br>将生成的token返回给客户端，客户端在进行后续的API调用时，需将此token作为请求参数或放在请求头中一并发送给服务端。</p></li><li><p><strong>验证Token</strong><br>服务端在接收到带有token的请求时，首先检查token是否存在并且有效（未过期且未被使用过）。如果token有效且未被使用，则执行相应的业务逻辑，并在执行完成后立即从存储介质中移除或标记为已使用。若token已失效或已被使用，则拒绝此次请求，返回相应的错误提示，确保同一个操作不会被执行两次。</p></li><li><p><strong>限制并发</strong><br>在并发场景下，通过原子操作（如Redis的<code>SETNX</code>命令）确保在验证token有效的同时，将其删除或更新状态，避免多个请求同时通过验证。</p></li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240307145347.png" alt="image.png"></p><h4 id="服务端控制"><a href="#服务端控制" class="headerlink" title="服务端控制"></a>服务端控制</h4><p>在服务端接口处理逻辑时，可以通过通过一些特定的标识符或请求参数来校验请求的幂等性，以确保同样的请求不会被重复处理。</p><h5 id="唯一标识符"><a href="#唯一标识符" class="headerlink" title="唯一标识符"></a>唯一标识符</h5><p>客户端每次发起请求会携带一个全局唯一的标识符。服务器接收到请求后就会对这个标识符进行检查，若服务器发现该标识符已经在系统中存在，表明这是一个重复请求，此时服务器可以选择忽略该请求，或者向客户端返回已处理过相同请求的结果信息。若服务器未找到该标识符存在于系统内，则认定该请求为新请求，服务器将继续对其进行正常处理，并将此唯一标识符保存至系统中，以便于后续对接收的请求进行有效性校验，防止同一请求的重复处理。比如我们在要求上游ERP系统对接订单平台时就会要求上游传递一个账号下全局唯一的一个参考单号，这个参考单号一个很重要的作用就是保证接口幂等性。</p><h5 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h5><p>某些请求参数确实可以用来辅助校验请求的幂等性。例如，时间戳可以作为一种可能的请求参数，在处理请求时，服务器可以通过比较时间戳与服务器当前时间来判断请求的有效性。若时间戳与当前时间之间的差异超出预设的合理范围（如几秒钟到几分钟不等，具体阈值视业务场景而定），服务器可以推测该请求可能是由于网络延迟或者其他原因导致的重复提交。</p><blockquote><p>单纯依靠时间戳来判断幂等性和重复请求并不完全准确，因为不同的客户端时间可能并不精确同步，而且时间戳本身无法保证全局唯一性。但是它可以作为一种有效的辅助手段来减少重复处理的可能性</p></blockquote><h5 id="状态机设计"><a href="#状态机设计" class="headerlink" title="状态机设计"></a>状态机设计</h5><p>对于状态转移类的操作类型的业务，可采用状态机设计，每次请求只允许合法的状态变迁，非法状态变迁（如已经完成的订单不允许再次支付）将被拒绝。</p><h5 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h5><p>在更新数据时，可以通过版本号或时间戳等机制判断数据是否已被修改，防止因并发请求导致的多次更新问题。具体做法：</p><ol><li>在数据库表中增加一个版本号字段（version）或者时间戳字段（timestamp）。</li><li>客户端第一次请求时获取数据的版本号或时间戳。</li><li>客户端发起更新操作时，将上次读取的版本号或时间戳一起发送回服务器。</li><li>服务器在执行更新操作前，首先检查当前数据库中的版本号或时间戳是否与客户端提交的一致。<ul><li>如果一致，说明在这期间数据没有被其他事务修改过，于是更新数据并递增版本号或更新时间戳。</li><li>如果不一致，说明数据已经被修改过，此时服务器拒绝本次更新请求，返回错误提示，客户端可以根据错误信息决定是否重新获取最新数据再尝试更新。</li></ul></li></ol><p>通过这种方式，即使客户端因为网络原因或其他因素导致同一请求被多次发送，乐观锁机制能确保只有在数据未被其他事务修改的前提下，才会执行更新操作，从而达到接口幂等的效果。</p><h3 id="实现幂等性方案示例"><a href="#实现幂等性方案示例" class="headerlink" title="实现幂等性方案示例"></a>实现幂等性方案示例</h3><p>从上述的几种解决幂等性问题的方案来看，使用token机制可以保证在不同请求动作下的幂等性。所以我们以此作为方案作为示例方案。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>我们使用<code>Redis</code>保存Token令牌，引入<code>SpringBoot</code>，<code>Redis</code>，<code>ULID</code>相关的依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.f4b6a3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ulid-creator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Redis</code>相关的配置</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0  </span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1  </span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379  </span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span> <span class="token attr-value"> </span><span class="token attr-name">spring.redis.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">8  </span><span class="token attr-name">spring.redis.pool.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">-1  </span><span class="token attr-name">spring.redis.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">8  </span><span class="token attr-name">spring.redis.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">0  </span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">60  </span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080  </span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/coderacademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="生成Token令牌"><a href="#生成Token令牌" class="headerlink" title="生成Token令牌"></a>生成Token令牌</h4><p>使用<code>ULID</code>生成随机字符串，然后将其保存在<code>Redis</code>当中。这里以idempotent_token+账户+请求操作类型+token作为key。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 存入 Redis 的 Token 键的前缀 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IDEMPOTENT_TOKEN_PREFIX <span class="token operator">=</span> <span class="token string">"idempotent_token:%s:$s:%s"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 生成token令牌 * * @param accountSecret 账户令牌 * @param operatorType 接口请求类型，可以是接口url或者其他可以区分接口服务类型的值 * @return token令牌 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>String accountSecret<span class="token punctuation">,</span> String operatorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建或获取ULID生成器实例</span>    <span class="token keyword">long</span> timestampInMillis <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>ZoneOffset<span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Ulid ulid <span class="token operator">=</span> UlidCreator<span class="token punctuation">.</span><span class="token function">getUlid</span><span class="token punctuation">(</span>timestampInMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    String token <span class="token operator">=</span> ulid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置存入 Redis 的 Key</span>    String key <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>IDEMPOTENT_TOKEN_PREFIX<span class="token punctuation">,</span> accountSecret<span class="token punctuation">,</span> operatorType<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存储 Token 到 Redis，且设置过期时间为5分钟</span>    stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> accountSecret<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回 Token</span>    <span class="token keyword">return</span> token<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="校验Token令牌"><a href="#校验Token令牌" class="headerlink" title="校验Token令牌"></a>校验Token令牌</h4><p>这里我们使用Redis执行<code>Lua</code>命令去查找以及删除key，Lua 表达式能保证命令执行的原子性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 验证 Token 正确性     *     * @param token token 字符串     * @param operatorType 接口请求类型，可以是接口url或者其他可以区分接口服务类型的值     * @return 验证结果     */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">validToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">,</span> String accountSecret<span class="token punctuation">,</span> String operatorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置 Lua 脚本，其中 KEYS[1] 是 key，KEYS[2] 是 value</span>    String script <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == KEYS[2] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>    RedisScript<span class="token operator">&lt;</span>Long<span class="token operator">></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 Key 前缀拼接 Key</span>    String key <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>IDEMPOTENT_TOKEN_PREFIX<span class="token punctuation">,</span> accountSecret<span class="token punctuation">,</span> operatorType<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行 Lua 脚本</span>    Long result <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> operatorType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据返回结果判断是否成功成功匹配并删除 Redis 键值对，若果结果不为空和0，则验证通过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> result <span class="token operator">!=</span> 0L<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"验证 token=%s,key=%s,value=%s 成功"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> key<span class="token punctuation">,</span> operatorType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"验证 token=%s,key=%s,value=%s 失败"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> key<span class="token punctuation">,</span> operatorType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="业务代码以及接口"><a href="#业务代码以及接口" class="headerlink" title="业务代码以及接口"></a>业务代码以及接口</h4><p>我们在实现模拟创建订单的服务，在创建订单之前，首先校验token令牌。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建订单接口 * * @param requestVO     创建订单参数 * @param accountSecret 账户令牌 * @param token         token令牌 * @return 生成的订单号 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">createOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">,</span> String accountSecret<span class="token punctuation">,</span> String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 根据 Token 和与用户相关的信息到 Redis 验证是否存在对应的信息</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">validToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> accountSecret<span class="token punctuation">,</span> <span class="token string">"createOrder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里需要自定义异常，统一处理异常，再统一响应返回</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"重复的请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据验证结果响应不同信息</span>    <span class="token keyword">return</span> <span class="token string">"Success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>校验如果不存在token，则说明请求时重复请求，直接抛出异常，由统一异常管理，直接返回客户端请求失败的错误信息。关于SpringBoot中统一异常处理，统一结果响应，请查看：</p><p>我们在定义获取Token令牌的接口，以及创建订单的接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderService orderService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取token接口     * @param secret 账户令牌     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"getToken"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getToken</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">)</span> String secret<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>secret<span class="token punctuation">,</span> <span class="token string">"createOrder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建订单接口     * @param requestVO 参数     * @param token token令牌     * @param secret 账户令牌     * @return 响应信息     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> OrderCreateResponseVO <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> OrderCreateRequestVO requestVO<span class="token punctuation">,</span>                                             <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span> String token<span class="token punctuation">,</span>                                             <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"secret"</span><span class="token punctuation">)</span> String secret<span class="token punctuation">)</span><span class="token punctuation">{</span>        OrderCreateResponseVO responseVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderCreateResponseVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        responseVO<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> responseVO<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderService</span><span class="token punctuation">(</span>IOrderService orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用<code>Apifox</code>模拟3个请求并发操作</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240307162451.png" alt="image.png"></p><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240307162434.png" alt="image.png"></p><p>控制台打印日志如下</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240307162406.png" alt="image.png"></p><p>可以看见只有1个请求成功了，并且控制台中打印只有一个token校验成功。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>幂等性是开发当中很常见也很重要的一个需求，尤其是订单，支付以及与金钱挂钩的服务，保证接口幂等性尤其重要。在实际开发中，我们需要针对不同的业务场景我们需要灵活的选择幂等性的实现方式：</p><ul><li>如果是web服务，客户端可以采取在页面上使用按钮置灰禁用，使用PRG模式，或者搭配后端的Token令牌进行解决。</li><li>在服务端，我们可以采取唯一标识符，乐观锁，<code>Token令牌</code>，状态机等校验方式。</li></ul><p>最后强调一下，实现幂等性需要先理解自身业务需求，根据业务逻辑来实现这样才合理，处理好其中的每一个结点细节，完善整体的业务流程设计，才能更好的保证系统的正常运行。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 架构之道 </tag>
            
            <tag> 接口幂等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring状态机（FSM），让订单状态流转如丝般顺滑</title>
      <link href="/article/springbootstatemachine.html"/>
      <url>/article/springbootstatemachine.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在复杂的应用程序设计中，尤其是那些涉及多个状态变迁和业务流程控制的场景，有限状态机（<code>Finite State Machine, FSM</code>）是一种强大而有效的建模工具。Spring框架为此提供了Spring状态机（<code>Spring State Machine</code>）这一组件，它允许开发者以一种声明式且结构清晰的方式来管理和控制对象的状态流转。</p><p>提起Spring状态机，可能有些小伙伴还比较陌生。当你听到状态机时，一定会联想到状态设计模式。确实，状态机是状态模式的一种实际运用，在工作流引擎、订单系统等领域有大量的应用。在介绍状态机之前，我们先来回顾一下状态模式，以便更好地理解Spring状态机的概念和应用。</p><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>状态模式是一种行为设计模式，用于管理对象的状态以及状态之间的转换。在状态模式中，对象在不同的状态下表现出不同的行为，而状态的转换是由外部条件触发的。状态模式将每个状态封装成一个独立的类，并将状态转换的逻辑分散在这些状态类中，从而使得状态的管理和转换变得简单和灵活。</p><p>状态模式通常由以下几个要素组成：</p><ol><li><p><strong>上下文(Context)</strong>：上下文是包含了状态的对象，它定义了当前的状态以及可以触发状态转换的接口。上下文对象在不同的状态下会调用相应状态对象的方法来执行具体的行为。</p></li><li><p><strong>抽象状态(State)</strong>：抽象状态是一个接口或抽象类，定义了状态对象的通用行为接口。具体的状态类需要实现这个接口，并根据不同的状态来实现具体的行为。</p></li><li><p><strong>具体状态(Concrete State)</strong>：具体状态是实现了抽象状态接口的具体类，它实现了在特定状态下对象的行为。每个具体状态类负责管理该状态下的行为和状态转换规则。</p></li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8FUML%E5%9B%BE.jpg" alt="状态模式结构图"></p><p>状态模式使得对象在不同状态下的行为更加清晰和可维护，同时也使得对象的状态转换逻辑更加灵活和可扩展。状态模式常见于需要对象根据外部条件改变行为的场景，例如订单状态（如待提交，待发货，已发货，已签收，已完结等状态）的管理、工作流引擎中的状态（例如提交，审核中，驳回，审核通过，审核失败等）管理。</p><p>我们以订单状态的流转为例：</p><ul><li>首先我们定义一个订单抽象状态的接口</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>      <span class="token keyword">void</span> <span class="token function">handlerOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在定义具体的订单状态，以及对应的订单状态的行为</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSubmitState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单已提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderOutboundState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单已出库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSignedState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单已签收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在定义一个状态的上下文，用于维护当前状态对象，以及提供状态流转的方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderContext</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> OrderState orderState<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderState</span><span class="token punctuation">(</span>OrderState orderState<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>orderState <span class="token operator">=</span> orderState<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          orderState<span class="token punctuation">.</span><span class="token function">handlerOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写具体业务，测试订单状态流转</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateTest</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          OrderSubmitState orderSubmitState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSubmitState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          OrderContext orderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setOrderState</span><span class="token punctuation">(</span>orderSubmitState<span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">handleOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          OrderOutboundState orderOutboundState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderOutboundState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setOrderState</span><span class="token punctuation">(</span>orderOutboundState<span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">handleOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          OrderSignedState orderSignedState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderSignedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setOrderState</span><span class="token punctuation">(</span>orderSignedState<span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">handleOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240306001709.png" alt="image.png"><br>使用状态模式中的状态类不仅能消除if-else逻辑校验，在一定程度上也增强了代码的可读性和可维护性。类似策略模式，但是状态机模式跟策略模式还有很大的区别的。</p><ol><li><p><strong>状态模式</strong>:</p><ul><li>关注对象在不同状态下的行为和状态之间的转换。</li><li>通过封装每个状态为单独的类来实现状态切换，使得每个状态对象都能处理自己的行为。</li><li>状态之间的转换通常是通过条件判断或外部事件触发的。</li></ul></li><li><p><strong>策略模式</strong>:</p><ul><li>关注对象在不同策略下的行为差异。</li><li>将不同的算法或策略封装成单独的类，使得它们可以互相替换，并且在运行时动态地选择不同的策略。</li><li>不涉及状态转换，而是更多地关注于执行特定行为时选择合适的策略。</li></ul></li></ol><p>虽然两种模式都涉及对象行为的管理，但它们的关注点和应用场景略有不同。</p><blockquote><p>关于消除if-else的方案请参考：<a href="https://www.coderacademy.online/article/7fd1e424.html">代码整洁之道（一）之优化if-else的8种方案</a></p></blockquote><h3 id="什么是状态机"><a href="#什么是状态机" class="headerlink" title="什么是状态机"></a>什么是状态机</h3><p>状态机，顾名思义，是一种数学模型，它通过定义一系列有限的状态以及状态之间的转换规则来模拟现实世界或抽象系统的动态行为。每个状态代表系统可能存在的条件或阶段，而状态间的转换则是由特定的输入（即事件）触发的。例如，在电商应用中，订单状态可能会经历创建、支付、打包、发货、完成等多个状态，每个状态之间的转变都由对应的业务动作触发。</p><p>在状态机中，有以下几个基本概念：</p><ol><li><p><strong>状态（State）</strong>：系统处于的特定状态，可以是任何抽象的状态，如有限状态机中的“开”、“关”状态，或是更具体的状态如“运行”、“暂停”、“停止”等。</p></li><li><p><strong>事件（Event）</strong>：导致状态转换发生的触发器或输入，例如用户的输入、外部事件等。事件触发状态之间的转换。</p></li><li><p><strong>转移（Transition）</strong>：描述状态之间的变化或转换，即从一个状态到另一个状态的过程。转移通常由特定的事件触发，触发特定的转移规则。</p></li><li><p><strong>动作（Action）</strong>：在状态转换发生时执行的动作或操作，可以是一些逻辑处理、计算、输出等。动作可以与状态转移相关联。</p></li><li><p><strong>初始状态（Initial State）</strong>：系统的初始状态，即系统启动时所处的状态。</p></li><li><p><strong>终止状态（Final State）</strong>：状态机执行完成后所达到的状态，表示整个状态机的结束。</p></li></ol><p>状态机可以分为有限状态机（<code>Finite State Machine，FSM</code>）和无限状态机（<code>Infinite State Machine</code>）两种。有限状态机是指状态的数量是有限的，而无限状态机则可以有无限多个状态。在系统设计中，有限状态机比较常见。</p><h3 id="Spring状态机原理"><a href="#Spring状态机原理" class="headerlink" title="Spring状态机原理"></a>Spring状态机原理</h3><p>Spring状态机建立在有限状态机（FSM）的概念之上，提供了一种简洁且灵活的方式来定义、管理和执行状态机。它将状态定义为Java对象，并通过配置来定义状态之间的转换规则。状态转换通常由外部事件触发，我们可以根据业务逻辑定义不同的事件类型，并与状态转换关联。Spring状态机还提供了状态监听器，用于在状态变化时执行特定的逻辑。同时，状态机的状态可以持久化到数据库或其他存储介质中，以便在系统重启或故障恢复时保持状态的一致性。</p><p>Spring状态机核心主要包括以下三个关键元素：</p><ol><li><p><strong>状态（State）</strong>：定义了系统可能处于的各个状态，如订单状态中的待支付、已支付等。</p></li><li><p><strong>转换（Transition）</strong>：描述了在何种条件下，当接收到特定事件时，系统可以从一个状态转移到另一个状态。例如，接收到“支付成功”事件时，订单状态从“待支付”转变为“已支付”。</p></li><li><p><strong>事件（Event）</strong>：触发状态转换的动作或者消息，它是引起状态机从当前状态迁移到新状态的原因。</p></li></ol><p>接下来，我们将上述状态模式中关于订单状态的示例转换为状态机实现。</p><h3 id="Spring状态机的使用"><a href="#Spring状态机的使用" class="headerlink" title="Spring状态机的使用"></a>Spring状态机的使用</h3><p>对于状态机，Spring中封装了一个组件<code>spring-statemachine</code>，直接引入即可。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.statemachine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-statemachine-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义状态机的状态以及事件类型"><a href="#定义状态机的状态以及事件类型" class="headerlink" title="定义状态机的状态以及事件类型"></a>定义状态机的状态以及事件类型</h4><p>在状态机（<code>Finite State Machine, FSM</code>）的设计中，“定义状态”和“定义转换”是构建状态机模型的基础元素。</p><p><strong>定义状态（States）</strong>： 状态是状态机的核心组成单元，代表了系统或对象在某一时刻可能存在的条件或模式。在状态机中，每一个状态都是系统可能处于的一种明确的条件或阶段。例如，在一个简单的咖啡机状态机中，可能有的状态包括“待机”、“磨豆”、“冲泡”和“完成”。每个状态都是独一无二的，且在任何给定时间，系统只能处于其中一个状态。</p><p><strong>定义转换（Transitions）</strong>： 转换则是指状态之间的转变过程，它是状态机模型动态性的体现。当一个外部事件（如用户按下按钮、接收到信号、满足特定条件等）触发时，状态机会从当前状态转移到另一个状态。在定义转换时，需要指出触发转换的事件（<code>Event</code>）以及事件发生时系统的响应，即从哪个状态（<code>Source State</code>）转到哪个状态（<code>Target State</code>）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***订单状态*/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> OrderStatusEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**待提交*/</span>    DRAFT<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**待出库*/</span>    SUBMITTED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**已出库*/</span>    DELIVERING<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**已签收*/</span>    SIGNED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**已完成*/</span>    FINISHED<span class="token punctuation">,</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 订单状态流转事件*/</span><span class="token keyword">public</span> <span class="token keyword">enum</span> OrderStatusOperateEventEnum <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**确认,已提交*/</span>    CONFIRMED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**发货*/</span>    DELIVERY<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**签收*/</span>    RECEIVED<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**完成*/</span>    CONFIRMED_FINISH<span class="token punctuation">,</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义状态机以及状态流转规则"><a href="#定义状态机以及状态流转规则" class="headerlink" title="定义状态机以及状态流转规则"></a>定义状态机以及状态流转规则</h4><p>状态机配置类是在使用<code>Spring State Machine</code>或其他状态机框架时的一个重要步骤，这个类主要用于定义状态机的核心结构，包括状态（<code>states</code>）、事件（<code>events</code>）、状态之间的转换规则（<code>transitions</code>），以及可能的状态迁移动作和决策逻辑。</p><p>在<code>Spring State Machine</code>中，创建状态机配置类通常是通过继承<code>StateMachineConfigurerAdapter</code>类来实现的。这个适配器类提供了几个模板方法，允许开发者重写它们来配置状态机的各种组成部分：</p><ol><li><p><strong>配置状态</strong>（<code>configureStates(StateMachineStateConfigurer)</code>）: 在这个方法中，开发者定义状态机中所有的状态，包括初始状态（<code>initial state</code>）和结束状态（<code>final/terminal states</code>）。例如，定义状态A、B、C，并指定状态A作为初始状态。</p></li><li><p><strong>配置转换</strong>（<code>configureTransitions(StateMachineTransitionConfigurer)</code>）: 在这里，开发者描述状态之间的转换规则，也就是当某个事件（<code>event</code>）发生时，状态机应如何从一个状态转移到另一个状态。例如，当事件X发生时，状态机从状态A转移到状态B。</p></li><li><p><strong>配置初始状态</strong>（<code>configureInitialState(ConfigurableStateMachineInitializer)</code>）: 如果需要显式指定状态机启动时的初始状态，可以在该方法中设置。</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableStateMachine</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"orderStateMachine"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStatusMachineConfig</span> <span class="token keyword">extends</span> <span class="token class-name">StateMachineConfigurerAdapter</span><span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 设置状态机的状态     * StateMachineStateConfigurer 即 状态机状态配置     * @param states 状态机状态     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>StateMachineStateConfigurer<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">></span> states<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        states<span class="token punctuation">.</span><span class="token function">withStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>DRAFT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>FINISHED<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">states</span><span class="token punctuation">(</span>EnumSet<span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置状态机与订单状态操作事件绑定     * StateMachineTransitionConfigurer     * @param transitions     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>StateMachineTransitionConfigurer<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">></span> transitions<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        transitions<span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>DRAFT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>SUBMITTED<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>CONFIRMED<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>SUBMITTED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>DELIVERING<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>DELIVERY<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>DELIVERING<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>SIGNED<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>RECEIVED<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>SIGNED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>FINISHED<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>CONFIRMED_FINISH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置状态机持久化"><a href="#配置状态机持久化" class="headerlink" title="配置状态机持久化"></a>配置状态机持久化</h4><p>状态机持久化是指将状态机在某一时刻的状态信息存储到数据库、缓存系统等中，使得即使在系统重启、网络故障或进程终止等情况下，状态机仍能从先前保存的状态继续执行，而不是从初始状态重新开始。</p><p>在业务场景中，例如订单处理、工作流引擎、游戏进度跟踪等，状态机通常用于表示某个实体在其生命周期内的状态变迁。如果没有持久化机制，一旦发生意外情况导致系统宕机或重启，未完成的状态变迁将会丢失，这对于业务连续性和一致性是非常不利的。</p><p>状态机持久化通常涉及以下几个方面：</p><ol><li><strong>状态记录</strong>：记录当前状态机实例处于哪个状态。</li><li><strong>上下文数据</strong>：除了状态外，可能还需要持久化与状态关联的上下文数据，例如触发状态变迁的事件参数、额外的状态属性等。</li><li><strong>历史轨迹</strong>：某些复杂场景下可能需要记录状态机的历史变迁轨迹，以便于审计、回溯分析或错误恢复。</li><li><strong>并发控制</strong>：在多线程或多节点环境下，状态机的持久化还要考虑并发访问和同步的问题。</li></ol><p><code>Spring Statemachine</code> 提供了与<code>Redis</code>，<code>MongoDB</code>等数据存储结合的持久化方案，可以将状态机的状态信息序列化后存储到Redis中。当状态机需要恢复时，可以从存储中读取状态信息并重新构造状态机实例，使其能够从上次中断的地方继续执行流程。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPersist</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 持久化配置     * 在实际使用中，可以配合数据库或者Redis等进行持久化操作     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DefaultStateMachinePersister<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token punctuation">,</span> OrderDO<span class="token operator">></span> <span class="token function">stateMachinePersister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>OrderDO<span class="token punctuation">,</span> StateMachineContext<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultStateMachinePersister</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StateMachinePersist</span><span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token punctuation">,</span> OrderDO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>StateMachineContext<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">></span> context<span class="token punctuation">,</span> OrderDO order<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//持久化操作</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> StateMachineContext<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">></span> <span class="token function">read</span><span class="token punctuation">(</span>OrderDO order<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//从库中或者redis中读取order的状态信息</span>                <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义状态机监听器"><a href="#定义状态机监听器" class="headerlink" title="定义状态机监听器"></a>定义状态机监听器</h4><p>状态机监听器（<code>State Machine Listener</code>）是一种组件，它可以监听并响应状态机在运行过程中的各种事件，例如状态变迁、进入或退出状态、转换被拒绝等。</p><p>在<code>Spring Statemachine</code>中，监听器可以通过实现<code>StateMachineListener</code>接口来定义。该接口提供了一系列回调方法，如<code>transitionTriggered</code>、<code>stateEntered</code>、<code>stateExited</code>等，当状态机触发转换、进入新状态或离开旧状态时，这些方法会被调用。同时，我们也可以通过注解实现监听器。注解方式可以在类的方法上直接声明该方法应该在何种状态下被调用，简化监听器的编写和配置。例如<code>@OnTransition</code>，<code>@OnTransitionEnd</code>，<code>@OnTransitionStart</code>等</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@WithStateMachine</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"orderStateMachine"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStatusListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"DRAFT"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"SUBMITTED"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">payTransition</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>OrderStatusOperateEventEnum<span class="token operator">></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> <span class="token punctuation">(</span>OrderDO<span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setOrderStatusEnum</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>SUBMITTED<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"出库订单[%s]确认，状态机信息：%s"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"SUBMITTED"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"DELIVERING"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deliverTransition</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>OrderStatusOperateEventEnum<span class="token operator">></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> <span class="token punctuation">(</span>OrderDO<span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setOrderStatusEnum</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>DELIVERING<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"出库订单[%s]发货出库，状态机信息：%s"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"DELIVERING"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"SIGNED"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">receiveTransition</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>OrderStatusOperateEventEnum<span class="token operator">></span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> <span class="token punctuation">(</span>OrderDO<span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setOrderStatusEnum</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>SIGNED<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"出库订单[%s]签收，状态机信息：%s"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">"SIGNED"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"FINISHED"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">finishTransition</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>OrderStatusOperateEventEnum<span class="token operator">></span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> <span class="token punctuation">(</span>OrderDO<span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setOrderStatusEnum</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>FINISHED<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"出库订单[%s]完成，状态机信息：%s"</span><span class="token punctuation">,</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而监听器需要监听到状态流转的事件才会发挥他的作用，才能监听到某个状态事件之后，完成状态的变更。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateEventUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> StateMachine<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">></span> orderStateMachine<span class="token punctuation">;</span>    <span class="token keyword">private</span> StateMachinePersister<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token punctuation">,</span> OrderDO<span class="token operator">></span> stateMachinePersister<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送状态转换事件     *  synchronized修饰保证这个方法是线程安全的     * @param message     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>OrderStatusOperateEventEnum<span class="token operator">></span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//启动状态机</span>            orderStateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            OrderDO order <span class="token operator">=</span> <span class="token punctuation">(</span>OrderDO<span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//尝试恢复状态机状态</span>            stateMachinePersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> orderStateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//持久化状态机状态</span>            stateMachinePersister<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>orderStateMachine<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                OrderDO order <span class="token operator">=</span> <span class="token punctuation">(</span>OrderDO<span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span><span class="token function">getOrderStatusEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> OrderStatusEnum<span class="token punctuation">.</span>FINISHED<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    orderStateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderStateMachine</span><span class="token punctuation">(</span>StateMachine<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token operator">></span> orderStateMachine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderStateMachine <span class="token operator">=</span> orderStateMachine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStateMachinePersister</span><span class="token punctuation">(</span>StateMachinePersister<span class="token operator">&lt;</span>OrderStatusEnum<span class="token punctuation">,</span> OrderStatusOperateEventEnum<span class="token punctuation">,</span> OrderDO<span class="token operator">></span> stateMachinePersister<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stateMachinePersister <span class="token operator">=</span> stateMachinePersister<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，我们的状态机就定义好了，下面我们就可以在业务代码中使用状态机完成的订单状态的流转。</p><h4 id="业务代码使用"><a href="#业务代码使用" class="headerlink" title="业务代码使用"></a>业务代码使用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> StateEventUtil stateEventUtil<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger ID_COUNTER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> OrderDO<span class="token operator">></span> ORDER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建新订单     *     * @param orderDO     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Long <span class="token function">createOrder</span><span class="token punctuation">(</span>OrderDO orderDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> orderId <span class="token operator">=</span> ID_COUNTER<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDO<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDO<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">"OC20240306"</span> <span class="token operator">+</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDO<span class="token punctuation">.</span><span class="token function">setOrderStatusEnum</span><span class="token punctuation">(</span>OrderStatusEnum<span class="token punctuation">.</span>DRAFT<span class="token punctuation">)</span><span class="token punctuation">;</span>        ORDER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> orderDO<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"订单[%s]创建成功:"</span><span class="token punctuation">,</span> orderDO<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 确认订单     *     * @param orderId     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirmOrder</span><span class="token punctuation">(</span>Long orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> ORDER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"确认订单，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Message message <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>CONFIRMED<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateEventUtil<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 确认订单失败, 状态异常，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 订单发货     *     * @param orderId     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deliver</span><span class="token punctuation">(</span>Long orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> ORDER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单出库，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Message message <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>DELIVERY<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateEventUtil<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 订单出库失败, 状态异常，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 签收订单     *     * @param orderId     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">signOrder</span><span class="token punctuation">(</span>Long orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> ORDER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单签收，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Message message <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>RECEIVED<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateEventUtil<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 订单签收失败, 状态异常，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 确认完成     *     * @param orderId     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finishOrder</span><span class="token punctuation">(</span>Long orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        OrderDO order <span class="token operator">=</span> ORDER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单完成，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Message message <span class="token operator">=</span> MessageBuilder<span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>OrderStatusOperateEventEnum<span class="token punctuation">.</span>CONFIRMED_FINISH<span class="token punctuation">)</span><span class="token punctuation">.</span>                <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stateEventUtil<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 订单完成失败, 状态异常，订单号："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取所有订单信息     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>OrderDO<span class="token operator">></span> <span class="token function">listOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>ORDER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStateEventUtil</span><span class="token punctuation">(</span>StateEventUtil stateEventUtil<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stateEventUtil <span class="token operator">=</span> stateEventUtil<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在定义一个接口，模拟订单的状态流转：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IOrderService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"testOrderStatusMachine"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOrderStatusMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Long orderId1 <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long orderId2 <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderService<span class="token punctuation">.</span><span class="token function">confirmOrder</span><span class="token punctuation">(</span>orderId1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"客户线程"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                orderService<span class="token punctuation">.</span><span class="token function">deliver</span><span class="token punctuation">(</span>orderId1<span class="token punctuation">)</span><span class="token punctuation">;</span>                orderService<span class="token punctuation">.</span><span class="token function">signOrder</span><span class="token punctuation">(</span>orderId1<span class="token punctuation">)</span><span class="token punctuation">;</span>                orderService<span class="token punctuation">.</span><span class="token function">finishOrder</span><span class="token punctuation">(</span>orderId1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderService<span class="token punctuation">.</span><span class="token function">confirmOrder</span><span class="token punctuation">(</span>orderId2<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderService<span class="token punctuation">.</span><span class="token function">deliver</span><span class="token punctuation">(</span>orderId2<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderService<span class="token punctuation">.</span><span class="token function">signOrder</span><span class="token punctuation">(</span>orderId2<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderService<span class="token punctuation">.</span><span class="token function">finishOrder</span><span class="token punctuation">(</span>orderId2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"全部订单状态："</span> <span class="token operator">+</span> orderService<span class="token punctuation">.</span><span class="token function">listOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderService</span><span class="token punctuation">(</span>IOrderService orderService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderService <span class="token operator">=</span> orderService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们调用接口：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240306190338.png" alt="image.png"></p><p>我们在日志中可以看到订单状态在状态机的控制下，流转的很丝滑。。。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p><strong>一致性保证</strong>：确保状态机的配置正确反映了业务逻辑，并保持其在并发环境下的状态一致性。</p></li><li><p><strong>异常处理</strong>：在状态转换过程中可能出现异常情况，需要适当地捕获和处理这些异常，防止状态机进入无效状态。</p></li><li><p><strong>监控与审计</strong>：在实际应用中，为了便于调试和追溯，可以考虑集成日志记录或事件监听器来记录状态机的每一次状态变迁。</p></li><li><p><strong>扩展性与维护性</strong>：随着业务的发展，状态机的设计应当具有足够的灵活性，以便于新增状态或调整转换规则。</p></li></ul><h3 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h3><p>除了直接使用如Spring状态机这样的专门状态管理工具外，还可以使用其他的哪些方法实现状态机的功能呢？比如：</p><ol><li><p><strong>消息队列方式</strong><br>状态的变更通过发布和消费消息来驱动。每当发生状态变更所需的事件时，生产者将事件作为一个消息发布到特定的消息队列（Topic），而消费者则监听这些消息，根据消息内容和业务规则对订单状态进行更新。这种方式有利于解耦各个服务，实现异步处理，同时增强系统的伸缩性和容错能力。</p></li><li><p><strong>定时任务驱动</strong><br>使用定时任务定期检查系统中的订单状态，根据预设的业务规则判断是否满足状态变迁条件。比如，每隔一段时间执行一次Job，查询数据库中处于特定状态的订单，并决定是否进行状态更新。这种方法适用于具有一定时效性的状态变迁，但实时性相对较低，对于瞬时响应要求高的场景不太适用。</p></li></ol><blockquote><p>有关SpringBoot下几种定时任务的实现方式请参考：<a href="https://www.coderacademy.online/article/springbootscheduled.html">玩转SpringBoot：SpringBoot的几种定时任务实现方式</a></p></blockquote><ol start="3"><li><strong>规则引擎方式</strong><br>利用规则引擎（如<code>Drools</code>、<code>LiteFlow</code>等）实现状态机，业务团队可以直接在规则引擎中定义状态及状态之间的转换规则，当新的事实数据（如订单信息）输入到规则引擎时，引擎会自动匹配并执行相应的规则，触发状态改变。这种方式的优点在于业务规则高度集中，易于管理和修改，同时也具备较高的灵活性，能够快速应对业务规则的变化。</li></ol><blockquote><p>SpringBoot下使用LiteFlow规则引擎请参考：<a href="https://www.coderacademy.online/article/4749dca98aed.html">轻松应对复杂业务逻辑：LiteFlow-编排式规则引擎框架的优势</a></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring状态机提供了一种强大的工具，使得在Java应用中实现复杂的业务流程变得更为简洁和规范。不仅可以提升代码的可读性和可维护性，还能有效降低不同模块之间的耦合度，提高系统的整体稳定性与健壮性。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 架构之道 </tag>
            
            <tag> Spring状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里二面：如何定位&amp;避免死锁？连着两个面试问到了！</title>
      <link href="/article/javadeadlock.html"/>
      <url>/article/javadeadlock.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在面试过程中，死锁是必问的知识点，当然死锁也是我们日常开发中也会遇到的一个问题，同时一些业务场景例如库存扣减，银行转账等都需要去考虑如何避免死锁，一旦线上发生了死锁，那可能年终不保。。。。。下面我们就来聊一聊死锁如何定位，以及如何避免。</p><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>死锁（Deadlock）是指在操作系统里，两个或多个并发线程在执行过程中，因争夺资源而造成的一种互相等待的现象，且无外力干预的情况下，这些线程都无法进一步执行下去。每个线程至少持有一个资源并等待其他线程所持有的资源才能继续执行，从而形成了一个循环等待链，导致所有线程都被阻塞，无法顺利完成。</p><p>假设有两个仓库A和B，它们之间在进行商品调拨。线程T1负责将商品从仓库A调拨到仓库B，而线程T2负责将商品从仓库B调拨到仓库A。每个线程在执行调拨操作时，需要先获取调出仓库和调入仓库的锁，以保证调拨操作的原子性。现在，假设线程T1已经获取了仓库A的锁并且正在等待获取仓库B的锁，而线程T2已经获取了仓库B的锁并且正在等待获取仓库A的锁。这时，线程T1持有仓库A的锁并且等待仓库B的锁，线程T2持有仓库B的锁并且等待仓库A的锁。由于彼此都在等待对方持有的锁，因此两个线程都无法继续执行，导致了死锁的发生。</p><h3 id="死锁产生的条件"><a href="#死锁产生的条件" class="headerlink" title="死锁产生的条件"></a>死锁产生的条件</h3><p>死锁的产生必须满足以下四个条件。当这四个条件同时满足时，就可能发生死锁。</p><h4 id="互斥条件"><a href="#互斥条件" class="headerlink" title="互斥条件"></a>互斥条件</h4><p>资源不能同时被多个线程占用。如果一个资源被一个线程占用，其他线程必须等待释放。也就是所谓的互斥锁。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302161140.png" alt="互斥条件.png"></p><p>如上图线程T1已经持有了资源，那么该资源就不能再同时被线程T2持有，如果线程T2想要获取资源，就要一直等待（即线程T2阻塞），一直到线程T1释放资源。</p><h4 id="占有并且等待条件"><a href="#占有并且等待条件" class="headerlink" title="占有并且等待条件"></a>占有并且等待条件</h4><p>当前线程已经占有至少一个资源，此时还想请求其他线程占有的其他资源时就会造成等待，在这个等待过程中对已获得的资源也不会释放。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302162150.png" alt="占有并且等待条件.png"></p><p>如上图当线程T1已经持有了资源1，又想申请获取资源2，而资源2已经被线程T3持有了，所以线程T1就会处于等待状态，但是<strong>线程T1在等待资源2的同时并不会释放自己已经持有的资源1</strong>。</p><h4 id="不可抢占条件"><a href="#不可抢占条件" class="headerlink" title="不可抢占条件"></a>不可抢占条件</h4><p>当前已经被持有的资源只能由持有它的线程释放，其他线程不可以强行占有该资源。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302163122.png" alt="不可抢占条件.png"></p><p>如上图线程T1已经持有了资源 ，<strong>在自己使用完之前不能被其他线程获取</strong>，线程T2如果也想使用此资源，则只能在线程T1使用完并释放后才能获取。</p><h4 id="循环等待条件"><a href="#循环等待条件" class="headerlink" title="循环等待条件"></a>循环等待条件</h4><p>在发生死锁时，必然存在一个线程-资源的环形链，链中的每个线程正等待下一个线程所占用资源的释放。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302163949.png" alt="image.png"></p><p>如上图线程T1等待线程T2占有的资源，而线程T2等待线程T1占有的资源，两个线程互相等待，这样就形成了循环等待。</p><h3 id="模拟死锁"><a href="#模拟死锁" class="headerlink" title="模拟死锁"></a>模拟死锁</h3><p>以文章解释死锁概念的例子为例，我们使用代码模拟死锁。</p><p>我们先模拟调拨商品操作库存的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuStock</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String sku<span class="token punctuation">;</span>      <span class="token keyword">private</span> String warehouse<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer qty<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">SkuStock</span><span class="token punctuation">(</span>String sku<span class="token punctuation">,</span> String warehouse<span class="token punctuation">,</span> Integer qty<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>sku <span class="token operator">=</span> sku<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>warehouse <span class="token operator">=</span> warehouse<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">=</span> qty<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**    * 调拨库存，操作库存    */</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>                <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>                targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在模拟线程T1进行仓库A向仓库B调拨商品，线程t2进行仓库B向仓库A调拨商品。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      SkuStock skuStockA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuStock</span><span class="token punctuation">(</span><span class="token string">"SKU"</span><span class="token punctuation">,</span> <span class="token string">"WA"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      SkuStock skuStockB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuStock</span><span class="token punctuation">(</span><span class="token string">"SKU"</span><span class="token punctuation">,</span> <span class="token string">"WB"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          skuStockA<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>skuStockB<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          skuStockB<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>skuStockA<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们运行代码，就会发现代码只打印了开始操作库存，没有结束操作的日志，此时就会发生了死锁。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302164735.png" alt="image.png"></p><h3 id="死锁排查"><a href="#死锁排查" class="headerlink" title="死锁排查"></a>死锁排查</h3><p>当我们的程序发生死锁时，我们需要排查，找出问题所在，关于死锁的排查工具，我们可以使用JDK自带的<code>jstack</code>工具，也可以使用一些可视化工具例如：<code>VisualVM</code>，<code>JConsole</code>等。</p><h4 id="jstack工具"><a href="#jstack工具" class="headerlink" title="jstack工具"></a>jstack工具</h4><p><code>jstack</code>是JDK自带的一款强大的故障诊断工具，主要用于获取Java应用程序的线程堆栈信息，这对于分析Java程序的运行状态、排查性能瓶颈、定位死锁、冻结线程以及其他多线程相关的问题具有非常重要的作用。<br>对于以上死锁程序，我们先使用<code>jps</code>工具列出当前系统中所有的Java进程的进程ID（PID）。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302172543.png" alt="image.png"></p><p>然后针对目标Java进程，使用<code>jstack</code>命令生成线程堆栈快照，它将输出Java进程中所有线程的详细堆栈信息。</p><pre class="line-numbers language-cmd"><code class="language-cmd">jstack 24749<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们可以看到输出的日志中，指明了应用程序发生死锁的原因。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302173007.png" alt="image.png"></p><p>可以看到对于线程T1等待着线程T2锁住的<code>0x000000070fd53c38</code>这个资源，同时锁住了<code>0x000000070fd53bc0</code>这个资源，而对于线程T2，它等待着线程T1锁住的<code>0x000000070fd53bc0</code>这个资源，同时锁住了<code>0x000000070fd53c38</code>这个资源，这样就发生了死锁。</p><p><code>jstack</code>输出中会包含有关线程等待锁的信息。如果存在死锁，你会看到线程在等待一个它自己或其他线程已经持有的锁，形成一个等待链条。死锁信息通常会明确指出哪些线程参与了死锁。</p><h4 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h4><p><code>VisualVM</code>是一款强大的Java性能分析和故障排除工具，它是Oracle开发并随JDK一起提供的一个综合性桌面应用程序。<code>VisualVM</code>整合了多个独立的JDK命令行工具的功能，如<code>jstat</code>、<code>jmap</code>、<code>jstack</code>、<code>jinfo</code>等，并且提供了丰富的图形用户界面，使开发者能够更容易地监控和分析Java应用程序的性能、内存消耗、线程行为、垃圾收集等各方面信息。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302173824.png" alt="image.png"></p><p>他会提示你发生了死锁了，进入<code>Thread Dump</code>中查看具体的信息。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302173917.png" alt="image.png"></p><p>效果等同于使用<code>jstack</code>命令输出的日志信息。</p><h3 id="如何避免死锁问题的发生"><a href="#如何避免死锁问题的发生" class="headerlink" title="如何避免死锁问题的发生"></a>如何避免死锁问题的发生</h3><p>前面我们提到，产生死锁的四个必要条件是：互斥条件、占有并等待条件、不可抢占条件、循环等待条件。那么避免死锁问题就只需要破环其中一个条件就可以。</p><h4 id="破坏互斥条件"><a href="#破坏互斥条件" class="headerlink" title="破坏互斥条件"></a>破坏互斥条件</h4><p>为避免死锁的发生，我们应该避免使用互斥锁，我们可以将其中的操作改为原子操作。<br>比如上述例子中，我们将发生死锁的库存操作的代码:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>    targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们不再使用<code>synchronized</code>关键字，而是通过<code>AtomicInteger</code>的<code>compareAndSet</code>方法（CAS操作）来实现并发下的库存扣减操作。这样做的好处是可以避免死锁，每次操作都是原子性的，不会出现持有锁的线程等待另一个线程释放锁的情况。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> AtomicInteger qtyAtomic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo1</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>        <span class="token keyword">this</span><span class="token punctuation">.</span>qtyAtomic<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>        targetSku<span class="token punctuation">.</span>qtyAtomic<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>transferTo1</code>方法重新执行程序，正常实现库存操作。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302175925.png" alt="image.png"></p><h4 id="破坏占有且等待条件"><a href="#破坏占有且等待条件" class="headerlink" title="破坏占有且等待条件"></a>破坏占有且等待条件</h4><p>对于占有且等待条件，线程持有资源我们是无法破坏的，既然无法破坏占有，那我们就破坏等待，我们不等待资源了。破坏占有且等待条件，可以采取的方法之一就是一次性获取所有需要的资源，而不是持有部分资源后再等待其他资源。在Java中，确实没有一种直接的方式允许一个线程一次性获取多个资源。但是，你可以使用一种类似资源管理器的方式来模拟一次性获取多个资源的情况。例如，你可以创建一个资源管理器对象，该对象负责管理所有需要的资源，并在需要时为线程提供这些资源。其他线程可以向资源管理器请求资源，如果资源可用，则立即返回，如果资源不可用，则进入等待状态。</p><p>针对上述示例，我们定义一个库存资源管理器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkuAllocator</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> SkuAllocator skuAllocator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token function">SkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> SkuAllocator <span class="token function">getSkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> skuAllocator<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       *、一次性获取多个资源       * @param objs 资源       * @return 是否申请资源成功       */</span>      <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">apply</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>objs<span class="token punctuation">)</span><span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>Object<span class="token operator">></span> containsList <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>containsList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 释放资源       * @param objs 资源       */</span>      <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>objs<span class="token punctuation">)</span><span class="token punctuation">{</span>          Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个资源管理器中，我们提供了两个方法<code>apply</code>以及<code>free</code>，其中<code>apply</code>用于将所有的资源放获取到，而<code>free</code>用于释放所有的资源。</p><p>然后我们改造操作库存时，线程执行操作库存，需要调用<code>apply</code>将所有的资源都拿到，然后执行后面的库存扣减，而其他线程在执行<code>apply</code>时，因为已经有现成获取到了资源，即资源管理器中<code>list</code>已存在资源，所以会返回<code>false</code>，这样其他的线程会一直等待下去，知道当前线程释放资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> SkuAllocator skuAllocator <span class="token operator">=</span> SkuAllocator<span class="token punctuation">.</span><span class="token function">getSkuAllocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo2</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 一次性申请库存增加以及扣减资源，如果线程可以拿到资源，即管理器中存在资源，  </span>    <span class="token comment" spellcheck="true">// while条件不成立就往下继续执行扣减库存，如果没有拿到资源，则while中是true，则while就一直自循环  </span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>skuAllocator<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> targetSku<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span><span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>                <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>                targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 用完，则释放资源，让其他线程使用  </span>        skuAllocator<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> targetSku<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"释放资源..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用该方法，也会让库存扣减成功。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302201357.png" alt="image.png"></p><h4 id="破坏不可抢占条件"><a href="#破坏不可抢占条件" class="headerlink" title="破坏不可抢占条件"></a>破坏不可抢占条件</h4><p>对于不可抢占条件，我们无法抢占或者释放其他线程持有的资源，但是我们可以给线程设置资源持有的超时时间，如果超过这个时间还没有释放资源，则自动释放资源。这样其他的线程就有就会获取资源了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo3</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"当前线程 %s 获得对象锁 %s"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>targetSku<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">try</span> <span class="token punctuation">{</span>                          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"当前线程 %s 获得对象锁 %s"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetSku<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>                        targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>                          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">break</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                          targetSku<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>       <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302205412.png" alt="image.png"></p><h4 id="破坏循环等待条件"><a href="#破坏循环等待条件" class="headerlink" title="破坏循环等待条件"></a>破坏循环等待条件</h4><p>对于循环等待条件，他因为交叉获取资源，导致形成了一个环形等待。破坏这个条件，我们可以采取顺序获取资源。确保所有的线程都按照相同的顺序获取资源。这样如果线程T1获取资源1，同时线程T2也来获取资源1时，会等待，知道线程T1释放之后再去获取资源1，同样然后获取资源2。</p><p>针对上述示例，我们对库存增加id或者库存操作创建时间，这样我们使用这个ID，对库存资源进行排序，然后按照这个顺序去占用资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferTo4</span><span class="token punctuation">(</span>SkuStock targetSku<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>      SkuStock firstSku <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">&lt;</span> targetSku<span class="token punctuation">.</span>id <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> targetSku<span class="token punctuation">;</span>      SkuStock secondSku <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token operator">!=</span> firstSku <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> targetSku<span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>firstSku<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始操作库存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>              e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>secondSku<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 扣减调出仓库的库存  </span>            <span class="token keyword">this</span><span class="token punctuation">.</span>qty <span class="token operator">-=</span> quantity<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 增加目标仓库的库存  </span>            targetSku<span class="token punctuation">.</span>qty <span class="token operator">+=</span> quantity<span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 操作库存结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240302210756.png" alt="image.png"></p><p>在上述4种破坏死锁条件中，我们可以观察到，在为避免死锁时，除了第一种方案——使用原子操作代替互斥锁外，其余三种方案都会导致并发操作变为串行执行，在一定程度上会牺牲性能。因此，在某些情况下，我们不应过分追求破坏死锁的四个必要条件，因为即使这些条件被满足，死锁仍然有一定的几率发生。我们应该关注的是如何有效地避免死锁的发生，而不是完全消除死锁的可能性。因此，设计时应该考虑采取合适的措施来降低死锁的概率，并在发生死锁时能够及时恢复系统的正常运行状态。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>死锁问题的产生是由两个或者以上线程并行执行的时候，争夺资源而互相等待造成的。他必须同时满足互斥条件，占用且等待条件，不可抢占条件，循环等待条件这四个条件，才可能发生。在日常系统开发中，我们要避免死锁。避免死锁的方式通常有：</p><ol><li><p><strong>按顺序获取资源：</strong> 给资源编号，所有线程按照编号递增的顺序请求资源，释放资源时按照相反的顺序释放。这样可以避免循环等待条件的发生。</p></li><li><p><strong>加锁顺序统一：</strong> 确定所有线程加锁的顺序，要求所有线程都按照相同的顺序获取锁，这样可以避免占有且等待条件的发生。</p></li><li><p><strong>超时放弃：</strong> 当尝试获取资源失败时，设置超时时间，超过一定时间后放弃获取资源，并释放已占有的资源，以避免持续等待而导致的死锁。</p></li><li><p><strong>死锁检测和恢复：</strong> 定期检测系统中的死锁情况，一旦检测到死锁，采取相应的措施进行恢复，例如中断某些线程、回滚事务等。</p></li><li><p><strong>资源分配策略：</strong> 使用资源分配策略，确保资源的合理分配和使用，避免资源过度竞争和浪费，从而降低死锁的发生概率。</p></li><li><p><strong>避免嵌套锁：</strong> 尽量避免在持有一个锁的情况下去请求另一个锁，以减少死锁的可能性。</p></li><li><p><strong>使用并发库和工具：</strong> Java中可以使用<code>java.util.concurrent</code>包中的高级同步工具，如<code>Semaphore</code>、<code>ReentrantLock</code>（支持尝试获取锁及超时机制）、<code>StampedLock</code>（支持乐观读写）等，它们提供了比<code>synchronized</code>关键字更灵活的控制方式，有助于预防死锁。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 死锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里一面：Java中如何停止线程？</title>
      <link href="/article/javastopthread.html"/>
      <url>/article/javastopthread.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在Java多线程编程中，正确且安全地停止线程是一项关键技能。简单粗暴地“杀死”线程不仅可能导致数据不一致性，还可能引发各种难以预测的错误。本文将探讨几种在Java中优雅地停止线程的方法，以确保程序的健壮性和可靠性。</p><h3 id="使用标志位（共享变量）停止线程"><a href="#使用标志位（共享变量）停止线程" class="headerlink" title="使用标志位（共享变量）停止线程"></a>使用标志位（共享变量）停止线程</h3><p>一种常见的做法是使用一个boolean类型的标志位来控制线程的执行。线程在执行任务的过程中不断检查标志位的状态，当标志位被设置为true时，线程停止执行任务，从而退出线程。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StoppableThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> isStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>isStopped<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 线程执行任务的代码  </span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 清理资源并在检查到退出标志时退出  </span>    <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stopThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在需要时设置标识=false，停止线程   </span>isStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式简单易用，它可以控制线程的停止时机，灵活性较高，适用于简单的线程任务。但是如果任务执行时间过长或者任务中有阻塞操作，可能无法及时响应停止请求。并且这种方式的任务中需要周期性地检查标志位状态，可能会影响性能。</p><h3 id="使用Thread-stop-方法（已过时）"><a href="#使用Thread-stop-方法（已过时）" class="headerlink" title="使用Thread.stop()方法（已过时）"></a>使用Thread.stop()方法（已过时）</h3><p>虽然Thread类提供了stop()方法用于停止线程，但是这个方法已经被标记为过时(deprecated)，不推荐使用。因为它可能会导致线程不安全的终止，引发一系列问题，如不释放锁、资源泄露等。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240301010837.png" alt="image.png"></p><blockquote><p>stop()方法确实可以停止线程的。</p></blockquote><h3 id="使用interrupt-方法"><a href="#使用interrupt-方法" class="headerlink" title="使用interrupt()方法"></a>使用interrupt()方法</h3><p>Java提供了一种基于中断模型的方式来请求线程停止。中断并不是立即停止线程的运行，而是设置一个中断标志，线程需要自行检查并响应这个中断信号。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 默认情况下，interrupted标记位为false。该方法用于检查当前线程的中断状态，返回true表示线程已被中断，返回false表示线程未被中断  </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始状态下的Interrupted标记位："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 执行Interrupted。该方法用于中断当前线程，它会设置当前线程的中断标记位为true。  </span>    Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行Interrupted后的Interrupted标记位："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 该方法用于检查当前线程的中断状态，并清除中断状态。如果当前线程被中断，则返回true，并清除中断状态；如果当前线程未被中断，则返回false。  </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回当前线程："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">初始状态下的Interrupted标记位：false执行Interrupted后的Interrupted标记位：true返回当前线程：truefalse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在这段代码中，两次调用interrupted()方法，第一次返回true（因为之前调用了interrupt()方法），第二次返回false（因为在第一次调用后，中断状态被清除）。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">Thread myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 执行任务...  </span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 清理资源并在检查到中断标志时退出  </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在需要停止线程时  </span>myThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于阻塞操作（如IO操作或<code>wait()</code>方法），当线程在阻塞状态时收到中断请求，某些方法会抛出<code>InterruptedException</code>。在这种情况下，处理方式通常是捕获异常，执行必要的清理操作，并根据需要决定是否退出线程。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>someLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>          someLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在wait期间，如果线程被中断，会抛出InterruptedException  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重新设置中断标志，以便后续代码可以感知  </span>    <span class="token comment" spellcheck="true">// 清理并退出线程  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式可以优雅地停止线程，即使线程处于阻塞状态也能够及时响应停止请求。通过捕获<code>InterruptedException</code>异常，可以在停止线程时进行清理工作。但是需要在线程任务中处理<code>InterruptedException</code>异常，这无形之中增加了代码复杂度。并且如果任务不是阻塞的，需要在任务中周期性地检查线程的中断状态。</p><h3 id="使用线程池来管理线程"><a href="#使用线程池来管理线程" class="headerlink" title="使用线程池来管理线程"></a>使用线程池来管理线程</h3><p>使用<code>ExecutorService</code>来管理线程可以更加灵活地控制线程的生命周期。通过调用<code>ExecutorService</code>的<code>shutdown()</code>或<code>shutdownNow()</code>方法来停止线程池中的所有线程，从而优雅地停止线程。</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 提交任务到线程池  </span>executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 关闭线程池  </span>executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过ExecutorService可以更加灵活地管理线程，包括启动、执行和停止。但是他是停止线程池中的所有线程。在Java中，没有直接提供停止线程池中特定线程的方法。因为线程池是一种管理线程的容器，它负责管理线程的创建、调度和销毁。但是我们可以使用<code>Future</code>对象来表示线程池中的任务，通过调用<code>Future</code>的<code>cancel(boolean mayInterruptIfRunning)</code>方法，可以尝试取消任务的执行。在调用<code>cancel(true)</code>时，表示可以中断正在运行的任务。</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行任务...  </span>    <span class="token comment" spellcheck="true">// 在适当位置检查Thread.currentThread().isInterrupted()  </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在需要停止任务时  </span>future<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 参数为true表示可以中断正在运行的任务  </span>executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式虽然调用了<code>cancel(true)</code>，任务也需要在适当的时机检查中断状态并做出相应处理。如果任务已经被中断，可能无法继续执行，需要在任务中捕获<code>InterruptedException</code>异常并进行适当的清理工作。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>优雅地停止线程是编写高质量Java多线程程序的关键之一。在选择停止线程的方法时，需要考虑线程的执行情况、任务特性以及程序设计的要求。一般而言，使用<code>interrupt()</code>方法或者<code>ExecutorService</code>来管理线程是较为推荐的做法，可以有效地避免线程不安全的终止以及资源泄露等问题。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团一面：Java中线程有哪几种状态？</title>
      <link href="/article/javathreadstate.html"/>
      <url>/article/javathreadstate.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java中，多线程是一种常常使用的技术手段，尤其是在需要处理并发性和异步操作的情况下。理解线程的状态对于编写可靠的多线程应用程序至关重要。本文将深入介绍Java线程的状态，探讨每种状态的含义、如何进行状态转换以及一些实用的技巧。</p><h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><p>关于线程的状态，网上的描述有很多，几种常见的说法有5种，6种，7种，这几种说法都可以说是正确的。我们先从Java中的给定的线程状态看，即<code>Thread</code>下的<code>State</code>枚举中列出了6种状态：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span>      NEW<span class="token punctuation">,</span>      RUNNABLE<span class="token punctuation">,</span>      BLOCKED<span class="token punctuation">,</span>      WAITING<span class="token punctuation">,</span>      TIMED_WAITING<span class="token punctuation">,</span>      TERMINATED<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各状态的说明：</p><ul><li><p>NEW（新建）：当通过<code>new Thread()</code>创建一个新的线程对象但还未调用其<code>start()</code>方法时，线程处于新建状态。此时线程对象已经存在，但是线程并没有真正开始执行。</p></li><li><p>RUNNABLE（运行状态）：运行状态指的是线程正在执行代码时的活动状态。在Java中，线程的运行状态通常称为RUNNABLE。当调用了线程对象的<code>start()</code>方法后，线程会进入就绪状态。就绪状态意味着线程具备了执行条件，但并不保证立即开始执行。在Java虚拟机中，就绪状态的线程可能会等待调度器的选中，然后分配CPU时间片，进入运行状态。此时，线程可以执行，但并不一定会立即执行。此外，就绪状态也包括了那些因为时间片用完或者被挂起而暂时让出CPU，但在没有阻塞的情况下能够立即恢复执行的线程。如果就绪状态的线程被操作系统调度程序选中并获得CPU执行权，那么线程就进入了运行状态。值得注意的是，即使处于运行状态，线程也可能因为操作系统的调度或其他因素而暂时被挂起，等待下一次获得CPU执行权。</p></li><li><p>BLOCKED（阻塞状态）：当线程试图获取某个对象的锁（例如进入synchronized代码块或方法），而该锁被其他线程持有时，该线程会进入阻塞状态（Blocked）。此时，线程会一直等待直到能够获取所需的锁才能继续执行。</p></li><li><p>WAITING（等待状态）：当调用<code>wait()</code>、<code>join()</code>方法，或者在<code>synchronized</code>代码块中调用了<code>Thread.sleep(long millis)</code>等方法时，线程会进入等待状态（Waiting）。在这种状态下，线程不会消耗CPU资源，并且需要等待其他线程显式地唤醒才能继续执行，例如执行<code>notify()</code>、<code>notifyAll()</code>。</p></li><li><p>TIMED_WAITING（超时等待状态）：类似于等待状态，但这种状态下线程会在指定的时间后自动唤醒，例如，调用<code>Thread.sleep(long millis)</code>指定了超时时间、<code>Object.wait(long timeout)</code>、<code>LockSupport.parkNanos(long nanos)</code>或<code>Condition.awaitNanos(long nanos)</code>等方法会让线程进入限期等待状态。</p></li><li><p>TERMINATED（终止状态）：线程执行完毕或者因异常退出<code>run()</code>方法后，线程就会变为终止状态。处于终止状态的线程无法再次被启动。</p></li></ul><p>而5种线程状态的说法是基于操作系统层面的说法，这种说法将<code>WAITING</code>和<code>TIMED_WAITING</code>两种状态合并在了一起，统称为<code>WAITING</code>即等待状态（操作系统会隐藏这两种状态）。而7种线程的说法是将<code>RUNNABLE</code>运行状态细化为<code>READY</code>（就绪状态）和<code>RUNNING</code>（运行状态），所以说无论是5种还是6种，7种线程状态的说法都是正确的，但是对于Java来说我们还是按照其文档中所述的6种。</p><h3 id="线程状态转换"><a href="#线程状态转换" class="headerlink" title="线程状态转换"></a>线程状态转换</h3><p>线程在生命周期内并不是在一个状态下固定不变，而是随着代码的执行在不同的状态之间切换。其各个状态的切换关系如图：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229233052.png" alt="image.png"></p><blockquote><p>此图来源于《Java并发编程艺术》。</p></blockquote><p>由上图可以看出：</p><p>线程创建之后它将处于<code>NEW</code>(新建)状态，调用<code>start()</code>方法后开始运行，线程这时候处于<code>READY</code>(可运行)状态。可运行状态的线程获得了<code>cpu</code> 时间片(<code>timeslice</code>)后就处于<code>RUNNING</code>(运行)状态。<br>当线程执行 <code>wait()</code>方法之后，线程进入<code>WAITING</code>(等待)状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而<code>TIME WAITING</code>(超时等待)状态相当于在等待状态的基础上增加了超时限制，比如通过<code>sleep(long millis)</code>方法或<code>wait(long millis)</code>方法可以将Java线程置于 <code>TIMED_WAITING</code>状态。当超时时间到达后Java线程将会返回到<code>RUNNABLE</code>状态。<br>当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到<code>BLOCKED</code>(阻寒)状态。<br>线程在执行<code>Runnable</code>的<code>run()</code>方法之后将会进入到<code>TERMINATED</code>(终止)状态。</p><h3 id="状态转换验证"><a href="#状态转换验证" class="headerlink" title="状态转换验证"></a>状态转换验证</h3><p>在Java中我们可以通过<code>Thread</code>类的<code>getState()</code>方法获取当前线程的状态。我们可以通过相关代码来验证Java中的线程状态。</p><ul><li>NEW<br>新创建线程，没有调用<code>start()</code>方法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-text"><code class="language-text">NEW<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>RUNNABLE:<br>新创建的线程，在调用<code>start()</code>方法后，就进入到了<code>RUNNABLE</code>运行状态。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-text"><code class="language-text">RUNNABLE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>BLOCKED<br>当前线程没有获取到锁，即没有进入到<code>synchronized</code>代码块时，此时状态即为<code>BLOCKED</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//  thread未获取到锁</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 主线程获得锁</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>          thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>WAITING<br>当前线程在获得锁，执行代码块，如果此时调用<code>wait()</code>方法，线程状态就会变为<code>WAITIING</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                  e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TIMED_WAITING<br>如果当前线程中执行了<code>Thread.sleep()</code>，那么这个线程就会变为<code>TIMED_WAITING</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>TERMINATED<br>即线程执行结束。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>      Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>thread<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="由线程状态引出的一些注意事项"><a href="#由线程状态引出的一些注意事项" class="headerlink" title="由线程状态引出的一些注意事项"></a>由线程状态引出的一些注意事项</h3><ul><li><p><strong>妥善运用同步机制</strong>：<br>  为了防止线程因竞态条件而陷入BLOCKED状态，应明智地采用恰当的同步工具，例如<code>synchronized</code>关键字、<code>ReentrantLock</code>或其他并发库提供的锁机制来保证线程安全性。务必精细规划和最小化锁的范围，以减少线程阻塞的可能性。</p></li><li><p><strong>预防死锁的发生</strong>：<br>  在系统设计初期就要充分考虑线程间的资源依赖关系，尽量避免线程互相占用对方正在等待的资源，从而形成死循环，导致所有涉及的线程都无法继续执行。实施合理的锁顺序策略和超时设置有助于降低死锁风险。</p></li><li><p><strong>谨慎使用wait()和notify()方法</strong>：<br>  使用<code>wait()</code>和<code>notify()</code>进行线程间通信时需格外小心，确保在正确的上下文（如<code>synchronized</code>代码块内）调用，并遵循正确的通知和等待逻辑，以避免不必要或长时间的阻塞。在现代Java编程中，推荐优先使用<code>java.util.concurrent</code>包下的高级同步工具，如<code>Condition</code>类，它们提供了更强大的线程协调能力。</p></li><li><p><strong>注意设计线程间协作模式</strong>：<br>  根据业务需求设计清晰有效的线程间通信协议，可以使用诸如<code>CountDownLatch</code>、<code>Semaphore</code>、<code>CyclicBarrier</code>等并发工具，以及<code>BlockingQueue</code>等数据结构，确保线程按预定的流程有序执行任务。</p></li><li><p><strong>实时监控和调试</strong>：<br>  利用Java自带的监控工具（如JConsole、VisualVM等）定期检查和分析线程的状态，及时识别出可能导致性能瓶颈、死锁或其他问题的线程行为，进而采取相应的优化措施。此外，日志记录和堆栈跟踪也是定位多线程环境下问题的重要手段。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java线程的状态是多线程中的重要概念，对于编写高效、可靠的多线程应用程序至关重要。通过深入理解线程的生命周期和状态转换，以及采用适当的管理技巧，可以更好地控制和管理多线程应用程序的行为，从而提高应用程序的性能和可靠性。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 多线程状态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学会这7种SQL进阶用法，让你少走99%的弯路!</title>
      <link href="/article/mysqlsqladvanced.html"/>
      <url>/article/mysqlsqladvanced.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在日常业务开发中，熟练掌握<code>SQL</code>语言是至关重要的。除了基础的增删改查操作外，了解和掌握一些进阶的SQL用法能够让你更高效地处理各种复杂的数据操作。本文将介绍几种SQL进阶用法，让你少走99%的弯路，提高数据处理效率。</p><h3 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h3><p>在<code>MySQ</code>L中，你可以通过使用自定义排序来指定特定字段的排序顺序。通常情况下，<code>MySQL</code>的排序是按照默认的升序（<code>ASC</code>）或降序（<code>DESC</code>）进行的。但是，有时候你可能需要按照特定的顺序进行排序，而不仅仅是升序或降序。这时就可以使用自定义排序。</p><p>下面我们来通过一个示例来讲解自定义排序。</p><p>假设你有一个<code>students</code>表，其中包含学生的姓名和成绩。现在，你想按照自定义的顺序对学生进行排序，而不是按照成绩的大小。例如，你想按照”A”、”B”、”C”、”D”、”E”这样的顺序进行排序。</p><p>在<code>MySql8.0</code>以前我们需要使用<code>ORDER BY</code>结合<code>CASE</code>语句来自定义一个排序规则去实现。例如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>   <span class="token keyword">CASE</span>     <span class="token keyword">WHEN</span> grade <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token keyword">THEN</span> <span class="token number">1</span>     <span class="token keyword">WHEN</span> grade <span class="token operator">=</span> <span class="token string">'B'</span> <span class="token keyword">THEN</span> <span class="token number">2</span>     <span class="token keyword">WHEN</span> grade <span class="token operator">=</span> <span class="token string">'C'</span> <span class="token keyword">THEN</span> <span class="token number">3</span>     <span class="token keyword">WHEN</span> grade <span class="token operator">=</span> <span class="token string">'D'</span> <span class="token keyword">THEN</span> <span class="token number">4</span>     <span class="token keyword">WHEN</span> grade <span class="token operator">=</span> <span class="token string">'E'</span> <span class="token keyword">THEN</span> <span class="token number">5</span>     <span class="token keyword">ELSE</span> <span class="token number">6</span> <span class="token comment" spellcheck="true">-- 处理其他情况，例如如果有其他成绩值</span>  <span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240228225044.png" alt="image.png"></p><p>而在<code>MySql8.0</code>之后可以直接使用自定义排序规则通过<code>FIELD()</code>函数来实现自定义排序。<code>FIELD()</code>函数接受一个字段和一个值列表作为参数，并返回该字段在值列表中的位置。上述示例我们可以改造为：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>  FIELD<span class="token punctuation">(</span>grade<span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240228225403.png" alt="image.png"></p><p>再例如我们在按照自定义的名称的规则排序：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>  FIELD<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'Eve'</span><span class="token punctuation">,</span><span class="token string">'David'</span><span class="token punctuation">,</span><span class="token string">'Charlie'</span><span class="token punctuation">,</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Alice'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240228225613.png" alt="image.png"><br>需要注意的是，<code>FIELD()</code>函数会返回字段在值列表中的位置，如果字段的值不在值列表中，则返回0。所以如果你的字段可能包含不在值列表中的值，可能需要在排序时进行适当的处理。</p><p>这种方法相对简单，并且在某些情况下非常方便，但也有一些限制。特别是，当值列表很长时，这种方法可能不够灵活，因为需要在<code>ORDER BY</code>子句中硬编码所有的值。</p><h3 id="空值NULL排序"><a href="#空值NULL排序" class="headerlink" title="空值NULL排序"></a>空值NULL排序</h3><p>在<code>MySQ</code>L中，当涉及到<code>NULL</code>值排序时，通常，<code>NULL</code>值在升序排序（<code>ASC</code>）中被视为小于任何非<code>NULL</code>值，而在降序排序（<code>DESC</code>）中则被视为大于任何非<code>NULL</code>值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240228230711.png" alt="image.png"></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240228230916.png" alt="image.png"><br>如果你希望NULL值出现在排序结果的末尾或开头，可以使用<code>COALESCE</code>或<code>IFNULL</code>函数或者<code>ORDER BY IF(ISNULL(字段), 0, 1)</code>来替换NULL值，从而显式控制其排序位置：</p><ol><li>升序时将NULL值放在最后面：</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> IFNULL<span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">IF</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> age <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240228231302.png" alt="image.png"></p><ol start="2"><li>降序时把NULL值放在最前面：</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">COALESCE</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> IFNULL<span class="token punctuation">(</span>age<span class="token punctuation">,</span> <span class="token number">999999</span><span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">IF</span><span class="token punctuation">(</span>ISNULL<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> age <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240228232931.png" alt="image.png"></p><p>假如对需要排序的列的最大最小的边界值可以确定，即逻辑上不会出现这么大的值的时候上述三种方式都可以实现，否则建议使用<code>ORDER BY IF(ISNULL(age), 0, 1)</code>的方式，当然也建议不管那种情况都要使用这种方式。</p><h3 id="CASE表达式"><a href="#CASE表达式" class="headerlink" title="CASE表达式"></a>CASE表达式</h3><p><code>CASE</code>表达式是一种条件表达式，类似于其他编程语言中的<code>switch</code>语句。它允许根据条件的不同返回不同的值。</p><p><code>CASE</code>表达式的基本语法如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CASE</span>    <span class="token keyword">WHEN</span> condition1 <span class="token keyword">THEN</span> result1    <span class="token keyword">WHEN</span> condition2 <span class="token keyword">THEN</span> result2    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">ELSE</span> resultN<span class="token keyword">END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>condition1</code>、<code>condition2</code>等是条件，可以是任何逻辑表达式。</li><li><code>result1</code>、<code>result2</code>等是对应条件为真时要返回的结果。</li><li><code>ELSE</code>子句是可选的，用于处理所有条件都不满足的情况，如果省略了<code>ELSE</code>子句且所有条件都不满足，则返回NULL。</li></ul><pre class="line-numbers language-SQL"><code class="language-SQL">SELECT     name,    score,    CASE        WHEN score >= 90 THEN 'A'        WHEN score >= 80 THEN 'B'        WHEN score >= 70 THEN 'C'        ELSE 'D'    END AS grade_levelFROM    students;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229001210.png" alt="image.png"><br><code>CASE</code>表达式在<code>SQL</code>查询中用途广泛，可用于<code>SELECT</code>、<code>UPDATE</code>的<code>SET</code>等语句中，实现动态计算列值、根据条件更新值等功能。</p><h3 id="分组连接函数：GROUP-CONCAT"><a href="#分组连接函数：GROUP-CONCAT" class="headerlink" title="分组连接函数：GROUP_CONCAT"></a>分组连接函数：GROUP_CONCAT</h3><p><code>GROUP_CONCAT</code>函数用于将每个组内的行连接成一个字符串，并返回该字符串。通常在对结果集进行分组后，需要将每个分组内的多个值合并成一个字符串时使用。该函数在MySQL中非常有用，特别是在处理与分组相关的数据时。</p><p><code>GROUP_CONCAT</code>函数的语法：</p><pre class="line-numbers language-sql"><code class="language-sql">GROUP_CONCAT<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">DISTINCT</span><span class="token punctuation">]</span> expr <span class="token punctuation">[</span><span class="token punctuation">,</span>expr <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> {unsigned_integer <span class="token operator">|</span> col_name <span class="token operator">|</span> expr}                 <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">,</span>col_name <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span>             <span class="token punctuation">[</span>SEPARATOR str_val<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>DISTINCT</code>：可选项，用于去除重复的值。</li><li><code>expr</code>：要连接的表达式。</li><li><code>ORDER BY</code>：可选项，用于指定连接后的字符串的排序方式。</li><li><code>SEPARATOR</code>：可选项，用于指定连接后的字符串的分隔符，默认为逗号<code>,</code>。</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    class<span class="token punctuation">,</span>    GROUP_CONCAT<span class="token punctuation">(</span> NAME <span class="token punctuation">)</span> <span class="token keyword">AS</span> students_list <span class="token keyword">FROM</span>    students <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    class<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229001908.png" alt="image.png"></p><p>使用<code>GROUP_CONCAT</code>函数时，还可以通过<code>ORDER BY</code>子句可以指定连接后的字符串的排序方式。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    class<span class="token punctuation">,</span>    GROUP_CONCAT<span class="token punctuation">(</span> NAME <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> age <span class="token keyword">DESC</span> SEPARATOR <span class="token string">';'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> students_list <span class="token keyword">FROM</span>    students <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    class<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229002428.png" alt="image.png"></p><blockquote><p>默认情况下<code>GROUP_CONCAT</code>函数的最大连接长度是1024个字符。如果你的连接超过了这个限制，可以使用<code>SET SESSION group_concat_max_len = val;</code>语句来调整最大连接长度。</p></blockquote><h3 id="分组统计数据后在进行统计汇总：WITH-ROLLUP"><a href="#分组统计数据后在进行统计汇总：WITH-ROLLUP" class="headerlink" title="分组统计数据后在进行统计汇总：WITH ROLLUP"></a>分组统计数据后在进行统计汇总：WITH ROLLUP</h3><p><code>WITH ROLLUP</code>是MySQL中用于执行聚合查询并生成总计行（rollup summary）的选项之一。它允许在<code>GROUP BY</code>子句中创建一个额外的行，该行包含了对分组数据的汇总信息。这在需要同时查看详细数据和总计数据时非常有用。</p><p>使用<code>WITH ROLLUP</code>时，查询结果会包含每个分组的详细数据，以及一个总计行，该总计行汇总了所有分组的数据。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    class<span class="token punctuation">,</span>    <span class="token function">AVG</span><span class="token punctuation">(</span> age <span class="token punctuation">)</span> <span class="token keyword">FROM</span>    students <span class="token keyword">WHERE</span>    age <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span>    class <span class="token keyword">WITH ROLLUP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229003110.png" alt="image.png"><br>结果中包含了每个年级的平均年龄，并且返回所有的班级的学生平均年龄。</p><p>需要注意的是，总计行中分组键列的值为<code>NULL</code>，表示汇总了所有分组的数据。这使得我们可以通过检查分组键列是否为<code>NULL</code>来确定行是否为总计行。</p><h3 id="子查询提取：WITH-AS"><a href="#子查询提取：WITH-AS" class="headerlink" title="子查询提取：WITH AS"></a>子查询提取：WITH AS</h3><p>在MySQL中，<code>WITH AS</code>子句（也称为子查询提取函数）允许你在一个查询中创建一个临时的命名子查询（也称为公共表表达式），然后在该查询的后续部分引用这个子查询。这有助于提高查询的可读性和简洁性，尤其是当查询中需要多次引用相同的子查询时。</p><p><code>WITH AS</code>子句的基本语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">WITH</span> cte_name <span class="token keyword">AS</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token keyword">columns</span>    <span class="token keyword">FROM</span> <span class="token keyword">table</span>    <span class="token keyword">WHERE</span> conditions<span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token keyword">columns</span><span class="token keyword">FROM</span> cte_name<span class="token keyword">WHERE</span> conditions<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假如我们查询分数大于80的，并且评级为A的并且不是2班的学生信息：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">WITH</span> s1 <span class="token keyword">AS</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> score <span class="token operator">></span> <span class="token number">80</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>s2 <span class="token keyword">AS</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> class <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token keyword">SELECT</span>    <span class="token operator">*</span> <span class="token keyword">FROM</span>    s1 <span class="token keyword">WHERE</span>    s1<span class="token punctuation">.</span>id <span class="token operator">NOT</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token keyword">SELECT</span> s2<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> s2 <span class="token punctuation">)</span>     <span class="token operator">AND</span> s1<span class="token punctuation">.</span>grade <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229004115.png" alt="image.png"></p><blockquote><p>WITH AS是从MySql 8.0.1开始提供</p></blockquote><h3 id="优雅处理数据插入、更新时主键或者唯一键冲突"><a href="#优雅处理数据插入、更新时主键或者唯一键冲突" class="headerlink" title="优雅处理数据插入、更新时主键或者唯一键冲突"></a>优雅处理数据插入、更新时主键或者唯一键冲突</h3><p>在日常开发中，我们尝尝在插入数据时会遇到唯一键冲突导致插入失败的问题。如下：</p><p>假如我们的唯一键为：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> students <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>uk_class_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>class<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们执行以下sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students <span class="token keyword">WHERE</span> class <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> name <span class="token operator">=</span> <span class="token string">'Alice'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询结果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229005249.png" alt="image.png"></p><p>此时我们在插入一条数据：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token punctuation">(</span>name<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">,</span> class<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现报错：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229005429.png" alt="image.png"></p><p>我们通常的做法时先按照唯一键查询一遍数据，如果存在则先删除数据，在进行插入。这种做法略显麻烦，并且可能会误删数据。此时我们就可以采取以下三种方法区优雅处理。</p><h4 id="IGNORE"><a href="#IGNORE" class="headerlink" title="IGNORE"></a>IGNORE</h4><p><code>IGNORE</code>关键字用于在执行插入、更新或删除操作时，忽略特定类型的错误，而不是中止整个操作。特别是在插入或更新数据时，如果存在唯一索引冲突或主键冲突，使用<code>IGNORE</code>关键字可以使得操作继续进行而不是因为错误而中断。</p><p>语法如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">IGNORE</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">UPDATE</span> <span class="token keyword">IGNORE</span> table_name<span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述插入语句的示例中，我们使用<code>IGNORE</code>关键字：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">IGNORE</span> <span class="token keyword">INTO</span> students <span class="token punctuation">(</span>name<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">,</span> class<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229005608.png" alt="image.png"></p><p>查询数据发现，数据没有变化：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229005651.png" alt="image.png"></p><p>如果<code>UPDATE</code>使用了<code>IGNORE</code>关键字，在更新数据时忽略那些会导致错误的行，比如更新更新后会违反唯一约束。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token keyword">IGNORE</span> students <span class="token keyword">SET</span> name <span class="token operator">=</span> <span class="token string">'Alice'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会执行成功：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229010036.png" alt="image.png"></p><blockquote><p>IGNORE在使用时应该谨慎，它可能会掩盖潜在的业务逻辑错误或数据一致性问题。并且在事务安全性和完整性要求较高的场景下可能并不适用。</p></blockquote><h4 id="REPLACE"><a href="#REPLACE" class="headerlink" title="REPLACE"></a>REPLACE</h4><p><code>REPLACE INTO</code>是MySQL中用于向表中插入或替换数据的一种特殊语法。它类似于<code>INSERT INTO</code>语句，但是在插入数据时，如果发现表中已存在具有相同唯一索引或主键的记录，则会删除现有记录，然后插入新记录，而不是抛出错误或导致插入操作失败。即有则删除在插入，没有则插入。</p><p>语法如下：</p><pre class="line-numbers language-sql"><code class="language-sql">REPLACE <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你也可以使用<code>REPLACE INTO</code>与<code>SELECT</code>语句结合使用来替换表中的数据：</p><pre class="line-numbers language-sql"><code class="language-sql">REPLACE <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">FROM</span> another_table<span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们执行如下sql：</p><pre class="line-numbers language-sql"><code class="language-sql">REPLACE <span class="token keyword">INTO</span> students <span class="token punctuation">(</span>name<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">,</span> class<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功，查询这条记录：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229010416.png" alt="image.png"><br>此时我们发现记录的id重新生成了，并且数据页是插入的最新的数据。</p><blockquote><p><code>REPLACE INTO</code>会首先尝试删除表中具有相同唯一索引或主键的记录，然后再插入新记录。因此，在使用<code>REPLACE INTO</code>时应当谨慎，以确保不会意外删除需要保留的数据。</p></blockquote><h4 id="ON-DUPLICATE-KEY-UPDATE"><a href="#ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="ON DUPLICATE KEY UPDATE"></a>ON DUPLICATE KEY UPDATE</h4><p>在MySQL中，<code>ON DUPLICATE KEY UPDATE</code>是用于在执行<code>INSERT</code>语句时，如果发生唯一键冲突（即违反了唯一索引或主键约束），则执行后面的更新操作。</p><p>当你想要向表中插入一行数据，但是如果这一行数据已经存在（即主键或唯一索引已经存在），则更新该行数据而不是插入新的行，即有则更新，没有则插入。</p><p>语法如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">ON</span> <span class="token keyword">DUPLICATE KEY</span> <span class="token keyword">UPDATE</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们执行以下sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">IGNORE</span> <span class="token keyword">INTO</span> students <span class="token punctuation">(</span> NAME<span class="token punctuation">,</span> grade<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">,</span> class <span class="token punctuation">)</span><span class="token keyword">VALUES</span>    <span class="token punctuation">(</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span>     <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE KEY</span> <span class="token keyword">UPDATE</span> score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>    grade <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行成功，重新看一下这条数据：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240229011404.png" alt="image.png"></p><p>数据已执行了更新操作。</p><p>这种方式适用于需要维护唯一记录（如用户名、邮箱等）的情况下，无需预先检查是否存在重复，就能保证数据的一致性和完整性。同时，它也减少了对数据库的请求次数，提高了处理效率。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>掌握以上这几种SQL进阶用法，能够让你在日常的数据处理工作中更加得心应手，少走很多弯路。通过优化查询逻辑、处理异常情况以及执行插入或更新操作，你可以更高效地管理和操作数据库，提升工作效率，从而更好地应对各种复杂的数据处理需求。</p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql优化 </tag>
            
            <tag> MySql </tag>
            
            <tag> Sql进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团二面：如何设计一个订单超时未支付关闭订单的解决方案？我说使用Elastic-Job轮训判断。他让我回去等通知。。。。</title>
      <link href="/article/null.html"/>
      <url>/article/null.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>订单超时未支付自动取消是一个典型的电商和在线交易业务场景，在该场景下，用户在购物平台上下单后，系统通常会为用户提供一段有限的时间来完成支付。如果用户在这个指定的时间窗口内没有成功完成支付，系统将自动执行订单取消操作。</p><p>当然类似的业务场景还有：</p><ul><li>我们预约钉钉会议后，钉钉会在会议开始前15分钟、5分钟提醒。</li><li>淘宝收到货物签收之后，超过7天没有确认收货，会自动确认收货。</li><li>未使用的优惠券有效期结束后，自动将优惠券状态更新为已过期。</li><li>用户登录失败次数过多后，账号锁定一段时间，利用延迟队列在锁定期满后自动解锁账号。<br>而针对这种业务需求，我们常见的两中技术方向即：定时轮训订单之后判断是否取消以及延迟队列实现。而到具体的技术方案主要有以下几种：</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240326202219.png" alt="image.png"></p><p>本文主要介绍以下几种主流方案。</p><h3 id="定时轮训（SpringBoot的Scheduled实现）"><a href="#定时轮训（SpringBoot的Scheduled实现）" class="headerlink" title="定时轮训（SpringBoot的Scheduled实现）"></a>定时轮训（SpringBoot的Scheduled实现）</h3><p>定时轮训的方式都是基于定时定任务扫描订单表，按照下单时间以及状态进行过滤，之后在进行判断是否在有效期内，如果不在，则取消订单。</p><p>如以下，我们使用SpringBoot中的定时任务实现：</p><p>我们先创建定时任务的配置，设置任务每隔5秒执行一次。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSchedulingConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolTaskScheduler threadPoolTaskScheduler <span class="token operator">=</span> <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span>threadPoolTaskScheduler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置自定义的TaskScheduler</span>        <span class="token comment" spellcheck="true">// 根据任务信息创建CronTrigger</span>        CronTrigger cronTrigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span><span class="token string">"0/5 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建任务执行器（假设TaskExecutor是实现了Runnable接口的对象）</span>        MyTaskExecutor taskExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用自定义的TaskScheduler调度任务</span>        threadPoolTaskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>taskExecutor<span class="token punctuation">,</span> cronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"shutdown"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ThreadPoolTaskScheduler <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadPoolTaskScheduler scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程池大小</span>        scheduler<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"scheduled-task-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程名称前缀</span>        scheduler<span class="token punctuation">.</span><span class="token function">setAwaitTerminationSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置终止等待时间</span>        <span class="token keyword">return</span> scheduler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>MyTaskExecutor</code>中实现扫描订单以及判断订单是否需要取消：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTaskExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 在 "</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" 执行MyTaskExecutor。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240322143045.png" alt="image.png"></p><p>采用定时任务机制来实现实时监测并取消超时订单的方法相对直接易行，我们可以运用诸如Quartz、XXL-Job或Elastic-Job等成熟的定时任务框架进行集群部署，从而提升任务执行效能。然而，此类方案存在显著局限：</p><p>首先，定时轮询订单表的方式在订单数量庞大的情况下会对数据库带来持续且显著的压力，因为频繁地全表扫描无疑会增加I/O负担和CPU使用率。</p><p>其次，定时任务执行的间隔设定颇为棘手。若设定的间隔时间较长，可能会导致订单超时后的取消动作出现延迟，影响用户体验；相反，若时间间隔设置得过短，则会导致大量订单被重复扫描和判断，不仅浪费计算资源，还可能导致不必要的并发问题和事务冲突，尤其是在高并发交易的高峰期。</p><p>在实际应用中，针对大流量订单场景下的超时处理，往往更倾向于采用延迟队列技术而非简单的定时任务轮询，以实现更为精确、高效的超时逻辑处理。</p><blockquote><p>关于SpringBoot的定时任务实现的几种方式，请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484100&idx=1&sn=17f9a506495eb273baa47d2d2efc16d1&chksm=c22452b3f553dba504ce7e13393184898696e6709a09427f741134107285c8f1550ecf03eddc#rd" target="_blank" rel="noopener">玩转SpringBoot：SpringBoot的几种定时任务实现方式</a></p></blockquote><h3 id="JDK的延迟队列"><a href="#JDK的延迟队列" class="headerlink" title="JDK的延迟队列"></a>JDK的延迟队列</h3><p>使用JDK自带的<code>DelayQueue</code>实现一个延迟队列并处理超时订单，首先我们需要定义一个实现了<code>Delayed</code>接口的订单对象类，然后创建<code>DelayQueue</code>实例并不断从队列中取出已超时的订单进行处理。</p><p>我们定义一个包含订单信息和延迟时间的订单类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedOrder</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String orderNo<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> expireTimeMillis<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 订单超时时间戳（毫秒）</span>    <span class="token keyword">public</span> <span class="token function">DelayedOrder</span><span class="token punctuation">(</span>String orderNo<span class="token punctuation">,</span> <span class="token keyword">long</span> delayInSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNo <span class="token operator">=</span> orderNo<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置订单在当前时间多少秒后超时</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTimeMillis <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayInSeconds<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> remainingNanos <span class="token operator">=</span> expireTimeMillis <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>remainingNanos<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>other <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        DelayedOrder t <span class="token operator">=</span> <span class="token punctuation">(</span>DelayedOrder<span class="token punctuation">)</span> other<span class="token punctuation">;</span>        <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span> <span class="token operator">-</span> t<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 其他订单属性及方法...</span>    <span class="token comment" spellcheck="true">// 处理订单取消的逻辑</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这里调用实际的服务接口或方法取消订单</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以使用<code>DelayQueue</code>处理超时订单：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDelayQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> DelayQueue<span class="token operator">&lt;</span>DelayedOrder<span class="token operator">></span> delayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrderToQueue</span><span class="token punctuation">(</span>DelayedOrder order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单 "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在 "</span><span class="token operator">+</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 添加到延迟队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 启动订单处理线程池</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ExecutorService executorService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>processOrders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                DelayedOrder order <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从延迟队列中取出已经过期的订单</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单 "</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getOrderNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"在 "</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" 取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                order<span class="token punctuation">.</span><span class="token function">cancelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 在这里执行取消订单的逻辑，比如更新数据库状态等</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们实现一个创建订单的接口，模拟订单创建：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"orderDelay"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderDelayController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderDelayQueue orderDelayQueue<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 202403221901   2秒后取消</span>        DelayedOrder delayedOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedOrder</span><span class="token punctuation">(</span><span class="token string">"202403221901"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDelayQueue<span class="token punctuation">.</span><span class="token function">addOrderToQueue</span><span class="token punctuation">(</span>delayedOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 202403221902 3秒后取消</span>        DelayedOrder delayedOrder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedOrder</span><span class="token punctuation">(</span><span class="token string">"202403221902"</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDelayQueue<span class="token punctuation">.</span><span class="token function">addOrderToQueue</span><span class="token punctuation">(</span>delayedOrder1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 202403221903 5秒后取消</span>        delayedOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedOrder</span><span class="token punctuation">(</span><span class="token string">"202403221903"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDelayQueue<span class="token punctuation">.</span><span class="token function">addOrderToQueue</span><span class="token punctuation">(</span>delayedOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>        delayedOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayedOrder</span><span class="token punctuation">(</span><span class="token string">"202403221904"</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDelayQueue<span class="token punctuation">.</span><span class="token function">addOrderToQueue</span><span class="token punctuation">(</span>delayedOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求接口，发现订单超过各自的时间之后，都超时了。当然真实场景是超时时间一致，只是订单创建时间不一致。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240322200048.png" alt="image.png"></p><p>基于JDK的<code>DelayQueue</code>实现的延迟队列解决取消超时订单的方案，相比较于定时轮训有如下优点：</p><ol><li><code>DelayQueue</code>基于优先级队列实现，内部使用了堆数据结构，插入和删除操作的时间复杂度为O(log n)，对于大量订单的处理效率较高。</li><li>相比于定期查询数据库的方式，<code>DelayQueue</code>将待处理的订单信息保留在内存中，减少了对数据库的访问频率，降低了IO压力。</li><li><code>DelayQueue</code>是<code>java.util.concurrent</code>包下的工具类，本身就具备良好的线程安全特性，可以在多线程环境下稳定工作。</li></ol><p>但是因为<code>DelayQueue</code>是基于内存的，这也导致它在实现上有一定的缺点：</p><ol><li>所有待处理的订单信息都需要保留在内存中，对于大量订单，可能会造成较大的内存消耗。</li><li>由于所有的超时信息都依赖于内存中的队列，如果系统崩溃或重启，未处理的订单信息可能丢失，除非有额外的持久化措施。</li></ol><h3 id="时间轮算法"><a href="#时间轮算法" class="headerlink" title="时间轮算法"></a>时间轮算法</h3><p>在介绍时间轮算法实现取消超时订单功能之前，我们先来看一下什么是时间轮算法？</p><p>时间轮算法（<code>Time Wheel Algorithm</code>）是一种高效处理定时任务调度的机制，广泛应用于各类系统如计时器、调度器等组件。该算法的关键理念在于将时间维度映射至物理空间，即构建一个由多个时间槽构成的循环结构，每个槽代表一个固定的时间单位（如毫秒、秒等）。</p><p>时间轮实质上是一个具有多个槽位的环形数据结构，随着时间的推进，时间轮上的指针按照预先设定的速度（例如每秒前进一槽）顺时针旋转。每当指针移动至下一槽位时，系统会检视该槽位中挂载的所有定时任务，并逐一执行到期的任务。</p><p>在时间轮中，每个待执行任务均与其触发时间点对应的时间槽关联。添加新任务时，系统会根据任务的期望执行时间计算出相应的槽位编号，并将任务插入该槽。对于未来执行的任务，计算所需等待的槽位数目，确保任务按时被处理。值得注意的是，时间轮设计为循环结构，意味着当指针到达最后一个槽位后会自动返回至第一个槽位，形成连续不断的循环调度。</p><p>借助时间轮算法，定时任务的执行时间以相对固定的时间槽来表示，而非直接依赖于绝对时间。任务执行完毕后，系统会及时将其从时间轮中移除，同时，对于不再需要执行的任务，也可以在任何时候予以移除，确保整个调度系统的高效运作和实时响应。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240325113550.png" alt="image.png"></p><p>如上图为例,假设一个格子是<code>1</code>秒,则整个<code>wheel</code>能表示的时间段为<code>8s</code>,假设当前指针指向<code>2</code>,此时需要调度一个<code>3s</code>后执行的任务, 显然应该加入到<code>(2+3=5)</code>的方格中,指针再走<code>3</code>次就可以执行了；如果任务要在<code>10s</code>后执行,应该等指针走完一个<code>round</code>零<code>2</code>格再执行, 因此应放入<code>4</code>,同时将<code>round(1)</code>保存到任务中。检查到期任务应当只执行<code>round</code>为<code>0</code>的,格子上其他任务的<code>round</code>应减<code>1</code>.</p><p>所以，我们可以使用时间轮算法去试一下延迟任务，用于实现取消超时订单。</p><p>我们以<code>Netty4</code>为例，引入依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.68.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义订单处理服务，在创建订单时定义订单超时时间，以及超时时取消订单。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Timeout<span class="token operator">></span> orderTimeouts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> HashedWheelTimer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedWheelTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span><span class="token operator">+</span>orderId<span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"创建成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建订单，设置超时时间为5秒钟</span>        Timeout timeout <span class="token operator">=</span> timer<span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Timeout timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 超时处理逻辑，取消订单</span>                <span class="token function">cancelOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderTimeouts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取消订单的逻辑</span>        orderTimeouts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderId<span class="token operator">+</span><span class="token string">"订单超时，在"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"取消订单："</span> <span class="token operator">+</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义订单创建接口，模拟订单创建：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"orderTimeWheel"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderTimeWheelController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"订单创建成功："</span> <span class="token operator">+</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们分别请求接口，创建订单：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240325172612.png" alt="image.png"></p><p>可以看见，订单在5秒钟之后自动调用取消方法取消订单。</p><p>基于时间轮实现延迟任务来取消超时订单有如下优点：</p><ol><li>时间轮算法能够高效地管理大量的定时任务，其执行时间与任务数量无关，因此非常适合处理大规模的定时任务。</li><li>时间轮算法能够提供相对精确的超时控制，可以在指定的时间后执行任务或者取消任务，从而确保超时订单能够及时取消。并且时间轮算法允许灵活地管理时间间隔和超时时间，可以根据具体业务需求进行调整和优化。</li><li>时间轮算法的实现相对简单，算法本身比较容易理解，且现有的实现库如Netty的<code>HashedWheelTimer</code>已经提供了成熟的实现，因此可以很方便地集成到现有的系统中。</li><li>基于内存操作，减少一些IO压力。</li></ol><p>但是相对应的也存在一些缺点：</p><ol><li>时间轮算法需要维护一个槽的数据结构，因此会占用一定的内存和计算资源，对于一些资源受限的环境可能会存在一定的压力。同<code>DelayQueue</code>，在大量订单时会对内存造成较大的内存消耗。同时也会影响延迟精度。</li><li>同时，如果系统崩溃或者重启，未处理的订单信息可能丢失，除非有额外的持久化措施。</li></ol><h3 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h3><p>对于Redis实现延迟任务，常见的两种方案是使用有序集合（Sorted Set，通常简称为zset）和使用key过期监听。</p><h4 id="定时轮训有序集合"><a href="#定时轮训有序集合" class="headerlink" title="定时轮训有序集合"></a>定时轮训有序集合</h4><p>利用有序集合的特性，即集合中的元素是有序的，每个元素都有一个分数（score）。在延迟任务的场景中，可以将任务的执行时间作为分数，将任务的唯一标识（如任务ID）作为集合中的元素。然后，定时轮询有序集合，查找分数小于当前时间的元素，这些元素即为已经到期需要执行的任务。执行完任务后，可以从有序集合中删除对应的元素。因此可以将订单的过期时间作为score，用于实现取消超时订单。</p><p>引入Redis依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置一下<code>RedisTemplate</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 其余配置 如序列化等</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建订单创建以及自动取消服务：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderZSetService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// key: orders:timeout, value: order_id:order_expiration_time</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ORDER_TIMEOUT_SET_KEY <span class="token operator">=</span> <span class="token string">"orders:timeout"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span><span class="token operator">+</span>orderId<span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"创建成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 假设订单超时时间为5秒</span>        <span class="token keyword">long</span> expirationTime <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ORDER_TIMEOUT_SET_KEY<span class="token punctuation">,</span> orderId<span class="token punctuation">,</span> expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 每秒检查一次，实际频率根据业务需求调整</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkAndProcessTimeoutOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Long now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">>></span> range <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rangeByScoreWithScores</span><span class="token punctuation">(</span>ORDER_TIMEOUT_SET_KEY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ZSetOperations<span class="token punctuation">.</span>TypedTuple<span class="token operator">&lt;</span>String<span class="token operator">></span> tuple <span class="token operator">:</span> range<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String orderId <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> tuple<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> now<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 处理超时订单</span>                <span class="token function">cancelOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 从有序集合中移除已处理的超时订单</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ORDER_TIMEOUT_SET_KEY<span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这里实现订单取消的实际逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单 "</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" 在"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新订单状态、释放库存等操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：因本例中基于@Scheduled实现定时轮训，所以需要使用<code>@EnableScheduling</code>开启Scheduled功能。具体请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484100&idx=1&sn=17f9a506495eb273baa47d2d2efc16d1&chksm=c22452b3f553dba504ce7e13393184898696e6709a09427f741134107285c8f1550ecf03eddc#rd" target="_blank" rel="noopener">玩转SpringBoot：SpringBoot的几种定时任务实现方式</a></p></blockquote><p>我们定义订单创建接口，模拟订单创建：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240325193649.png" alt="image.png"></p><p>可以看到订单5秒钟后自动取消。</p><p>使用Redis有序集合实现取消超时订单有一些优点：</p><ol><li>有序集合可以根据分数（过期时间）快速定位到需要处理的超时订单，避免了对全部订单的全表扫描，提高了查询效率。</li><li>在分布式环境中，Redis作为缓存和中间件，可以很容易地实现在多节点间共享超时订单信息，有利于分布式系统中统一管理超时订单。</li><li>利用Redis内存数据结构，不需要频繁读写数据库，降低了数据库的压力，同时也节约了数据库资源。</li></ol><p>但是也有一些缺点：</p><ol><li>定时任务的执行频率决定了处理超时订单的精确程度，频率太低可能导致部分订单未能及时取消，频率太高则可能浪费系统资源。</li><li>在涉及事务处理的情况下，可能需要额外的手段来保证与数据库之间的数据一致性，防止因Redis处理超时订单后，数据库层面的更新失败导致的数据不一致问题。</li><li>在处理超时订单过程中，若出现异常，需要配套的重试机制。</li></ol><h4 id="使用Redis-key过期监听"><a href="#使用Redis-key过期监听" class="headerlink" title="使用Redis key过期监听"></a>使用Redis key过期监听</h4><p>利用Redis的key过期监听功能。当设置一个key的过期时间时，可以设置一个回调函数，当key过期时，Redis会自动调用这个回调函数。即利用Redis的<code>Keyspace Notifications</code>功能，当一个键（Key）过期时，Redis会向已订阅了相关频道的客户端发送一个通知。</p><p>使用Redis的key的过期监听功能之前我们需要启用<code>Redis Keyspace Notifications</code>，在Redis配置文件（<code>redis.conf</code>）中启用<code>Key Space Notifications</code>，即打开如下配置：</p><pre class="line-numbers language-shell"><code class="language-shell">notify-keyspace-events Ex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>notify-keyspace-events</code>设置为<code>Ex</code>，表示启用所有类型的键空间通知，包括过期事件。具体配置方法可能因Redis的版本和环境而有所不同，请根据实际情况进行配置。</p></blockquote><p>然后我们就可以使用代码实现，首先实现<code>MessageListener</code>接口实现一个监听器来监听Redis的key过期事件。当订单的key过期时，将触发监听器中的逻辑，执行取消订单的操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderExpirationListener</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderExpirationService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String orderId <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用服务取消订单</span>        orderService<span class="token punctuation">.</span><span class="token function">cancelOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后配置Redis key过期事件监听器，并将其注册到Redis连接工厂中。这样，监听器将会在Redis的key过期事件发生时被调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 其余配置 如序列化等</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisMessageListenerContainer <span class="token function">container</span><span class="token punctuation">(</span>RedisConnectionFactory connectionFactory<span class="token punctuation">,</span>                                                   OrderExpirationListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChannelTopic</span><span class="token punctuation">(</span><span class="token string">"__keyevent@0__:expired"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 监听所有数据库的key过期事件</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>__keyevent@0__:expired</code>是Redis的系统通道，用于监听所有数据库中的key过期事件。如果需要监听特定数据库的key过期事件，则可以修改对应的数据库号。例如，<code>__keyevent@1__:expired</code>表示监听第一个数据库的key过期事件。</p></blockquote><p>然后我们就可以实现具体的订单创建服务以及订单取消的逻辑了。这里我们模拟一下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderExpirationService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span><span class="token operator">+</span>orderId<span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"创建成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 假设订单超时时间为5秒</span>        <span class="token keyword">long</span> expirationTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>orderId<span class="token punctuation">,</span> <span class="token string">"orderData"</span><span class="token punctuation">,</span> expirationTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这里实现订单取消的实际逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单 "</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" 在"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新订单状态、释放库存等操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"orderRedis"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisOrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderExpirationService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"订单创建成功："</span> <span class="token operator">+</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建4个订单，模拟5秒钟后的订单取消</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240326141516.png" alt="image.png"></p><p>使用Redis的key过期监听事件，实现取消超时订单有以下优点：</p><ol><li>Redis键过期事件能在键过期时立即触发监听器，因此可以在订单超时的瞬间准确执行取消操作，大大提高了时效性。</li><li>相比定期轮询数据库查询超时订单的方式，Redis键过期事件是被动触发，节省了CPU和网络资源，减少了无效查询。</li><li>Redis的键过期事件处理机制天然支持高并发场景，只要Redis集群足够强大，可以轻松处理大量订单的过期处理。</li><li>资源占用小，只需要维护Redis中少量的键，相对于数据库存储所有订单信息并做定时任务查询，内存和磁盘资源占用较少。</li></ol><p>但是也存在一些缺点：</p><ol><li>整个方案依赖于Redis服务的稳定性和性能，如果Redis服务出现问题，可能会影响订单超时处理。</li><li>在高并发场景下，Redis过期事件产生的速率可能非常高，如果处理不当，监听器本身的处理能力可能成为瓶颈，导致消息堆积，这时需要考虑消息队列或者其他缓冲机制。</li><li>Redis的键过期并不是严格意义上的实时，而是基于定期检查机制，极端情况下可能存在一定的延迟。尽管在实践中这种延迟很小，但对于极高精度要求的场景，可能需要额外关注。</li></ol><h3 id="MQ消息队列"><a href="#MQ消息队列" class="headerlink" title="MQ消息队列"></a>MQ消息队列</h3><p>使用消息队列实现取消超时订单的常见方法是利用延迟队列以及死信队列。比如<code>RabbitMq</code>，在介绍实现方式之前，我们先来了解一下<code>RabbitMq</code>的延迟队列以及死信队列。</p><ol><li><strong>延迟队列：</strong><br>RabbitMQ本身并不直接支持延迟队列，但可以通过安装<code>rabbitmq_delayed_message_exchange</code>插件来实现延迟消息的功能。当启用这个插件后，你可以创建一个类型为<code>x-delayed-message</code>的交换机。在发送消息时，可以设置消息头中的<code>x-delay</code>字段，表示消息应该在多久之后才开始被路由到绑定的目标队列。这样，当一个订单创建时，可以将包含订单ID和过期时间的消息发送到延迟交换机，并设置相应的延迟时间。当延迟时间结束时，消息将被发送到处理超时订单的队列，随后由消费者进行订单状态检查和取消操作。</li></ol><p>我的<code>RabbitMq</code>是部署在docker中的，所以顺带提议一下关于安装<code>rabbitmq_delayed_message_exchange</code>插件，我们需要在 <a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases?spm=5176.28103460.0.0.2a243f99EtR5vB" target="_blank" rel="noopener">Releases · rabbitmq/rabbitmq-delayed-message-exchange (github.com)</a>下载<code>.ez</code>结尾的插件，然后使用<code>docker cp</code>命令将其拷贝到<code>rabbitmq</code>容器内：</p><pre class="line-numbers language-shell"><code class="language-shell">docker cp <本地路径>/rabbitmq_delayed_message_exchange-3.13.0.ez <容器ID>:/plugins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们进入容器后启动插件：</p><pre class="line-numbers language-shell"><code class="language-shell">rabbitmq-plugins enable rabbitmq_delayed_message_exchange<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后验证一下插件是否开启成功：</p><pre class="line-numbers language-shell"><code class="language-shell">rabbitmq-plugins list | grep delayed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240326161531.png" alt="image.png"></p><blockquote><p>我的rabbitmq的版本是3.13.0</p></blockquote><ol start="2"><li><strong>死信队列</strong><br>死信队列是指当消息在原始队列中遇到某种情况（如消息过期、消息被拒绝等）时，会被重新路由到另一个预定义的队列中。当消息在队列中停留的时间超过TTL，该消息就会变成死信，并根据队列配置转发到死信队列。</li></ol><h4 id="基于RabbitMq的延迟队列"><a href="#基于RabbitMq的延迟队列" class="headerlink" title="基于RabbitMq的延迟队列"></a>基于RabbitMq的延迟队列</h4><p>延迟队列可以直接处理延迟消息，即消息在指定的延迟时间过后才被投递给消费者。在超时取消订单的场景中，订单创建时将订单信息封装成消息，并设置消息的延迟时间，当订单超时时，消息自动被投递到处理超时订单的队列，消费者接收到消息后执行取消操作。</p><p>引入依赖：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>amqp<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.7</span><span class="token punctuation">.</span><span class="token number">18</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置rabbitmq的相关参数：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost  </span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672  </span><span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">guest  </span><span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">guest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>配置延迟交换机，并且初始化延迟交换机、队列及绑定关系</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableRabbit</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ORDER_EXCHANGE <span class="token operator">=</span> <span class="token string">"order.delayed.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ORDER_QUEUE <span class="token operator">=</span> <span class="token string">"order.delayed.queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delayed-routing-key"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CustomExchange <span class="token function">delayedExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span>ORDER_EXCHANGE<span class="token punctuation">,</span> <span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">delayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>ORDER_QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">delayedBinding</span><span class="token punctuation">(</span>CustomExchange delayedExchange<span class="token punctuation">,</span> Queue delayedQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>delayedQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>delayedExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里交换机<code>exchange</code>，需要我们事先在<code>rabbitmq</code>中创建好，访问<code>http://localhost:15672/</code>在<code>Exchanges</code>中，添加<code>Exchange</code>，设置<code>type= x-delayed-message</code>，如图：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240326180810.png" alt="image.png"></p><p>在定义一个监听rabbitmq消息的监听器，当消息延迟时间到了之后，就会被该监听器见听到，在这里判断订单是否已经被支付，如果没有支付则取消。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedQueueListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderMqService orderMqService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> RabbitConfig<span class="token punctuation">.</span>ORDER_QUEUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelayedOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderMqService<span class="token punctuation">.</span><span class="token function">cancelOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在订单创建时，将订单信息发送到MQ中，等延迟时间到了之后，如果订单还没有支付，则执行取消订单操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMqService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AmqpTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">OrderMqService</span><span class="token punctuation">(</span>AmqpTemplate rabbitTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate <span class="token operator">=</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span><span class="token operator">+</span>orderId<span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"创建成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>RabbitConfig<span class="token punctuation">.</span>ORDER_EXCHANGE<span class="token punctuation">,</span> RabbitConfig<span class="token punctuation">.</span>ROUTING_KEY<span class="token punctuation">,</span> orderId<span class="token punctuation">,</span> message <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> message<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这里实现订单取消的实际逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" 在"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新订单状态、释放库存等操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们模拟创建订单请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"orderMq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqOrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderMqService orderMqService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderMqService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"订单创建成功："</span> <span class="token operator">+</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240326193632.png" alt="image.png"></p><p>可以看见订单过了5秒之后开始执行取消。</p><p>使用延迟队列方案来实现订单超时取消等场景的优点：</p><ol><li>延迟队列能够在消息到达指定时间后立刻触发处理，减少不必要的轮询查询，提高了处理效率和实时性。</li><li>订单超时处理是异步进行的，不会影响主线业务流程，有利于提升整体系统的响应速度和稳定性。</li><li>延迟队列方案使得订单创建、支付和超时取消三个环节相互独立，有利于系统的模块化和扩展性</li><li>当系统规模扩大时，可以通过增加消费者数量来应对更多的超时订单处理，实现水平扩展。</li></ol><p>但是也有一些缺点：</p><ol><li>高度依赖消息队列服务的可用性和稳定性，一旦消息队列出现故障，可能导致超时订单无法正常处理。</li><li>延迟队列方案涉及更多的中间件配置和管理，增加了系统的复杂性。</li><li>在分布式系统中，如果订单状态不仅在消息队列中维护，还要同步到数据库，需要额外保证消息队列处理和数据库操作的一致性。</li><li>虽然大部分消息队列的延迟机制相当可靠，但仍有极小概率出现消息延迟到达或丢失的情况，需要有相应的容错和补偿机制。</li></ol><p>对于延迟队列，并非只有rabbitmq才有，<code>RocketMQ</code>也有延迟队列。在<code>RocketMQ</code>中，延迟消息的发送是通过设置消息的延迟级别来实现的。每个延迟级别都对应着一个具体的延迟时间，例如 1 表示 1 秒、2 表示 5 秒、3 表示 10 秒，以此类推。用户可以根据自己的需求选择合适的延迟级别。但是也可以看出他并没有支持的那么精确，如果想要精确的就必须使用<code>RocketMQ</code>的企业版，在企业版中可以自定义设置延迟时间。这里就不过多讲解，有兴趣的可以自己研究一下。</p><h4 id="基于RabbitMq的死信队列实现"><a href="#基于RabbitMq的死信队列实现" class="headerlink" title="基于RabbitMq的死信队列实现"></a>基于RabbitMq的死信队列实现</h4><p>订单创建时，将订单信息发送到一个具有TTL的队列，当消息在队列中停留的时间超过了TTL（也就是订单的有效支付期限），消息就会变为死信。然后再配置队列，使得这些过期的死信消息被路由到一个预先设置好的死信队列。最后创建一个消费者监听这个死信队列，一旦有消息进来（即订单超时），消费者便处理这些死信，检查订单状态并执行取消操作。</p><p>使用的<code>rabbitmq</code>依赖以及配置同上使用延迟队列方案。我们来看一下创建处理订单即带有TTL的队列：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**订单队列*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ORDER_QUEUE <span class="token operator">=</span> <span class="token string">"order.queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**死信队列交换机*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"order.deadLetter.exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**死信队列*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUE <span class="token operator">=</span> <span class="token string">"order.deadLetter.queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**死信路由*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delayed-routing-key"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建订单队列     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">orderQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> 5000L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置订单队列消息有效期为30秒（可以根据实际情况调整）</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"java.lang.Long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>ORDER_QUEUE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理也是需要先创建交换机：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240326180848.png" alt="image.png"></p><p>创建订单业务类，将订单发送到订单消息队列：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMqService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AmqpTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">OrderMqService</span><span class="token punctuation">(</span>AmqpTemplate rabbitTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate <span class="token operator">=</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span><span class="token operator">+</span>orderId<span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"创建成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>RabbitMQConfig<span class="token punctuation">.</span>ORDER_QUEUE<span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这里实现订单取消的实际逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" 在"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新订单状态、释放库存等操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建死信队列，私信队列交换机，通过订单队列路由将私信队列绑定到订单订单队列中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**订单队列*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ORDER_QUEUE <span class="token operator">=</span> <span class="token string">"order.queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**死信队列交换机*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"order.deadLetter.exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**死信队列*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUE <span class="token operator">=</span> <span class="token string">"order.deadLetter.queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**死信路由*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delayed-routing-key"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建死信队列交换机     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建死信队列     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">deadLetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将死信队列与私信交换机绑定通过路由帮订单订单队列中     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingDeadLetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">deadLetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建一个死信队列消息监听器，用于判断订单是否超时：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedQueueListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderMqService orderMqService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> RabbitMQConfig<span class="token punctuation">.</span>DEAD_LETTER_QUEUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDeadLetterOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderMqService<span class="token punctuation">.</span><span class="token function">cancelOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在订单创建时，将订单信息发送到订单MQ中，等消息的TTL到期之后，会自动转到死信队列中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderMqService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AmqpTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">OrderMqService</span><span class="token punctuation">(</span>AmqpTemplate rabbitTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rabbitTemplate <span class="token operator">=</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span><span class="token operator">+</span>orderId<span class="token operator">+</span><span class="token string">"在"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"创建成功."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>RabbitMQConfig<span class="token punctuation">.</span>ORDER_QUEUE<span class="token punctuation">,</span> orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在这里实现订单取消的实际逻辑</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单"</span> <span class="token operator">+</span> orderId <span class="token operator">+</span> <span class="token string">" 在"</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"取消"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 更新订单状态、释放库存等操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们模拟创建订单接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"orderMq"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqOrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderMqService orderMqService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/create"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">createOrder</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderMqService<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"订单创建成功："</span> <span class="token operator">+</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240326192305.png" alt="image.png"></p><p>可以看见订单过了5秒之后开始执行取消。</p><p>使用死信队列实现取消超时订单的优点：</p><ol><li>死信队列可以捕获并隔离那些在原始队列中无法正常处理的消息，比如订单超时未支付等情况。这样有助于保障主业务流程不受影响，同时可以对异常情况进行统一管理和处理。</li><li>通过设置消息TTL（Time-to-Live）或最大重试次数等条件，将无法正常处理的消息转移到死信队列，可以避免消息堆积导致的资源浪费，如内存、磁盘空间等。</li><li>死信队列可以作为订单生命周期中特定阶段的处理通道，如订单超时后的处理流程，从而实现业务逻辑的清晰分离和模块化。</li><li>所有的死信消息都被记录在死信队列中，方便跟踪和分析订单处理过程中出现的问题，也有助于完善系统的监控报警和数据分析。</li><li>死信队列的处理过程也是异步进行的，不影响主线程的执行效率，增强系统的并发处理能力和响应速度。</li></ol><p>当然他也有一些缺点：</p><ol><li>相较于专门的延迟队列，死信队列机制通常不会自动将消息在特定时间后发出，需要通过设置消息TTL（过期时间）并在过期后触发转移至死信队列。这种方式对于精确到秒级别的超时处理不够友好，可能需要配合定时任务来检查即将超时的订单。</li><li>死信队列的配置相对复杂，需要设置死信交换机、绑定关系以及消息TTL等，而且在处理死信时也需要额外的逻辑判断。</li><li>如果没有妥善处理死信队列的消息，比如没有监听死信队列或者处理逻辑存在缺陷，可能会导致部分死信消息未被正确处理。</li><li>在分布式环境下，如果订单状态不仅在消息队列中维护，还涉及到数据库的更新，那么需要保证消息队列与数据库之间的事务一致性。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>订单超时自动取消是电商平台中非常重要的功能之一，通过合适的技术方案，可以实现自动化处理订单超时的逻辑，提升用户体验和系统效率。本文讨论了多种实现订单超时自动取消的技术方案，包括定时轮询、JDK的延迟队列、时间轮算法、Redis实现以及MQ消息队列中的延迟队列和死信队列。</p><ol><li><p><strong>定时轮询</strong>：基于SpringBoot的Scheduled实现，通过定时任务扫描数据库中的订单。优点是实现简单直接，但缺点是会给数据库带来持续压力，处理效率受任务执行间隔影响较大，且在高并发场景下可能引发并发问题和资源浪费。</p></li><li><p><strong>JDK的延迟队列（DelayQueue）</strong>：基于优先级队列实现，减少数据库访问，提供高效的任务处理。优点是内部数据结构高效，线程安全。缺点是所有待处理订单需保留在内存中，可能导致内存消耗大，且无持久化机制，系统崩溃时可能丢失数据。</p></li><li><p><strong>时间轮算法</strong>：通过时间轮结构实现定时任务调度，能高效处理大量定时任务，提供精确的超时控制。优点是实现简单，执行效率高，且有成熟实现库。缺点同样是内存占用和崩溃时数据丢失的问题。</p></li><li><p><strong>Redis实现</strong>：</p><ul><li><strong>有序集合（Sorted Set）</strong>：利用有序集合的特性，定时轮询查找已超时的任务。优点是查询效率高，适用于分布式环境，减少数据库压力。缺点是依赖定时任务执行频率，处理超时订单的实时性受限，且在处理事务一致性方面需要额外努力。</li><li><strong>Key过期监听</strong>：利用Redis键过期事件自动触发订单取消逻辑。优点是实时性好，资源消耗少，支持高并发。缺点是对Redis服务的依赖性强，极端情况下处理能力可能成为瓶颈，且键过期有一定的不确定性。</li></ul></li><li><p><strong>MQ消息队列</strong>：</p><ul><li><strong>延迟队列</strong>（如RabbitMQ的<code>rabbitmq_delayed_message_exchange</code>插件）：实现消息在指定延迟后送达处理队列。优点是处理高效，异步执行，易于扩展，模块化程度高。缺点是高度依赖消息队列服务，配置复杂度增加，可能涉及消息丢失或延迟风险，以及消息队列与数据库操作一致性问题。</li><li><strong>死信队列</strong>：通过设置队列TTL将超时订单转为死信，由监听死信队列的消费者处理。优点是能捕获并隔离异常消息，实现业务逻辑分离，资源保护良好，方便追踪和分析问题。缺点是相比延迟队列，处理超时不够精确，配置复杂，且同样存在消息处理完整性及一致性问题。</li></ul></li></ol><p>不同方案各有优劣，实际应用中应根据系统的具体需求、资源状况以及技术栈等因素综合评估，选择最适合的方案。在许多现代大型系统中，通常会选择消息队列的延迟队列或死信队列方案，以充分利用其异步处理、资源优化和扩展性方面的优势。</p>]]></content>
      
      
      <categories>
          
          <category> 架构之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转SpringBoot：SpringBoot的几种定时任务实现方式</title>
      <link href="/article/springbootscheduled.html"/>
      <url>/article/springbootscheduled.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在现代软件开发中，定时任务是一种常见的需求，用于执行周期性的任务或在特定的时间点执行任务。这些任务可能涉及数据同步、数据备份、报表生成、缓存刷新等方面，对系统的稳定性和可靠性有着重要的影响。<code>Spring Boot</code>提供了强大且简单的定时任务功能，使开发人员能够轻松地管理和执行这些任务。</p><p>本文将介绍 <code>Spring Boot</code>中定时任务的基本用法、高级特性以及最佳实践，帮助开发人员更好地理解和应用定时任务，提高系统的稳定性和可靠性。</p><h3 id="SpringBoot中的定时任务"><a href="#SpringBoot中的定时任务" class="headerlink" title="SpringBoot中的定时任务"></a>SpringBoot中的定时任务</h3><p><code>SpringBoot</code>中的定时任务主要通过<code>@Scheduled</code>注解以及<code>SchedulingConfigurer</code>接口实现。</p><h4 id="Scheduled注解"><a href="#Scheduled注解" class="headerlink" title="@Scheduled注解"></a>@Scheduled注解</h4><p><code>@Scheduled</code>注解是<code>Spring</code>提供的一个注解，用于标记方法作为定时任务执行。通过 <code>@Scheduled</code>注解，开发人员可以轻松地配置方法在指定的时间间隔或时间点执行，实现各种定时任务需求。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Documented</span>  <span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>Schedules<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Scheduled</span> <span class="token punctuation">{</span>    String <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上为<code>@Scheduled</code>源码中关键属性，各属性含义如下：</p><ul><li>cron: 接受标准的Unix Cron表达式，用于定义复杂的计划执行时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * cron属性可以设置指定时间执行，cron表达式跟linux一样  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0 45 14 ? * *"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fixTimeExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fixedRate: 以固定的频率执行任务，指定两次执行之间的间隔时间（单位是毫秒）。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * fixedRate属性设置每隔固定时间执行  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每隔五秒执行一次"</span> <span class="token operator">+</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fixedDelay:在每次任务完成后等待一定的时间再进行下一次执行，指定连续执行之间的延迟时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 上一次任务执行完成之后10秒后在执行  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>initialDelay:首次执行前的延迟时间。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 初始延迟1秒后开始，然后每10秒执行一次  */</span>  <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelay<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> fixedDelay<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeWithInitialAndFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里要注意fixedRate与fixedDelay的区别：<code>fixedRate</code>是基于任务开始执行的时间点来计算下一次任务开始执行的时间，因此任务的执行时间间隔是相对固定的，不受到任务执行时间的影响。如果指定的时间间隔小于任务执行的实际时间，则任务可能会并发执行。而<code>fixedDelay</code>是基于任务执行完成的时间点来计算下一次任务开始执行的时间，因此任务的执行时间间隔是相对不规则的，受到任务执行时间的影响。</p></blockquote><p><code>SpringBoot</code>支持同时定义多个定时任务方法，每个方法可以使用不同的参数配置，以满足不同的定时任务需求。同时，我们必须在配置类中使用<code>@EnableScheduling</code>注解开启定时任务。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@EnableScheduling</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledTaskConfig</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableScheduling</span>  <span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplication</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootBaseApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在SpringBoot应用程序中，除了在代码中使用注解配置定时任务外，还可以通过配置文件来配置定时任务的执行规则。这种方式更加灵活，可以在不修改源代码的情况下，动态调整定时任务的执行规则。比如我们在<code>application.properties</code>中配置<code>@Scheduled</code>的属性：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">custom.scheduled.cron</span> <span class="token punctuation">=</span> <span class="token attr-value">0/5 * * * * ?  </span><span class="token attr-name">custom.scheduled.fixedRate</span><span class="token punctuation">=</span><span class="token attr-value">5000  </span><span class="token attr-name">custom.scheduled.fixedDelay</span><span class="token punctuation">=</span><span class="token attr-value">10000  </span><span class="token attr-name">custom.scheduled.initialDelay</span><span class="token punctuation">=</span><span class="token attr-value">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>@Scheduled</code>的方法使用属性配置定时任务执行频率。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoScheduledTaskService</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SimpleDateFormat dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * fixedRate属性设置每隔固定时间执行       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRateString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.fixedRate}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每隔五秒执行一次"</span> <span class="token operator">+</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * cron属性可以设置指定时间执行，cron表达式跟linux一样       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"${custom.scheduled.cron}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fixTimeExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 上一次任务执行完成之后10秒后在执行       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelayString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.fixedDelay}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 初始延迟1秒后开始，然后每10秒执行一次       */</span>      <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>initialDelayString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.initialDelay}"</span><span class="token punctuation">,</span> fixedDelayString <span class="token operator">=</span> <span class="token string">"${custom.scheduled.fixedDelay}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeWithInitialAndFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定时间 "</span><span class="token operator">+</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，这里使用属性来指定任务执行频率时，要通过@Scheduled的fixedRateString、fixedDelayString、initialDelayString三个可以指定字符串的值的属性去指定，效果等同于long类型的属性。</p></blockquote><p>通过配置文件配置定时任务具有很高的灵活性，可以在不重新编译和部署应用程序的情况下，随时调整定时任务的执行规则。同时，也可以根据不同的环境（例如开发、测试、生产）配置不同的定时任务规则，以满足不同环境下的需求。这种方式可以有效地解耦定时任务的配置和业务代码，提高系统的灵活性和可维护性。</p><p>另外，如果希望定时任务能够异步执行，不阻塞主线程，可以在方法上同时加上<code>@Async</code>注解，这样各任务就可以异步执行了。有关SpringBoot中使用<code>@Async</code>的讲解，请移步：</p><p>虽然 <code>@Scheduled</code> 注解是一个方便的方式来定义定时任务，但它也存在一些弊端。因为任务的执行计划（如cron表达式）在编译时被硬编码，因此无法在运行时动态修改，除非重新部署。此外，@Scheduled注解对于配置不同的调度策略（如使用不同的线程池）显得力不从心，而且默认情况下，@Scheduled任务在单线程环境下执行，可能出现任务堆积的情况，尤其在任务量大或任务执行时间长的情况下，而且这些任务可能会变得混乱和难以管理。定时任务的配置分散在各个任务方法中，不利于统一管理和维护。对于需要根据动态条件创建或销毁定时任务的情况，<code>@Scheduled</code>注解也无法满足需求。</p><p>为了解决这些问题，可以使用<code>SchedulingConfigurer</code>接口来动态地创建和管理定时任务。通过实现 <code>SchedulingConfigurer</code> 接口，我们可以编写代码来动态地注册和管理定时任务，从而实现灵活的任务调度需求。接下来，我们将介绍如何使用<code>SchedulingConfigurer</code>接口来创建定时任务。</p><h4 id="SchedulingConfigurer接口"><a href="#SchedulingConfigurer接口" class="headerlink" title="SchedulingConfigurer接口"></a>SchedulingConfigurer接口</h4><p><code>SchedulingConfigurer</code> 接口是 Spring 提供的一个用于定时任务配置的扩展接口，它允许开发人员更细粒度地控制定时任务的执行。通过实现<code>SchedulingConfigurer</code>接口，可以自定义任务调度器（<code>TaskScheduler</code>），配置线程池等参数，以满足不同场景下的定时任务需求。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@EnableScheduling</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSchedulingConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定时任务逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过实现<code>SchedulingConfigurer</code>接口，重写<code>configureTasks</code>方法，自定义任务调度器的配置。此外我们还可以配置线程池，用于控制定时任务执行时的线程数量、并发性等参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">"shutdown"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ThreadPoolTaskScheduler <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ThreadPoolTaskScheduler scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      scheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程池大小  </span>    scheduler<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"scheduled-task-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程名称前缀  </span>    scheduler<span class="token punctuation">.</span><span class="token function">setAwaitTerminationSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置终止等待时间  </span>    <span class="token comment" spellcheck="true">// 设置处理拒绝执行的任务异常</span>    scheduler<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> executor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Task rejected"</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理定时任务执行过程中抛出的未捕获异常</span>    scheduler<span class="token punctuation">.</span><span class="token function">setErrorHandler</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error in scheduled task"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> scheduler<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将自定义的<code>ThreadPoolTaskScheduler</code>设置到<code>ScheduledTaskRegistrar</code>中去：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定时任务逻辑</span>    taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有关线程池的配置参数讲解，请移步：</p></blockquote><p>通过<code>SchedulingConfigurer</code>接口，可以更灵活地配置任务调度器和定时任务的执行规则，比如动态注册定时任务、动态修改任务执行规则等。</p><ul><li>动态添加定时任务<br>在<code>SchedulingConfigurer</code>的<code>configureTasks</code>方法中，我们可以根据业务需求，从数据库、配置文件或其它动态来源获取定时任务的信息（如Cron表达式、任务执行类等），然后创建对应的<code>Runnable</code>或<code>Callable</code>实例，并结合<code>Trigger</code>（如<code>CronTrigger</code>）将其添加到调度器中。相比<code>@Scheduled</code>注解，这种方式能够在应用运行时随时添加新的定时任务。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span>ScheduledTaskRegistrar taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ThreadPoolTaskScheduler scheduler <span class="token operator">=</span> <span class="token function">threadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>CronTaskInfo<span class="token operator">></span> tasksFromDB <span class="token operator">=</span> <span class="token function">listTasksFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>CronTaskInfo task <span class="token operator">:</span> tasksFromDB<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Runnable taskRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTaskExecutor</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getTaskData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          CronTrigger cronTrigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>taskRunner<span class="token punctuation">,</span> cronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于这里在应用运行时，动态的添加新的任务，我们可以通过事件驱动，轮训检查，消息队列等多种方式，监听到数据库中或者配置文件中新增任务信息，然后通过<code>SchedulingConfigurer</code>接口动态创建定时任务。而这种方式是@Scheduled注解做不到的。</p></blockquote><ul><li>修改定时任务规则<br>当任务的执行规则需要动态变更时，同样可以在<code>configureTasks</code>方法中实现。例如，从数据库获取最新的Cron表达式，然后取消当前任务并重新添加新的任务实例。需要注意的是，取消已有任务通常需要持有对该任务的引用，例如使用<code>Scheduler</code>提供的<code>unschedule</code>方法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 假设我们有一个方法用于获取更新后的任务信息  </span>CronTaskInfo updatedTask <span class="token operator">=</span> <span class="token function">getUpdatedTaskInfoFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取消旧的任务（需要知道旧任务的TriggerKey）  </span>TriggerKey triggerKey <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取旧任务的TriggerKey  </span>scheduler<span class="token punctuation">.</span><span class="token function">unschedule</span><span class="token punctuation">(</span>triggerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建新任务并设置新的Cron表达式  </span>MyTaskExecutor taskExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTaskExecutor</span><span class="token punctuation">(</span>updatedTask<span class="token punctuation">.</span><span class="token function">getTaskData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CronTrigger updatedCronTrigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>updatedTask<span class="token punctuation">.</span><span class="token function">getCronExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 重新调度新任务  </span>scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>taskRunner<span class="token punctuation">,</span> updatedCronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，我们还可以通过添加任务时对其排序或设置优先级等方式间接实现设置定时任务的执行顺序。</p><p>通过实现<code>SchedulingConfigurer</code>接口，我们可以拥有对定时任务调度的更多控制权，比如自定义线程池、动态添加任务以及调整任务执行策略。这种灵活性使得在复杂环境下，特别是需要动态管理定时任务时，<code>SchedulingConfigurer</code>成为了理想的选择。</p><h3 id="其他第三方任务调度框架"><a href="#其他第三方任务调度框架" class="headerlink" title="其他第三方任务调度框架"></a>其他第三方任务调度框架</h3><p>除了使用Spring框架提供的 <code>@Scheduled</code> 注解和<code>SchedulingConfigurer</code>接口外，还有许多第三方的任务调度库可供选择。这些库通常提供了更多的功能和灵活性，以满足各种复杂的任务调度需求。以下是一些常见的第三方任务调度库：</p><ol><li><p><strong>Quartz Scheduler</strong>：<br>  <code>Quartz</code>是一个功能强大且灵活的任务调度库，具有丰富的功能，如支持基于<code>cron</code>表达式的任务调度、集群支持、作业持久化等。它可以与<code>Spring</code>框架集成，并且被广泛应用于各种类型的任务调度应用程序中。</p></li><li><p><strong>Elastic Job</strong>：<br> <code>Elastic Job</code>是一个分布式任务调度框架，可以轻松实现分布式任务调度和作业执行。它提供了分布式任务执行、作业依赖关系、作业分片等功能，适用于大规模的分布式任务调度场景。</p></li><li><p><strong>xxl-job</strong>：<br>  <code>xxl-job</code>是一个分布式任务调度平台，提供了可视化的任务管理界面和多种任务调度方式，如单机任务、分布式任务、定时任务等。它支持任务执行日志、任务失败重试、动态调整任务执行策略等功能。</p></li><li><p><strong>PowerJob</strong>：<br>  <code>PowerJob</code>是一个开源的分布式任务调度框架，由阿里巴巴集团开发并开源。PowerJob 提供了分布式、高可用的任务调度能力，支持多种任务类型，如定时任务、延时任务、流程任务等。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>定时任务在现代软件开发中扮演着重要的角色，它们可以自动化执行各种重复性的任务，提高系统的效率和可靠性。SpringBoot提供了强大而灵活的定时任务功能，使我们能够轻松地管理和执行各种定时任务。通过<code>@Scheduled</code>注解和<code>SchedulingConfigurer</code>接口，我们可以根据需求配置定时任务的执行规则，实现各种复杂的定时任务调度需求。我们可以充分利用SpringBoot中的定时任务功能，提高系统的稳定性和可靠性，从而更好地满足业务需求。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升Spring Boot应用性能的秘密武器：揭秘@Async注解的实用技巧</title>
      <link href="/article/springbootasync.html"/>
      <url>/article/springbootasync.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在日常业务开发中，异步编程已成为应对并发挑战和提升应用程序性能的关键策略。传统的同步编程方式，由于会阻碍主线程执行后续任务直至程序代码执行结束，不可避免地降低了程序整体效率与响应速度。因此，为克服这一瓶颈，开发者广泛采用异步编程技术，将那些可能阻塞的长时间运行任务委派至后台线程处理，从而确保主线程始终保持高效和灵敏的响应能力。</p><p>而<code>SpringBoot</code>作为一款广受欢迎的应用开发框架，极大地简化了异步编程实践。其中，<code>@Async</code>注解是<code>SpringBoot</code>为实现异步编程提供的便捷工具之一。通过巧妙地应用<code>@Async</code>注解，开发者能够无缝地将方法调用转化为异步执行模式，进而增强系统的并发性能表现。</p><p>本文将深度剖析<code>SpringBoot</code>中的<code>@Async</code>注解，包括其内在原理、具体使用方法以及相关注意事项。我们将深入探讨<code>@Async</code>的工作机制，展示如何在实际的<code>SpringBoot</code>项目中有效运用该注解。</p><h3 id="Async的原理"><a href="#Async的原理" class="headerlink" title="@Async的原理"></a>@Async的原理</h3><p>在<code>SpringBoot</code>中，<code>@Async</code>注解的实现原理基于<code>Spring</code>框架的<code>AOP</code>和任务执行器（<code>Task Executor</code>）机制。</p><h4 id="Async的启用"><a href="#Async的启用" class="headerlink" title="@Async的启用"></a>@Async的启用</h4><p>开启对异步方法的支持需要在配置类上添加<code>@EnableAsync</code>注解，然后就可以激活了一个<code>Bean</code>后处理器：<code>AsyncConfigurationSelector</code>，它负责自动配置<code>AsyncConfigurer</code>，为异步方法提供所需的线程池。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227082503.png" alt="image.png"></p><p>而<code>AsyncConfigurationSelector</code>中默认使用<code>PROXY</code>的代理，即使用<code>ProxyAsyncConfiguration</code>，而<code>ProxyAsyncConfiguration</code>是用于配置Spring异步方法的代理模式的配置类。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227084444.png" alt="image.png"></p><blockquote><p>当然我们还可以指定使用另外一个代理模式：<code>AdviceMode.ASPECTJ</code>，以便使用AspectJ来进行更高级的拦截和处理。</p></blockquote><p>它继承至<code>AbstractAsyncConfiguration</code>，在<code>AbstractAsyncConfiguration</code>中配置<code>AsyncConfigurer</code>。<code>setConfigurers</code>方法用于设置异步任务执行器和异常处理器。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227090143.png" alt="image.png"></p><p><code>AsyncConfigurer</code>中提供了一种便捷的方式来配置异步方法的执行器（<code>AsyncTaskExecutor</code>）。通过实现<code>AsyncConfigurer</code>接口，可以自定义异步方法的执行策略、线程池等配置信息。默认情况下<code>Spring</code>会先搜索<code>TaskExecutor</code>类型的<code>bean</code>或者名字为<code>taskExecutor</code>的<code>Executor</code>类型的<code>bean</code>,都不存在使用<code>SimpleAsyncTaskExecutor</code>执行器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*    * 该方法用于获取一个AsyncTaskExecutor对象，用于执行异步方法。    * 可以在这个方法中创建并配置自定义的AsyncTaskExecutor，例如ThreadPoolTaskExecutor或SimpleAsyncTaskExecutor等。    */</span>    <span class="token annotation punctuation">@Nullable</span>      <span class="token keyword">default</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*    * 该方法用于获取一个AsyncUncaughtExceptionHandler对象，用于处理异步方法执行中未捕获的异常。如果异步方法执行过程中出现异常而没有被捕获，Spring会调用这个方法来处理异常。    * 可以在这个方法中返回自定义的AsyncUncaughtExceptionHandler实现，以实现对异步方法异常的处理逻辑。    */</span>    <span class="token annotation punctuation">@Nullable</span>      <span class="token keyword">default</span> AsyncUncaughtExceptionHandler <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时<code>ProxyAsyncConfiguration</code>中的<code>AsyncAnnotationBeanPostProcessor</code>会扫描应用上下文中的所有<code>Bean</code>，检查它们的方法是否标记了<code>@Async</code>注解。对于标记了<code>@Async</code>注解的方法，<code>AsyncAnnotationBeanPostProcessor</code>会创建一个代理对象，用于在调用该方法时启动一个新的线程或使用线程池执行该方法。这样就实现了异步执行的功能。同时它还负责处理<code>@Async</code>注解中的其他属性，例如设置异步方法的执行超时时间、指定线程池名称等。</p><h4 id="异步方法注解与代理"><a href="#异步方法注解与代理" class="headerlink" title="异步方法注解与代理"></a>异步方法注解与代理</h4><p>当服务类的方法被<code>@Async</code>注解修饰时，<code>Spring AOP</code>会检测到这个注解，并利用动态代理技术为该类创建一个代理对象。其他组件通过<code>Spring</code>容器调用带有<code>@Async</code>注解的方法时，实际上是调用了代理对象的方法。</p><p>一个带有<code>@Async</code>注解的方法被调用时，<code>Spring AOP</code>会拦截这个方法调用。此时就会触发处理异步调用的核心拦截器：<code>AsyncExecutionInterceptor</code>。它的主要任务是将被<code>@Async</code>修饰的方法封装成一个<code>Runnable</code>或者<code>Callable</code>任务，并将其提交给<code>TaskExecutor</code>管理的线程池去执行。这个过程确保了异步方法的执行不会阻塞调用者线程。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227185415.png" alt="image.png"></p><h4 id="TaskExecutor与线程池"><a href="#TaskExecutor与线程池" class="headerlink" title="TaskExecutor与线程池"></a>TaskExecutor与线程池</h4><p><code>TaskExecutor</code>是一个接口，定义了如何执行<code>Runnable</code>或<code>Callable</code>任务。<code>SpringBoot</code>提供了多种实现，如<code>SimpleAsyncTaskExecutor</code>、<code>ThreadPoolTaskExecutor</code>等。通常我们会自定义一个<code>ThreadPoolTaskExecutor</code>以满足特定需求，比如设置核心线程数、最大线程数、队列大小等参数，以确保异步任务能够高效并发执行。<code>AsyncExecutionInterceptor</code>将异步方法封装的任务提交给配置好的<code>TaskExecutor</code>管理的线程池执行。</p><h4 id="异步方法执行与结果返回"><a href="#异步方法执行与结果返回" class="headerlink" title="异步方法执行与结果返回"></a>异步方法执行与结果返回</h4><p>异步方法的实际执行在独立的线程中进行，不阻塞调用者线程。异步方法的返回类型可以是voi 或者具有返回值，如果异步方法有返回值，那么返回类型通常应该是<code>java.util.concurrent.Future</code>，这样调用者可以通过<code>Future</code>对象来检查异步任务是否完成以及获取最终的结果。</p><h3 id="Async使用"><a href="#Async使用" class="headerlink" title="@Async使用"></a>@Async使用</h3><p>在<code>SpringBoot</code>中，使用<code>@Async</code>注解可以轻松地将方法标记为异步执行。下面来看一下如何在<code>Spring Boot</code>项目中正确地使用<code>@Async</code>注解，包括配置方法和注意事项。</p><h4 id="在方法上添加-Async注解"><a href="#在方法上添加-Async注解" class="headerlink" title="在方法上添加@Async注解"></a>在方法上添加@Async注解</h4><p>要使用@Async注解，首先需要在要异步执行的方法上添加该注解。这样Spring就会在调用这个方法时将其封装为一个异步任务，并交给线程池执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskService</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 通过@Async 注解表明该方法是个异步方法，       * @param i       */</span>      <span class="token annotation punctuation">@Async</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeAsyncTask</span><span class="token punctuation">(</span>Integer i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 执行异步任务："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启用异步功能"><a href="#启用异步功能" class="headerlink" title="启用异步功能"></a>启用异步功能</h4><p>在<code>SpringBoot</code>应用中，需要在配置类上添加<code>@EnableAsync</code>注解来启用对异步方法的支持。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span>  <span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplication</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootBaseApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置线程池"><a href="#配置线程池" class="headerlink" title="配置线程池"></a>配置线程池</h4><p>默认情况下，<code>SpringBoot</code>会使用一个默认的线程池来执行异步任务（<code>SimpleAsyncTaskExecutor</code>）。但是，为了更好地控制线程池的行为，我们可以自定义<code>ThreadPoolTaskExecutor</code>，并通过<code>AsyncConfigurer</code>进行配置。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"MyAsyncThread-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> executor<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplicationTests</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> AsyncTaskService asyncTaskService<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            asyncTaskService<span class="token punctuation">.</span><span class="token function">executeAsyncTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227220046.png" alt="image.png"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p><code>@Async</code>必须配合<code>@EnableAsync</code>注解一起使用。两者缺一不可。</p></li><li><p>异步方法必须定义在<code>Spring Bean</code>中，因为<code>Spring AOP</code>是基于代理对象来实现的。假如我们把<code>AsyncTaskService</code>类中的<code>@Service</code>去掉。就不创建Bean。然后测试代码中修改为如下：</p></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      AsyncTaskService asyncTaskService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncTaskService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         asyncTaskService<span class="token punctuation">.</span><span class="token function">executeAsyncTask</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227221119.png" alt="image.png"></p><p>都是主线程同步方法。</p><ol start="3"><li>异步方法不能定义为private或static，因为Spring AOP无法拦截这些方法。我们修改<code>AsyncTaskService</code>类中的方法修改为<code>private</code>或者<code>static</code>，则会发生编译错误：</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227221330.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227221345.png" alt="image.png"></p><ol start="4"><li>异步方法内部的调用不能使用this关键字，因为this关键字是代理对象的引用，会导致异步调用失效。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Async method executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在同一个类中直接调用异步方法  </span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里调用不会触发异步执行  </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"callAsyncMethod executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>被<code>@Async</code>注解修饰的方法不能直接被同一个类中的其他方法调用。原因是<code>Spring</code>会在运行时生成一个代理类，调用异步方法时实际上是调用这个代理类的方法。因此，如果在同一个类中直接调用异步方法，<code>@Async</code>注解将不会生效，因为这样调用会绕过代理对象，导致异步执行失效。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTaskService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Async method executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在同一个类中直接调用异步方法  </span>        <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这里调用不会触发异步执行  </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"callAsyncMethod executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplicationTests</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> AsyncTaskService asyncTaskService<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         asyncTaskService<span class="token punctuation">.</span><span class="token function">callAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240227223539.png" alt="image.png"></p><ol start="6"><li>不同的异步方法间不要相互调用<br>异步方法间的相互调用会显著增加代码的复杂性层级，由于异步执行的本质在于即时返回并延迟完成任务，因此，嵌套或递归式的异步调用容易导致逻辑难以梳理和维护，特别是在涉及多异步操作状态追踪、顺序控制及依赖关系管理时尤为突出。</li></ol><p>当异步方法内部进一步调用其他异步方法，并且牵涉到同步资源如锁、信号量等时，极易引发死锁问题。例如，一个线程在等待自身启动的另一个异步任务结果的同时，该任务却尝试获取第一个线程所持有的锁，如此循环等待，形成无法解开的死锁。</p><p>无节制地在异步方法内部启动新的异步任务，特别是在高并发场景下，可能导致线程池资源迅速耗尽，使得系统丧失处理更多请求的能力。此外，直接的异步方法调用还增加了错误处理与日志记录的难度，特别是遇到异常情况时，往往难以追溯原始调用链路以精准定位问题源头。</p><p>若需要确保异步方法按照特定顺序执行，直接调用会导致逻辑混乱不清。为解决这一问题，通常推荐采用回调机制、Future/CompletionStage链式编程、响应式编程模型（如RxJava、Project Reactor）等方式来确保有序执行并降低耦合度。</p><p>同时，频繁且低延迟的任务间直接互相调用可能会引入额外的上下文切换开销，从而对系统的整体性能造成潜在负面影响。</p><ol start="7"><li>合理配置线程池<br><code>Spring Boot</code>默认提供的线程池配置可能无法充分满足特定应用在复杂多变生产环境下的需求，例如其预设的线程数、队列大小和拒绝策略等参数可能不尽合理。为确保资源的有效管理和精细控制，我们可以通过自定义线程池来灵活设定核心线程数、最大线程数、线程空闲超时时间、任务等待队列容量以及饱和策略（如任务拒绝策略）等关键属性，从而适应不同业务场景对并发执行任务数量及资源消耗的精准调控。</li></ol><p>另外，不同类型异步任务具有不同的执行特性：有的任务耗时较长，而有的则短促且频繁。针对这种情况，为各类任务配置独立的线程池有助于实现更好的资源隔离，避免任务间的相互影响，进而保障系统的稳定性和响应速度。同时，为了满足特定的安全规范或性能要求，自定义线程池还可以支持诸如设置守护线程、优先级、线程命名格式化等功能。</p><p>更重要的是，自定义线程池有利于系统内部执行状态的深度监控与问题诊断。通过制定合理的命名规则、详尽的日志记录以及精确的metrics统计分析，我们可以清晰洞察每个线程池的工作状况，及时发现并优化潜在的性能瓶颈。</p><p>如果不进行自定义线程池配置，仅依赖于默认或简化的线程池实现，在面对大量涌入的任务时，可能会因线程资源耗尽导致整个系统响应能力和可用性受损。因此，采用合理配置的自定义线程池能够在高负载环境下有效防范此类风险，有力支撑系统的稳健运行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 核心线程数  </span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 设置队列容量  </span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 最大线程数  </span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 自定义线程名称前缀  </span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"MyAsyncThread-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> executor<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于自定义线程池的参数讲解请参考我这篇文章：<a href="https://www.coderacademy.online/article/2d9d416b.html">重温Java基础（二）之Java线程池最全详解</a></p></blockquote><ol start="8"><li>异常处理：<br>异步方法内部的异常通常不会被调用方捕获到，因此需要在异步方法内部进行异常处理，可以通过<code>try-catch</code>块：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 异步操作代码  </span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error occurred in async method"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 其他错误处理逻辑  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用<code>@Async</code>注解的<code>exceptionHandler</code>属性来处理异常并进行适当的日志记录或错误处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskExecutorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> AsyncUncaughtExceptionHandler <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomAsyncExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 自定义异常处理器</span><span class="token keyword">class</span> <span class="token class-name">CustomAsyncExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleUncaughtException</span><span class="token punctuation">(</span>Throwable ex<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Uncaught exception in async method: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 其他错误处理逻辑  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>与事务的交互<br>默认情况下，当我们在Spring应用中使用<code>@Async</code>注解标记一个方法为异步执行时，这个方法将不会参与到其调用者所处的事务上下文中。这意味着，如果调用异步方法的方法在一个事务内执行，该事务将在调用异步方法后正常提交或回滚，但异步方法内部的操作并不会受到这个事务的影响。</li></ol><p>例如，若在同步方法中修改了数据库记录，并随后调用了一个异步方法来更新其他相关的数据，那么如果同步方法中的事务在调用异步方法后提交，而异步方法在执行过程中抛出了异常导致更新失败，这时第一部分已提交的数据和第二部分未成功更新的数据之间就会产生不一致的情况。</p><p>为了确保异步方法能够正确地参与事务管理，可以通过设置<code>@Async</code>注解的事务传播行为属性（<code>@Transactional</code>的<code>propagation</code>属性值）来解决这个问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> Propagation<span class="token punctuation">.</span>REQUIRES_NEW<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Async</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Async method executed in thread: "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 具体业务</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过设置<code>Propagation.REQUIRES_NEW</code>，指示Spring在执行异步方法时开启一个新的、与当前事务无关的事务。这样即使异步方法内部发生异常，它自己的事务会独立进行提交或回滚，从而保证了数据的一致性。不过要注意的是，这种做法可能会增加系统资源消耗，因为每次异步任务都会创建新的事务上下文。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过本文的介绍，我们了解了<code>SpringBoot</code>中<code>@Async</code>注解的原理、使用方法以及需要注意的事项。</p><p><code>@Async</code>注解能够将方法标记为异步执行，利用了<code>Spring</code>框架的<code>AOP</code>和任务执行器机制，使得异步方法能够在后台线程池中并发执行，提高系统的并发能力和响应性。</p><p>然而，在使用<code>@Async</code>注解时，需要注意避免异步方法之间相互调用，合理配置线程池，进行异常处理，处理上下文丢失以及与事务的正确交互。这些注意事项能够确保异步方法的可靠性和稳定性，提高应用程序的性能和可维护性。</p><p>总的来说，<code>@Async</code>注解是<code>SpringBoot</code>中用于实现异步方法的重要特性，能够有效地提升应用程序的性能和并发能力，但在使用时需要谨慎考虑其使用场景和注意事项，以充分发挥其优势。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 异步方法 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求求你别再用OkHttp调用API接口了，快来试试这款HTTP客户端库吧</title>
      <link href="/article/retrofit2.html"/>
      <url>/article/retrofit2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在日常业务开发中，我们时常需要使用一些其他公司的服务，调用第三方系统的接口，这时就会涉及到网络请求，通常我们可以使用<code>HttpClient</code>，<code>OkHttp</code>等框架去完成网络请求。随着RESTful API的普及，一个高效、简洁且易于维护的HTTP客户端库显得尤为关键。而本文主要介绍一款强大的网络客户端库：<code>Retrofit2</code>。</p><h3 id="Retrofit2简介"><a href="#Retrofit2简介" class="headerlink" title="Retrofit2简介"></a>Retrofit2简介</h3><h4 id="Retrofit2是什么？"><a href="#Retrofit2是什么？" class="headerlink" title="Retrofit2是什么？"></a>Retrofit2是什么？</h4><p><code>Retrofit2</code>是一个由Square公司精心打造并开源的<code>Java</code>与<code>Android</code>双平台适用的<code>RESTful API</code>客户端库，其核心构建在性能卓越的<code>OkHttp</code>库之上。通过精巧的设计原理，<code>Retrofit2</code>将原本复杂的HTTP网络请求过程高度抽象为直观且类型安全的接口调用模式，从而极大地简化了应用程序与后端API之间的交互逻辑。</p><p>开发者利用<code>Retrofit2</code>能够以注解驱动的方式来声明和定义API接口，轻松指定HTTP方法、URL路径以及请求参数等关键信息，进而自动生成相应的请求实现代码。该框架不仅支持同步及异步两种调用方式，还内置了对JSON数据序列化和反序列化的自动化处理能力，这意味着无论是发送请求还是解析响应，都能无缝转换成或从对应的Java对象进行操作。</p><p>此外，<code>Retrofit2</code>具备强大的扩展性，允许开发人员根据项目需求定制各种高级功能，如自定义转换器以适应不同数据格式，添加拦截器以实现全局请求/响应处理，以及集成多种认证机制，充分满足现代应用程序中面对复杂网络环境的各种需求。</p><h4 id="Retrofit2能做什么？"><a href="#Retrofit2能做什么？" class="headerlink" title="Retrofit2能做什么？"></a>Retrofit2能做什么？</h4><p><code>Retrofit2</code>的主要功能包括：</p><ol><li><p><strong>类型安全API设计</strong>：<code>Retrofit2</code>赋予开发者以声明式接口定义的方式来确保网络请求的类型安全性。这意味着通过在接口方法上使用注解来精确指定HTTP请求参数和响应数据结构，框架会自动进行类型校验并确保数据在传输过程中严格符合预期类型，从而消除类型不匹配引发的运行时错误。</p></li><li><p><strong>网络请求流程精简</strong>：<code>Retrofit2</code>极大地简化了发起网络请求的步骤。开发人员仅需专注于设计与后端服务交互的API接口及相应的<code>HTTP</code>动作，框架会自动生成底层逻辑代码，无需手动编写创建请求、设置<code>Header</code>或解析响应内容等繁琐环节，极大地提高了开发效率。</p></li><li><p><strong>内置数据转换机制</strong>：为便于数据处理，<code>Retrofit2</code>集成了多种数据转换器（<code>Converter</code>），能够轻松地将从服务器接收到的HTTP原始数据流转换成Java对象，支持常见的数据格式如<code>JSON</code>、<code>XML</code>以及其他可通过扩展实现的格式，这使得数据模型与实际业务逻辑之间的映射变得直观且易于管理。</p></li><li><p><strong>异步执行与回调集成</strong>：针对移动应用中避免阻塞UI线程的需求，Retrofit2全面支持异步网络请求。它允许开发者采用回调函数或者结合RxJava等反应式编程库来优雅地处理异步任务，确保即便在网络请求执行期间也能保持流畅的用户体验和应用性能。</p></li></ol><h4 id="Retrofit2的优点"><a href="#Retrofit2的优点" class="headerlink" title="Retrofit2的优点"></a>Retrofit2的优点</h4><ol><li><p><strong>代码简化与一致性</strong>：通过提供一种声明式的方式来设计和实现网络请求接口，<code>Retrofit2</code>极大地减少了开发人员在处理网络通信时所需编写的重复性代码量。开发者仅需关注业务逻辑相关的API描述，无需手动构建和管理复杂的HTTP请求。</p></li><li><p><strong>提升可读性和维护性</strong>：框架强调清晰的结构和注解驱动的配置方式，使得网络请求逻辑更加直观且易于理解，进而提高了代码的可读性和维护性。开发者能够快速识别并定位各个网络操作的意义和行为。</p></li><li><p><strong>类型安全保证</strong>：通过集成类型安全的<code>API</code>设计，<code>Retrofit2</code>消除了因参数拼写错误或类型不匹配所引发的运行时异常风险。它确保了数据交换过程中参数类型的正确性，增强了应用的整体健壮性。</p></li><li><p><strong>高效稳定集成</strong>：<code>Retrofit2</code>无缝集成了高性能的<code>OkHttp</code>库，充分利用了其在网络连接复用、缓存策略、失败重试等方面的性能优势，从而有效提升了网络请求的执行效率及服务稳定性，为应用程序提供了更强大的网络支持基础架构。</p></li></ol><h4 id="Retrofit2-VS-HttpClient"><a href="#Retrofit2-VS-HttpClient" class="headerlink" title="Retrofit2 VS HttpClient"></a>Retrofit2 VS HttpClient</h4><ol><li><p><strong>现代化的 API 设计</strong>：<br><code>Retrofit2</code> 使用现代编程风格，通过注解定义<code>HTTP</code>请求接口，代码简洁易读。相比之下，<code>HttpClient</code>需要手动构建<code>Request</code>和处理响应，代码结构更为繁琐。</p></li><li><p><strong>自动转换数据</strong>：<br><code>Retrofit2</code> 提供了内置或自定义的数据转换器，如 <code>GsonConverterFactory</code>，可以自动将<code>JSON</code>或其他格式的数据转换为 <code>Java</code>对象，简化了数据的序列化和反序列化过程。<code>HttpClient</code>则需要手动处理数据转换，操作相对繁琐。</p></li><li><p><strong>异步与同步支持</strong>：<br><code>Retrofit2</code> 支持同步和异步两种网络请求方式，提供了基于<code>Call</code>或 <code>Observable</code>等类型的异步调用方式，方便结合 <code>RxJava</code>等响应式编程框架使用，极大地提升了用户体验和应用程序性能。<code>HttpClient</code>在异步支持方面较为局限。</p></li><li><p><strong>面向接口编程</strong>：<br><code>Retrofit2</code> 通过定义服务接口来描述API端点，使得网络层与其他业务逻辑解耦，提高了代码组织性和可测试性。相比之下，<code>HttpClient</code>直接操作 <code>HttpRequest</code>和<code>HttpResponse</code>实例，耦合度较高。</p></li><li><p><strong>兼容性与性能</strong>：<br>官方不再推荐使用<code>Apache HttpClient</code>，而<code>OkHttp</code>（<code>Retrofit2</code> 底层依赖库）经过持续优化，在性能、连接复用、缓存策略以及对<code>HTTP/2</code>协议的支持等方面表现更优。</p></li><li><p><strong>易于扩展</strong>：<br><code>Retrofit2</code>可以很容易地添加拦截器（<code>Interceptor</code>）进行诸如身份验证、日志记录和重试机制等功能的扩展。虽然]<code>HttpClient</code>的扩展性也很强，但需要更多手工编码。</p></li><li><p><strong>社区活跃与更新频繁</strong>：<br><code>Retrofit2</code>和<code>OkHttp</code> 社区活跃，更新迭代较快，能快速跟进新的技术和最佳实践，确保开发者能够利用最新的技术改进和安全更新。</p></li></ol><p><code>Retrofit2</code> 在简化<code>RESTful API</code>客户端开发、提高效率、易用性、可维护性以及对现代网络特性的支持上均优于旧版的 <code>HttpClient</code>。</p><h4 id="Retrofit2-VS-OkHttp"><a href="#Retrofit2-VS-OkHttp" class="headerlink" title="Retrofit2 VS OkHttp"></a>Retrofit2 VS OkHttp</h4><ol><li><p><strong>API 接口定义简洁明了</strong>：<br>Retrofit2 使用注解（Annotations）来描述 HTTP 请求方法、URL、参数等，开发者只需通过定义 Java 接口就能清晰地表达出网络调用的意图。相比之下，OkHttp 需要开发者直接处理复杂的 HTTP 请求构建逻辑。</p></li><li><p><strong>自动序列化与反序列化</strong>：<br>Retrofit2 提供了转换器（Converter）支持，如 GsonConverterFactory、JacksonConverterFactory 等，能够自动将 JSON 或其他格式的数据转换为 Java 对象以及相反的操作，极大地简化了数据处理过程。而 OkHttp 需要开发者手动处理数据转换。</p></li><li><p><strong>同步/异步模式统一处理</strong>：<br>Retrofit2 不仅支持同步请求，还对异步请求提供了统一的 Call 或 Observable 返回类型，方便在 Android 中进行非阻塞式编程，并且易于结合 RxJava 等响应式库使用。相比之下，OkHttp 的异步请求处理需要开发者自行管理。</p></li><li><p><strong>丰富的注解体系</strong>：<br>Retrofit2 提供了多种注解以支持不同的请求类型（GET、POST、PUT、DELETE 等）、路径参数、查询参数、表单提交、文件上传、多部分请求等，可以灵活配置请求内容。而 OkHttp 的使用需要开发者手动构建请求参数和处理响应。</p></li><li><p><strong>强大的扩展性</strong>：<br>Retrofit2 支持自定义拦截器（Interceptor），可以在请求前后添加额外的业务逻辑，如认证、日志记录、缓存策略等。同时，可以自由配置 OkHttpClient 实例，充分利用 OkHttp 的所有特性，如连接池、重试机制、HTTP/2 支持等。相比之下，OkHttp 更专注于网络通信的核心功能。</p></li><li><p><strong>代码可读性强</strong>：<br>Retrofit2 将网络请求抽象成一个服务接口的形式，使得代码更易于阅读和维护，提高了整体项目的组织性和整洁度。相比之下，OkHttp 的使用需要开发者更多地关注底层的网络通信细节。</p></li><li><p><strong>降低耦合度</strong>：<br>使用 Retrofit2 可以将网络访问层与应用的其他组件更好地解耦，使得业务逻辑代码更加关注于处理业务本身，而不是如何发起网络请求。相比之下，OkHttp 的使用需要开发者更多地处理网络请求的细节，耦合度较高。</p></li></ol><p>虽然 OkHttp 是一个高性能的 HTTP 客户端，专注于网络通信的核心功能，但 Retrofit2 在此基础上封装了一层高级抽象，让开发者能以声明式的方式编写网络请求代码，降低了复杂度并提升了开发效率。</p><h3 id="Retrofit2使用"><a href="#Retrofit2使用" class="headerlink" title="Retrofit2使用"></a>Retrofit2使用</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.retrofit2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>retrofit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 示例使用jackson的converter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.squareup.retrofit2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>converter-jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义API接口"><a href="#定义API接口" class="headerlink" title="定义API接口"></a>定义API接口</h4><p>在<code>Retrofit</code>框架中，构建与服务器的通信接口是通过定义清晰、结构化的API接口来实现的。这个过程涵盖了详细指定请求方式、路径以及相关参数等关键信息。具体来说，每个接口方法代表了一种特定的HTTP交互模式，明确指示了请求类型（如<code>GET</code>、<code>POST</code>、<code>PUT</code>或<code>DELETE</code>）和目标<code>URL</code>路径。</p><h5 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h5><p>在接口方法上应用诸如 <code>@GET</code>、<code>@POST</code>、<code>@PUT</code> 和<code>@DELETE</code>等注解是为了精确映射到相应的HTTP动作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/add"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"user/info/{id}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以指定查询参数</span><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"user/list?pageSize=50"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="URL操作"><a href="#URL操作" class="headerlink" title="URL操作"></a>URL操作</h5><p>利用<code>@Path</code>、<code>@Query</code>和<code>@Body</code>注解能够进一步细化接口描述，分别用于设定路径中的动态变量、查询字符串参数以及<code>HTTP</code>请求体内容。接口方法可以接受不同类型的参数，这些参数会根据注解类型被正确地插入到请求的不同部分。<br>使用<code>@Path</code> 注解的参数会在实际调用时将传入值插入到<code>URL</code>路径中相应的位置</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以通过<code>@Query</code>参数添加查询参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">,</span> <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">)</span> Integer pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于复杂的查询参数组合，可以使用<code>Map</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">,</span> <span class="token annotation punctuation">@QueryMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h5><p>对于请求对象，可以使用<code>@Body</code>注解指定对象作为<code>HTTP</code>请求体。<code>@Body</code>注解通常用于指定将对象作为<code>JSON</code>格式的数据传输到服务器。当您在 Retrofit 接口方法中使用 <code>@Body</code>注解时，<code>Retrofit</code>将会使用内部的转换器（如<code>GsonConverter</code> 或者 <code>JacksonConverter</code>）将对象转换为<code>JSON</code> 格式的字符串，并将其作为请求的请求体发送到服务器。<br>通常情况下，<code>@Body</code>注解用于<code>POST</code> 或者<code>PUT</code>请求，其中请求的主体包含了要传输的对象的<code>JSON</code>表示形式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>通常情况下 @Body注解用于指定JSON格式的数据传输，但Retrofit并不会强制要求请求体的格式必须是JSON。您也可以使用其他格式的数据，例如XML或者纯文本，只要在请求体中提供了正确的数据格式，并且服务器能够正确地解析这种格式的数据。</p></blockquote><h5 id="表单数据和Multipart请求"><a href="#表单数据和Multipart请求" class="headerlink" title="表单数据和Multipart请求"></a>表单数据和Multipart请求</h5><p>方法还可以声明发送表单数据和多部分请求数据<br>使用<code>@FormUrlEncoded</code>，<code>@Field</code>或者<code>@FieldMap</code>将发送表单数据。</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token annotation punctuation">@FormUrlEncoded</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Field</span><span class="token punctuation">(</span><span class="token string">"passowrd"</span><span class="token punctuation">)</span> String password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@FormUrlEncoded</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@FieldMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时他还支持发送多部分请求，例如文件上传。在方法上使用<code>@Multipart</code>注解用于发送多部分请求，而参数要使用<code>@Part</code>注解。在<code>Retrofit</code>接口方法中使用<code>@Multipart</code>注解时，<code>Retrofit</code>将会使用<code>multipart/form-data</code>格式来发送请求，这种格式允许同时上传文本数据和二进制文件数据。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Multipart</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"user/image"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span> RequestBody userImage<span class="token punctuation">,</span> <span class="token annotation punctuation">@Part</span><span class="token punctuation">(</span><span class="token string">"imageDesc"</span><span class="token punctuation">)</span> RequestBody imageDesc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>@Part</code>注解用于声明每个部分的内容，其中可以是<code>RequestBody</code>类型的文本或者二进制数据，也可以是<code>MultipartBody.Part</code>类型的文件或者其他二进制数据。这样的话，就可以通过多个<code>@Part</code>注解来声明不同类型的部分，以满足不同的上传需求</p><h5 id="Header信息"><a href="#Header信息" class="headerlink" title="Header信息"></a>Header信息</h5><p>使用<code>@Headers</code>注解为方法设置静态头部。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token string">"Accept: application/json, text/plain, */*"</span><span class="token punctuation">,</span>  <span class="token string">"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36"</span><span class="token punctuation">,</span>  <span class="token string">"Cookie:xxxxxx"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用用<code>@Header</code>或者<code>HeaderMap</code>注解动态更新请求头。必须提供相应的参数给<code>@Header</code>。如果值为 <code>null</code>，则头部将被省略。否则，将对值调用<code>toString</code>，并使用结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token string">"Cookie"</span><span class="token punctuation">)</span> String cookie<span class="token punctuation">,</span> <span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"users/new"</span><span class="token punctuation">)</span>  Call<span class="token operator">&lt;</span>UserInfoResponse<span class="token operator">></span> <span class="token function">createUser2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@HeaderMap</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerMap<span class="token punctuation">,</span> <span class="token annotation punctuation">@Body</span> UserInfoRequest user<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于Header参数，我们还可以通过OkHttp的拦截器进行操作。</p></blockquote><h5 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h5><p>API接口方法通常返回 <code>Call&lt;T&gt;</code> 类型的对象，这里的T代表期望从服务器接收的数据类型。这种方式使得开发者能方便地利用 Retrofit 提供的回调机制或其他响应式编程库（如RxJava）来处理网络请求的结果，从而确保了对异步操作的良好控制和管理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"test/add"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> <span class="token function">addTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> TestRequest testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GET</span><span class="token punctuation">(</span><span class="token string">"group/{id}/users"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>User<span class="token operator">>></span> <span class="token function">groupList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Path</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> groupId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建Retrofit实例"><a href="#创建Retrofit实例" class="headerlink" title="创建Retrofit实例"></a>创建Retrofit实例</h4><p><code>Retrofit</code>框架的核心组件是<code>Retrofit</code>实例。<code>Retrofit</code>实例作为整个框架的心脏，不仅负责搭建网络请求所需的基础设施，还承担起发起请求、转换数据和管理响应生命周期的任务。</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置 API 的基础 URL</span>                <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>                 <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>JacksonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="baseUrl设置"><a href="#baseUrl设置" class="headerlink" title="baseUrl设置"></a>baseUrl设置</h5><p>其中<code>baseUrl</code>用于指定请求服务器的根地址或者<code>API</code>的基础路径。<code>Retrofit</code>会自动将<code>baseUrl</code>和方法注解中的相对路径结合起来生成实际请求的完整URL。例如对上述示例中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyClientService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@POST</span><span class="token punctuation">(</span><span class="token string">"test/add"</span><span class="token punctuation">)</span>    Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> <span class="token function">addTest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Body</span> TestRequest testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终的请求url为：<code>localhost:8080/coderacademy/test/add</code>。</p><p>关于<code>baseUrl</code>的设置有一些注意事项：</p><ul><li><p>baseUrl设置必须以<code>/</code>结尾，否则汇报错。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240221172931.png" alt="image.png"></p></li><li><p>请求方法中的相对路径（不以”/“开头），将会正确附加在以斜杠结尾的 baseUrl 的路径后面。这确保了正确的 URL 结果。如baseUrl<code>http://localhost:8080/coderacademy/</code>, 方法url为<code>test/add</code>，则最终的路径为：<code>localhost:8080/coderacademy/test/add</code>。</p></li><li><p>请求方法中的绝对路径（以”/“开头），忽略<code>baseUrl</code>中的路径组件，只保留host部分，最终的<code>URL</code>将只包含<code>baseUrl</code>的主机部分和方法的路径。如baseUrl<code>http://localhost:8080/coderacademy/</code>, 方法url为<code>/test/add</code>，则最终的路径为：<code>localhost:8080/test/add</code>。</p></li><li><p>请求方法中的路径可以是完整的<code>URL</code>，如果方法路径是完整的URL，则会替换<code>baseUrl</code>。如baseUrl为<code>http://localhost:8080/coderacademy/</code>,而方法url为<code>http://localhost:8081/coderacademy/test/add</code>，则最终的url为：<code>http://localhost:8081/coderacademy/test/add</code>。</p></li></ul><h5 id="Converter设置"><a href="#Converter设置" class="headerlink" title="Converter设置"></a>Converter设置</h5><p><code>Retrofit</code>默认只能将<code>HTTP</code>响应主体反序列化为<code>OkHttp</code>的<code>ResponseBody</code>类型，并且只能接受其<code>RequestBody</code>类型用于<code>@Body</code>注解。为了支持其他类型，可以添加转换器。</p><p>官方提供了8种转换器：</p><table><thead><tr><th>转换器</th><th>功能</th><th>使用依赖</th></tr></thead><tbody><tr><td>Gson</td><td>将 JSON 数据转换为 Java 对象，以及将 Java 对象转换为 JSON 数据。</td><td>com.squareup.retrofit2:converter-gson</td></tr><tr><td>Jackson</td><td>将JSON数据转换为 Java 对象，以及将 Java 对象转换为 JSON 数据。</td><td>com.squareup.retrofit2:converter-jackson</td></tr><tr><td>Moshi</td><td>将 JSON 数据转换为 Java 对象，以及将 Java 对象转换为 JSON 数据。</td><td>com.squareup.retrofit2:converter-moshi</td></tr><tr><td>Protobuf</td><td>将 Protocol Buffers 数据转换为 Java 对象，以及将 Java 对象转换为 Protocol Buffers 数据。</td><td>com.squareup.retrofit2:converter-protobuf</td></tr><tr><td>Wire</td><td>将 Wire 数据转换为 Java 对象，以及将 Java 对象转换为 Wire 数据。</td><td>com.squareup.retrofit2:converter-wire</td></tr><tr><td>Simple XML</td><td>将 XML 数据转换为 Java 对象，以及将 Java 对象转换为 XML 数据。</td><td>com.squareup.retrofit2:converter-simplexml</td></tr><tr><td>JAXB</td><td>将 XML 数据转换为 Java 对象，以及将 Java 对象转换为 XML 数据。</td><td>com.squareup.retrofit2:converter-jaxb</td></tr><tr><td>Scalars</td><td>将原始类型、包装类型和字符串转换为 RequestBody，以及将 ResponseBody 转换为原始类型、包装类型和字符串。</td><td>com.squareup.retrofit2:converter-scalars</td></tr><tr><td>除了官方提供的这几种转换器以外，如果使用了<code>Retrofit</code>默认不支持的内容格式的<code>API</code>进行通信（例如<code>YAML</code>、<code>TXT</code>、自定义格式），或者使用不同的库来实现现有格式(请求与响应是不同的格式)，我们也可以实现自定义转换器。</td><td></td><td></td></tr></tbody></table><p>除此之外<code>Retrofit</code>还可以跟<code>OkHttpClient</code>搭配使用，实现其高级功能，通过 <code>OkHttpClient</code>，您可以实现诸如网络连接池、超时设置、重试机制、拦截器等高级功能。而<code>Retrofit</code>则提供了简化的<code>API</code>，使得使用这些高级功能变得更加方便。</p><pre class="line-numbers language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置连接超时时间</span>    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置读取超时时间</span>    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置写入超时时间</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加日志拦截器</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置自定义的 OkHttpClient</span>    <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建请求接口实例，发起请求"><a href="#创建请求接口实例，发起请求" class="headerlink" title="创建请求接口实例，发起请求"></a>创建请求接口实例，发起请求</h4><p>在创建完<code>Retrofit</code>实例之后，接下来就需要通过调用<code>Retrofit</code>实例的<code>create()</code> 方法来创建<code>API</code>接口的实例。然后就可以使用该实例调用定义在接口中的方法来发起网络请求。</p><pre class="line-numbers language-java"><code class="language-java">MyClientService myClientService <span class="token operator">=</span> retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>MyClientService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>TestRequest testRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testRequest<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testRequest<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"12131"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发起请求</span>Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call <span class="token operator">=</span> myClientService<span class="token punctuation">.</span><span class="token function">addTest</span><span class="token punctuation">(</span>testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    Response<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否请求成功："</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"响应："</span><span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TestResponse testResponse <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求结果："</span><span class="token operator">+</span> testResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Retrofit</code>中，<code>Call</code>对象代表了一个待执行的网络请求。它是一个表示单个异步或同步执行的请求的对象。<code>Call</code>接口定义了执行网络请求和处理响应的方法。<code>Call</code>接口的泛型类型参数表示了该网络请求的响应类型。例如，<code>Call&lt;TestResponse&gt;</code> 表示该网络请求的响应是一个<code>TestResponse</code>对象响应。</p><p><code>execute()</code>方法用于同步执行网络请求，并返回一个<code>Response</code>对象。当调用<code>execute()</code>方法时，请求将立即发出，当前线程将被阻塞直到请求完成并返回响应。<code>Response</code>对象包含了网络请求的响应数据，可以通过调用<code>body()</code>方法来获取响应主体。</p><p>另外，还可以使用<code>Call</code>对象来发起异步网络请求。异步请求允许您在发出请求后继续执行其他代码，而不必等待网络请求完成。当请求完成后，<code>Retrofit</code>将在后台线程上调用您提供的回调方法，以处理响应数据。</p><pre class="line-numbers language-java"><code class="language-java">Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call <span class="token operator">=</span> myClientService<span class="token punctuation">.</span><span class="token function">addTest</span><span class="token punctuation">(</span>testRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>TestResponse<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call<span class="token punctuation">,</span> Response<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否请求成功："</span><span class="token operator">+</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"响应："</span><span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TestResponse testResponse <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求结果："</span><span class="token operator">+</span> testResponse<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>Call<span class="token operator">&lt;</span>TestResponse<span class="token operator">></span> call<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 请求失败结果</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异步请求时，需要实现<code>Callback</code>接口，该接口定义了处理成功和失败响应的方法。在 <code>onResponse</code>方法中处理成功响应，在<code>onFailure</code>方法中处理失败响应。</p><p>然后使用<code>Call</code>对象的<code>enqueue()</code>方法来执行异步网络请求，并传入<code>Callback</code>。<code>Retrofit</code>将在后台线程上执行网络请求，并在请求完成后调用相应的回调方法。</p><p>到此一个使用<code>Retrofit2</code>发起请求的功能就完成了。接下来我们看一下<code>Retrofit2</code>的一些高级功能。</p><h3 id="Retrofit2的高级功能"><a href="#Retrofit2的高级功能" class="headerlink" title="Retrofit2的高级功能"></a>Retrofit2的高级功能</h3><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><p><code>Retrofit</code>的高级功能通常需要与<code>OkHttpClient</code>结合使用才能实现。<code>OkHttpClient</code>是一个强大的<code>HTTP</code>客户端库，<code>Retrofit</code>是基于它构建的，并且<code>Retrofit</code>默认使用 <code>OkHttpClient</code>作为其底层的网络请求库。</p><p>通过<code>OkHttpClient</code>，您可以实现诸如网络连接池、超时设置、重试机制、拦截器等高级功能。而<code>Retrofit</code>则提供了简化的<code>API</code>，使得使用这些高级功能变得更加方便。</p><pre class="line-numbers language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置连接超时时间</span>    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置读取超时时间</span>    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置写入超时时间</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加日志拦截器</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置自定义的 OkHttpClient</span>    <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于拦截器，在实际开发中有较多需要使用的场景，比如第三方服务需要使用一些签名验证手段，请求数据进行加密等，我们都可以统一在拦截器中进行处理。自定义拦截器，我们需要实现<code>Interceptor</code>接口，实现<code>intercept()</code>方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAuthInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Response <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> Chain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String appKey <span class="token operator">=</span> <span class="token string">"MyKey"</span><span class="token punctuation">;</span>        String appToken <span class="token operator">=</span> <span class="token string">"MyToken"</span><span class="token punctuation">;</span>        Request request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Request<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Api-Key"</span><span class="token punctuation">,</span> appKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Api-Secret"</span><span class="token punctuation">,</span> appToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        request <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入拦截器：</p><pre class="line-numbers language-java"><code class="language-java">OkHttpClient okHttpClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置连接超时时间</span>    <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 设置读取超时时间</span>    <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 设置写入超时时间</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加日志拦截器</span>    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAuthInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h4><p>前面内容已经提到对于转换器，出了<code>Retrofit2</code>提供的8种转换器以外，有些特别的请求体这几种转换器不能满足，此时，我们可以自定义转换器。需要继承<code>Converter.Factory</code>类，重写<code>requestBodyConverter</code>与<code>reponseBodyConverter</code>方法即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomBodyConverterFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Converter<span class="token punctuation">.</span>Factory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Converter<span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> <span class="token function">responseBodyConverter</span><span class="token punctuation">(</span>Type type<span class="token punctuation">,</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations<span class="token punctuation">,</span> Retrofit retrofit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomResponseBodyConverter</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Converter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> RequestBody<span class="token operator">></span> <span class="token function">requestBodyConverter</span><span class="token punctuation">(</span>Type type<span class="token punctuation">,</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> parameterAnnotations<span class="token punctuation">,</span> Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> methodAnnotations<span class="token punctuation">,</span> Retrofit retrofit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomRequestBodyConverter</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在分别实现<code>CustomResponseBodyConverter</code>以及<code>CustomRequestBodyConverter</code>，实现请求与响应不同的转换器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRequestBodyConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>CustomRequest<span class="token punctuation">,</span> RequestBody<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ObjectMapper objectMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CustomRequestBodyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>DeserializationFeature<span class="token punctuation">.</span>FAIL_ON_UNKNOWN_PROPERTIES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span>PropertyNamingStrategy<span class="token punctuation">.</span>SNAKE_CASE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objectMapper<span class="token punctuation">.</span><span class="token function">setSerializationInclusion</span><span class="token punctuation">(</span>JsonInclude<span class="token punctuation">.</span>Include<span class="token punctuation">.</span>NON_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> RequestBody <span class="token function">convert</span><span class="token punctuation">(</span>CustomRequest CustomRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体转换逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/***响应转换器*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomResponseBodyConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>ResponseBody<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Type type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对象映射器     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Gson gson<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CustomResponseBodyConverter</span><span class="token punctuation">(</span>Type type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        GsonBuilder gsonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gson <span class="token operator">=</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">convert</span><span class="token punctuation">(</span>ResponseBody value<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体处理逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义转换器</p><pre class="line-numbers language-java"><code class="language-java">Retrofit retrofit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Retrofit<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/coderacademy/"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClient<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置自定义的 OkHttpClient</span>    <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomBodyConverterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文深入介绍了<code>Retrofit2</code>，这是由<code>Square</code>公司开源的一款面向<code>Java</code>和<code>Android</code>平台的<code>RESTful API</code>客户端库。基于强大的<code>OkHttp</code>网络库构建，<code>Retrofit2</code>通过优雅的设计理念，将复杂的<code>HTTP</code>请求抽象为类型安全且易于理解的接口调用。</p><p>在使用<code>Retrofit2</code>时，开发者可以利用注解来定义<code>API</code>接口以及配置请求方法、<code>URL</code>路径、参数等信息，大大简化了网络通信实现过程，提高了代码可读性和维护性。同时，<code>Retrofit2</code>内置了多种数据转换器（如<code>GsonConverterFactory</code>），支持<code>JSON</code>以及其他格式的数据自动序列化与反序列化，极大地降低了开发成本。</p><p><code>Retrofit2</code>不仅支持同步和异步两种请求模式，还提供了丰富的扩展机制，包括自定义转换器以适应不同数据格式，添加拦截器处理全局请求/响应逻辑，以及集成各种认证方式，满足复杂网络环境下的各类需求。</p><p>此外，本文还阐述了如何创建和配置<code>Retrofit</code>实例，给出了具体的使用示例，并深入探讨了如何利用高级功能如自定义转换器、拦截器以及进行身份验证等，进一步展示了 <code>Retrofit2</code> 在实际项目中的强大灵活性和实用性。通过本文的学习，读者将能够更加熟练地使用<code>Retrofit2</code>开发出高效、可靠的网络请求功能。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Retrofit2 </tag>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>争论不休的一个话题：金额到底是用Long还是BigDecimal？</title>
      <link href="/article/amountbigdeimallong.html"/>
      <url>/article/amountbigdeimallong.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在网上一直流传着一个争论不休的话题：金额到底是用Long还是用BigDecimal？这个话题一出在哪都会引起异常无比激烈的讨论。。。。<br>比如说这个观点：算钱用BigDecimal是常识</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409235336.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240410002736.png" alt="image.png"></p><p>有支持用Long的，将金额的单位设计为分，然后乘以100，使用Long进行存储以及计算，这样不用担心小数点问题。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409235411.png" alt="image.png"><br>并且一些银行系统就会选择用Long<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409235619.png" alt="image.png"><br>还有，最最最牛逼的万能大法：用String</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409235659.png" alt="image.png"><br>成年人不做选择题，Long跟BigDecimal都用。。。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240409235801.png" alt="image.png"><br>还有一种就是封装一个金额的基类，对金额进行统一处理。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240410003231.png" alt="image.png"></p><h2 id="排除float和double"><a href="#排除float和double" class="headerlink" title="排除float和double"></a>排除float和double</h2><p>当然，对于金额，首先我们要排除的就是float和double。它们不适合用于精确的金融计算，因为<code>float</code>和<code>double</code>是基于IEEE 754标准的浮点数表示，它们无法精确地表示所有的十进制小数。这会导致在进行财务计算时出现舍入误差，这些误差可能会累积并导致不可预测的结果。</p><blockquote><p>关于带精度的计算，我们不推荐使用float以及double，推荐使用BigDecimal，具体原因请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247483869&idx=1&sn=0313a7d9bfae7c636031a3aded4a3263&chksm=c22451aaf553d8bc689ebb5df49f7497e145b947cbb4d6d6321d9c4f3dd1fb966fbc848aec10#rd" target="_blank" rel="noopener">聊一聊_BigDecimal_使用时的陷阱</a></p></blockquote><h2 id="选择Long"><a href="#选择Long" class="headerlink" title="选择Long"></a>选择Long</h2><p><code>Long</code>类型在Java中用于存储64位整数。它的主要优点是速度快，因为整数运算在CPU层面是非常高效的。另外，<code>Long</code>类型也占用较少的内存，并且整数类型(<code>BIGINT</code>)在数据库中占用较少的存储空间。</p><p>但是<code>Long</code>类型在处理金额时有几个明显的缺点：</p><ol><li><strong>精度问题</strong>：<code>Long</code>只能存储整数，无法直接表示小数。使用<code>Long</code>来表示以分为单位的金额（例如，100表示1元），此时就会失去小数的精度。即使使用某种方式来表示小数（例如，乘以100或10000），也会遇到舍入误差的问题。并且这种计算方式也会增加计算的复杂度。</li><li><strong>浮点数问题</strong>：虽然这不是直接使用<code>Long</code>的问题，但如果你尝试将<code>Long</code>与浮点数（如<code>double</code>或<code>float</code>）进行转换以进行计算（比如汇率计算等），还是会遇到浮点数精度问题，这可能导致在财务计算中出现不可接受的误差。</li></ol><p>在阿里巴巴的开发手册中建议使用Long。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240410004725.png" alt="image.png"><br>但是在一些金融系统当中，对小数位要求比较高的，比如精确到小数点后6位，那么我们使用Long进行存储，每次在计算时都要除以或者乘以1000000，那么计算的开销就很大了。</p><p>并且，如果在需求确认时，我们无法知道金额要求的小数位，那我们使用Long也是不行的，我们并不知道需要乘以或者除以多少个0。</p><h2 id="选择BigDecimal"><a href="#选择BigDecimal" class="headerlink" title="选择BigDecimal"></a>选择BigDecimal</h2><p><code>BigDecimal</code>是Java提供的一个类，用于任意精度的算术运算。它的主要优点是提供了高精度的计算，这对于金融和货币计算来说是非常重要的。<code>BigDecimal</code>可以表示任意大小的正数、负数或零，并可以精确控制舍入行为。并且在数据库中存储时也有对应的类型进行匹配，比如MySQL的<code>DECIMAL</code>类型提供了精确的数值存储，可以匹配<code>BigDecimal</code>的精度。</p><p>但是<code>BigDecimal</code>也有一些缺点：</p><ol><li><strong>性能</strong>：与<code>Long</code>相比，<code>BigDecimal</code>的性能较差。因为它的运算需要更多的内存和CPU时间。</li><li><strong>复杂性</strong>：使用<code>BigDecimal</code>进行运算比使用<code>Long</code>或基本数据类型更复杂。你需要考虑舍入模式、精度等因素。</li><li>在数据库中需要更多的存储空间来存储小数部分。</li></ol><p>而在Mysql的开发手册中，建议金额需要进行小数位计算时，存储要使用Decimal，否则我们要将金额乘以对应小数位的倍数变成BIGINT进行存储。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240410004602.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于上述对<code>Long</code>和<code>BigDecimal</code>的优缺点分析，我们可以得出以下结论：</p><p>在金额计算层面，即代码实现中，推荐使用<code>BigDecimal</code>进行所有与金额相关的计算。<code>BigDecimal</code>提供了高精度的数值运算，能够确保金额计算的精确性，避免了因浮点数精度问题导致的财务误差。使用<code>BigDecimal</code>可以简化代码逻辑，减少因处理精度问题而引入的复杂性。</p><p>而在数据库存储方面，我们需要根据具体需求进行权衡。如果业务需求已经明确金额只需精确到分（如某些国家/地区的货币最小单位为分），并且我们确信不会涉及到需要更高精度的小数计算，那么可以使用<code>Long</code>类型进行存储，将金额转换为最小货币单位（如分）进行存储。这样可以节省存储空间并提高查询性能。</p><p>但是如果业务需求中金额的小数位数不确定，或者可能涉及多位小数的计算（如国际货币交易等），那么最好使用<code>DECIMAL</code>或<code>NUMERIC</code>类型进行存储。这些类型提供了精确的数值存储，可以确保数据库中的数据与应用程序中的<code>BigDecimal</code>对象保持一致，避免数据转换过程中可能引入的精度损失。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构设计 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团二面：SpringBoot读取配置优先级顺序是什么？</title>
      <link href="/article/springbootconfigdata.html"/>
      <url>/article/springbootconfigdata.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Spring Boot作为一种轻量级的Java应用程序框架，以其开箱即用、快速搭建新项目的特性赢得了广大开发者的青睐。其核心理念之一就是简化配置过程，使开发者能够快速响应复杂多变的生产环境需求。为了实现这一点，Spring Boot支持丰富的外部化配置机制，允许应用程序根据不同的部署环境灵活加载相应的配置属性，而无需修改代码本身。</p><p>在Spring Boot生态系统中，配置属性可以从各种来源获取，比如：Java属性文件、YAML文件、环境变量、命令行参数等。这些配置属性能够在运行时动态注入到Bean中，极大地提高了系统的可扩展性和可配置性。然而，为了确保一致性和防止配置冲突，Spring Boot在加载这些外部配置时遵循一套严格的优先级顺序。掌握这套优先级规则至关重要，因为它直接影响着最终生效的配置属性值，进而决定了应用程序的行为模式。</p><p>本文将深入探讨Spring Boot加载外部配置属性的优先级规则，详尽梳理各个配置源的加载顺序，并结合实际应用场景举例说明，以便我们能够更高效地管理和迁移配置，确保在不同环境下应用程序都能稳定、准确地运行。</p><h2 id="Spring-Boot外部化配置概述"><a href="#Spring-Boot外部化配置概述" class="headerlink" title="Spring Boot外部化配置概述"></a>Spring Boot外部化配置概述</h2><p>Spring Boot的核心价值之一在于其强大的外部化配置能力，这使得应用程序能够在不改变代码的情况下适应不同的运行环境。外部化配置意味着将应用程序的关键配置信息移至应用程序代码之外，便于根据不同环境（如开发、测试、生产等）进行定制化配置。Spring Boot提供了多样化的外部配置源以及便捷的属性注入方式，使得这种配置机制变得异常灵活且易于管理。</p><h3 id="多样化配置源"><a href="#多样化配置源" class="headerlink" title="多样化配置源"></a>多样化配置源</h3><p>Spring Boot支持多种类型的外部配置源，主要有如下几个方面：</p><ol><li><strong>Properties文件:</strong><br>通常使用<code>.properties</code>格式，采用键值对的形式存储配置信息。</li></ol><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><strong>YAML文件：</strong><br>相较于传统的properties文件，YAML提供了更直观、层次更分明的数据结构，尤其适合存储复杂配置。使用<code>.yml</code>格式。</li></ol><pre class="line-numbers language-yml"><code class="language-yml">server:  port: 8080logging:  level:    root: DEBUG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p><strong>环境变量</strong>：<br>操作系统级别的环境变量可以被Spring Boot识别并作为配置源，这对于云环境和容器化部署尤为实用。</p></li><li><p><strong>命令行参数</strong>：<br>启动Spring Boot应用时，可以传入命令行参数（以<code>--</code>开头）直接覆盖已有配置。</p></li></ol><h3 id="属性注入方式"><a href="#属性注入方式" class="headerlink" title="属性注入方式"></a>属性注入方式</h3><p>在Spring Boot中，外部配置的属性值可以通过以下几种方式方便地注入到Bean中。</p><ul><li><p><strong><code>@Value</code>注解</strong>：可以直接在字段或方法参数上使用此注解，将配置属性值注入到目标对象中。</p></li><li><p><strong><code>Environment</code>接口</strong>：Spring框架提供的环境抽象类，可以用来查询所有已加载的配置信息。</p></li><li><p><strong><code>@ConfigurationProperties</code>注解</strong>：用于绑定一组相关配置到一个专门的Java Bean中，提供更结构化的配置管理方式。</p></li></ul><h3 id="配置加载优先级"><a href="#配置加载优先级" class="headerlink" title="配置加载优先级"></a>配置加载优先级</h3><p>Spring Boot对来自不同配置源的同名属性可以按照一定的优先级顺序进行覆盖。其优先级从上到下变高，即后面的配置源将覆盖前面的配置源。</p><ol><li>默认属性（通过<code>SpringApplication.setDefaultProperties</code>方法设置）</li><li><code>@PropertySource</code>注解加载的配置</li><li>Config Data（配置数据）（本地文件系统或打包在jar中的application.properties和application-{profile}.properties）</li><li>特殊属性源（如随机数生成器、环境变量、系统属性、JNDI属性等）</li><li>Servlet容器相关的初始化参数</li><li>SPRING_APPLICATION_JSON格式的环境变量或系统属性</li><li>命令行参数</li><li>测试相关的属性注入方式（如<code>@SpringBootTest</code>、<code>@DynamicPropertySource</code>和<code>@TestPropertySource</code>）</li></ol><blockquote><p>以上优先级顺序来源于官网：<a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.external-config" target="_blank" rel="noopener">Spring Boot Reference Documentation</a></p></blockquote><h2 id="Spring-Boot配置加载顺序详解"><a href="#Spring-Boot配置加载顺序详解" class="headerlink" title="Spring Boot配置加载顺序详解"></a>Spring Boot配置加载顺序详解</h2><h3 id="默认属性"><a href="#默认属性" class="headerlink" title="默认属性"></a>默认属性</h3><p>默认属性是指Spring Boot框架内置的一些默认配置值。可以在创建<code>SpringApplication</code>实例时，通过调用<code>setDefaultProperties(Map&lt;String, Object&gt; defaultProperties)</code>方法来提供一组默认属性，这些属性将被优先加载，但是也会被其他配置覆盖。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> defaultProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">,</span> <span class="token string">"9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自定义默认端口</span>        SpringApplication app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>SpringBootBaseApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">setDefaultProperties</span><span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240403112133.png" alt="image.png"></p><h3 id="PropertySource注解"><a href="#PropertySource注解" class="headerlink" title="@PropertySource注解"></a>@PropertySource注解</h3><p><code>@PropertySource</code>注解用于在Spring Boot的<code>@Configuration</code>类上加载外部属性文件。当我们在配置类上使用<code>@PropertySource</code>时，需要注意的是，这些属性源并不会立即被添加到Spring的<code>Environment</code>中。它们是在Spring应用上下文刷新（refresh）阶段才会被真正加载并合并到环境变量中。</p><blockquote><p>有兴趣的可以跟一下源码，<code>org.springframework.context.support.AbstractApplicationContext#invokeBeanFactoryPostProcessors</code>中执行的。</p></blockquote><p>Spring Boot的主引导配置，如服务器端口（server.port）、日志框架的初始化（例如日志级别设置）等，也是在应用上下文刷新之前就被读取并应用的。因此，对于这类早期就需要读取的配置，应该直接在<code>application.properties</code>或者环境变量等更早被加载的配置源中进行设置。</p><p>我们创建一个<code>propertysource.properties</code>文件：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.port</span> <span class="token punctuation">=</span> <span class="token attr-value">9001</span><span class="token attr-name">coderacademy.name</span> <span class="token punctuation">=</span> <span class="token attr-value">CoderAcademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后我们在<code>@Configuration</code>配置上使用<code>@PropertySource</code>导入<code>propertysource.properties</code>文件。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:propertysource.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在应用启动后看一下上述配置：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBaseApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> defaultProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">,</span> <span class="token string">"9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自定义默认端口</span>        SpringApplication app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>SpringBootBaseApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">setDefaultProperties</span><span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"coderacademy.name: "</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"coderacademy.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240408192038.png" alt="image.png"></p><p>可以看出<code>server.port</code>变成了9001，即<code>@PropertySource</code>加载的配置覆盖了<code>SpringBoot</code>默认的属性值。</p><h3 id="Config-Data（配置数据）"><a href="#Config-Data（配置数据）" class="headerlink" title="Config Data（配置数据）"></a>Config Data（配置数据）</h3><p>Config Data（配置数据）是Spring Boot中用于外部化应用配置的核心部分。主要由内部配置文件以及外部配置文件。</p><h4 id="内部配置文件"><a href="#内部配置文件" class="headerlink" title="内部配置文件"></a>内部配置文件</h4><p>内部配置文件最基础的应用配置文件，位于项目构建后的jar包内部。位于<code>src/main/resource</code>目录下的文件。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240411152337.png" alt="image.png"></p><h4 id="外部配置文件"><a href="#外部配置文件" class="headerlink" title="外部配置文件"></a>外部配置文件</h4><p>可以将配置文件放在jar包外面的某个路径下。这种方式有助于在不修改jar包的情况下变更配置。比如我们使用的配置中心(<code>nacos</code>，<code>apollo</code>等)，也可以通过<code>spring.config.location</code>或者<code>spring.config.additional-location</code>指定的文件等。</p><p>SpringBoot在启动时会默认从特定的目录中加载这些配置文件。我们可以从<code>ConfigDataEnvironment</code>中找到这些目录：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240411135455.png" alt="image.png"></p><p>其目录的加载顺序由低到高为：</p><pre class="line-numbers language-text"><code class="language-text">file:./file:./config/file:./config/*/classpath:/classpath:/config/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>file</code>代表应用根目录下的文件，而<code>classpath</code>为<code>resources</code>下的文件。</p><p>这些配置文件的配置优先级顺序由低到高为：</p><pre class="line-numbers language-text"><code class="language-text">classpath:/classpath:/config/file:./file:./config/file:./config/*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>本例基于SpringBoot2.7版本。<br>关于SpringBoot加载内部配置文件的执行流程以及原理，请参考：<br><a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484003&idx=1&sn=82ae65d6e06278f1b3e79837a4b0ab7d&chksm=c2245214f553db02d60279034b92ff6b50e08379888aae54502db3a844cdaa586fb11a34f2c0#rd" target="_blank" rel="noopener">华为二面：SpringBoot读取_配置文件_的原理是什么？加载顺序是什么？</a></p></blockquote><p>我们分别在这些目录下创建配置文件<code>application.properties</code>：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240411150023.png" alt></p><p>我们在对应文件中写入他们的目录路径：</p><pre class="line-numbers language-text"><code class="language-text">1: config.data.path = classpath:./2: config.data.path = classpath:./config/3: config.data.path = file:./4: config.data.path = file:./config/5: config.data.path = file:./config/dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在SpringBoot启动时打印<code>config.data.path</code>的值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootConfigApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> defaultProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"server.port"</span><span class="token punctuation">,</span> <span class="token string">"9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自定义默认端口</span>        SpringApplication app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>SpringBootConfigApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        app<span class="token punctuation">.</span><span class="token function">setDefaultProperties</span><span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"config.data.path: "</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"config.data.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们分步进行验证，先验证1,2，打印结果:</p><pre class="line-numbers language-text"><code class="language-text">config.data.path: classpath:./config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>继续验证1,2,3，打印结果：</p><pre class="line-numbers language-text"><code class="language-text">config.data.path: file:./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证1,2,3,4,打印结果：</p><pre class="line-numbers language-text"><code class="language-text">config.data.path: file:./config/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证1,2,3,4,5,打印结果：</p><pre class="line-numbers language-tetx"><code class="language-tetx">config.data.path: file:./config/dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="随机值属性源"><a href="#随机值属性源" class="headerlink" title="随机值属性源"></a>随机值属性源</h3><p><strong>RandomValuePropertySource</strong> 在Spring Boot中，<code>RandomValuePropertySource</code>是一个特殊属性源，它并不来源于固定的配置文件或环境变量，而是由Spring Boot框架在启动时自动添加。这个属性源提供的属性名以<code>random.*</code>开头，可以用于生成随机值。例如，你可以在配置文件中引用<code>random.int</code>或<code>random.long</code>等属性，Spring Boot在启动时会为这些属性生成随机整数值。这对于需要在运行时生成一些临时或随机值的场景非常有用，如临时密码、缓存密钥等。</p><p>比如我们在<code>application.properties</code>中设置<code>random.int=100</code></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">random.int</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们在SpringBoot启动时获取``random.int`的值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SpringApplication app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>ConfigApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"random.int: "</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"random.int"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-text"><code class="language-text">random.int: -510589238<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且每次重新启动应用，打印的结果都不一样。</p><h3 id="操作系统环境变量"><a href="#操作系统环境变量" class="headerlink" title="操作系统环境变量"></a>操作系统环境变量</h3><p>在Spring Boot中，环境变量可以用作配置源，Spring Boot会自动检测并加载这些环境变量作为应用的配置属性。例如，如果在操作系统中设置了环境变量<code>MY_APP_PORT=8080</code>，那么在Spring Boot应用中可以通过<code>${MY_APP_PORT}</code>来引用这个值。</p><p> 我们设置环境变量为<code>config.data.path=环境变量</code>:</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240411161339.png" alt="image.png"></p><p>我们启动引用，依然打印<code>config.data.path</code>的结果为：</p><pre class="line-numbers language-text"><code class="language-text">config.data.path: 环境变量<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Java系统属性"><a href="#Java系统属性" class="headerlink" title="Java系统属性"></a>Java系统属性</h3><p>Java系统属性是通过<code>System.setProperty()</code>方法设置一系列键值对。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"config.data.path"</span><span class="token punctuation">,</span> <span class="token string">"SystemProperty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置系统属性</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SpringApplication app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>ConfigApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"config.data.path: "</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"config.data.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-text"><code class="language-text">config.data.path: SystemProperty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SPRING-APPLICATION-JSON环境变量中的内嵌JSON属性"><a href="#SPRING-APPLICATION-JSON环境变量中的内嵌JSON属性" class="headerlink" title="SPRING_APPLICATION_JSON环境变量中的内嵌JSON属性"></a>SPRING_APPLICATION_JSON环境变量中的内嵌JSON属性</h3><p><code>SPRING_APPLICATION_JSON</code> 是 Spring Boot 提供的一种机制，允许通过环境变量传递 JSON 格式的配置给应用程序。这个环境变量的内容会被解析成一个 JSON 对象，并合并到Spring的<code>Environment</code>中，就像其他属性源一样。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigApplication</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"config.data.path"</span><span class="token punctuation">,</span> <span class="token string">"SystemProperty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置系统属性</span>        System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"SPRING_APPLICATION_JSON"</span><span class="token punctuation">,</span> <span class="token string">"{\"config.data.path\":\"SPRING_APPLICATION_JSON环境变量中的内嵌JSON属性\"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        SpringApplication app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span>ConfigApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableApplicationContext context <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        Environment environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"config.data.path: "</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"config.data.path"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：</p><pre class="line-numbers language-text"><code class="language-text">config.data.path: SPRING_APPLICATION_JSON环境变量中的内嵌JSON属性<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a><strong>命令行参数</strong></h3><p>启动Spring Boot应用时，可以直接通过命令行参数来覆盖或设置配置属性。命令行参数通常以<code>--</code>开头，后面紧跟属性名和值，如<code>--server.port=8080</code>。这种方式可以在不修改配置文件的前提下临时调整应用配置。命令行参数具有较高的优先级，可以覆盖其它配置源中的属性值。</p><p>我们使用<code>java -jar</code>启动SpringBoot：</p><pre class="line-numbers language-shell"><code class="language-shell">java -jar ./springboot-config-1.0-SNAPSHOT.jar --config.data.path=命令行参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印结果为：</p><pre class="line-numbers language-text"><code class="language-text">config.data.path: 命令行参数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>关于SpringBoot的jar包，可以通过java -jar命令直接执行的原因请参考：<a href="https://mp.weixin.qq.com/s?__biz=MzkyNzYzMTY0MA==&mid=2247484289&idx=1&sn=67cf9ed1a2e40e4dbde835b2ee2f0682&chksm=c22453f6f553dae0dac6e7ab2dee2fef21eef3071fffe066c1dbb8d47efe90759020d099d8c8#rd" target="_blank" rel="noopener">字节二面：为什么SpringBoot的 jar 可以直接运行？我说内嵌了Tomcat容器，他让我出门左转</a></p></blockquote><p>至于其他的跟单测有关的配置，我们就不一一细说了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Boot配置加载优先级的设计具有深远的实际意义和重要性。这一机制确保了应用在不同环境和部署场景下的高度灵活性和可移植性，同时也极大提升了开发和运维团队的生产力和协同效率。</p><p>优先级顺序的严谨性使得开发者能够精细地控制配置的覆盖层级，从而使同一份代码可以根据不同环境的需求加载不同的配置属性。例如，在开发、测试和生产环境中分别启用不同的数据库连接、日志级别或API密钥等敏感信息，而无需在代码中硬编码。</p><p>Spring Boot的配置加载流程首先考虑了默认配置，然后逐步加载用户通过<code>@PropertySource</code>注解引入的属性源、打包在jar包内外的各种application.properties和application-{profile}.properties或YAML文件、环境变量、系统属性，直至命令行参数等。这种分层加载策略确保了越靠后的配置源拥有更高的优先级，从而可以覆盖之前的配置，这也体现了配置的灵活性和即时性。</p><p>理解并合理运用Spring Boot配置加载的优先级，对于保障应用的安全性、可维护性以及降低部署复杂度至关重要。特别是在大规模微服务架构中，合理的配置管理和迁移对于整体系统的稳定性有着不可忽视的作用。通过对配置优先级的深入掌控，开发者和运维人员能够轻松应对复杂环境下的配置管理挑战，使得Spring Boot应用具备良好的扩展性和适应性。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转SpringBoot：动态排除Starter配置，轻松部署</title>
      <link href="/article/springbootdynamicexclusionstarter.html"/>
      <url>/article/springbootdynamicexclusionstarter.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在软件开发中，进行本地单元测试是一项常规且必要的任务。然而，在进行单元测试时，有时需要启动一些中间件服务，如Kafka、Elasticjob等。举例来说，我曾经遇到过一个问题：项目中使用了<code>Redisson</code>锁，但由于<code>Redisson</code>版本较低，在Mac环境下偶尔会报错<code># RedisConnectionException: Unable to init enough connections amount</code>。鉴于升级版本带来的风险，以及问题仅在本地启动时出现，我决定在本地环境中排除<code>Redisson</code>的Starter，从而避免影响其他环境的配置。那么，我们应该如何做呢？</p><blockquote><p>我们以上篇介绍如何自定义Starter中的文章中示例<code>CoderAcademyStarter</code>为例。我们引入了这个starter。</p></blockquote><h3 id="Starter自动配置类的排除"><a href="#Starter自动配置类的排除" class="headerlink" title="Starter自动配置类的排除"></a>Starter自动配置类的排除</h3><p>在《SpringBoot如何自定义Starter》中，我们介绍了如何在<code>META-INF/spring.factories</code>文件中使用<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>来指定Starter的自动配置类。Spring Boot启动时会扫描所有已引入jar包中的<code>spring.factories</code>文件，并根据<code>EnableAutoConfiguration</code>键下的类来加载和执行相应的自动配置逻辑。当我们不希望应用启动时使用该Starter的功能时，就需要排除自动配置类。</p><p>我们可以通过<code>spring.autoconfigure.exclude</code>属性排除<code>CoderAcademyStarter</code>的自动配置类：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.autoconfigure.exclude</span><span class="token punctuation">=</span><span class="token attr-value">com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>spring.autoconfigure.exclude</code>是Spring Boot中的一个属性，用于指定在自动配置过程中要排除的自动配置类。通过设置该属性，我们可以明确告知Spring Boot不要自动配置指定的类，即使它们满足自动配置的条件。当需要禁用特定的自动配置类时，可以在<code>application.properties</code>或<code>application.yml</code>中设置<code>spring.autoconfigure.exclude</code>属性，并提供要排除的自动配置类的完全限定类名。这样，Spring Boot在自动配置过程中将不会考虑这些类。</p><p>此时，如果我们在使用<code>CoderAcademyService</code>时会出现错误:</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240218173015.png" alt="image.png"></p><h3 id="根据不同环境排除Starter自动配置类"><a href="#根据不同环境排除Starter自动配置类" class="headerlink" title="根据不同环境排除Starter自动配置类"></a>根据不同环境排除Starter自动配置类</h3><p>在日常开发中，我们通常需要针对不同的环境指定不同的配置。我们可以通过<code>spring.actice.profiles</code>属性来指定不同环境的配置文件的加载。例如，我们可以在本地指定<code>spring.actice.profiles=local</code>，然后创建一个<code>application-local.properties</code>的配置文件，在其中指定<code>spring.autoconfigure.exclude</code>。</p><p>另外，我们还可以实现<code>ApplicationListener&lt;ApplicationContextInitializedEvent&gt;</code>接口，通过监听上下文初始化事件来根据环境变量的标识排除Starter的自动配置类。当Spring应用程序的<code>ApplicationContext</code>被初始化时，将触发<code>ApplicationContextInitializedEvent</code>事件。通常，在应用程序的上下文初始化过程中会先加载bean定义、执行后处理器等操作。因此，通过监听<code>ApplicationContextInitializedEvent</code>事件，我们可以在Spring容器初始化的早期阶段执行一些定制化的逻辑。</p><p>我们可以通过实现<code>ApplicationListener&lt;ApplicationContextInitializedEvent&gt;</code>接口，根据一些环境变量的标识排除Starter的自动配置类。例如，我们可以定义一个<code>coderacademy.enable</code>的标识来决定是否扫描Starter。以下是一个示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ApplicationContextInitializedEvent<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>ConfigurableEnvironment<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>ApplicationContextInitializedEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationContextInitializedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigurableEnvironment environment <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"coderacademy.enable"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token string">"false"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"coderacademy.enable"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"spring.autoconfigure.exclude"</span><span class="token punctuation">,</span> <span class="token string">"com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在启动应用时，通过<code>-Dcoderacademy.enable=false</code>指定排除Starter的自动配置类。这种方式特别适用于本地启动应用时排除Starter或其他Bean的初始化。</p><p>当然本地启动也可以直接通过<code>-Dspring.autoconfigure.exclude=com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig</code>也可以满足排除Starter的配置。</p><h3 id="自定义Starter-Bean排除"><a href="#自定义Starter-Bean排除" class="headerlink" title="自定义Starter Bean排除"></a>自定义Starter Bean排除</h3><p>在《SpringBoot如何自定义Starter》文中，我们还提到了一种调用方使用Starter的方式，我们可以不是用自动配置类的Starter，可以自定义配置的信息，在手动创建Starter对应的服务的Bean。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${springboot.coderacademy.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String staterMsg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyConfig coderAcademyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>staterMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这种情况，我们可以使用Spring Boot的注解<code>@ConditionalOnProperty</code>来控制是否创建Bean。<code>@ConditionalOnProperty</code>是一个条件注解，根据配置属性的值来决定是否应该创建一个Bean或应用某个配置。具体来说，<code>@ConditionalOnProperty</code>的<code>name</code>属性表示配置属性的名称，<code>havingValue</code>属性表示配置属性的期望值，默认为<code>true</code>，<code>matchIfMissing</code>属性表示当配置属性不存在时是否匹配条件，默认为<code>false</code>。</p><p>因此，我们可以给<code>CoderAcademyService</code>的Bean添加<code>@ConditionalOnProperty</code>注解：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StarterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${springboot.coderacademy.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String staterMsg<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"coderacademy.enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyConfig coderAcademyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>staterMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我们在启动应用时可以通过<code>-Dcoderacademy.enable=false</code>变量来控制是否创建<code>CoderAcademyService</code>，而设置了<code>matchIfMissing=true</code>，即使其他环境没有该环境变量也不受影响。</p><p>除了<code>@ConditionalOnProperty</code>之外，Spring Boot还提供了其他一些条件注解，用于根据不同的条件来决定是否应该创建Bean或者是否应该应用某个配置。一些常见的条件注解包括：</p><ol><li><code>@ConditionalOnClass</code>：当类路径中存在指定的类时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnMissingClass</code>：当类路径中不存在指定的类时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnBean</code>：当容器中存在指定的Bean时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnMissingBean</code>：当容器中不存在指定的Bean时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnExpression</code>：当满足SpEL表达式定义的条件时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnJava</code>：当JVM运行的Java版本符合指定条件时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnWebApplication</code>：当运行的环境是Web应用程序时，才会创建Bean或应用配置。</li><li><code>@ConditionalOnNotWebApplication</code>：当运行的环境不是Web应用程序时，才会创建Bean或应用配置。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了在Spring Boot项目中如何排除Starter自动配置类，以及根据不同环境动态排除配置的方法。通过<code>spring.autoconfigure.exclude</code>属性和条件注解如<code>@ConditionalOnProperty</code>，我们可以灵活控制Bean的创建和配置的应用，从而更好地适应不同的部署环境和需求。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 动态排除Starter配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁Mysql中的JSON数据类型，怎一个爽字了得</title>
      <link href="/article/mysqljson.html"/>
      <url>/article/mysqljson.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在实际业务开发中，随着业务的变化，数据的复杂性和多样性不断增加。传统的关系型数据库模型在这种情况下会显得受限，因为它们需要预先定义严格的数据模式，并且通常只能存储具有相同结构的数据。而面对非结构化或半结构化数据的存储和处理需求，选择使用非关系型数据库或者创建子表存储这些变化的结构可能会变得复杂。在这种情况下，我们可以利用<code>MySQL</code>的<code>JSON</code>字段类型来解决这个问题。<code>JSON</code>字段提供了灵活的数据存储方式，能够轻松应对数据结构的变化和动态性，从而更好地满足业务需求。</p><p><code>MySQL5.7.8</code>版本引入了JSON数据类型，允许在数据库表中存储和操作符合<code>JSON</code>格式的数据。这种原生支持<code>JSON</code>（<code>JavaScript</code>对象表示法）的数据类型遵循<code>RFC 7159</code>标准，提供了有效存储复杂、半结构化数据的方式。<code>MySQL8.0</code>版本全面支持<code>JSON</code>数据类型，标志着<code>MySQL</code>在处理非结构化数据方面取得了显著进展。除了能够高效存储<code>JSON</code>文档外，<code>MySQL8.0</code>的<code>JSON</code>数据类型还引入了强大的内置函数，极大地提升了操作和查询<code>JSON</code>数据的效率和便捷性。本文我们以<code>MYSQL 8.0</code>环境研究一下它的<code>JSON</code>类型。</p><h3 id="JSON数据类型的特性"><a href="#JSON数据类型的特性" class="headerlink" title="JSON数据类型的特性"></a>JSON数据类型的特性</h3><ul><li><p>二进制存储<br>MySQL 8.0采用了一种优化的二进制格式存储JSON数据，相较于传统的字符串存储方式，这种新格式能够更迅速地读取和解析JSON文档。该格式允许服务器通过键或数组索引直接查找子对象或嵌套值，无需事先读取或解析文档中的所有值。这不仅降低了存储空间占用，还提升了查询性能。JSON列存储的JSON文档所需的空间大致与LONGBLOB或LONGTEXT相同。但要注意，存储在JSON列中的JSON文档大小受<code>max_allowed_packet</code>系统变量的限制。</p></li><li><p>自动验证<br>当插入或更新包含JSON字段的记录时，MySQL会自动验证所插入的内容是否符合JSON格式规范，确保数据的一致性和完整性。</p></li><li><p>索引支持<br>JSON列不直接索引，但可以在JSON字段中特定路径上创建索引，例如通过<code>JSON_EXTRACT()</code>函数提取出用于索引的值。此外，MySQL优化器还会寻找与JSON表达式匹配的虚拟列上的兼容索引。</p></li><li><p>部分内容更新<br>从MySQL 8.0开始，优化器可以执行JSON列的部分、原地更新，而不是完全删除旧文档并将新文档完全写入列。这种优化可以通过使用<code>JSON_SET()</code>、<code>JSON_REPLACE()</code>或<code>JSON_REMOVE()</code>等函数进行更新。</p></li><li><p>丰富的JSON函数<br>MySQL提供了一组用于操作JSON值的SQL函数，包括创建、操作和搜索。此外，还有一组用于操作GeoJSON值的空间函数。</p></li></ul><h3 id="JSON操作函数"><a href="#JSON操作函数" class="headerlink" title="JSON操作函数"></a>JSON操作函数</h3><p>MySQL提供了一组用于操作JSON值的SQL函数，包括创建、操作和搜索。</p><h4 id="1、创建JSON值"><a href="#1、创建JSON值" class="headerlink" title="1、创建JSON值"></a>1、创建JSON值</h4><ul><li>JSON_ARRAY<br>用于创建JSON数组。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_ARRAY<span class="token punctuation">(</span><span class="token punctuation">[</span>val<span class="token punctuation">[</span><span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_ARRAY<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------------------------------------+</span><span class="token operator">|</span> JSON_ARRAY<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"2024-02-05 03:29:56.000000"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_OBJECT<br>用于创建JSON对象。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_OBJECT<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">key</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">key</span><span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">SELECT</span> JSON_OBJECT<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> person<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+</span><span class="token operator">|</span> person                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+</span><span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，如果传入的不是合法的JSON格式，则会报错。</p><ul><li>JSON_QUOTE<br>用于去除JSON字符串中的引号，将一个JSON格式化的字符串转换为常规的数据库内可直接使用的字符串。当从JSON文档中提取出一个原本被双引号包围的字符串时，此函数会移除这些引号，从而便于后续对提取出的数据进行进一步的SQL操作或者与其他非JSON字段进行比较。</li></ul><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'CoderAcademy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'"CoderAcademy"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+------------------------------+</span><span class="token operator">|</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'CoderAcademy'</span><span class="token punctuation">)</span> <span class="token operator">|</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'"CoderAcademy"'</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+------------------------------+</span><span class="token operator">|</span> <span class="token string">"CoderAcademy"</span>             <span class="token operator">|</span> <span class="token string">"\"CoderAcademy\""</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'[1, 2, 3]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json1 <span class="token punctuation">,</span>JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'["a", "b","c"]'</span><span class="token punctuation">)</span>  <span class="token keyword">AS</span> json2<span class="token punctuation">,</span> JSON_QUOTE<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">)</span>  <span class="token keyword">AS</span> json3<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------+------------------------+--------------------------------------------+</span><span class="token operator">|</span> json1       <span class="token operator">|</span> json2                  <span class="token operator">|</span> json3                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------+------------------------+--------------------------------------------+</span><span class="token operator">|</span> <span class="token string">"[1, 2, 3]"</span> <span class="token operator">|</span> <span class="token string">"[\"a\", \"b\",\"c\"]"</span> <span class="token operator">|</span> <span class="token string">"{\"name\":\"CoderAcademy\", \"age\": 30}"</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------+------------------------+--------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CAST(value AS JSON)<br>在MySQL8.0中，CAST(value AS JSON)函数会尝试将给定的值转化为一个有效的JSON格式字符串。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">CAST<span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span><span class="token string">'["apple", "banana", "cherry"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span> <span class="token keyword">AS</span> json1<span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span> <span class="token keyword">AS</span> JSON <span class="token punctuation">)</span> <span class="token keyword">AS</span> json2<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------------------------------------+</span><span class="token operator">|</span> json1                         <span class="token operator">|</span> json2                               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span> <span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------+-------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，如果要转换的值不符合JSON格式规范，则会抛出错误。例如：<code>NULL</code>、不合法的JSON字符串或其他非转换类型的值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> cast<span class="token punctuation">(</span><span class="token string">'NULL'</span> <span class="token keyword">AS</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>ERROR <span class="token number">3141</span> <span class="token punctuation">(</span><span class="token number">22032</span><span class="token punctuation">)</span>: Invalid JSON <span class="token keyword">text</span> <span class="token operator">in</span> argument <span class="token number">1</span> <span class="token keyword">to</span> <span class="token keyword">function</span> cast_as_json: <span class="token string">"Invalid value."</span> at position <span class="token number">0</span><span class="token punctuation">.</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age"}'</span> <span class="token keyword">AS</span> JSON <span class="token punctuation">)</span><span class="token punctuation">;</span>ERROR <span class="token number">3141</span> <span class="token punctuation">(</span><span class="token number">22032</span><span class="token punctuation">)</span>: Invalid JSON <span class="token keyword">text</span> <span class="token operator">in</span> argument <span class="token number">1</span> <span class="token keyword">to</span> <span class="token keyword">function</span> cast_as_json: <span class="token string">"Missing a colon after a name of object member."</span> at position <span class="token number">29</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_TYPE<br>用于查询JSON值类型的内置函数。该函数返回一个表示给定JSON值基本类型的字符串。<br>语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_TYPE<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>“NULL”：如果路径指向的值是JSON <code>null</code>。</li><li>“OBJECT”：如果路径指向的是一个JSON对象（键值对集合）。</li><li>“ARRAY”：如果路径指向的是一个JSON数组。</li><li>“STRING”：如果路径指向的是一个JSON字符串。</li><li>“NUMBER”：如果路径指向的是一个JSON数字（包括整数和浮点数）。</li><li>“TRUE” 或 “FALSE”：如果路径指向的是布尔值 <code>true</code> 或 <code>false</code>。</li></ol><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_TYPE<span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_null<span class="token punctuation">,</span> JSON_TYPE<span class="token punctuation">(</span><span class="token string">'["a", "b","c"]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_array<span class="token punctuation">,</span> JSON_TYPE<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_object<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------+-------------+</span><span class="token operator">|</span> json_null <span class="token operator">|</span> json_array <span class="token operator">|</span> json_object <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------+-------------+</span><span class="token operator">|</span> <span class="token boolean">NULL</span>      <span class="token operator">|</span> ARRAY      <span class="token operator">|</span> OBJECT      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、合并JSON"><a href="#2、合并JSON" class="headerlink" title="2、合并JSON"></a>2、合并JSON</h4><ul><li>JSON_MERGE_PRESERVE<br>用于合并两个或多个JSON文档的函数。并保留所有键值对。<br>语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_MERGE_PRESERVE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> json_doc<span class="token punctuation">[</span><span class="token punctuation">,</span> json_doc<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PRESERVE<span class="token punctuation">(</span><span class="token string">'["a", 1]'</span><span class="token punctuation">,</span> <span class="token string">'{"key": "value"}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token operator">|</span> json_value                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> {<span class="token string">"key"</span>: <span class="token string">"value"</span>}<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在处理重复键时，如果是合并对象(JOSN_OBJECT)，将value自动包装为数组，并通过组合值的方式合并数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PRESERVE<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">,</span> <span class="token string">'{"name":"CoderAcademy", "age": 35}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------------------+</span><span class="token operator">|</span> json_value                                                  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token punctuation">[</span><span class="token string">"CoderAcademy"</span><span class="token punctuation">,</span> <span class="token string">"CoderAcademy"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是合并数组(JSON_ARRAY)，将它们的值组合成一个数组，作为结果中该键的值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PRESERVE<span class="token punctuation">(</span><span class="token string">'{"hobbies":["Java", "Mysql"]}'</span><span class="token punctuation">,</span> <span class="token string">'{"hobbies":["Python", "Mysql"]}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------------------+</span><span class="token operator">|</span> json_value                                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Mysql"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Mysql"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MySQL 8.0.3以后支持</p></blockquote><ul><li>JSON_MERGE_PATCH<br>用于合并两个或多个JSON文档的函数。仅保留最后一个值。<br>语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_MERGE_PATCH<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> json_doc<span class="token punctuation">[</span><span class="token punctuation">,</span> json_doc<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PATCH<span class="token punctuation">(</span><span class="token string">'["a", 1]'</span><span class="token punctuation">,</span> <span class="token string">'{"key": "value"}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+</span><span class="token operator">|</span> json_value       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+</span><span class="token operator">|</span> {<span class="token string">"key"</span>: <span class="token string">"value"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_MERGE_PATCH<span class="token punctuation">(</span><span class="token string">'{"name":"CoderAcademy", "age": 30}'</span><span class="token punctuation">,</span> <span class="token string">'{"name":"CoderAcademy", "age": 35}'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> json_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------+</span><span class="token operator">|</span> json_value                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">35</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>MySQL 8.0.3以后支持</p></blockquote><h4 id="3、JSON搜索"><a href="#3、JSON搜索" class="headerlink" title="3、JSON搜索"></a>3、JSON搜索</h4><ul><li>JSON_CONTAINS<br>MySQL8.0中引入的用于检查 JSON 数组或对象是否包含特定值或键值对的函数。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_CONTAINS<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> candidate<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>json_doc</code>是要检查的JSON文档，通常是一个列名或者JSON字符串表达式。<code>candidate</code>是要查找的值。而<code>path</code>（可选）指定在 JSON 文档中的路径，用于更精确地定位要检查的元素，如果没有指定路径，则在整个JSON文档中搜索给定的候选值。<br><code>JSON_CONTAINS</code>函数返回<code>1</code>表示包含，返回<code>0</code>表示不包含。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span><span class="token string">'{"a": 1, "b": 2, "c": {"d": 4}}'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'$.a'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> contains_value<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> contains_value <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span>              <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span><span class="token string">'[ "apple", "banana", "cherry" ]'</span><span class="token punctuation">,</span> <span class="token string">'"apple"'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> contains_apple<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span> contains_apple <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token operator">|</span>              <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span><span class="token string">'{"fruits": ["apple", "banana", "cherry"]}'</span><span class="token punctuation">,</span> <span class="token string">'"apple"'</span><span class="token punctuation">,</span> <span class="token string">'$.fruits'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> contains_apple_in_path<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+</span><span class="token operator">|</span> contains_apple_in_path <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+</span><span class="token operator">|</span>                      <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'"apple"'</span><span class="token punctuation">,</span> <span class="token string">'$.fruits'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> json_data                                 <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">07</span>:<span class="token number">28</span>:<span class="token number">40</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------------------------------------+---------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特别需要注意的是：<strong>在使用<code>JSON_CONTAINS</code>时，注意数据类型的匹配，确保值的类型与JSON中的类型一致。</strong> JSON_CONTAINS参数传递匹配值是<code>&#39;&#39;</code>并不代表他是一个字符串，例如上述第一个例子：我们搜索<code>1</code>，使用<code>&#39;1&#39;</code>，搜索<code>apple</code>时，使用<code>&#39;&quot;apple&quot;&#39;</code>。</p><p>同时<code>JSON_CONTAINS()</code>不支持对嵌套JSON文档进行递归搜索，它只针对JSON路径指定的位置进行比较。</p><ul><li>JSON_CONTAINS_PATH<br>用于检查JSON文档中是否存在指定路径的函数。与<code>JSON_CONTAINS()</code>函数不同，<code>JSON_CONTAINS_PATH()</code> 不检查路径对应的值是否匹配某个特定值，而是仅判断JSON文档内是否存在指定的路径结构。语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> one_or_all<span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>是待检查的目标JSON文档。<code>one_or_all</code>是一个字符串参数，可以是 <code>&#39;one&#39;</code> 或 <code>&#39;all&#39;</code>，<code>&#39;one&#39;</code>表示只要存在任意一个提供的路径就返回1（真），<code>&#39;all&#39;</code> 表示所有提供的路径都必须存在才返回1（真）。<code>path</code>：一个或多个JSON路径表达式，用于在JSON文档内部定位要检查的路径。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@json_data</span> <span class="token operator">=</span> <span class="token string">'{"name":"John","age":30,"hobbies":["reading","coding"],"address":{"city":"New York","country":"USA"}}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span><span class="token variable">@json_data</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> has_name<span class="token punctuation">,</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span><span class="token variable">@json_data</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.address.country'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> has_country<span class="token punctuation">,</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span><span class="token variable">@json_data</span><span class="token punctuation">,</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies[0]'</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies[1]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> has_both_hobbies<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------------------+</span><span class="token operator">|</span> has_name <span class="token operator">|</span> has_country <span class="token operator">|</span> has_both_hobbies <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------------------+</span><span class="token operator">|</span>        <span class="token number">1</span> <span class="token operator">|</span>           <span class="token number">1</span> <span class="token operator">|</span>                <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+-------------+------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.address.country'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------------------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> json_data                                                                                                        <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------------------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> {<span class="token string">"age"</span>: <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"name"</span>: <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"address"</span>: {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"USA"</span>}<span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"reading"</span><span class="token punctuation">,</span> <span class="token string">"coding"</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">07</span>:<span class="token number">25</span>:<span class="token number">47</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+------------------------------------------------------------------------------------------------------------------+---------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_EXTRACT<br>从JSON字段中提取指定路径的值。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_EXTRACT<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>是包含JSON数据的列名或者直接的JSON字符串。<code>path</code>是一个或多个以逗号分隔的JSON路径表达式，用于指定要提取的值的位置。路径可以使用点<code>.</code>和方括号<code>[]</code>来表示对象属性和数组索引。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@user_info</span> <span class="token operator">=</span> <span class="token string">'{"name":"John Doe","age":30,"hobbies":["reading","coding"],"address":{"street":"123 Main St","city":"New York"}}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> name<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.age'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> age<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies[0]'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> first_hobby<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_EXTRACT<span class="token punctuation">(</span><span class="token variable">@user_info</span><span class="token punctuation">,</span> <span class="token string">'$.address.city'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> city<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> name       <span class="token operator">|</span> age  <span class="token operator">|</span> first_hobby <span class="token operator">|</span> city       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> <span class="token string">"John Doe"</span> <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token string">"reading"</span>   <span class="token operator">|</span> <span class="token string">"New York"</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span>            <span class="token keyword">AS</span> name<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>        JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.age'</span><span class="token punctuation">)</span>             <span class="token keyword">AS</span> age<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>        JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies[0]'</span><span class="token punctuation">)</span>      <span class="token keyword">AS</span> first_hobby<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>        JSON_EXTRACT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.address.city'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> city    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">FROM</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> name       <span class="token operator">|</span> age  <span class="token operator">|</span> first_hobby <span class="token operator">|</span> city       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token operator">|</span> <span class="token string">"John Doe"</span> <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token string">"reading"</span>   <span class="token operator">|</span> <span class="token string">"New York"</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">"John"</span>     <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token string">"reading"</span>   <span class="token operator">|</span> <span class="token string">"New York"</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+------+-------------+------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们介绍一下path中的一些规则：</p><ol><li>点<code>.</code>运算符<br>用于访问嵌套的对象属性。例如：<code>$.name</code> 表示访问顶级对象的 “name” 属性。</li><li>方括号<code>[]</code>运算符<br>用于访问数组元素。对于数组索引，使用数字表示位置，从0开始。例如：<code>$.hobbies[0]</code> 表示访问顶级对象 “hobbies” 数组的第一个元素。</li><li>多路径查询<br>在一个函数调用中可以指定多个路径，每个路径之间用逗号分隔。例如：<code>JSON_EXTRACT(json_column, &#39;$.path1&#39;, &#39;$.path2&#39;)</code>。</li></ol><ul><li>JSON_KEYS<br>用于从JSON文档中提取所有键（key）的一个函数，它返回一个包含JSON对象所有键名的数组。这对于需要获取或操作JSON对象内部属性名称时非常有用。语法结构：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_KEYS<span class="token punctuation">(</span>json_doc<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>是包含JSON数据的列名或者直接的JSON字符串。<code>path</code>（可选参数）如果提供了路径，则只返回该路径指向的对象内的键。例如，若要提取嵌套在 JSON 文档内某个对象的所有键，可以指定到该对象的路径。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_KEYS<span class="token punctuation">(</span>json_data<span class="token punctuation">)</span> <span class="token keyword">AS</span> top_level_keys <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------+</span><span class="token operator">|</span> top_level_keys                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"address"</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"fruits"</span><span class="token punctuation">]</span>                            <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_KEYS<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.address'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> address_keys <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> JSON_CONTAINS_PATH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'$.address'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span><span class="token operator">|</span> address_keys        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"street"</span><span class="token punctuation">]</span>  <span class="token operator">|</span><span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"country"</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_OVERLAPS<br>该函数会检查两个JSON对象，并返回布尔值。如果至少有一个键存在于两个对象中且对应值相等，则返回真（1），否则返回假（0）。这个函数并不关注两个JSON对象的所有内容，仅针对有交集的键值对进行比较。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_OVERLAPS<span class="token punctuation">(</span>json_doc1<span class="token punctuation">,</span> json_doc2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@doc1</span> <span class="token operator">=</span> <span class="token string">'{"name": "John", "age": 30}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token variable">@doc2</span> <span class="token operator">=</span> <span class="token string">'{"name": "John", "address": "New York"}'</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> JSON_OVERLAPS<span class="token punctuation">(</span><span class="token variable">@doc1</span><span class="token punctuation">,</span> <span class="token variable">@doc2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> do_overlap<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+</span><span class="token operator">|</span> do_overlap <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+</span><span class="token operator">|</span>          <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，如果两个JSON对象没有共享的键，或者共享的键对应的值不相等，则此函数返回0。此外，它只适用于JSON对象，对于JSON数组则不会进行这样的比较。</p><blockquote><p>MySQL 8.0.17以后才有这个函数</p></blockquote><ul><li>JSON_SEARCH<br>用于在JSON文档中搜索指定的字符串值，并返回找到该值的第一个匹配路径。这个函数对于从JSON数据结构中检索特定值非常有用。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_SEARCH<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> one_or_all<span class="token punctuation">,</span> search_str<span class="token punctuation">[</span><span class="token punctuation">,</span> escape_char<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>包含要搜索的JSON数据的列名或JSON字符串。<code>one_or_all</code>表示搜索模式，可以是 <code>&#39;one&#39;</code> 或 <code>&#39;all&#39;</code>,如果是<code>&#39;one&#39;</code>（默认）则只要找到一个匹配就返回第一个匹配的路径，如果没有找到则返回NULL，如果是<code>&#39;all&#39;</code>则返回所有匹配路径的JSON数组，如果没有找到则返回NULL。<code>search_str</code>是要在JSON文档中查找的字符串值。<code>escape_char</code>（可选）代表如果搜索字符串中有特殊字符需要转义，可以提供一个转义字符。<code>path</code>（可选）可以指定一个或多个JSON路径，限制搜索范围到这些路径所指向的对象或数组元素。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_SEARCH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'John'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> name_path<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_SEARCH<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'New York'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> main_street_path    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------------+</span><span class="token operator">|</span> name_path <span class="token operator">|</span> main_street_path <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------------+</span><span class="token operator">|</span> <span class="token boolean">NULL</span>      <span class="token operator">|</span> <span class="token string">"$.address.city"</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token string">"$.name"</span>  <span class="token operator">|</span> <span class="token string">"$.address.city"</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token boolean">NULL</span>      <span class="token operator">|</span> <span class="token boolean">NULL</span>             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------+------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，<code>JSON_SEARCH()</code>主要适用于搜索字符串类型的值，在MySQL 8.0及以前版本中，它不支持直接搜索数值型或其他非字符串类型的内容。此外，该函数可能无法处理嵌套的JSON对象或数组内的复杂搜索场景，因为它只能返回单个键值对路径，而不是深度遍历整个JSON结构以寻找匹配项。</p><ul><li>JSON_VALUE<br>用于从JSON文档中提取标量值的一个函数。它允许你从JSON数据结构中检索出符合SQL数据类型的特定键的值，并将其转换为一个可直接在SQL语句中使用的标准SQL数据类型（如字符串、数字或布尔值）。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_VALUE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>JSON_VALUE()</code> 返回的是位于给定路径下的JSON文档中的标量值（即字符串、数字或布尔值），而不是JSON格式的值。这与 <code>JSON_EXTRACT()</code> 函数不同，后者返回的是JSON格式的值，即使提取的是标量值也是如此。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_VALUE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> name<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_VALUE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.age'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> age<span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>   JSON_VALUE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.is_student'</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> is_student    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">FROM</span> test_json<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------+</span><span class="token operator">|</span> name     <span class="token operator">|</span> age  <span class="token operator">|</span> is_student <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------+</span><span class="token operator">|</span> John Doe <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> John     <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> <span class="token boolean">NULL</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span> John Doe <span class="token operator">|</span> <span class="token number">30</span>   <span class="token operator">|</span> <span class="token boolean">true</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------+------+------------+</span><span class="token number">4</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数简化了JSON数据在SQL查询中的处理，特别是当你需要将JSON字段的值作为普通SQL数据类型进行比较、聚合或其他操作时。</p><blockquote><p>MySQL 8.0.21版本开始提供JSON_VALUE</p></blockquote><h4 id="4、JSON数据修改"><a href="#4、JSON数据修改" class="headerlink" title="4、JSON数据修改"></a>4、JSON数据修改</h4><ul><li>JSON_ARRAY_APPEND<br>用于向JSON数组末尾追加元素的函数。这个函数允许你在现有的JSON数组中添加新的元素，无论是标量值还是嵌套的JSON对象或数组。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_ARRAY_APPEND<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>指包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表一个JSON路径表达式，指向要追加元素到其后的JSON数组。而<code>value</code>就是要追加到指定路径下JSON数组中的值，可以是标量值（如字符串、数字、布尔值），也可以是另一个JSON对象或数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span><span class="token operator">|</span> json_data                                 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_APPEND<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.02</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------------------------------+</span><span class="token operator">|</span> json_data                                           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一点需要注意，如果<code>path</code>所指的对象不是一个数组，那么在进行追加操作之前，MySQL会将该对象转换为一个只有一个元素的新数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_APPEND<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"cherry"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此函数适用于需要动态修改和扩展数据库内存储的JSON数组的情况，特别是在处理具有可变长度列表的数据时特别有用。</p><ul><li>JSON_ARRAY_INSERT<br>用于向JSON数组的特定位置插入元素的函数。这个函数允许你在现有的JSON数组的指定索引处插入一个新元素，这个元素可以是单个元素值、JSON数组、JSON对象。语法格式：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_ARRAY_INSERT<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。而<code>path</code>是一个JSON路径表达式，指向要插入元素的JSON数组，并且可以指定要插入的位置（通过数组索引）。而<code>value</code>就是要插入到指定路径下JSON数组中的值，可以是普通值（如字符串、数字、布尔值），也可以是另一个JSON对象或数组。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[0]'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"cherry"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 插入一个数组</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_ARRAY_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[0]'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'["cherry", "orange"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"cherry"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_INSERT<br>用于向JSON文档插入新键值对或替换已存在键的值的一个函数。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_INSERT<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。而<code>path</code>是一个JSON路径表达式，指向要插入元素的JSON数组，并且可以指定要插入的位置（通过数组索引）。而<code>value</code>就是要插入到指定路径下JSON数组中的值，可以是普通值（如字符串、数字、布尔值），也可以是另一个JSON对象或数组。</p><p>如果在JSON文档中，路径已存在，则不会覆盖现有的文档值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果指定的路径不存在于原始JSON文档中，则会在该路径处创建新的键值对。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> json_data                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_INSERT<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'["Java", "Python"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.address'</span><span class="token punctuation">,</span> cast<span class="token punctuation">(</span><span class="token string">'{"city": "New York", "street": "123 Main St"}'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                                                                                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span><span class="token punctuation">,</span> <span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"address"</span>: {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span>}<span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_REMOVE<br>用于从 JSON 文档中删除数据。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_REMOVE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表删除数据的路径。</p><p>如果路径存在，则会删除路径对应的元素，否则对数据没有影响，即不会删除，也不会报错。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> json_data                       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">---------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> json_data             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REMOVE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> json_data             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">-----------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_REPLACE<br>函数用于替换 JSON 文档中的现有值。语法结构如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_REPLACE<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表替换数据的路径。<code>val</code>代表要替换的值。</p><p>如果替换路径在文档中存在，则就用新值覆盖文档中原值，否则不会替换，也不会报错。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REPLACE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_REPLACE<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span> <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span>  CAST<span class="token punctuation">(</span><span class="token string">'["Java", "Python"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>JSON_SET<br>用于在 JSON 文档中插入或更新数据。语法格式如下：</li></ul><pre class="line-numbers language-sql"><code class="language-sql">JSON_SET<span class="token punctuation">(</span>json_doc<span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">[</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>json_doc</code>代表包含JSON数据的列名或者直接的JSON字符串。<code>path</code>代表替换数据的路径。<code>val</code>代表要插入或更新的新值。</p><p>如果路径在文档中已存在，则会覆盖原文档中值，如果不存在，则插入新值。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> json_data                                          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token string">"Java"</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> test_json    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SET</span> json_data <span class="token operator">=</span> JSON_SET<span class="token punctuation">(</span>json_data<span class="token punctuation">,</span> <span class="token string">'$.fruits[1]'</span><span class="token punctuation">,</span> <span class="token string">'orange'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.hobbies'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'["Java", "Python"]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.name'</span><span class="token punctuation">,</span> <span class="token string">'CoderAcademy'</span><span class="token punctuation">,</span>    <span class="token operator">-</span><span class="token operator">></span>     <span class="token string">'$.address'</span><span class="token punctuation">,</span> cast<span class="token punctuation">(</span><span class="token string">'{"city": "New York", "street": "123 Main St"}'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span class="token keyword">Rows</span> <span class="token keyword">matched</span>: <span class="token number">1</span>  Changed: <span class="token number">1</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> json_data <span class="token keyword">FROM</span> test_json <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> json_data                                                                                                                                        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token operator">|</span> {<span class="token string">"name"</span>: <span class="token string">"CoderAcademy"</span><span class="token punctuation">,</span> <span class="token string">"fruits"</span>: <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"address"</span>: {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span>}<span class="token punctuation">,</span> <span class="token string">"hobbies"</span>: <span class="token punctuation">[</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span>} <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">--------------------------------------------------------------------------------------------------------------------------------------------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON类型列的索引"><a href="#JSON类型列的索引" class="headerlink" title="JSON类型列的索引"></a>JSON类型列的索引</h3><p>在 MySQL 8.0 中，JSON 类型的索引有一些重要的改进和新特性。JSON 类型的索引使得在处理包含 JSON 数据的列时，查询的性能得到了显著提升。</p><h4 id="JSON路径索引"><a href="#JSON路径索引" class="headerlink" title="JSON路径索引"></a>JSON路径索引</h4><p>MySQL 8.0 引入了 JSON 路径索引，允许在 JSON 对象的特定路径上创建索引，以便更高效地执行 JSON 路径查询。路径索引允许在 JSON 对象中的特定路径上进行范围查询、排序和过滤。我们以查询地址信息中<code>country</code>等于<code>&quot;US&quot;为例</code>，他有这几中写法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 使用JSON_CONTAINS</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'"US"'</span><span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用JSON_VALUE</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_VALUE<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用JSON_EXTRACT</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_EXTRACT<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 使用 ->> 运算符</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token keyword">AS</span> CHAR<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JSON类型字段上创建索引时，要遵守的规则是要确保索引表达式与查询时的条件表达式匹配，这样MySQL才能正确地使用索引进行优化查询。</p><p>所以针对不同的sql查询，我们提供不同的索引。例如：</p><ul><li>使用JSON_EXTRACT<br>我们可以采取新增一个虚拟列的方式去使用索引，比如我们新增一个<code>country</code>的虚拟列，然后在虚拟列上增加索引</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 添加生成的虚拟列  </span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_info  <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> country <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> GENERATED ALWAYS <span class="token keyword">AS</span> <span class="token punctuation">(</span>JSON_UNQUOTE<span class="token punctuation">(</span>JSON_EXTRACT<span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token string">'$.country'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> STORED<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 在生成的列上创建索引  </span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_json_country <span class="token keyword">ON</span> user_info<span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们执行一下计划：</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_json_country <span class="token operator">|</span> idx_json_country <span class="token operator">|</span> <span class="token number">1023</span>    <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出使用了索引<code>idx_json_country</code>。</p><ul><li>使用 -&gt;&gt; 运算符<br>在 JSON 类型的索引中，使用 <code>-&gt;&gt;</code> 运算符，会转换为 <code>JSON_UNQUOTE(JSON_EXTRACT(...))</code>，而 <code>JSON_UNQUOTE()</code> 返回的值具有LONGTEXT 数据类型。MySQL不能对没有键部分上的前缀长度指定的 LONGTEXT 列建立索引，而在功能性键部分中又不允许指定前缀长度。</li></ul><p>我们可以这样创建索引：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_json_country_cast <span class="token keyword">ON</span> user_info<span class="token punctuation">(</span><span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token keyword">AS</span> CHAR<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">COLLATE</span> utf8mb4_bin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后看一下执行计划：</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> address<span class="token operator">-</span><span class="token operator">>></span><span class="token string">"$.country"</span> <span class="token operator">=</span> <span class="token string">"US"</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_json_country <span class="token operator">|</span> idx_json_country_cast <span class="token operator">|</span> <span class="token number">123</span>    <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">2</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多值索引"><a href="#多值索引" class="headerlink" title="多值索引"></a>多值索引</h4><p>多值索引是 MySQL 8.0.17 版本引入的新功能，它允许在 InnoDB 存储引擎中创建索引来支持对存储数组值的列进行高效查询。传统的索引是一对一的，而多值索引允许在一个数据记录上拥有多个索引记录。多值索引主要用于索引 JSON 数组。</p><p>要创建多值索引，可以在 CREATE TABLE、ALTER TABLE 或 CREATE INDEX 语句中使用 CAST(… AS … ARRAY) 函数来定义。这将把 JSON 数组中的同类型标量值转换为 SQL 数据类型数组。然后，MySQL 会在这个 SQL 数据类型数组上创建一个虚拟列，并在虚拟列上创建一个功能性索引。最终，这个功能性索引构成了多值索引。</p><p>例如，我们在<code>address</code>中增加一个<code>zipcode</code>列用于存储地址邮编，每个地址包含若干个邮编。我们对这个<code>zipcode</code>就可以使用多值索引。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_info <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_json_zipcode<span class="token punctuation">(</span><span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span> <span class="token keyword">AS</span> SIGNED ARRAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们分别执行以下sql进行验证：</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> <span class="token number">94507</span> MEMBER <span class="token keyword">OF</span><span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> user_name <span class="token operator">|</span> address                                                                                          <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> lisi      <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"CN"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94568</span><span class="token punctuation">,</span> <span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> wangwu    <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"guangzhou"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"CN"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94477</span><span class="token punctuation">,</span> <span class="token number">94507</span><span class="token punctuation">]</span>}       <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> qianliu   <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"US"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>}        <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> <span class="token number">94507</span> MEMBER <span class="token keyword">OF</span><span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> <span class="token number">9</span>       <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">3</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+------+------------------+------------------+---------+-------+------+----------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出使用了索引。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'[94507,94582]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> user_name <span class="token operator">|</span> address                                                                                          <span class="token operator">|</span> create_time         <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> lisi      <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"CN"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94568</span><span class="token punctuation">,</span> <span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>} <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> qianliu   <span class="token operator">|</span> {<span class="token string">"city"</span>: <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"street"</span>: <span class="token string">"123 Main St"</span><span class="token punctuation">,</span> <span class="token string">"country"</span>: <span class="token string">"US"</span><span class="token punctuation">,</span> <span class="token string">"zipcode"</span>: <span class="token punctuation">[</span><span class="token number">94507</span><span class="token punctuation">,</span> <span class="token number">94582</span><span class="token punctuation">]</span>}        <span class="token operator">|</span> <span class="token number">2024</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">05</span> <span class="token number">11</span>:<span class="token number">08</span>:<span class="token number">22</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-----------+--------------------------------------------------------------------------------------------------+---------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>mysql<span class="token operator">></span> <span class="token keyword">EXPLAIN</span>    <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> user_info <span class="token keyword">WHERE</span> JSON_CONTAINS<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span><span class="token punctuation">,</span> CAST<span class="token punctuation">(</span><span class="token string">'[94507,94582]'</span> <span class="token keyword">AS</span> JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+-------+------------------+------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span>     <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span>  <span class="token operator">|</span> possible_keys    <span class="token operator">|</span> <span class="token keyword">key</span>              <span class="token operator">|</span> key_len <span class="token operator">|</span> ref  <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+-------+------------------+------------------+---------+------+------+----------+-------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> user_info <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> range <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> idx_json_zipcode <span class="token operator">|</span> <span class="token number">9</span>       <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span>    <span class="token number">6</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token keyword">Using</span> <span class="token keyword">where</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">----+-------------+-----------+------------+-------+------------------+------------------+---------+------+------+----------+-------------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">,</span> <span class="token number">1</span> warning <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多值索引还可以作为复合索引的一部分进行定义。在复合索引中，只能有一个多值键部分，并且可以与其他单值部分一起使用。多值键部分可以按任意顺序使用。</p><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> user_info <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> idx_name_zipcode<span class="token punctuation">(</span>user_name<span class="token punctuation">,</span> <span class="token punctuation">(</span>CAST<span class="token punctuation">(</span>address<span class="token operator">-</span><span class="token operator">></span><span class="token string">'$.zipcode'</span> <span class="token keyword">AS</span> SIGNED ARRAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>Records: <span class="token number">0</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL提供了丰富的内置函数支持JSON数据类型的存储和操作，如检查、提取、插入、更新及搜索JSON文档中的内容。此外，为了提高含有JSON字段的查询效率，用户可以在满足条件的情况下为JSON特定路径创建索引，如使用虚拟生成列或者MySQL 8.0以上的原生JSON路径索引功能。多值索引特别适用于JSON数组元素的检索优化，使得数据库能针对数组内的每个独立值建立索引记录，提升复杂查询场景下的性能表现。</p><p>我们可以了解到 JSON 数据类型的灵活性、易用性以及适用性，以及如何在实际项目中充分利用它来应对动态数据模型、半结构化数据存储和查询等方面的挑战。</p><h3 id="文中示例表结构与数据"><a href="#文中示例表结构与数据" class="headerlink" title="文中示例表结构与数据"></a>文中示例表结构与数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test_json<span class="token punctuation">`</span>  <span class="token punctuation">(</span>      <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>json_data<span class="token punctuation">`</span>     JSON <span class="token keyword">COMMENT</span> <span class="token string">'json值'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'json测试表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_info<span class="token punctuation">`</span>  <span class="token punctuation">(</span>      <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>user_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>address<span class="token punctuation">`</span>     JSON <span class="token keyword">COMMENT</span> <span class="token string">'地址信息'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>            <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'用户信息'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-multi-valued" target="_blank" rel="noopener">MySQL :: MySQL 8.0 Reference Manual :: 15.1.15 CREATE INDEX Statement</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/json-functions.html" target="_blank" rel="noopener">MySQL :: MySQL 8.0 Reference Manual :: 14.17 JSON Functions</a></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> Mysql的JSON类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为二面：SpringBoot读取配置文件的原理是什么？加载顺序是什么？</title>
      <link href="/article/springbootloadconfigdata.html"/>
      <url>/article/springbootloadconfigdata.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Spring Boot以其简化的配置和强大的开箱即用功能而备受欢迎，而配置文件的加载是Spring Boot应用启动过程中的关键步骤之一。深入理解Spring Boot启动时如何加载配置文件的源码，有助于开发者更好地理解其内部工作原理，提高配置管理的灵活性和可维护性。本文将从源码入手，解读Spring Boot启动时配置文件加载的关键组件和步骤。</p><blockquote><p>本文使用的SpringBoot版本为:2.7.0</p></blockquote><p>SpringBoot使用事件监听的方式去读取配置文件。在SpringBoot2.4.0以前是通过<code>ConfigFileApplicationListener</code>去监听读取配置文件的事件，在SpringBoot2.4.0时废弃了<code>ConfigFileApplicationListener</code>，该使用<code>EnvironmentPostProcessorApplicationListener</code>去监听文件读取事件。这点区别需要注意。</p><blockquote><p>本文只会解读配置文件加载步骤，除加载文件步骤以外的会忽略。</p></blockquote><p>加载配置文件大致流程如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240205003852.png" alt="image.png"></p><h3 id="准备应用程序环境"><a href="#准备应用程序环境" class="headerlink" title="准备应用程序环境"></a>准备应用程序环境</h3><ol><li>在SpringBootApplication执行run方法后，获取程序中的事件监听器后，执行<code>prepareEnvironment</code>方法开始准备环境。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203160828.png" alt="image.png"></p><ol start="2"><li>通知注册的监听器，应用程序的环境已经准备好。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203161040.png" alt="image.png"></p><ol start="3"><li><p><code>doWithListeners</code> 遍历注册的监听器，对每个监听器执行 <code>environmentPrepared</code> 操作，通知它们应用程序的环境已经准备好。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203215005.png" alt="image.png"></p></li><li><p>处理应用事件的组件<code>SimpleApplicationEventMulticaster</code>开始执行<code>multicastEvent</code>去广播环境准备事件<code>ApplicationEnvironmentPreparedEvent</code>给注册的监听器，环境已经准备好，让他们可以执行环境准备阶段的自定义逻辑。</p></li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203161707.png" alt="image.png"></p><p>至此，应用程序环境已经准备好的事件已经广播出去，接下来<code>EnvironmentPostProcessorApplicationListener</code>监听器监听到事件后就可以开始处理读取配置文件的逻辑。</p><h3 id="准备加载配置文件环境"><a href="#准备加载配置文件环境" class="headerlink" title="准备加载配置文件环境"></a>准备加载配置文件环境</h3><ol><li><code>EnvironmentPostProcessorApplicationListener</code>监听到<code>ApplicationEnvironmentPreparedEvent</code>即环境已经准备好的事件，开始处理执行实现 <code>EnvironmentPostProcessor</code>类的<code>postProcessEnvironment</code>方法。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203161913.png" alt="image.png"></p><p>而注册<code>EnvironmentPostProcessor</code> 实现类的有7个。都是加载类路径下的<code>META-INF/spring.factories</code> 文件中配置的<code>EnvironmentPostProcessor</code>实现类。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203223053.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203104629.png" alt="image.png"></p><p>而<code>ConfigDataEnvironmentPostProcessor</code>就是用于处理加载配置文件的实现类。同时这里也是SpringBoot2.4.0前后版本关于加载配置文件差异的一个地方。</p><ol start="2"><li><code>ConfigDataEnvironmentPostProcessor</code>开始执行<code>postProcessEnvironment</code>方法，创建<code>ConfigDataEnvironment</code>实例，然后执行其<code>processAndApply</code>。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203165501.png" alt="image.png"></p><p><code>ConfigDataEnvironment</code>类在SpringBoot2.4.0版本引入，它是SpringBoot配置数据加载和管理的核心组件。它负责从多个源加载、解析和处理配置数据，并将这些数据整合到应用环境中。在这里主要去创建<code>ConfigDataLocationResolvers</code>，<code>ConfigDataLoaders</code>以及<code>ConfigDataEnvironmentContributors</code>。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203232004.png" alt="image.png"></p><ol start="3"><li><code>ConfigDataLocationResolvers</code>在SpringBoot2.4.0版本中引入，是负责解析和定位配置数据源位置的一个组件集合。是一个工厂类，用于创建配置数据位置解析器的实例，它包含了一组<code>ConfigDataLocationResolver</code>的实现类，目前只有两个实现类：<code>StandardConfigDataLocationResolver</code>以及<code>ConfigTreeConfigDataLocationResolver</code>。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203232942.png" alt="image.png"></p><p>其中<code>ConfigTreeConfigDataLocationResolver</code>主要用于解析Config Tree 类型的配置数据位置。Config Tree是SpringBoot2.4.0引入的一种配置数据存储格式，可以将配置文件以树形结构组织，使得配置文件之间的关系更加清晰。<br>而<code>StandardConfigDataLocationResolver</code>它用于解析标准的配置数据位置，即 SpringBoot2.4之前版本中使用的传统配置文件存放方式。这种方式通常是将配置文件放在类路径下的<code>config</code>目录中，或者在文件系统的特定位置，例如我们常写的<code>applicaiton.properties</code>或者<code>applicaiton.yml</code>。这个类也是本文用于加载配置文件的解析器。</p><ol start="4"><li><code>ConfigDataLoaders</code>是SpringBoot中处理配置数据加载的组件，也是SpringBoot2.4.0引入。它是一个工厂类，用于创建配置数据加载器的实例，配置数据加载器均实现<code>ConfigDataLoader</code>接口。在SpringBoot中，配置数据加载器负责实际加载配置数据，将配置文件的内容解析成应用程序可用的配置信息。同样的他也只有两个实现类：<code>ConfigTreeConfigDataLoader</code>和<code>StandardConfigDataLoader</code>。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203235707.png" alt="image.png"><br>同解析器，<code>ConfigTreeConfigDataLoader</code>主要用于加载Config Tree类型的配置数据。而<code>StandardConfigDataLoader</code> 用于加载标准的配置数据。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203173402.png" alt="image.png"></p><ol start="4"><li><code>ConfigDataEnvironmentContributors</code>是SpringBoot中用于管理配置数据环境贡献者的组件。它的主要作用是维护一组贡献者，这些贡献者负责提供配置数据的加载、处理和管理。同样也是SpringBoot 2.4.0之后引入。它从特定的源或根据特定规则加载并解析配置数据，然后将解析后的结果（通常是以<code>PropertySource</code>形式）添加到<code>ConfigDataEnvironment</code>对象中。并且负责按照预定义的顺序和优先级策略来加载和合并不同来源的配置信息，确保正确地覆盖和合并属性值。不同的<code>ConfigDataEnvironmentContributor</code>可以响应不同的环境变量、系统属性或激活的profile，从而动态地调整加载哪些配置数据。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204001758.png" alt="image.png"></p><p>此时他的工作是获取与给定源相关联的<code>Binder</code>，用于对配置数据进行绑定操作。执行<code>getInitialImportContributors(binder)</code>方法获取初始导入的配置数据贡献者，加入到贡献者列表中。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204113527.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204114227.png" alt="image.png"></p><p>这个方法就很重要了，这里就是SpringBoot加载的文件的默认位置以及加载文件的顺序。执行第1个方法时，可以通过<code>IMPORT_PROPERTY</code>即<code>spring.config.import</code>这个值可以指定要导入的额外配置数据位置，这些位置将会在配置数据加载时被导入。SpringBoot将会使用该属性指定的位置作为主要的配置数据来源，并将其导入到应用程序的配置中。这个属性通常用于指定一个主要的配置文件，覆盖默认的配置文件位置。它的优先级也是最高的。例如：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.config.import</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/imported-config/application.yml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行第2个方法即绑定<code>ADDITIONAL_LOCATION_PROPERTY</code>指定的目录<code>spring.config.additional-location</code>，这个目录用于指定额外的配置数据导入位置。指定的额外导入位置会在主要位置之外被考虑。这个属性用于添加额外的配置数据位置，可以与主要位置一起使用，而不是替代它。</p><p>然后就是第3个方法，绑定<code>LOCATION_PROPERTY</code>指定的目录<code>spring.config.location</code>。该目录作为主要的配置数据位置。可以通过设置该属性来指定主要的配置数据位置，这个位置会被优先考虑，覆盖默认的位置。而默认位置有如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204111541.png" alt="image.png"></p><pre class="line-numbers language-text"><code class="language-text">optional:classpath:/optional:classpath:/config/optional:file:./optional:file:./config/optional:file:./config/*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>optional</code>代表可选的配置文件位置。由上述<code>addInitialImportContributors</code>可以看出默认配置文件加载顺序是从上到下优先级越来越高。即加载顺序为：</p><pre class="line-numbers language-text"><code class="language-text">file:./file:./config/file:./config/*/classpath:/classpath:/config/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204165905.png" alt></p><p>这个加载顺序不同SrpingBoot2.4.0于以前的版本。</p><blockquote><p>这里注意这个是加载文件的顺序，而不是加载读取配置的顺序。加载读取配置的顺序请往下看</p></blockquote><p>其中<code>file:./</code>、<code>file:./config/</code>、<code>file:./config/*/**</code>都是在文件系统中搜索配置文件，这种方式适用于需要在文件系统上动态配置文件的场景，其中 <code>*</code> 可以匹配任意子目录。<br>而<code>classpath:/</code>、<code>classpath:/config/</code>则表示在类路径（classpath）下搜索配置文件，包括根路径和 <code>/config/</code>子路径。这种方式适用于将配置文件打包在应用程序的 JAR 文件中或者放在类路径下的<code>config</code>目录中。</p><blockquote><p>Contributors翻译为贡献者，类似给配置数据环境提供数据的加载，处理和管理的。</p></blockquote><p>到这里<code>ConfigDataEnvironment</code>中关于加载和解析配置文件的部分就准备好了，接下来就开始执行<code>processAndApply</code>方法开始加载解析文件。</p><h3 id="配置文件加载解析"><a href="#配置文件加载解析" class="headerlink" title="配置文件加载解析"></a>配置文件加载解析</h3><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203171916.png" alt="image.png"></p><ol><li>创建配置文件导入器<code>ConfigDataImporter</code>,将<code>ConfigDataEnvironment</code>中的加载器以及解析器都放入导入器中。</li><li>执行<code>processInitial</code>方法，然后配置数据贡献者<code>ConfigDataEnvironmentContributors</code>开始执行<code>withProcessedImports</code>方法开始执行加载以及解析配置文件。循环配置数据贡献者直至拿到所有的配置文件。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240203171650.png" alt="image.png"></p><ol start="3"><li><p>执行创建<code>ConfigDataLocationResolverContext</code>解析器上下文，<code>ConfigDataLoaderContext</code>加载器上下文，以及获取贡献者中配置文件的配置。</p></li><li><p>配置文件导入器执行<code>resolveAndLoad</code>方法开始执行解析和加载数据。这方法中分为<code>resolve</code>解析以及<code>load</code>加载数据。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204171255.png" alt="image.png"></p></li><li><p><code>resolve</code>会调用<code>ConfigDataEnvironment</code>中创建的解析器，比如：<code>StandardConfigDataLocationResolver</code>，然后去解析<code>ConfigDataEnvironmentContributor</code>中保存的配置文件的路径。<code>StandardConfigDataLocationResolver</code>会先把路径拿出来按照<code>;</code>进行拆分<br>（方法在<code>ConfigDataLocation</code>中），然后组装每个路径下的文件位置信息，对于文件名默认都为<code>application</code>，对于文件类型，需要使用到<code>PropertySourceLoader</code>他有两个子类：<code>YamlPropertySourceLoader</code>和<code>PropertiesPropertySourceLoader</code>，通过<code>getFileExtensions</code>方法获取文件类型。其中<code>PropertiesPropertySourceLoader</code>对应<code>properties</code>和<code>xml</code>，而<code>YamlPropertySourceLoader</code>对应<code>yml</code>以及<code>yaml</code>。</p></li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204172321.png" alt="image.png"></p><p>这样就可以用<code>ConfigDataLocation</code>路径+applicaiton+getFileExtensions得到一组文件路径。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204172352.png" alt="image.png"></p><p>然后解析器会检查这些文件是否存在，如果不存在的则会过滤掉。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204185338.png" alt="image.png"></p><p>最后将找到的文件放入<code>StandardConfigDataResource</code>集合中返回，由<code>load</code>方法去加载数据。</p><ol start="6"><li><code>load</code>方法将<code>resolve</code>方法解析出来的文件路径,有对应的加载器去文件中将数据取出来。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204185804.png" alt="image.png"><br>这里需要注意的是，读取文件是从最后一个开始读取，即跟文件加载顺序相反，所以配置加载顺序为：</li></ol><pre class="line-numbers language-text"><code class="language-text">file:./config/*/file:./config/file:./classpath:/config/classpath:/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204190203.png" alt="image.png"></p><p>此时的loaders.load即在<code>ConfigDataEnvironment</code>中创建的加载器，本文中使用<code>StandardConfigDataLoader</code>进行加载，然后在配置加载器中由文件类型对应的加载器进行数据加载。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240204190521.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240205003343.png" alt="image.png"><br>将读取的数据封装到<code>ConfigData</code>当中返回。最后将数据组装到<code>ConfigDataEnvironmentContributors</code>中，最后把数据放入当前应用环境中。这样SpringBoot启动时读取文件的流程就结束了。当然后面还有按照当前指定环境<code>profiles</code>读取，但读取流程一致。只要是配置的优先级，这个我们放在下一篇文章中继续解读。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻松应对复杂业务逻辑：LiteFlow-编排式规则引擎框架的优势</title>
      <link href="/article/4749dca98aed.html"/>
      <url>/article/4749dca98aed.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/LiteFlow.png" alt="LiteFlow.png"></p><h3 id="LiteFlow简介"><a href="#LiteFlow简介" class="headerlink" title="LiteFlow简介"></a>LiteFlow简介</h3><h4 id="LiteFlow是什么？"><a href="#LiteFlow是什么？" class="headerlink" title="LiteFlow是什么？"></a>LiteFlow是什么？</h4><p><code>LiteFlow</code>是一款专注于逻辑驱动流程编排的轻量级框架，它以组件化方式快速构建和执行业务流程，有效解耦复杂业务逻辑。通过支持热加载规则配置，开发者能够即时调整流程步骤，将复杂的业务如价格计算、下单流程等拆分为独立且可复用的组件，从而实现系统的高度灵活性与扩展性，避免了牵一发而动全身的问题。旨在优化开发流程，减少冗余工作，让团队能够更聚焦于核心业务逻辑，而将流程控制层面的重任托付给该框架进行自动化处理。</p><p><code>LiteFlow</code>整合了流程编排与规则引擎的核心特性，提供<code>XML</code>、<code>JSON</code>或<code>YAML</code>格式的灵活流程定义，以及本地文件系统、数据库、ZooKeeper、Nacos、Apollo、Redis等多种规则文件存储方案。其内建插件如liteflow-rule-nacos，以及开放的扩展机制，赋予开发人员自定义规则解析器的能力，满足多样化场景下的规则管理需求。</p><blockquote><p>对于基于角色任务流转的场景，<code>LiteFlow</code>并非最佳选择，推荐使用<code>Flowable</code>或<code>Activiti</code>等专门的工作流引擎。</p></blockquote><h4 id="LiteFlow的架构"><a href="#LiteFlow的架构" class="headerlink" title="LiteFlow的架构"></a>LiteFlow的架构</h4><p><code>LiteFlow</code>是从获取上下文开始的，这个上下文通常包含了执行流程所需的数据和环境信息。通过解析这些上下文数据，<code>LiteFlow</code>能够理解并执行对应的规则文件，驱动业务流程的执行。在<code>LiteFlow</code>中，业务流程被组织成一系列的链路（或节点），每个链路代表一个业务步骤或决策点。这些链路上的节点，也就是业务组件，是独立的，可以支持多种脚本语言，如<code>Groovy</code>、<code>JavaScript</code>、<code>Python</code>、<code>Lua</code>等，以便根据具体业务需求进行定制。下图为<code>LiteFlow</code>的整体架构图。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/LiteFlow%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="LiteFlow执行流程.png"></p><h4 id="LiteFlow的作用"><a href="#LiteFlow的作用" class="headerlink" title="LiteFlow的作用"></a>LiteFlow的作用</h4><ul><li><p><code>LiteFlow</code>将瀑布式代码进行组件化、灵活的编排体系，组件可独立调整替换，规则引擎语法简单易学。<br>利用<code>LiteFlow</code>可以把传统的瀑布式代码重构为以组件为中心的概念体系，从而获得灵活的编排能力。在这种结构里，各个组件彼此分离，允许轻松调整和替换。组件本身可通过脚本定制，而且组件间的过渡完全受规则引导。此外，<code>LiteFlow</code>具备简单易懂的<code>DSL</code>规则引擎语法，能快速入门掌握。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123172903.png" alt="image.png"></p></li><li><p><code>LiteFlow</code>强大的编排能力<br><code>LiteFlow</code>的编排语法强大到可以编排出任何你想要的逻辑流程。如下图复杂的语法，如果使用瀑布式的代码去写，那种开发以及维护难度可想而知，但是使用<code>LiteFlow</code>你可以轻松完成逻辑流程的编排，易于维护。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123173145.png" alt="image.png"></p></li><li><p><code>LiteFlow</code>支持组件热部署<br>通过<code>LiteFlow</code>，你可以实现组件的实时热替换，同时也能在已有的逻辑流程中随时插入新的组件，以此动态调整你的业务逻辑。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123173357.png" alt="image.png"></p><h3 id="LiteFlow的环境支持"><a href="#LiteFlow的环境支持" class="headerlink" title="LiteFlow的环境支持"></a>LiteFlow的环境支持</h3></li><li><p>JDK<br><code>LiteFlow</code>要求的最低的JDK版本为8，支持<code>JDK8~JDK17</code>所有的版本。当然如果使用<code>JDK11</code>以上，确保<code>LiteFlow</code>的版本为<code>v2.10.6</code>及其以上版本。</p><blockquote><p>如果你使用JDK11及其以上的版本，请确保jvm参数加上以下参数:–add-opens java.base/sun.reflect.annotation=ALL-UNNAMED</p></blockquote></li><li><p>Spring<br><code>LiteFlow</code>要求的Spring的最低版本为<code>Spring 5.0</code>。支持的范围是<code>Spring 5.X ~ Spring 6.X</code>。</p></li><li><p>SpringBoot<br><code>LiteFlow</code>要求的Springboot的最低的版本是2.0。支持的范围是<code>Springboot 2.X ~ Springboot 3.X</code>。</p></li></ul><h3 id="LiteFlow的性能"><a href="#LiteFlow的性能" class="headerlink" title="LiteFlow的性能"></a>LiteFlow的性能</h3><p><code>LiteFlow</code>框架在启动时完成大部分工作，包括解析规则、注册组件和组装元信息，执行链路时对系统资源消耗极低。在设计之初就注重性能表现，对核心代码进行了优化。</p><p>实际测试中，<code>LiteFlow</code>表现出色，50多个业务组件组成的链路在压测中单点达到1500 TPS，成功应对双11、明星顶流带货等大规模流量挑战。</p><p>尽管<code>LiteFlow</code>框架自身性能卓越，但实际执行效率取决于业务组件的性能。若组件包含大量循环数据库查询、不良<code>SQL</code> 或大量<code>RPC</code>同步调用，整体<code>TPS</code>也会较低。但这归咎于业务组件的性能问题，而非<code>LiteFlow</code>框架本身的性能问题。整体系统吞吐量的高低不只依赖于某个框架，而是需要整体优化业务代码才能提升。</p><blockquote><p>数据来源于LiteFlow官方文档说明。</p></blockquote><h3 id="LiteFlow使用"><a href="#LiteFlow使用" class="headerlink" title="LiteFlow使用"></a>LiteFlow使用</h3><p>以下我们结合SpringBoot环境使用。</p><p><code>LiteFlow</code>在使用上可以按照引入依赖，<code>LiteFlow</code>相关配置，规则文件，定义组件，节点编排，执行流程进行。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.yomahub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>liteflow-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>目前liteflow的稳定版本已经更新到2.11.4.2。本文依托于2.11.1做讲解演示。好多新的功能均在2.9.0以后的版本中才有。</p></blockquote><h4 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h4><p><code>LiteFlow</code>有诸多配置项，大多数配置项有默认值，可以不必配置，同时官方也建议某个配置项不了解它有什么用时，就不要去随意的改它的值。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">liteflow</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#规则文件路径</span>  <span class="token key atrule">rule-source</span><span class="token punctuation">:</span> config/flow.el.xml  <span class="token comment" spellcheck="true">#-----------------以下非必须-----------------</span>  <span class="token comment" spellcheck="true">#liteflow是否开启，默认为true</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#liteflow的banner打印是否开启，默认为true</span>  <span class="token key atrule">print-banner</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#zkNode的节点，只有使用zk作为配置源的时候才起作用，默认为/lite-flow/flow</span>  <span class="token key atrule">zk-node</span><span class="token punctuation">:</span> /lite<span class="token punctuation">-</span>flow/flow  <span class="token comment" spellcheck="true">#上下文的最大数量槽，默认值为1024</span>  <span class="token key atrule">slot-size</span><span class="token punctuation">:</span> <span class="token number">1024</span>  <span class="token comment" spellcheck="true">#FlowExecutor的execute2Future的线程数，默认为64</span>  <span class="token key atrule">main-executor-works</span><span class="token punctuation">:</span> <span class="token number">64</span>  <span class="token comment" spellcheck="true">#FlowExecutor的execute2Future的自定义线程池Builder，LiteFlow提供了默认的Builder</span>  <span class="token key atrule">main-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.thread.LiteFlowDefaultMainExecutorBuilder  <span class="token comment" spellcheck="true">#自定义请求ID的生成类，LiteFlow提供了默认的生成类</span>  <span class="token key atrule">request-id-generator-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.flow.id.DefaultRequestIdGenerator  <span class="token comment" spellcheck="true">#并行节点的线程池Builder，LiteFlow提供了默认的Builder</span>  <span class="token key atrule">thread-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.thread.LiteFlowDefaultWhenExecutorBuilder  <span class="token comment" spellcheck="true">#异步线程最长的等待时间(只用于when)，默认值为15000</span>  <span class="token key atrule">when-max-wait-time</span><span class="token punctuation">:</span> <span class="token number">15000</span>  <span class="token comment" spellcheck="true">#异步线程最长的等待时间(只用于when)，默认值为MILLISECONDS，毫秒</span>  <span class="token key atrule">when-max-wait-time-unit</span><span class="token punctuation">:</span> MILLISECONDS  <span class="token comment" spellcheck="true">#when节点全局异步线程池最大线程数，默认为16</span>  <span class="token key atrule">when-max-workers</span><span class="token punctuation">:</span> <span class="token number">16</span>  <span class="token comment" spellcheck="true">#并行循环子项线程池最大线程数，默认为16</span>  <span class="token key atrule">parallelLoop-max-workers</span><span class="token punctuation">:</span> <span class="token number">16</span>  <span class="token comment" spellcheck="true">#并行循环子项线程池等待队列数，默认为512</span>  <span class="token key atrule">parallelLoop-queue-limit</span><span class="token punctuation">:</span> <span class="token number">512</span>  <span class="token comment" spellcheck="true">#并行循环子项的线程池Builder，LiteFlow提供了默认的Builder</span>  <span class="token key atrule">parallelLoop-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.thread.LiteFlowDefaultParallelLoopExecutorBuilder  <span class="token comment" spellcheck="true">#when节点全局异步线程池等待队列数，默认为512</span>  <span class="token key atrule">when-queue-limit</span><span class="token punctuation">:</span> <span class="token number">512</span>  <span class="token comment" spellcheck="true">#是否在启动的时候就解析规则，默认为true</span>  <span class="token key atrule">parse-on-start</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#全局重试次数，默认为0</span>  <span class="token key atrule">retry-count</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">#是否支持不同类型的加载方式混用，默认为false</span>  <span class="token key atrule">support-multiple-type</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true">#全局默认节点执行器</span>  <span class="token key atrule">node-executor-class</span><span class="token punctuation">:</span> com.yomahub.liteflow.flow.executor.DefaultNodeExecutor  <span class="token comment" spellcheck="true">#是否打印执行中过程中的日志，默认为true</span>  <span class="token key atrule">print-execution-log</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true">#是否开启本地文件监听，默认为false</span>  <span class="token key atrule">enable-monitor-file</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true">#是否开启快速解析模式，默认为false</span>  <span class="token key atrule">fast-load</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true">#简易监控配置选项</span>  <span class="token key atrule">monitor</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#监控是否开启，默认不开启</span>    <span class="token key atrule">enable-log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment" spellcheck="true">#监控队列存储大小，默认值为200</span>    <span class="token key atrule">queue-limit</span><span class="token punctuation">:</span> <span class="token number">200</span>    <span class="token comment" spellcheck="true">#监控一开始延迟多少执行，默认值为300000毫秒，也就是5分钟</span>    <span class="token key atrule">delay</span><span class="token punctuation">:</span> <span class="token number">300000</span>    <span class="token comment" spellcheck="true">#监控日志打印每过多少时间执行一次，默认值为300000毫秒，也就是5分钟</span>    <span class="token key atrule">period</span><span class="token punctuation">:</span> <span class="token number">300000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只要使用规则，则必须配置<code>rule-source</code>配置，但是如果你是用代码动态构建规则，则<code>rule-source</code>自动失效。</p></blockquote><h4 id="规则文件"><a href="#规则文件" class="headerlink" title="规则文件"></a>规则文件</h4><p>从上面<code>LiteFlow</code>的整体架构图中可以看出<code>LiteFlow</code>支持多种规则文件源配置：本地文件，数据库，zk，Nacos，Apollo，Etcd，Redis以及自定义配置源。本文将会以本地规则文件为例讲解，其余配置源将在后续文章中讲解实时修改流程中在进行分享，</p><p><code>LiteFlow</code>支持3种规则文件格式：<code>XML</code>,<code>JSON</code>,<code>YML</code>，3种文件的配置相差无几。<code>LiteFlow</code>的组成很轻量，主要由<code>Node</code>以及<code>Chain</code>元素构成。值得一提的是：如果在非Spring环境下，<code>Node</code>节点是必须的，配置配置，否则会导致报错找不到节点。当然在Spring环境下，我们可以不必配置<code>Node</code>节点，只需要将相应的节点注册到Spring上下文即可。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flow</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>chain1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          THEN(a, b, c);      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          SWITCH(s1).to(s2, THEN(a,b).id("d"));      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flow</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>在介绍具体的组件之前，我们先来了解下<code>@LiteflowComponent</code>注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>TYPE <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Documented</span>  <span class="token annotation punctuation">@Inherited</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">LiteflowComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">)</span>      String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> Component<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> attribute <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">)</span>      String <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/**    * 可以给节点起别名    **/</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@LiteflowComponent</code>继承自<code>@Component</code>注解，在Spring环境中，可以将组件注入到容器中。它的value或者id即对应规则文件中的node的id。例如上述规则文件中的a,b,c等。</p><h5 id="普通组件：NodeComponent"><a href="#普通组件：NodeComponent" class="headerlink" title="普通组件：NodeComponent"></a>普通组件：NodeComponent</h5><p>普通组件节点需要继承<code>NodeComponent</code>，需要实现<code>process</code>方法。可用于<code>THEN</code>和<code>WHEN</code>编排中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然<code>NodeComponent</code>中还有一些其他方法可以重写，以达到自己的业务需求。例如：</p><ul><li>isAccess()：表示是否进入该节点，可以用于业务参数的预先判断。</li><li>isContinueOnError()：表示出错是否继续往下执行下一个组件，默认为false</li><li>isEnd()：是否结束整个流程(不往下继续执行)。<br>如果返回true，则表示在这个组件执行完之后立马终止整个流程。此时由于是用户主动结束的流程，属于正常结束，所以流程结果中(<code>LiteflowResponse</code>)的isSuccess是true。</li><li>beforeProcess()和afterProcess()：流程的前置和后置处理器，其中前置处理器，在<code>isAccess</code> 之后执行。</li><li>onSuccess()和onError()：流程的成功失败事件回调</li><li>rollback()：流程失败后的回滚方法。</li></ul><p><strong>在任意组件节点的内部，还可以使用<code>this</code>关键字调用对应的方法：</strong></p><ul><li><p>获取流程初始入参参数<br>我们在组件节点内部可以通过<code>this.getRequestData()</code>去获取流程初始的入参。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    DataRequest dataRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取上下文<br>在组件节点里，随时可以通过方法<code>this.getContextBean(clazz)</code>获取当前你自己定义的上下文，从而可以获取到上下文的数据。例如：</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          ConditionContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>ConditionContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setIsEnd<br>是否立即结束整个流程 ，用法为<code>this.setIsEnd(true)</code>。<br>还有一些其他的方法，可以参考源码。</li></ul><h5 id="选择组件：NodeSwitchComponent"><a href="#选择组件：NodeSwitchComponent" class="headerlink" title="选择组件：NodeSwitchComponent"></a>选择组件：NodeSwitchComponent</h5><p>实际业务中，我们针对不同的业务类型，有不同的业务处理逻辑，例如上一篇文章中的订单类型一样，此时就需要节点动态的判断去执行哪些节点或者链路，所以就出现了选择组件。<br>选择组件需要实现<code>NodeSwitchComponent</code>，并且需要实现<code>processSwitch()</code>方法。用于<code>SWITCH</code>编排中。</p><p><code>processSwitch()</code>方法返回值是一个String，即下一步流程执行的节点ID或者链路tag。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span>"s<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeSwitchComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行switch规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"a"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>规则文件中，配置的<code>SWITCH</code>编排信息为：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(s).to(a, b, c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时s节点就会返回要执行的节点id为a，即要执行a流程。通常switch的节点的逻辑我们需要具体结合业务类型，例如订单类型枚举去使用。</p><p>除了可以返回id以外，我们还可以返回tag(标签)。例如我们在规则文件中这么写:<br>在规则表达式中我们可以这样使用:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(s).to(a.tag("td"), b.tag("td"), c.tag("td));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在<code>SWITCH</code>中返回tag：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span>"s<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeSwitchComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行switch规则"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">":td"</span>      <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个标签为td的节点</span>        <span class="token keyword">return</span> <span class="token string">"tag:td"</span>   <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个标签为td的节点</span>        <span class="token keyword">return</span> <span class="token string">"a"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择targetId是b的节点</span>        <span class="token keyword">return</span> <span class="token string">"b:"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个targetId是b的节点</span>        <span class="token keyword">return</span> <span class="token string">"b:td"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择targetId是b且标签是td的节点</span>        <span class="token keyword">return</span> <span class="token string">":"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 进入 b 节点，含义：选择第一个节点</span>        <span class="token keyword">return</span> <span class="token string">"d"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 进入 d 节点，含义：选择targetId是d的节点</span>        <span class="token keyword">return</span> <span class="token string">"d:"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 进入 d 节点，含义：选择第一个targetId是d的节点</span>        <span class="token keyword">return</span> <span class="token string">"d:td"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 进入 d 节点，含义：选择targetId是d且标签是td的节点</span>        <span class="token keyword">return</span> <span class="token string">"b:x"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 报错，原因：没有targetId是b且标签是x的节点</span>        <span class="token keyword">return</span> <span class="token string">"x"</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 报错，原因：没有targetId是x的节点</span>        <span class="token keyword">return</span> <span class="token string">"::"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 报错，原因：没有找到标签是":"的节点 </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeSwitchComponent</code>继承至<code>NodeComponent</code>，其节点的内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="条件组件：NodeForComponent"><a href="#条件组件：NodeForComponent" class="headerlink" title="条件组件：NodeForComponent"></a>条件组件：NodeForComponent</h5><p>条件组件，也是IF组件，返回值是一个<code>boolean</code>。需要继承<code>NodeForComponent</code>，实现<code>processIf()</code>方法。可用于<code>IF...ELIF...ELSE</code>编排。例如：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "ifChain">      IF(x, a, b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该例中x就是一个条件组件，如果x返回true，则会执行a节点，否则执行b节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfXComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeIfComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行X节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeIfComponent</code>继承至<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="次数循环组件：NodeForComponent"><a href="#次数循环组件：NodeForComponent" class="headerlink" title="次数循环组件：NodeForComponent"></a>次数循环组件：NodeForComponent</h5><p>次数循环组件。返回的是一个int值的循环次数。继承<code>NodeForComponent</code>，实现<code>processFor()</code>方法, 主要用于<code>FOR...DO...</code>表达式。在紧接着DO编排中的节点中，可以通过<code>this.getLoopIndex()</code>获取下标信息，可以从对应数组或者集合中通过下表获取对应的元素信息。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "forChain">      FOR(f).DO(a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeForComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">processFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataList <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          Integer loopIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLoopIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataList <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String str <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loopIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中f组件相当于定义一个数组或者集合的元素个数，类似</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// size = f </span><span class="token comment" spellcheck="true">//逻辑处理  = a</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>NodeForComponent</code>继承至<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="条件循环组件：NodeWhileComponent"><a href="#条件循环组件：NodeWhileComponent" class="headerlink" title="条件循环组件：NodeWhileComponent"></a>条件循环组件：NodeWhileComponent</h5><p>条件循环组件，主要用于<code>WHILE...DO...</code>表达式。继承<code>NodeWhileComponent</code>，需要实现<code>processWhile()</code>方法。<code>processWhile()</code>方法返回一个boolean类型的值，即while循环跳出的条件，如果为false则循环结束，同次数循环，可以在DO编排中的节点中，可以通过<code>this.getLoopIndex()</code>获取下标信息，可以从对应数组或者集合中通过下表获取对应的元素信息。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "whileChain">      WHILE(w).DO(a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeWhileComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processWhile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Integer count <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>dataContext<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataList <span class="token operator">=</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> count <span class="token operator">&lt;</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeWhileComponent</code>继承至<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="迭代循环组件：NodeIteratorComponent"><a href="#迭代循环组件：NodeIteratorComponent" class="headerlink" title="迭代循环组件：NodeIteratorComponent"></a>迭代循环组件：NodeIteratorComponent</h5><p>迭代循环组件，相当于Java语言的<code>Iterator</code>关键字，功能上相当于<code>for</code>循环，主要用于<code>ITERATOR...DO...</code>表达式。需要继承<code>NodeIteratorComponent</code>，实现<code>processIterator()</code>方法。在DO编排的节点中，可以通过<code>this.getCurrLoopObj()</code>获取集合中的信息。这个组件在使用liteflow的循环组件时用的比较多，就像日常开发代码，集合遍历大部分都会使用for循环(特殊情况必须使用下标除外)。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "iteratorChain">      ITERATOR(iterator).DO(a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"iterator"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyIteratorComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeIteratorComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">processIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          String str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行A规则:"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>NodeIteratorComponent</code>继承至<code>NodeComponent</code>，循环组件节点的内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><h5 id="退出循环组件：NodeBreakComponent"><a href="#退出循环组件：NodeBreakComponent" class="headerlink" title="退出循环组件：NodeBreakComponent"></a>退出循环组件：NodeBreakComponent</h5><p>退出循环组件，即<code>BREAK</code>组件。返回的是一个布尔值的循环退出标志。 需要继承<code>NodeBreakComponent</code>，实现<code>processBreak</code>方法。主要用于<code>FOR...DO...BREAK</code>,<code>WHILE...DO...BREAK</code>,<code>ITERATOR...DO...BREAK</code>表达式。即Java的<code>for</code>，<code>while</code>循环退出。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "iteratorChain">      ITERATOR(iterator).DO(a).BREAK(break_flag);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"break_flag"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BreakComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeBreakComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          String str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理<code>NodeBreakComponent</code>也是继承<code>NodeComponent</code>，其节点内部可以覆盖的方法和this关键字<code>NodeComponent</code>。</p><p>接下来我们聊一下组件的另外一种定义方式：声明式组件。我比较喜欢用。。。</p><h4 id="声明式组件"><a href="#声明式组件" class="headerlink" title="声明式组件"></a>声明式组件</h4><p>在上述介绍组件时，都是通过定义一个类继承某一个组件，例如<code>NodeComponent</code>或者<code>NodeIteratorComponent</code>，这样的定义组件会有一些弊端，比如当你的业务庞大时类也会快速的膨胀增加，即使一个跳出循环或者循环组件都要单独去定义一个类（个人认为循环组件其实不会包含太多的复杂业务逻辑），再比如说Java中类是单继承，这样就会造成这个写组件类无法再去继承一些其他的超类供我们使用。基于此，<code>LiteFlow</code>推出依靠注解完成组件的声明，即使一个普通类中的方法不需要继承任何组件类，也可以声明为一个组件，一个类可以定义很多个组件。可以分别对类或者方法进行生命组件。目前声明式组件只能在springboot环境中使用。</p><h5 id="类级别声明"><a href="#类级别声明" class="headerlink" title="类级别声明"></a>类级别声明</h5><p>类级别式声明主要用处就是通过注解形式让普通的java bean变成LiteFlow的组件。无需通过继承类或者实现接口的方式。但是类级别声明有一个缺点就是他和常规组件一样，需要一个类对应一个组件。使用<code>@LiteflowCmpDefine</code>注解，通过<code>NodeTypeEnum</code>指定当前类是什么类型的组件。<code>NodeTypeEnum</code>值如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> NodeTypeEnum <span class="token punctuation">{</span>      <span class="token function">COMMON</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">,</span> <span class="token string">"普通"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SWITCH</span><span class="token punctuation">(</span><span class="token string">"switch"</span><span class="token punctuation">,</span> <span class="token string">"选择"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeSwitchComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IF</span><span class="token punctuation">(</span><span class="token string">"if"</span><span class="token punctuation">,</span> <span class="token string">"条件"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeIfComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">FOR</span><span class="token punctuation">(</span><span class="token string">"for"</span><span class="token punctuation">,</span> <span class="token string">"循环次数"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeForComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">WHILE</span><span class="token punctuation">(</span><span class="token string">"while"</span><span class="token punctuation">,</span> <span class="token string">"循环条件"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeWhileComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">BREAK</span><span class="token punctuation">(</span><span class="token string">"break"</span><span class="token punctuation">,</span> <span class="token string">"循环跳出"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeBreakComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ITERATOR</span><span class="token punctuation">(</span><span class="token string">"iterator"</span><span class="token punctuation">,</span> <span class="token string">"循环迭代"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> NodeIteratorComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SCRIPT</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">,</span> <span class="token string">"脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptCommonComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SWITCH_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"switch_script"</span><span class="token punctuation">,</span> <span class="token string">"选择脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptSwitchComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IF_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"if_script"</span><span class="token punctuation">,</span> <span class="token string">"条件脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptIfComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">FOR_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"for_script"</span><span class="token punctuation">,</span> <span class="token string">"循环次数脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptForComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">WHILE_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"while_script"</span><span class="token punctuation">,</span> <span class="token string">"循环条件脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptWhileComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">BREAK_SCRIPT</span><span class="token punctuation">(</span><span class="token string">"break_script"</span><span class="token punctuation">,</span> <span class="token string">"循环跳出脚本"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ScriptBreakComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件类中的再通过<code>@LiteflowMethod</code>注解将方法映射为组件方法。通过<code>@LiteflowMethod</code>中<code>value</code>值指定方法类型<code>LiteFlowMethodEnum</code>，通过<code>nodeType</code>指定节点类型<code>NodeTypeEnum</code>。<code>LiteFlowMethodEnum</code>对应各组件中的抽象类方法（<code>isMainMethod=true</code>）（或者可覆盖的方法）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> LiteFlowMethodEnum <span class="token punctuation">{</span>      <span class="token function">PROCESS</span><span class="token punctuation">(</span><span class="token string">"process"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_SWITCH</span><span class="token punctuation">(</span><span class="token string">"processSwitch"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_IF</span><span class="token punctuation">(</span><span class="token string">"processIf"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_FOR</span><span class="token punctuation">(</span><span class="token string">"processFor"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_WHILE</span><span class="token punctuation">(</span><span class="token string">"processWhile"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_BREAK</span><span class="token punctuation">(</span><span class="token string">"processBreak"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PROCESS_ITERATOR</span><span class="token punctuation">(</span><span class="token string">"processIterator"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IS_ACCESS</span><span class="token punctuation">(</span><span class="token string">"isAccess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IS_END</span><span class="token punctuation">(</span><span class="token string">"isEnd"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">IS_CONTINUE_ON_ERROR</span><span class="token punctuation">(</span><span class="token string">"isContinueOnError"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">GET_NODE_EXECUTOR_CLASS</span><span class="token punctuation">(</span><span class="token string">"getNodeExecutorClass"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ON_SUCCESS</span><span class="token punctuation">(</span><span class="token string">"onSuccess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ON_ERROR</span><span class="token punctuation">(</span><span class="token string">"onError"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">BEFORE_PROCESS</span><span class="token punctuation">(</span><span class="token string">"beforeProcess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">AFTER_PROCESS</span><span class="token punctuation">(</span><span class="token string">"afterProcess"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">GET_DISPLAY_NAME</span><span class="token punctuation">(</span><span class="token string">"getDisplayName"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token function">ROLLBACK</span><span class="token punctuation">(</span><span class="token string">"rollback"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">;</span>    <span class="token keyword">private</span> String methodName<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">boolean</span> isMainMethod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对于方法的要求：</strong><br>组件内的方法的参数必须传入<code>NodeComponent</code>类型的参数，而且必须是第一个参数。这个参数值就替代常规组件中的<code>this</code>，从这个参数中可以获取流程入参，上线文等信息。然后方法的返回值必须跟常规组件中的抽象方法的返回值保持一致，否则可能吹出现错误。对于方法名称并无限制。</p><ul><li>普通组件：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>value <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"processA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>BEFORE_PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"beforeA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>AFTER_PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>条件组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.IF</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_if"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineIfCpm</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processIf</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>       DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>选择组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.SWITCH</code>参数。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_w"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineSwitchCpm</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch1</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>         DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行switch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"b"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>次数循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.FOR</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_for"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>FOR<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineForCmp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_FOR<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>FOR<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">processFor</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.WHILE</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_while"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>WHILE<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineWhileCmp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_WHILE<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>WHILE<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processWhile</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行while"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.ITERATOR</code>参数。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_iterator"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineIteratorCpm</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_ITERATOR<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">)</span>  <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">processSwitch1</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行iterator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> dataContext<span class="token punctuation">.</span><span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>退出循环组件<br>声明选择组件在类和方法上都需要加上<code>NodeTypeEnum.BREAK</code>参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"define_break"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@LiteflowCmpDefine</span><span class="token punctuation">(</span>NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDefineWhileCmp</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_BREAK<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行break"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="方法级别式声明"><a href="#方法级别式声明" class="headerlink" title="方法级别式声明"></a>方法级别式声明</h5><p>因为类级别式声明还是会造成类定义过多的问题，<code>LiteFlow</code>又提供了方法级别式声明。方法级别式声明可以让在一个类中通过注解定义多个组件。在类上使用<code>@LiteflowComponent</code>进行声明这是一个组件类，然后在方法使用<code>@LiteflowMethod</code>声明方法是一个组件节点。如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderHandlerCmp</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 普通组件 等价于 继承`NodeComponent` 实现process()方法      * @param nodeComponent      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"common"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"普通组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processCommon</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * IF组件 等价于 继承 `NodeIfComponent` 实现processIf()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"if"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"IF组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processIf</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * SWITCH组件 等价于 继承 `NodeSwitchComponent` 实现processSwitch()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"switch"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"SWITCH组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token string">"nodeId"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 次数循环组件 等价于 继承 `NodeForComponent` 实现processFor()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>FOR<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_FOR<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"for"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"FOR组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">processFor</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务逻辑  </span>    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 条件循环组件 等价于 继承 `NodeWhileComponent` 实现processWhile()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>WHILE<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_WHILE<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"while"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"WHILE组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processWhile</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 迭代循环组件 等价于 继承 `NodeIteratorComponent` processIterator()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_ITERATOR<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"iterator"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"ITERATOR组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">processIterator</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 业务逻辑  </span>    List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 跳出循环组件 等价于 继承 `NodeBreakComponent` processBreak()方法      * @param nodeComponent      * @return      */</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">,</span> value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_BREAK<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"break"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"BREAK组件"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 业务逻辑  </span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于方法级别声明特性来说，<code>@LiteflowMethod</code>注解上的<code>nodeId</code>一定要写。<code>nodeName</code>的属性。方便对声明式的组件进行命名。定义方法时，返回值要和常规组件里的对应方法返回值一致。例如普通组件的<code>process</code>方法是不返回的，比如IF组件的<code>processIf</code>方法是返回布尔值的。如果写错误，会造成一些异常。。。。</p><blockquote><p>我个人是比较喜欢用这种方式进行组件的定义，可以按照业务逻辑将代码拆分成一个个的模块，在各自的模块中进行业务逻辑的实现，也会非常清晰。</p></blockquote><h4 id="EL规则"><a href="#EL规则" class="headerlink" title="EL规则"></a>EL规则</h4><p><code>LiteFlow</code>2.8.x以后版本提供了一款强大的规则表达式。一切复杂的流程在<code>LiteFlow</code>表达式的加持下，都变得非常简便明了。配合一些流程图简直是通熟易懂。让整个业务流程在处理上看起来并没有那么黑盒。它可以设置各种编排规则，包括：</p><ul><li>串行编排<br>串行编排，即组件要顺序执行，使用<code>THEN</code>关键字，<strong><code>THEN</code>必须大写</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>thenchain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(a, b, c);      THEN(a, THEN(b, c));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>并行编排<br>并行编排即并行执行若干个个组件，使用用<code>WHEN</code>关键字，<strong><code>WHEN</code>必须大写。</strong></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>whenchain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      WTHEN(a, b, c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然，<code>WHEN</code>跟<code>THEN</code>还可以结合使用:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(a, WHEN(b, c, d), e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当a节点执行完成之后，并行执行b,c,d节点，完成之后在执行e节点。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129143222.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129153713.png" alt="image.png"></p><p>我们在看到并行执行的时候，就会联想到多线程处理，那么<code>LiteFlow</code>是怎么创建多线程的呢？答案是<code>LiteFlow</code>内部默认维护了一个<code>when</code>线程池，这个线程池是供给所有<code>WHEN</code>流程使用的。当然你可以在<code>LiteFlow</code>执行器执行之前给你的流程通过<code>LiteflowConfig</code>传入一些线程池参数或者实现<code>ExecutorBuilder</code>接口，自定义线程池。比如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiteFlowThreadPool</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorBuilder</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> ExecutorService <span class="token function">buildExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-%s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                      <span class="token comment" spellcheck="true">// 核心线程数，即2个常开窗口  </span>                    <span class="token number">2</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 最大的线程数，银行所有的窗口  </span>                    <span class="token number">5</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 空闲时间  </span>                    <span class="token number">5</span><span class="token punctuation">,</span>                      TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 工作队列  </span>                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 线程工厂  </span>                    threadFactory<span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true">// 拒绝策略  </span>                    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在<code>LiteflowConfig</code>设置并行线程执行器class路径<code>threadExecutorClass</code>:</p><pre class="line-numbers language-java"><code class="language-java">LiteflowConfig liteflowConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LiteflowConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  liteflowConfig<span class="token punctuation">.</span><span class="token function">setThreadExecutorClass</span><span class="token punctuation">(</span><span class="token string">"LiteFlowThreadPool的类路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  flowExecutor<span class="token punctuation">.</span><span class="token function">setLiteflowConfig</span><span class="token punctuation">(</span>liteflowConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"testChain"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果，可以看见线程池使用的是自定义的：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129161642.png" alt="image.png"></p><blockquote><p>LiteFlow从2.11.1开始，提供一个<code>liteflow.when-thread-pool-isolate</code>参数，默认为<code>false</code>，如果设为<code>true</code>，则会开启WHEN的线程池隔离机制，这意味着每一个when都会有单独的线程池。</p></blockquote><p>在多线程执行下，我们还有一个疑问，如果其中某个或者某几个并行分支发生异常执行失败那么后面的节点会不会收到影响？假如我们把C节点抛出一个异常，发现流程直接就结束了，并没有执行最后的E节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129162750.png" alt="image.png"><br>对于这种情况，<code>LiteFlow</code>的<code>WHEN</code>关键字提供了<code>ignoreError</code>(默认为false)来提供忽略错误的特性。我们修改流程如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(test_a, WHEN(test_b, test_c, test_d).ignoreError(true), test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次执行发现流程执行到了E节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129163209.png" alt="image.png"></p><p><code>LiteFlow</code>还提供了对<code>WHEN</code>并行流程中，使用子关键字<code>any</code>(默认为false)可以设置任一条分支先执行完即忽略其他分支，继续执行的特性。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(test_a, WHEN(test_b, test_c, test_d).ignoreError(true).any(true), test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们将C节点Sleep 10秒，可以发现C节点并没有执行，就执行到了E节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129170000.png" alt="image.png"></p><p>除此之外，<code>LiteFlow</code>还支持了并行编排中指定节点的执行则忽略其他，<code>WHEN</code>关键字子关键字 <code>must</code> (不可为空)，可用于指定需等待执行的任意节点，可以为 1 个或者多个，若指定的所有节点率先完成，则继续往下执行，忽略同级别的其他任务。我们将流程调节如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      THEN(test_a, WHEN(test_b, test_c, test_d).ignoreError(true).must(test_c), test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们还是将C节点Sleep 10秒，发现流程一直等到C节点执行结束才会执行后面的节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129171707.png" alt="image.png"></p><blockquote><p>must子关键字在LiteFlow从v2.11.1版本之后才有。</p></blockquote><ul><li>选择编排<br>在实现业务逻辑过程中，我们常见的就是根据某种标识去进行不同的业务流程，通常我们也可以使用策略模式进行实现。在<code>LiteFlow</code>中可以通过<code>SWITCH..TO()</code>选择编排，即<code>SWITCH</code>中的流程返回后面TO中那个节点就会执行那个节点，我们只需要处理好<code>SWITCH</code>中条件于TO中分支的关系即可。增加一个<code>Switch</code>组件：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_w"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件W"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行W节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"test_a"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们规则编排：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, test_b, test_c, test_d, test_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行流程：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129180607.png" alt="image.png"></p><p><code>SWITCH</code>还提供了子关键字<code>DEFAULT</code>，如果<code>SWITCH</code>返回的节点不是TO中的节点，则就走DEFAULT中指定的节点。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, test_b, test_c, test_d, test_e).DEFAULT(test_y);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129194449.png" alt="image.png"></p><p>由选择组件章节中我们知道，<code>SWITCH</code>可以返回ID或者链路Tag，上述例子中返回的<code>test_a</code>就是一个节点ID(对应<code>@LiteflowMethod</code>中指定的nodeId中的值)。当让在规则中我们也可以给表达式设置一个id。<code>LiteFlow</code>中规定，每个表达式都可以有一个id值，你可以设置id值来设置一个表达式的id值。然后在选择组件里返回这个id即可。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, THEN(test_b, test_c, test_d).id("test_bcd"), test_e).DEFAULT(test_y);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如此时<code>test_w</code>表达式返回的是<code>test_bcd</code>,则流程就会执行<code>test_b</code>, <code>test_c</code>, <code>test_d</code>节点：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129195541.png" alt="image.png"></p><p>除了给表达式赋值<code>id</code>属性之外，还可以给表达式赋值<code>tag</code>属性。在<code>SWITCH</code>中返回<code>tag</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testSwitchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SWITCH(test_w).TO(test_a, THEN(test_b, test_c, test_d).tag("test_tag"), test_e).DEFAULT(test_y);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们<code>SWITCH</code>组件中返回tag标签：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_w"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件W"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">processSwitch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行W节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"tag:test_tag"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129201425.png" alt="image.png"></p><ul><li>条件编排<br>条件编排类似Java中的if…else，它有<code>IF</code>，<code>IF...ELIF</code>，<code>ELSE</code>几种写法。其中IF以及ELIF中的表达式对应IF组件中返回的<code>boolean</code>结果。对与IF有二元表达式：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(test_f, test_a);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>IF</code>后面还可以跟<code>ELSE</code>。类似Java中的<code>else</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(test_f, test_a).ELSE(test_b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IF还支持三元表达式，上面的二元表达式等价于如下三元表达式写法：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(test_f, test_a, test_b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面两种表达式都可以解读为：如果<code>test_f</code>中返回<code>true</code>则执行<code>test_a</code>节点，否则执行<code>test_b</code>节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_f"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件F"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processF</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行F节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130102610.png" alt="image.png"></p><p>我们再看一下<code>ELIF</code>的写法，<code>ELIF</code>类似Java中的<code>else if</code>的写法，它的后面也可以跟<code>ELSE</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       IF(test_f, test_a).ELIF(test_x, test_b);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们在订一个<code>test_x</code>的IF组件：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_f"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件F"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processF</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行F节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_x"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件X"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processX</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行X节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130110428.png" alt="image.png"></p><p><code>test_f</code>节点返回false，所以不会执行<code>test_a</code>，继续执行<code>test_x</code>节点，返回true，则会执行<code>test_b</code>节点。<br>当然<code>ELIF</code>后面也可以使用<code>ELSE</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testIfChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       IF(test_f, test_a).ELIF(test_x, test_b).ELSE(test_c);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时如果<code>test_f</code>以及<code>test_x</code>都返回false，就会走<code>test_c</code>。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130111319.png" alt="image.png"></p><p>值得注意的是，当我们使用<code>IF</code>的二元表达式时才会去跟上<code>ELIF</code>以及<code>ELSE</code>。如果是三元表达式我们不可以使用<code>ELIF</code>以及<code>ELSE</code>，会报错。</p><blockquote><p>在2.10.0以前可以使用，但是在<code>IF</code>中的最后一个表达式会被<code>ELIF</code>或者`ELSE中的表达式<br>覆盖掉。本人只调研到了2.10.0,在这个版本中还是会报错。</p></blockquote><ul><li>循环编排</li></ul><p>循环编排类似Java中的循环，分为次数循环(<code>FOR...DO()</code>)，条件循环(<code>WHILE...DO()</code>)以及迭代循环(<code>ITERATOR...DO()</code>)，同时还涉及跳出循环编排(<code>BREAK</code>)。<br>我们定义一个固定次数的FOR循环：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testForChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      FOR(3).DO(THEN(test_a, test_b));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时会将<code>test_a</code>，<code>test_b</code>循环执行3次。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130135626.png" alt="image.png"></p><p>当然实际开发中，我们需要搭配<code>FOR</code>循环组件使用，即在<code>FOR</code>循环中返回需要执行的次数：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testForChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      FOR(test_w).DO(THEN(test_a, test_b));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>假如<code>test_w</code>组件中返回次数是3,则执行效果如上固定次数。</p><p>接下来我们看一下<code>WHILE</code>条件循环，<code>WHILE</code>的表达式需要结合<code>WHILE</code>组件使用，返回一个<br><code>boolean</code>类型的值，去控制循环的流程，如果为true则继续循环，否则结束循环。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      WHILE(test_h).DO(THEN(test_a, test_b));  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来我们继续看一下迭代循环<code>ITERATOR</code>，类似于Java中的for循环。这里我们要配合<code>ITERATOR</code>组件使用，返回一个集合的迭代器。</p><p>我们定义一个迭代循环编排：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testIteratorChain">      ITERATOR(test_i).DO(test_p);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们在定义一个迭代组件以及一个普通组件用于打印集合中的元素：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_ITERATOR<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>ITERATOR<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_i"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件I"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">processI</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_p"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试打印组件"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printData</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130143042.png" alt="image.png"></p><p>有循环编排，就相应的要有跳出循环编排，我们可以使用<code>BREAK</code>编排，配合<code>BREAK</code>组件使用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testForChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      FOR(test_j).DO(THEN(test_a, test_b)).BREAK(test_break);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      WHILE(test_h).DO(THEN(test_a, test_b)).BREAK(test_break);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  &lt;chain name = "testIteratorChain">      ITERATOR(test_i).DO(test_p).BREAK(test_break);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们以迭代循环跳出为例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_BREAK<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>BREAK<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_break"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测Break组件"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processBreak</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130145553.png" alt="image.png"></p><p>即执行到C元素时返回true，跳出循环。</p><blockquote><p>LiteFlow从v2.9.0开始，提供了循环编排表达式组合。</p></blockquote><ul><li>异常捕获<br>EL表达式中还增加了异常捕获表达式，用于捕获节点中的异常。类似Java中的<code>try...catch</code>。用法为<code>CATCH</code>…<code>DO</code>(<code>DO</code>关键字非必须)，如果在<code>CATCH</code>的表达式中捕获到了异常，可以在<code>DO</code>表达式中的节点进行处理，可以使用<code>nodeComponent.getSlot().getException()</code>获取异常信息。但是有一点我们需要注意，假如我们使用了<code>CATCH</code>，如果其中的节点中发生了异常，那么我们在流程执行的结果中也会看到流程执行成功的标识(<code>isSuccess</code>=true)，可以理解，发生的异常被你捕获处理了。</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testCatchChain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      CATCH(      THEN(test_a, test_b)      ).DO(test_catch);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在<code>test_b</code>节点中手动抛出一个<code>RuntimeException</code>，在<code>test_catch</code>中使用<code>nodeComponent.getSlot().getException()</code>打印捕获到的异常，同时我们在流程执行结果中打印<code>isSuccess</code>看流程是否执行成功：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_catch"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试Catch组件"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processCatch</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"执行Catch节点，捕获到了异常\n"</span><span class="token punctuation">,</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"testCatchChain"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"执行成功"</span> <span class="token operator">:</span> <span class="token string">"执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果中的异常信息："</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130152104.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130152151.png" alt="image.png"></p><p>可以看到<code>test_catch</code>打印了异常信息，同时我们可以看到流程执行结果中返回执行成功，没有异常信息。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130152252.png" alt="image.png"></p><p>同时<code>CATCH</code>配合迭代循环还可以达到Java<code>forEach</code>循环的<code>continue</code>的效果。</p><pre class="line-numbers language-XML"><code class="language-XML"><chain name = "testIteratorCatchChain">      ITERATOR(test_i).DO(CATCH(THEN(test_pa, test_pb, test_pc)));  </chain><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们在<code>test_pb</code>在打印C时抛出异常</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_pb"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试打印组件B"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printPB</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      String str <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getCurrLoopObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B组件打印："</span><span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"B组件发生异常了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130155121.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130155133.png" alt="image.png"></p><p>此时没有执行C组件打印B，直接跳过了<code>test_pc</code>节点。</p><blockquote><p>LiteFlow从2.10.0开始提供CATCH表达式</p></blockquote><ul><li>与或非表达式<br>与或非表达式即<code>AND</code>，<code>OR</code>，<code>NOT</code>表达式。可以用于返回<code>boolean</code>值的组件的编排。可以将若干个这种组件编排在一起返回应该boolean值进行后续流程的判断。</li></ul><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testAndOrNotChain">      IF(AND(test_f, test_x), test_a, test_c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时只有<code>test_f</code>和<code>test_x</code> 节点都返回true，就会走<code>test_a</code>，否则走<code>test_c</code>。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testAndOrNotChain">      IF(OR(test_f, test_x), test_a, test_c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是OR，<code>test_f</code>和<code>test_x</code> 节点都返回false，就会走<code>test_c</code>，否则走<code>test_c</code>。</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "testAndOrNotChain">      IF(NOT(test_f), test_a, test_c);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>NOT</code>即非的意思，如果<code>test_f</code>返回true，则就会走<code>test_c</code>节点，否则走<code>test_a</code>节点。</p><p><code>AND</code>，<code>OR</code>，<code>NOT</code>三种表达式可以相互组合使用。但是只能用于返回<code>boolean</code>值的组件上。</p><ul><li>子流程<br>在日常处理复杂业务时，流程编排的规则会嵌套很多层，可以想象一下那样的流程读起来也比较头疼，而且事实上我们在开发中是需要将复杂的流程业务去拆分成一个个独立的子流程去实现。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130170244.png" alt="image.png"></li></ul><p>如上图它的规则如下：</p><pre class="line-numbers language-xml"><code class="language-xml">&lt;chain name = "order_handle">  THEN(      SWITCH(order_x).TO(      THEN(          order_a,          order_c,          IF(              order_k,                  THEN(                      order_d,                      order_f                  ),              order_e)          ).id("to_c"),      THEN(          order_b,          order_c,              IF(                  order_k,                  THEN(                      order_d,                      order_f              ),          order_e)      ).id("to_b")      )  );  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样写其实也可以，但是读起来理解起来不号。这时我们就可以子流程进行改造。我们按照<code>to_c</code>,<code>to_b</code>流程进行拆分。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    // 主流程      THEN(SWITCH(order_x).TO(THEN(to_c).id("to_c"), THEN(to_b).id("to_b")), order_h);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_if<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      IF(order_k, THEN(order_d, order_f), order_e);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  &lt;chain name = "to_c">      THEN(order_a, order_c, order_if);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span>  &lt;chain name = "to_b">      THEN(order_b, order_c, order_if);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样流程上就清晰了很多。</p><ul><li>子变量<br>在复杂流程的编排上，我们不仅可以使用子流程，还可以使用子变量的方式。我们可以直接在流程中定义变量。如上述例子使用子变量可以改造为：</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      // 定义一个if节点处理df/e      order_if = IF(order_k, THEN(order_d, order_f), order_e);      // 定义to_c的订单流程 用id标识流程为to_c      to_c = THEN(order_a, order_c, order_if).id("to_c");      // 定义to_b的订单流程 用id标识为流程to_b      to_b = THEN(order_b, order_c, order_if).id("to_b");      // 主流程      THEN(SWITCH(order_x).TO(to_c, to_b), order_h);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样也可以清晰。</p><ul><li>其他<br>我们在上述一些示例中，每个语句后都加了分号：<code>;</code>，关于规则中的分号，我们链路中只有一条规则的时候（没有自变量）可以不加也可以运行，但是如果存在自变量，一定要在自变量中加上分号，否则汇报错。同时官方也建议不管是否存在子变量，都要加上分号。</li></ul><p>另外，EL中我们使用<code>//</code>定义注释。</p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>在上述的一些示例中，我们使用了<code>flowExecutor</code>去执行规则。<code>FlowExecutor</code>就是流程的执行器，是一个流程执行的触发点。在<code>Spring</code>或者<code>SprigBoot</code>环境下我们可以直接注入<code>FlowExecutor</code>进行使用。<br><code>FlowExecutor</code>中提供同步以及异步两种类型的方法，同步方法直接返回<code>LiteflowResponse</code>，而异步返回的是<code>Future&lt;LiteflowResponse&gt;</code>。同步方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//参数为流程ID，无初始流程入参，上下文类型为默认的DefaultContext</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数为流程ID，第二个参数为流程入参。上下文类型为默认的DefaultContext</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数为流程ID，第二个参数为流程入参，后面可以传入多个上下文class</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanClazzArray<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第一个参数为流程ID，第二个参数为流程入参，后面可以传入多个上下文的Bean</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2Resp</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanArray<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第一个参数为流程ID，第二个参数为流程入参，第三个参数是用户的RequestId，后面可以传入多个上下文的Bean</span><span class="token keyword">public</span> LiteflowResponse <span class="token function">execute2RespWithRid</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> String requestId<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanClazzArray<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们一定要使用自定义上下文传入，不要使用默认上下文。</p><p>而异步方法跟同步方法是一样的，只是他是无阻塞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Future<span class="token operator">&lt;</span>LiteflowResponse<span class="token operator">></span> <span class="token function">execute2Future</span><span class="token punctuation">(</span>String chainId<span class="token punctuation">,</span> Object param<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> contextBeanArray<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时，执行器可以针对异步执行提供了可配置的线程池参数，</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## FlowExecutor的execute2Future的线程数</span><span class="token attr-name">liteflow.main-executor-works</span><span class="token punctuation">=</span><span class="token attr-value">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以使用自定义线程池，如果使用自定义线程池必须实现<code>ExecutorBuilder</code>接口，实现<code>ExecutorService buildExecutor()</code>接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiteFlowThreadPool</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorBuilder</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> ExecutorService <span class="token function">buildExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-%s"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>              <span class="token comment" spellcheck="true">// 核心线程数，即2个常开窗口  </span>            <span class="token number">2</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 最大的线程数，银行所有的窗口  </span>            <span class="token number">5</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 空闲时间  </span>            <span class="token number">5</span><span class="token punctuation">,</span>              TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 工作队列  </span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 线程工厂  </span>            threadFactory<span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">// 拒绝策略  </span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于Java线程池的配置详解，请参考这篇文章：<a href="https://www.coderacademy.online/article/2d9d416b.html">重温Java基础（二）之Java线程池最全详解 | 码农Academy的博客 (coderacademy.online)</a></p></blockquote><p>我们可以通过<code>LiteFlow</code>的配置信息去设置:</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## FlowExecutor的execute2Future的自定义线程池的路径</span><span class="token attr-name">liteflow.main-executor-class</span><span class="token punctuation">=</span> <span class="token attr-value">com.springboot.litefolw.config.LiteFlowThreadPool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过上述配置文件配置的信息，对全局的<code>FlowExecutor</code>都会生效，假如我们相对某一个执行器定义线程池内容，可以使用<code>LiteFlowConfig</code>类去的定义（通过配置文件中配置信息也会进入到这个类里）。</p><pre class="line-numbers language-java"><code class="language-java">LiteflowConfig liteflowConfig <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">getLiteflowConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// FlowExecutor的execute2Future的自定义线程池的路径</span>liteflowConfig<span class="token punctuation">.</span><span class="token function">setMainExecutorClass</span><span class="token punctuation">(</span><span class="token string">"com.springboot.litefolw.config.LiteFlowThreadPool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// FlowExecutor的execute2Future的自定义线程池的路径</span>liteflowConfig<span class="token punctuation">.</span><span class="token function">setMainExecutorWorks</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里不建议new一个LiteflowConfig去设置配置信息，这样可能会导致配置文件中的一些默认配置信息丢失。</p></blockquote><p>在一个流程执行时，我们需要传入一些参数例如订单号，账户信息等，这些信息会做初始参数传入到流程中。在执行器中我们可以使用上述<code>FlowExecutor</code>的方法中的第二个参数(Object param)传入流程入参参数。流程入参可以是任何对象，实际开发中，我们会将自己封装初始化好的Bean传入，然后可以在流程中使用<code>this.getRequestData()</code>或者<code>nodeCompoent.getRequestData()</code>。</p><pre class="line-numbers language-java"><code class="language-java">DataRequest dataRequest <span class="token operator">=</span> DataRequest<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iteratorRequestList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LiteflowResponse response <span class="token operator">=</span> <span class="token comment" spellcheck="true">// 流程传入参数</span>flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"testIteratorCatchChain"</span><span class="token punctuation">,</span> dataRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在流程中获取入参参数：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>          DataRequest dataRequest <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_a"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件A"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行A节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          DataRequest dataRequest <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>理论上来说，流程入参可以是任何对象，但是我们不应该把数据上下文的实例当做参数传入。流程参数跟数据上下文是两个实例对象，流程入参只能通过<code>this.getRequestData()</code>去拿。</p></blockquote><p>最后我们来说一下流程执行的结果<code>LiteflowResponse</code>。异步执行的流程可以通过<code>future.get()</code>获取。我们简单介绍一下其中常用的一些方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LiteflowResponse</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断流程是否执行成功</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果流程执行不成功，可以获取流程的异常信息，这个跟isSuccess()使用，很有用</span>    <span class="token keyword">public</span> Exception <span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取流程的执行步骤</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>CmpStep<span class="token operator">>></span> <span class="token function">getExecuteSteps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取流程的执行的队列信息</span>    <span class="token keyword">public</span> Queue<span class="token operator">&lt;</span>CmpStep<span class="token operator">></span> <span class="token function">getRollbackStepQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取流程的执行步骤的字符串信息。这个值在流程执行结束后,liteflow日志也会自动打印</span>    <span class="token keyword">public</span> String <span class="token function">getExecuteStepStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据上下文信息</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getContextBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> contextBeanClazz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据上下文"><a href="#数据上下文" class="headerlink" title="数据上下文"></a>数据上下文</h4><p>数据上下文对与整个<code>LiteFlow</code>来说是非常重要的，从LiteFlow的简介中我们知道LiteFlow的主要功能是业务解耦，那么解耦中很重要的一步就是数据解耦。要做编排，就要消除各个组件中的差异性，组件不接收业务参数，也不会返回业务数据，每个组件只需要从数据上下文中获取自己关心的数据，不用关心此数据是由谁提供的，同样的，每个组件也只需要把自己执行所产生的结果数据放到数据上下文中，也不用关心此数据到底是提供给谁用的。这样就在一定程度上做到了数据解耦。数据上下文进入流程中后，整个链路中的任一节点都可以取到。不同的流程，数据上下文实例是完全隔离开的。</p><p>LiteFlow虽然也提供了默认的数据上下文<code>DefaultContext</code>，但是实际开发中不建议使用。我们要传入自己自定义的数据上下文对象，同流程入参，我们可以使用任意的Bean作为数据上下文传入到流程中。我们可以定义好若干个数据上下文对象的class传入到流程中，LiteFlow会在调用时进行初始化，给这个上下文分配唯一的实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 传入一个</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 传入多个</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以将已经初始化好的Bean作为数据上下文传入到流程当中：</p><pre class="line-numbers language-java"><code class="language-java">DataContext dataContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 传入一个</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 传入多个</span>OrderContext orderContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"chain1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataContext<span class="token punctuation">,</span> orderContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是有一点要非常注意：<strong>框架并不支持上下文bean和class混传，你要么都传bean，要么都传class。</strong></p><p>然后我们就可以在链路的任意节点中通过以下方式获取数据上下文：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestComponent</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"test_a"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"测试组件A"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行A节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      DataContext dataContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@LiteflowComponent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AComponent</span> <span class="token keyword">extends</span> <span class="token class-name">NodeComponent</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>           DataContext dataContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          OrderContext orderContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，SpringBoot环境下LiteFlow的一些基本概念就介绍完了，大家可以按照这些概念实现一个demo去体验LiteFlow那解耦，以及流程编排那种特爽的柑橘。当然大家也可以参考这篇文章去实现demo：<a href="https://www.coderacademy.online/article/springbootliteflowuse.html">SpringBoot+LiteFlow优雅解耦复杂核心业务 | 码农Academy的博客 (coderacademy.online)</a></p><p>后面我们在介绍LiteFlow的一些高级特性，例如：组件降级，组件继承，组建回滚，热刷新，以及使用代码构建规则，使用脚本构建组件，还有使用Nacos，Redis作为规则文件源等。</p>]]></content>
      
      
      <categories>
          
          <category> 规则引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> LiteFlow </tag>
            
            <tag> 规则引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提高Java开发生产力，我选Stream API,真香啊</title>
      <link href="/article/javastreamapi.html"/>
      <url>/article/javastreamapi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>Java 8 引入的Stream API提供了一种新的数据处理方式，它以声明式、函数式的编程模型，极大地简化了对集合、数组或其他支持数据源的操作。Stream可以被看作是一系列元素的流水线。允许你高效地对大量数据执行复杂的过滤、映射、排序、聚合等操作，而无需显式地使用循环或者临时变量。Stream API的设计理念主要包括两个方面：<strong>链式调用</strong>和<strong>惰性求值</strong>。链式调用允许我们将多个操作连接在一起，形成一个流水线，而惰性求值意味着只有在真正需要结果的时候才执行计算，从而避免了不必要的计算开销。</p><p>接下来我们就来盘点一下日常开发中常用的一些Stream API。</p><h3 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h3><ul><li><strong>集合创建</strong></li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 串行流</span>Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 并行流</span>Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> parallelStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>数组创建</strong></li></ul><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用<code>Stream.of(T...values)</code>创建</li></ul><pre class="line-numbers language-java"><code class="language-java">Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用Stream.generate()创建流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生成一个无限流，通过limit()限制元素个数  </span>Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> randomStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用Stream.iterate()创建流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生成一个等差数列，通过limit()限制元素个数 </span>Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integerStream <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用IntStream、LongStream、DoubleStream创建原始类型流</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用IntStream创建  </span>IntStream intStream <span class="token operator">=</span> IntStream<span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4]  </span><span class="token comment" spellcheck="true">// 使用LongStream创建  </span>LongStream longStream <span class="token operator">=</span> LongStream<span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>IntStream我们使用的地方还是比较多的，比如我们按照下标遍历一个集合时，同常的做法是：for(int i = 0; i &lt; list.size(); i++){}，我们可以使用IntStream去改造一下，IntStream.rangeClosed(0, list.size()).forEach();</p></blockquote><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p>中间操作是构建流水线的一部分，用于对流进行转换和处理，但它们并不会触发实际的计算。</p><ul><li>过滤操作（filter）<br>过滤操作用于筛选流中的元素，保留满足指定条件的元素。<code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code>，<code>filter</code>接受一个谓词Predicate，我们可以通过这个谓词定义筛选条件，<code>Predicate</code>是一个函数式接口，其包含一个<code>test(T t)</code>方法，该方法返回boolean。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> fruits <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 过滤长度大于5的水果  </span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> filteredFruits <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>fruit <span class="token operator">-</span><span class="token operator">></span> fruit<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度大于5的水果: "</span><span class="token operator">+</span> filteredFruits<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">filterTest</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students<span class="token punctuation">)</span><span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>Student<span class="token operator">></span> filterStudents <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"武汉大学"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      filterStudents<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240131232112.png" alt="image.png"></p><ul><li>映射操作（map/flatMap）<br>映射操作用于对流中的每个元素进行转换。他有map以及flatMap两种操作。map就是基本的映射操作，对每个元素进行提取转换。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将实体层映射成学生姓名字符串  </span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将字符串转大写。</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> upperList <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"stream"</span><span class="token punctuation">,</span> <span class="token string">"api"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日常开发中map操作我们用的非常多，比如数据库中查询出来的DO实体，我们需要转换为VO返回给前端页面展示，这时候我们可以使用map进行转换操作：</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>StudentDO<span class="token operator">></span> studentDOList <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">listStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>StudentVO<span class="token operator">></span> studentVOList <span class="token operator">=</span> studentDOList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>studentDO <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    StudentVO studentVO <span class="token operator">=</span> StudentVO<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">studentNo</span><span class="token punctuation">(</span>studentDO<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">studentName</span><span class="token punctuation">(</span>studentDO<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> studentVO<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而flatMap的作用略微特殊，它用于将一个元素映射为一个流，然后将所有流连接成一个流。这在处理嵌套结构或集合中的元素是另一个集合的情况下非常有用。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> nestedWords <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>    Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Kotlin"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"Ruby"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"JavaScript"</span><span class="token punctuation">,</span> <span class="token string">"TypeScript"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 flatMap 将嵌套的 List&lt;String> 转换为一个扁平的 List&lt;String>, 结果将是包含所有单词的扁平流</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> wordList <span class="token operator">=</span> nestedWords<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>List<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果： [Java, Kotlin, Python, Ruby, JavaScript, TypeScript]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>flatMap</code>在使用时，通常会涉及到处理复杂的数据结构，比如处理嵌套的对象集合或者进行数据的扁平化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> grades<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">class</span> <span class="token class-name">ClassRoom</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">class</span> <span class="token class-name">School</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>ClassRoom<span class="token operator">></span> classRoomList<span class="token punctuation">;</span>  <span class="token punctuation">}</span>School school <span class="token operator">=</span> School<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">classRoomList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>                  ClassRoom<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">studentList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>                          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  ClassRoom<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">studentList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>                          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"David"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 flatMap 扁平化处理获取所有学生的所有课程成绩  </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> allGrades <span class="token operator">=</span> school<span class="token punctuation">.</span><span class="token function">getClassRoomList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>classroom <span class="token operator">-</span><span class="token operator">></span> classroom<span class="token punctuation">.</span><span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> student<span class="token punctuation">.</span><span class="token function">getGradeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allGrades<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：[90, 85, 88, 78, 92, 80, 95, 89, 91, 82, 87, 79]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mapToInt操作<br><code>mapToInt</code> 是 Stream API 中的一种映射操作，专门用于将元素映射为 <code>IntStream</code>。通过 <code>mapToInt</code>，你可以将流中的元素映射为 <code>int</code> 类型，从而进行更专门化的操作，例如数值计算。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> totalAge2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类似的还有<code>mapToLong</code>和<code>mapToDouble</code> 操作，这两个操作类似于 <code>mapToInt</code>，分别用于将流中的元素映射为 <code>LongStream</code> 和 <code>DoubleStream</code>。</p><ul><li>排序操作（sorted）<br>排序操作用于对流中的元素进行排序。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> cities <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span><span class="token punctuation">,</span> <span class="token string">"London"</span><span class="token punctuation">,</span> <span class="token string">"Paris"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对城市按字母顺序排序</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedStream <span class="token operator">=</span> cities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于集合中对象的排序，sorted要求待比较的元素必须实现Comparable接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Builder</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student other<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> other<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedList <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有实现，就需要将比较器作为参数传递给<code>sorted(Comparator&lt;? super T&gt; comparator)</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token annotation punctuation">@Builder</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String name<span class="token punctuation">;</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> sortedList <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>去重操作（distinct）<br>去重操作用于去除流中的重复元素。distinct基于Object.equals(Object)实现。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 去除重复的数字  </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> distinctList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者去除学生中姓名相同的</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> studentNameList <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                 <span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>截断操作（limit）<br>截断操作用于限制流中元素的数量。limit返回包含前n个元素的流，当集合大小小于n时，则返回实际长度。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只取前三个数字 </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> limitedList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取土工工程专业的年龄最小的前两名学生</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> limitStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跳过操作（skip）<br>跳过操作用于跳过流中的前几个元素，返回由后面所有元素构造的流，如果n大于满足条件的集合的长度，则会返回一个空的集合。作用上跟limit相反。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> numbers <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳过前三个数字，返回后面的数字 </span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> limitedList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 跳过土工工程专业的年龄最小的前两名学生，取后面的学生</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> limitStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>peek操作<br><code>peek</code> 方法对每个元素执行操作并返回一个新的 Stream。<code>peek</code> 的主要目的是用于调试和观察流中的元素，通常用于打印调试信息、记录日志或其他类似的目的，而不会改变流中元素的结构。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>String<span class="token operator">></span> modifiedWords <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filtered Word: "</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>word <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Uppercase Word: "</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Stream的终端操作"><a href="#Stream的终端操作" class="headerlink" title="Stream的终端操作"></a>Stream的终端操作</h3><p>终端操作是对流进行最终计算的操作，执行终端操作后，流将被消耗，不能再被使用。</p><ul><li>迭代forEach操作<br><code>forEach</code> 迭代操作，用于对流中的每个元素执行指定的操作。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> fruits <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 forEach 输出每个水果</span>fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fruit <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行forEach时可省略 stream()，即</span>fruits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fruit <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或</span>fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>收集操作(collect)<br>通过<code>collect()</code>方法结合<code>java.util.stream.Collectors</code>工具类将Stream转换为另一种形式，例如列表、集合(toList, toSet, toMap)、映射或归约结果。如上述示例中的: </li></ul><ol><li>收集到List<br>使用<code>Collectors.toList()</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 跳过土工工程专业的年龄最小的前两名学生，取后面的学生</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> limitStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>student1<span class="token punctuation">,</span>student2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> student2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> student1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>收集到Set<br>使用<code>Collectors.toSet()</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 将学生姓名收集到Set</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> studentNameSet <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>List转Map<br>使用<code>Collectors.toMap</code>。日常开发中使用很多。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 转换为年龄对应的学生信息  </span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Student<span class="token operator">></span> studentMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                                            Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span>                                             Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                             <span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> e1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码代表，我们使用年龄作为Map的key，对应学生信息作为value。<code>Function.identity()</code>：这是一个提取元素自身的映射函数。<code>(e1, e2) -&gt; e1</code>：这是一个合并冲突的操作。如果在流中存在相同的年龄（相同的键），这个函数定义了当出现重复键时应该如何处理。在这里，我们选择保留第一个出现的元素，即保留先出现的 <code>Student</code> 对象。当然我们还可以这样<code>(e1, e2) -&gt; {...}</code>自定义合并冲突策略，例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 转换为年龄对应的学生信息,如果年龄相同，则取名字较长的  </span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Student<span class="token operator">></span> studentMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">,</span> Function<span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> e1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> e2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> e1 <span class="token operator">:</span> e2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果value的值是一些number，我们也可以做一些加减乘除之类的合并。</p><p>日常开发中，这个用法很频繁。</p><ol start="4"><li>字符串拼接：<br>使用<code>Collectors.joining(拼接符)</code>。</li></ol><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students  <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          Student<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gradeList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  String studentName <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印出来：Alice,Bob</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>分组<br>即按照集合中的元素的某个属性进行分组，转换为<code>Map&lt;Object, List&lt;Object&gt;&gt;</code>:</li></ol><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> fruits <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"grape"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> lengthToNamesMap <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 按照年龄分组  </span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> studentMap <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连续进行分组</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Student<span class="token operator">>>></span> groupsStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 先按照学校分组  </span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getSchool          <span class="token comment" spellcheck="true">// 再按照专业分组  </span>        <span class="token punctuation">,</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getMajor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>counting()<br><code>counting()</code> 收集器用于计算流中元素的数量。等同于Stream的<code>count()</code>操作。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 效果同等于</span><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>maxBy()<br><code>maxBy()</code>基于指定的比较器，用于找到流中的最大的元素。等同于Stream的<code>max</code>操作</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 年龄最大的学生</span>Student olderStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> s1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span> s2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>Student olderStudent2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于stram的max</span>Student olderStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>minBy()<br><code>minBy()</code>基于指定的比较器，用于找到流中的最小的元素。等同于Stream的<code>min</code>操作。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 年龄最小的学生</span>Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>averagingInt<br><code>averagingInt()</code> 收集器用于计算流中元素的平均值。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 求学生平均年龄</span><span class="token keyword">double</span> avgAge <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">averagingInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="10"><li>summarizingInt()<br><code>summarizingInt()</code> 收集器用于计算流中元素的汇总统计信息，包括总数、平均值、最大值和最小值。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一次性得到元素个数、总和、均值、最大值、最小值</span>IntSummaryStatistics summaryStatistics <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总数："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"平均值："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大值："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小值："</span> <span class="token operator">+</span> summaryStatistics<span class="token punctuation">.</span><span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>partitioningBy()<br>将流中的元素按照指定的条件分成两个部分。在分区中key只有两种情况：true或false，目的是将待分区集合按照条件一分为二，分区相对分组的优势在于，我们可以同时得到两类结果，在一些应用场景下可以一步得到我们需要的所有结果，比如将数组分为奇数和偶数。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 分为武汉大学学生，非武汉大学学生</span>Map<span class="token operator">&lt;</span>Boolean<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Student<span class="token operator">>></span> partStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"武汉大学"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>count操作<br><code>count</code> 用于计算流中的元素个数。效果等同于<code>Collectors.counting()</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 效果同等于</span><span class="token keyword">long</span> studentCount <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>max操作<br>基于指定比较器，max用于找到流中最大的元素。效果等同于<code>Collectors.maxBy()</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student olderStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>  Student olderStudent2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>min操作<br>基于指定比较器，min用于找到流中最小的元素。效果等同于<code>Collectors.minBy()</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 年龄最小的学生</span>Student youngStudent <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reduce操作<br><code>reduce</code> 用于对流中的元素进行归约操作，得到一个最终的结果。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 计算学生的总年龄</span><span class="token keyword">int</span> totalAge1 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以使用Integer.sum</span><span class="token keyword">int</span> totalAge2 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 也可以不设置初始值0，直接Integer.sum，但是返回的是Optional</span><span class="token keyword">int</span> totalAge3 <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getAge<span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>findFirst操作<br><code>findFirst</code> 用于查找流中的第一个元素。也即<code>list.get(0)</code>。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student firstStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>曾经有个小兄弟问我，他有一段代码类似 Student firstStu = students.get(0)。他们组长让他优化优化，然后就用了这种方式优化的。😂</p></blockquote><ul><li>findAny操作<br><code>findAny</code> 用于查找流中的任意一个元素。在并行流中，<code>findAny</code> 可以更快地获取结果，而在串行流中与 <code>findFirst</code> 的效果基本一致。</li></ul><pre class="line-numbers language-java"><code class="language-java">Student anyStu <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"土木工程"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>anyMatch操作<br>anyMatch则是检测是否存在一个或多个满足指定的参数行为，如果满足则返回true。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> hasQh <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"清华大学"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>noneMatch<br>noneMatch用于检测是否不存在满足指定行为的元素，如果不存在则返回true.</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> hasBd <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"北京大学"</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>allMatch<br>allMatch用于检测是否全部都满足指定的参数行为，如果全部满足则返回true。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> isAdult <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>student <span class="token operator">-</span><span class="token operator">></span> student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>在Java 8及以上版本，你可以使用并行流（Parallel Stream）来充分利用多核处理器的能力。并行流在处理大量数据时可以提高性能，但并不是在所有情况下都比顺序流更快。当在并行流上进行操作时，需要注意并发问题。确保你的操作是无状态的、无副作用的，或者使用合适的并发工具。一定一定要注意线程安全。并行流本质上基于java7的Fork-Join框架实现，其默认的线程数为宿主机的内核数。</p><p>创建并行流，只需要将stream()替换成parallelStream()即可。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">listStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>Student<span class="token operator">></span> parallelStream <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与顺序流相似，你可以在并行流上执行各种中间和终端操作。</p><p>日常中，对于大批量的数据处理转换，我们可以使用并行流去处理。我们可以先把数据切分成100或者其他数值一组的<code>List&lt;List&lt;Student&gt;&gt;</code> 然后使用并行流去处理这些数据。</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>StudentVO<span class="token operator">></span> studentVOList <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Lists<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pList <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理转换数据</span>    List<span class="token operator">&lt;</span>StudentVO<span class="token operator">></span> voList <span class="token operator">=</span> <span class="token function">convertList</span><span class="token punctuation">(</span>pList<span class="token punctuation">)</span><span class="token punctuation">;</span>      studentVOList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>voList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再比如一些大批量的数据分批次查询，都可以使用并行流去做，但是一定要注意线程安全。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用Stream API可使Java集合处理更简洁、清晰，充分发挥现代、函数式编程的优势。然而，需注意Stream的惰性求值，只在终端操作触发时执行中间操作，确保操作的必要性，避免不必要计算。Stream鼓励无状态、无副作用的操作，避免在中间操作修改共享状态，以确保流的预测性和可维护性。Stream不可重用，一旦被消费，无法再次使用，需谨慎设计流程。并行流虽提高性能，但需谨慎使用，不适用于所有情况，可能导致额外性能开销。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Java 8中引入的Stream API为开发者带来了全新的编程范式。其链式调用和惰性求值的设计理念，使得数据处理变得更为简单和高效。通过深入理解Stream API，我们能够更好地利用这一强大工具，在实际开发中写出更为优雅和易读的代码。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Stream流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Mybatis的TypeHandler，轻松应对Mysql的JSON类型</title>
      <link href="/article/mybatistypehandler.html"/>
      <url>/article/mybatistypehandler.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在<code>MyBatis</code>中，<code>TypeHandler</code>是一个核心的组件，负责处理数据库字段与<code>Java</code>对象之间的类型转换。由于不同数据库系统和<code>Java</code>数据类型之间存在差异，因此需要<code>TypeHandler</code>来进行数据的转换，以确保数据的正确性和一致性。接下来我们一起探讨<code>MyBatis</code>中<code>TypeHandler</code>的相关知识，包括其基础原理、编写自定义<code>TypeHandler</code>、处理常见数据类型、高级应用以及性能优化等内容。</p><h3 id="TypeHandler的工作原理"><a href="#TypeHandler的工作原理" class="headerlink" title="TypeHandler的工作原理"></a>TypeHandler的工作原理</h3><p>TypeHandler 的工作原理主要体现在两个关键环节：参数设置和结果集映射。</p><ol><li><strong>参数设置</strong>： 当<code>MyBatis</code> 执行<code>SQL</code>语句时，需要将用户传入的方法参数或者 <code>Mapper XML</code>文件中定义的参数值设置到<code>PreparedStatement</code>对象中。对于非基本类型的参数，如自定义对象、枚举或其他复杂类型，<code>MyBatis</code>将通过查找对应的 <code>TypeHandler</code> 实现类来完成转换工作。即<code>MyBatis</code>根据参数的<code>Java</code>类型找到对应的<code>TypeHandler</code>，然后调用其<code>setParameter</code> 方法，这个方法会将<code>Java</code>类型的数据转换为<code>JDBC</code>可识别的数据库类型，并调用<code>PreparedStatement</code> 的<code>set</code>方法将转换后的数据写入预编译的<code>SQL</code>语句中。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224225601.png" alt="image.png"></p><ol start="2"><li><strong>结果集映射</strong>： 在查询执行完毕后，<code>MyBatis</code>需要将从<code>ResultSet</code>中读取的数据转换成<code>Java</code>类型并填充到目标对象属性上。如下即为根据<code>jdbcType</code>或者<code>javaType</code>获取对对应的<code>typeHandler</code>。</li></ol><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223173757.png" alt="image.png"></p><blockquote><p>如果在Mybatis的xml中指定了TypeHandler则会直接使用这个Handler。</p></blockquote><p><code>MyBatis</code>通过结果映射配置来确定将结果集中的哪些列映射到<code>Java</code>对象的哪些属性上。当<code>MyBatis</code>从<code>ResultSet</code>中获取某列数据时，它会根据结果映射配置所关联的<code>Java</code>类型，找到相应的<code>TypeHandler</code>。然后，<code>MyBatis</code>调用<code>TypeHandler</code>的<code>getResult</code>方法，该方法将从数据库返回的<code>JDBC</code>类型数据转换为<code>Java</code>类型，并最终赋值给目标<code>Java</code>对象的属性。这个过程确保了数据库中的数据与<code>Java</code>对象之间的正确转换和映射，从而实现了数据的持久化操作。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223161914.png" alt="image.png"></p><h3 id="自定义TypeHandler"><a href="#自定义TypeHandler" class="headerlink" title="自定义TypeHandler"></a>自定义TypeHandler</h3><p>在<code>MyBatis</code>中，虽然已经提供了丰富的内置<code>TypeHandler</code>来处理常见的数据类型，但在实际开发中，有时候我们可能需要处理一些特殊的数据类型或者定制化的数据转换逻辑，例如数据库中的某个字段存储的是特定格式的字符串（例如JSON数据类型），但<code>Java</code>端需要将其转换为枚举或自定义对象。这时候，就需要编写自定义的<code>TypeHandler</code>来进行数据处理。</p><h4 id="TypeHandler接口"><a href="#TypeHandler接口" class="headerlink" title="TypeHandler接口"></a>TypeHandler接口</h4><p>要编写自定义的<code>TypeHandler</code>，首先需要实现<code>MyBatis</code>提供的<code>TypeHandler</code>接口。该接口定义了处理结果集方法<code>getResult</code>和处理参数的方法<code>setParameter</code>。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223230034.png" alt="image.png"></p><p>在实现<code>TypeHandler</code>接口后，我们需要重写这几个方法，<code>setParameter</code>方法用于将<code>Java</code>对象的属性值设置到<code>PreparedStatement</code>中，而<code>getResult</code>方法则用于将<code>ResultSet</code>中的数据转换为<code>Java</code>对象的属性值。</p><h4 id="BaseTypeHandler抽象类"><a href="#BaseTypeHandler抽象类" class="headerlink" title="BaseTypeHandler抽象类"></a>BaseTypeHandler抽象类</h4><p>实际上，我们在日常开发中常使用的并不是实现<code>TypeHandler</code>接口，而是继承<code>BaseTypeHandler</code>抽象类。<code>BaseTypeHandler</code>实现了<code>TypeHandler</code>接口，<code>BaseTypeHandler</code>提供了对<code>TypeHandler</code>接口中方法的默认实现，包括空值处理、异常处理等，减少了重复的代码编写，提高了开发效率。同时，<code>BaseTypeHandler</code>也提供了一些扩展点，使得开发者可以在不改变核心逻辑的情况下进行定制化扩展，满足不同场景下的需求。使用<code>BaseTypeHandler</code> 抽象类可以使自定义<code>TypeHandler</code>的编写更加规范、简化和灵活。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240223232703.png" alt="image.png"></p><h4 id="MappedJdbcTypes和MappedTypes"><a href="#MappedJdbcTypes和MappedTypes" class="headerlink" title="MappedJdbcTypes和MappedTypes"></a>MappedJdbcTypes和MappedTypes</h4><p>在自定义的<code>TypeHanlder</code>时，我们也可以使用<code>@MappedJdbcTypes</code>和<code>@MappedTypes</code>注解，显示的指定你的<code>TypeHanlder</code>要处理的<code>JDBC</code>类型和<code>Java</code>类型。</p><ul><li><code>@MappedJdbcTypes</code>注解用于指定该TypeHandler支持的JDBC类型。通过这个注解，可以明确告知<code>Mybatis</code>此类型处理器在<code>getResult</code>时应该处理哪些数据库中的数据类型（如<code>VARCHAR</code>、<code>TIMESTAMP</code>等）。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> JdbcType<span class="token punctuation">.</span>VARBINARY<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToJsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体梳理逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上，<code>TypeHandler</code>将被用于映射到<code>JDBC</code>类型为<code>VARCHAR</code>的列上的<code>AddressBO</code>类型。</p><ul><li><code>@MappedTypes</code>注解则用于指定<code>Java</code>类型，它告诉<code>Mybatis</code>这个<code>TypeHandler</code>在执行<code>setParameter</code>时应该关联于哪些<code>Java</code>类或接口上。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MappedTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>AddressBO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToJsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体逻辑处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上，当<code>Mybatis</code>遇到与<code>AddressBO</code>类型相匹配的属性时，会使用这个<code>TypeHandler</code>进行转换。</p><p>通常，为了确保<code>TypeHandler</code>能在正确的地方被应用，同时考虑到可读性和维护性，推荐在自定义<code>TypeHandler</code>中同时使用这两个注解来清晰地定义其适用范围：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">,</span> JdbcType<span class="token punctuation">.</span>VARBINARY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MappedTypes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>AddressBO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressToJsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体逻辑处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是在某些情况下，如果是在全局配置或者具体的映射文件中显式制定注册了<code>TypeHandler</code>，则可能不需要这些注解也能正常工作。但是，使用注解可以提高代码的清晰度和自动化的可能性。</p><h4 id="注册TypeHandler"><a href="#注册TypeHandler" class="headerlink" title="注册TypeHandler"></a>注册TypeHandler</h4><p>编写完自定义的<code>TypeHandler</code>后，还需要将其注册到<code>MyBatis</code>的配置中（<code>typeHandlerMap</code>中），以便<code>MyBatis</code>能够正确地识别和使用它。</p><h5 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h5><p>我们可以在创建<code>SqlSessionFactory</code>时，通过<code>SqlSessionFactoryBean</code>的<code>setTypeHandlers</code>的方法全局指定你的<code>TypeHandler</code>。</p><pre class="line-numbers language-java"><code class="language-java">SqlSessionFactoryBean factoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  factoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>   factoryBean<span class="token punctuation">.</span><span class="token function">setTypeHandlers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddressTypeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时我们就可以在<code>TypeHandlerMap</code>中可以发现这个自定义的<code>TypeHanlder</code>了。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224223913.png" alt="image.png"></p><h5 id="局部指定"><a href="#局部指定" class="headerlink" title="局部指定"></a>局部指定</h5><p>如果针对某些特定的表下特定的字段（即不通用的字段）可以在该映射文件中使用该<code>TypeHandler</code>，可以在对应的XML映射文件中进行配置制定。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在某个字段上指定TypeHandler --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>  <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.handler.AddressTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *  from user_info where id = #{id,jdbcType=BIGINT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 或者在参数映射中指定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByPrimaryKeySelective<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--@mbg.generated--></span>    update user_info    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        user_name = #{userName,jdbcType=VARCHAR},      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        address = #{address,jdbcType=VARCHAR,typeHandler=com.springboot.mybatis.handler.AddressTypeHandler},     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id = #{id,jdbcType=BIGINT}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，当<code>Mybatis</code>执行<code>SQL</code>时，对于对应类型的数据就会自动调用你定义的<code>TypeHandler</code>来进行数据转换。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们以<code>Mysql</code>的<code>JSON</code>数据类型为例，以《解锁Mysql的JSON数据类型》文中示例为例，我们查询以及保存<code>user_info</code>表中的<code>address</code>字段，因<code>address</code>字段在库中以<code>JSON</code>存储，我们在<code>UserInfoDO</code>中使用对象<code>AddressBO</code>接收。</p><p>我们定义一个专门处理数据<code>JSON</code>类型数据与<code>Java</code>对象相互转换的一个抽象的<code>TypeHandler</code>，它继承了<code>BaseTypeHandler</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JsonBaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ObjectMapper objectMapper<span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>          objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>DeserializationFeature<span class="token punctuation">.</span>FAIL_ON_UNKNOWN_PROPERTIES<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//使用null表示集合类型字段是时不抛异常  </span>        objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>DeserializationFeature<span class="token punctuation">.</span>FAIL_ON_NULL_FOR_PRIMITIVES<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//对象为空时不抛异常  </span>        objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span>SerializationFeature<span class="token punctuation">.</span>FAIL_ON_EMPTY_BEANS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * json转换为obj       * @param json json串       * @return object       */</span>    <span class="token keyword">private</span> T <span class="token function">parse</span><span class="token punctuation">(</span>String json<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> null<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token function">specificType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * obj转换为json       * @param obj object对象       * @return json个数的字符串       */</span>      <span class="token keyword">private</span> String <span class="token function">toJsonString</span><span class="token punctuation">(</span>T obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>PreparedStatement ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> T parameter<span class="token punctuation">,</span> JdbcType jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          String content <span class="token operator">=</span> parameter <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> <span class="token function">toJsonString</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>          ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> T <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> String columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> T <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> T <span class="token function">getNullableResult</span><span class="token punctuation">(</span>CallableStatement cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 具体类型，由子类提供       *       * @return 具体类型       */</span>      <span class="token keyword">protected</span> <span class="token keyword">abstract</span> TypeReference<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">specificType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一个通用的<code>JSON</code>转<code>Java</code>对象的通用<code>Handler</code>就完成了。然后我们具体的字段转换到相应的<code>Java</code>对象时，只需要继承这个抽象类，把<code>Java</code>对象传递过去即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddressTypeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">JsonBaseTypeHandler</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 具体类型，由子类提供       *       * @return 具体类型       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> TypeReference<span class="token operator">&lt;</span>AddressBO<span class="token operator">></span> <span class="token function">specificType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token operator">&lt;</span>AddressBO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们分别指定查询的<code>ResultMap</code>以及插入的<code>sql</code>中的<code>address</code>字段的<code>TypeHandler</code>为<code>AddressTypeHandler</code>的全路径。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>  <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">typeHandler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.handler.AddressTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>create_time<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>createTime<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select *  from user_info where id = #{id,jdbcType=BIGINT}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span> <span class="token attr-name">keyColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.springboot.mybatis.entity.UserInfoDO<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--@mbg.generated--></span>    insert into user_info (user_name, address, create_time      )  values (#{userName,jdbcType=VARCHAR},          #{address,jdbcType=VARCHAR,typeHandler=com.springboot.mybatis.handler.AddressTypeHandler},             #{createTime,jdbcType=TIMESTAMP}      )<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>UserInfoDO</code>中的<code>address</code>属性由<code>String</code>修改为<code>AddressBO</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfoDO</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 自增主键      */</span>      <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 名称      */</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 地址信息      */</span>      <span class="token keyword">private</span> AddressBO address<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 创建时间      */</span>      <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们分别执行插入以及查询的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      UserInfoDO userInfoDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInfoDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoDO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      AddressBO addressBO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddressBO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span><span class="token string">"New York"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setStreet</span><span class="token punctuation">(</span><span class="token string">"123 Main St"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setCountry</span><span class="token punctuation">(</span><span class="token string">"US"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> zipcodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      zipcodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">94507</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      zipcodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">94582</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      addressBO<span class="token punctuation">.</span><span class="token function">setZipcodes</span><span class="token punctuation">(</span>zipcodes<span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoDO<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>addressBO<span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoDO<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userInfoMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userInfoDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库中结果为：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224233118.png" alt="image.png"></p><p>然后我们在执行查询方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listUserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      UserInfoDO userInfoDO <span class="token operator">=</span> userInfoMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>6L<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userInfoDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果为:<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240224233518.png" alt="image.png"></p><p>在<code>MyBatis</code>框架中，采用自定义<code>TypeHandler</code>实现<code>JSON</code>数据类型字段与<code>Java</code>对象的相互转换具有显著的优势。通过精心设计和实现<code>TypeHandler</code>，可以精准把控从<code>Java</code>对象到<code>JSON</code>字符串以及反向转换的过程，确保数据在存入数据库时按照预设格式可靠地序列化，并在读取时准确无误地还原为对应的<code>Java</code>实体，从而有效避免因数据格式不兼容引发的运行时异常或数据损坏问题。同时，利用<code>TypeHandler</code>将数据持久化的具体逻辑进行抽象封装，使业务代码得以聚焦核心功能，不受底层数据库交互细节的影响，极大提升了代码的可读性和维护性。而在整个项目范围内统一应用自定义的<code>TypeHandler</code>，有利于维持数据操作的一致性和标准化，消除了由于开发人员使用不同处理策略带来的潜在风险，有力推动了项目的整体开发效率和维护质量提升。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了<code>MyBatis</code>中<code>TypeHandler</code>的概念、基础用法以及应用。我们探讨了如何编写自定义的 <code>TypeHandler</code>来处理特殊格式的数据。通过本文的学习，我们可以更好地理解和应用<code>TypeHandler</code>，在实际开发中处理数据库操作时能够更加灵活、高效地运用<code>MyBatis</code>框架。</p><p>在使用<code>TypeHandler</code>的过程中，我们需要注意数据的准确性和一致性，确保数据的正确转换和映射，避免出现数据丢失或者转换错误的情况。除了简单的数据类型转换外，<code>TypeHandler</code>还可以用于进行数据校验和转换。在<code>TypeHandler</code>的实现中，我们可以添加一些逻辑来对数据进行校验，如检查数据的有效性、范围等。通过在<code>TypeHandler</code>中添加数据校验和转换逻辑，我们可以确保数据的完整性和正确性。<br>另外，还需要根据具体的业务需求和数据特点来选择合适的 <code>TypeHandler</code>，并根据需要进行性能优化和调整，以提高系统的整体性能和稳定性。</p><p>通过对<code>TypeHandler</code>的学习和实践，我们可以更加灵活地处理各种数据类型和数据格式，为项目的顺利进行和未来的发展打下坚实的基础。</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 自定义TypeHandler </tag>
            
            <tag> MySql的JSON类型数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊Integer的缓存机制问题</title>
      <link href="/article/null.html"/>
      <url>/article/null.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在Java编程中，<code>Integer</code>类作为基本类型int的包装器，提供了对象化的操作和自动装箱与拆箱的功能。从<code>JDK5</code>开始引入了一项特别的优化措施——Integer缓存机制，它对于提升程序性能和减少内存消耗具有重要意义。接下来我们由一段代码去打开Integer缓存机制的秘密。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Integer i1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>      Integer i2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>      Integer i3 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>      Integer i4 <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于答案是什么呢？我们接着往下看，等你看完就明白了。</p><blockquote><p>当你在你的Idea中写出这段代码的时候，Idea就会提示你要使用<code>equals()</code>方法区比较大小，因为<code>Integer</code>是对象，对象的值比较要用<code>equals()</code>方法，而不是使用<code>==</code>，这里我们主要是研究一下<code>Integer</code>的缓存机制。</p></blockquote><h3 id="Integer缓存是什么"><a href="#Integer缓存是什么" class="headerlink" title="Integer缓存是什么"></a>Integer缓存是什么</h3><p>Java的<code>Integer</code>类内部实现了一个静态缓存池，用于存储特定范围内的整数值对应的<code>Integer</code>对象。默认情况下，这个范围是-128至127。当通过<code>Integer.valueOf(int)</code>方法创建一个在这个范围内的整数对象时，并不会每次都生成新的对象实例，而是复用缓存中的现有对象。我们看一下<code>Integer.valueOf(int)</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@HotSpotIntrinsicCandidate</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> Integer <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> IntegerCache<span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> IntegerCache<span class="token punctuation">.</span>high<span class="token punctuation">)</span>          <span class="token keyword">return</span> IntegerCache<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>IntegerCache<span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>Integer.valueOf(int)</code>方法来说，由于这个方法经常用于将基本类型int转换为包装器对象，所以它使用了<code>@HotSpotIntrinsicCandidate</code>注解，这样HotSpot JVM可能会提供一种更为高效的内部实现来处理自动装箱操作。而<code>IntegerCache</code>是<code>Integer</code>内部的一个静态类，负责缓存整数对象。它在类加载时被初始化，创建并缓存范围内的所有整数对象。我们看一下<code>IntegerCache</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 缓存范围的下限，默认为-128  </span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 缓存范围的上限，初始化时动态计算（基于系统属性或默认值127）  </span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 存储在缓存范围内所有Integer对象的数组  </span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 静态初始化块，在类加载时执行  </span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 初始设定high为127  </span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 尝试从系统属性获取用户自定义的最大整数值  </span>        String integerCacheHighPropValue <span class="token operator">=</span>                  VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 如果系统属性存在并且可以转换为int类型，则更新high值  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 确保high至少为127，并且不超过Integer.MAX_VALUE允许的最大数组大小  </span>                h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 设置最终确定的high值  </span>        high <span class="token operator">=</span> h<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 初始化cache数组，长度等于缓存范围内的整数数量  </span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 使用循环填充cache数组，创建并存储对应的Integer对象  </span>        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 检查，确保缓存范围至少包含[-128, 127]  </span>        <span class="token comment" spellcheck="true">// 这是Java语言规范对小整数自动装箱共享的要求  </span>        <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 私有构造器，防止外部实例化此内部类的对象  </span>    <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>IntegerCache</code>类在Java虚拟机启动时创建了一个固定大小的数组，用于缓存指定范围内所有的<code>Integer</code>对象。这样在后续程序运行过程中，对于这些范围内的整数进行装箱操作时，可以直接从缓存中获取已存在的对象，以提升性能并减少内存开销。同时，它也提供了根据系统属性(<code>-Djava.lang.Integer.IntegerCache.high</code>)来自定义缓存上限的能力，并确保满足Java语言规范关于小整数自动装箱共享的规定。</p><p>在<code>Integer.value(int)</code>方法中，如果<code>int</code>的值在<code>IntegerCache</code>返回的<code>low</code>和<code>high</code>之内，则直接返回<code>IntegerCache</code>中缓存的对象，否则重新<code>new</code>一个新的<code>Integer</code>对象。</p><p>而文章开头示例中，我们使用<code>Interge i1 = 100</code>的方式其实是Java的自动装箱机制，整数字面量<code>100</code>是一个基本类型的int值。当赋值给一个<code>Integer</code>引用变量<code>i</code>时，编译器会隐式地调用<code>Integer.valueOf(int)</code>方法将这个基本类型的int值转换为<code>Integer</code>对象。</p><p>整数在编程中经常被使用，特别是在循环计数等场景中，通过缓存整数对象，可以大幅度减少相同整数值的对象创建，从而减小内存占用。</p><p>由此我们可以看出因为100在[-128, 127]之内，所以<code>i1 == i2</code>打印<code>true</code>，而1000不在[-128, 127]之内，所以<code>i3 == i4</code>打印<code>false</code>。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129233231.png" alt="image.png"></p><p>我们尝试使用<code>java.lang.Integer.IntegerCache.high</code>调整一下<code>high</code>为1000，然后看一下效果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129233728.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129233753.png" alt="image.png"><br>打印结果都是true。</p><p>当然这个上限不要随意去调整，调整之前，需要仔细评估应用程序的实际需求和性能影响。尽量选择在[-128, 127]范围内的整数值，以充分利用Integer缓存机制。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><p><strong>比较：</strong> 由于缓存的存在，在-128至127之间的<code>Integer</code>对象在进行<code>==</code>运算符比较时，结果可能是<code>true</code>，因为它们指向的是同一个内存地址。而在缓存范围之外创建的<code>Integer</code>对象即使值相等，也会视为不同的对象，因此使用<code>==</code>比较会返回<code>false</code>。不论是否启用缓存，对于任何两个<code>Integer</code>对象，只要其包含的整数值相同，调用<code>equals()</code>方法始终会返回<code>true</code>。所以我们在比较对象时一定要使用<code>equals()</code>方法。</p></li><li><p><strong>不适用于所有场景：</strong> 当使用<code>new Integer(i)</code>直接创建<code>Integer</code>对象时，不会利用缓存。</p></li><li><p><strong>不要随意去扩展缓存的上下限</strong> </p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Integer缓存机制是Java中的一项性能优化措施，通过缓存一定范围内的整数对象，既能减小内存开销，又能提高性能。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> Java </tag>
            
            <tag> Integer缓存机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+LiteFlow优雅解耦复杂核心业务</title>
      <link href="/article/springbootliteflowuse.html"/>
      <url>/article/springbootliteflowuse.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>基于上一篇<code>SpringBoot优雅使用责任链模式</code>解决处理一些耦合度过高的复杂业务的开发。本篇我们开始使用规则引擎<code>LiteFlow</code>去优化示例。本篇文章主要演示<code>LiteFlow</code>如何去解耦则的核心业务。关于<code>LiteFlow</code>的具体内容参见后续文章，记得点个关注哦。。。。</p><p><code>LiteFlow</code>是一款专注于逻辑驱动流程编排的轻量级框架，它以组件化方式快速构建和执行业务流程，有效解耦复杂业务逻辑。通过支持热加载规则配置，开发者能够即时调整流程步骤，将复杂的业务如价格计算、下单流程等拆分为独立且可复用的组件，从而实现系统的高度灵活性与扩展性，避免了牵一发而动全身的问题。旨在优化开发流程，减少冗余工作，让团队能够更聚焦于核心业务逻辑，而将流程控制层面的重任托付给该框架进行自动化处理。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>yomahub<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>liteflow<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.11</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h3><p>导入LiteFlow配置项，启用LiteFlow。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">liteflow</span><span class="token punctuation">:</span>    <span class="token key atrule">rule-source</span><span class="token punctuation">:</span> config/*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>rule-source即我们的规则文件所在位置。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240126230728.png" alt="image.png"></p><h3 id="定义编排规则"><a href="#定义编排规则" class="headerlink" title="定义编排规则"></a>定义编排规则</h3><p>我们还是按照这个流程图去设计：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240127234330.png" alt="image.png"></p><p>按照流程图，我们使用<code>LiteFlow</code>的EL规则进行流程编排如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order_handle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      // 定义一个if节点处理df/e      order_if = IF(order_k, THEN(order_d, order_f), order_e);      // 定义to_c的订单流程  用id标识流程为to_c      to_c = THEN(order_a, order_c, order_if).id("to_c");      // 定义to_b的订单流程  用id标识为流程to_b      to_b = THEN(order_b, order_c, order_if).id("to_b");      // 主流程      THEN(SWITCH(order_x).TO(to_c, to_b), order_h);  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编排规则上看，很容易就反应出来上述业务流程图。<code>SWITCH()</code> 函数接受一个节点 <code>order_x</code> 作为参数，并根据SWITCH组件输出结果来决定流程的走向。这种方式使得业务流程的定义和执行更加直观和灵活。</p><p>LiteFlow的编排能力非常强大，它支持顺序、选择、循环、条件等多种流转模式。用户可以通过简单的配置，实现复杂的业务流程编排。编排可以通过XML、JSON或者代码的方式来定义。同时，LiteFlow还支持动态修改编排规则，使得系统能够在不重启的情况下，实时调整业务流程。它通过将业务流程拆分成独立的组件，并使用规则来定义组件之间的流转关系，实现了业务流程的灵活编排和变更。如上面的<code>SWITCH...TO</code>等。</p><p>然后我们在按照流程节点，去定义业务组件，实现具体的业务逻辑。</p><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><p>从流程图上看， 订单创建分为两种类型,<code>to_c</code>和<code>to_b</code>。然后分别进行两种订单的处理。我们先使用<code>LiteFlow</code>的<code>SWITCH</code>选择组件，根据订单类型选择要执行的链路或者节点。<br>一般我们会结合订单类型的枚举类进行使用。我们先创建一个订单类型的枚举类，枚举类中不同的订单类型对应不同的处理流程。如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">enum</span> OrderTypeEnum<span class="token punctuation">{</span>      <span class="token function">TO_C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"to_c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">TO_B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"to_b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**订单类型*/</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**订单处理的节点ID*/</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String chainId<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getChainId</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OrderTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>orderTypeEnum <span class="token operator">-</span><span class="token operator">></span> orderTypeEnum<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>chainId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的订单类型"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举中的<code>chainId</code>就对应<code>LiteFlow</code>中的订单流程<code>to_c</code>以及<code>to_b</code>。现在我们在<code>SWITCH</code>中返回对应的也任务流程节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_x"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"获取订单链路"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> String <span class="token function">processOrderType</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取流程入参参数  </span>    OrderParam orderParam <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 订单类型  </span>    Integer orderType <span class="token operator">=</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> OrderTypeEnum<span class="token punctuation">.</span><span class="token function">getChainId</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SWITCH</code> 组件的主要功能是在执行流程时根据预定义的条件进行分支。它通常用于处理流程中的决策点。如上述根据订单类型决定执行那个流程节点，如果是ToC订单（即orderType=1）就会走<code>to_c</code>流程，ToB订单就会走<code>to_b</code>订单。然后我们只需要各自关注处理ToC以及ToB订单的流程节点了。</p><p>接下来我们来定义处理订单的各业务节点。我们按照业务逻辑或者流程节点进行拆分成三个组件类。分别是处理<code>ToC</code>订单<code>ToCHandlerCmp</code>，处理<code>ToB</code>订单<code>ToBHandlerCmp</code>，以及公共逻辑组件<code>CommonHanldeCmp</code>。当然也可以根据业务逻辑再进行更为细致的拆分甚至不进行拆分都在放一个组件类中。</p><p>我们先使用<code>@LiteflowComponent</code>声明一个ToC订单处理的组件类。<code>@LiteflowComponent</code>注解用于将一个普通的Java类声明为LiteFlow框架中的组件。我们也可以不使用声明式组件，直接继承各组件的抽象类，比如常规组件<code>NoComponent</code>，Switch组件<code>NodeSwitchComponet</code>组件，IF组件<code>NodeIfComponet</code>等，我们会在后面的文章中具体讲解。<br>接下来我们的业务节点可以放在这个组件类中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToCHandleCmp</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在通过<code>@LiteflowMethod</code>定义组件内直接的节点方法。@LiteflowMethod注解则用于在组件类中声明可以被LiteFlow框架调用的方法。这个注解会指定该方法在流程中的节点类型（如普通节点、条件节点等）以及节点的一些属性（如节点ID、节点名称等）。在流程执行时，LiteFlow框架会根据流程定义中节点的配置来调用相应的组件方法，从而完成业务流程的执行。同理也是可以不使用这种声明式的方式，你也可以继承对应组件的抽象类后实现抽象方法也可以完成流程。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToCHandleCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_a"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"ANodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processA</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ANodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOC11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_d"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"DNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processD</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"DNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_f"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"FNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processF</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"FNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>node_id</code>的值即我们规则编排文件中表达式中对应的nodeId。</p><p>再定义处理ToB订单的流程组件以及方法<code>ToBHandleCmp</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToBHandleCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_b"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"BNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processB</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOB11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_e"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"ENodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processE</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ENodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再定义公共逻辑组件<code>CommonHanldeCmp</code>，公共组件也可以定义一些相同业务的处理节点以便可不同流程可以复用这些节点，也可以定一些逻辑条件的节点，比如<code>IF</code>组件节点，<code>SWITCH</code>组件节点或者<code>ITERATOR</code>循环组件节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@LiteflowComponent</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHandleCmp</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_SWITCH<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>SWITCH<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_x"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"获取订单链路"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">processOrderType</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取流程入参参数  </span>        OrderParam orderParam <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getRequestData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 订单类型  </span>        Integer orderType <span class="token operator">=</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> OrderTypeEnum<span class="token punctuation">.</span><span class="token function">getChainId</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_c"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"CNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processC</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"CNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS_IF<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>IF<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_k"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"KNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processK</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"KNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@LiteflowMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> LiteFlowMethodEnum<span class="token punctuation">.</span>PROCESS<span class="token punctuation">,</span> nodeType <span class="token operator">=</span> NodeTypeEnum<span class="token punctuation">.</span>COMMON<span class="token punctuation">,</span> nodeId <span class="token operator">=</span> <span class="token string">"order_h"</span><span class="token punctuation">,</span> nodeName <span class="token operator">=</span> <span class="token string">"HNodeComponent"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processH</span><span class="token punctuation">(</span>NodeComponent nodeComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 获取OrderContext上下文  </span>        OrderContext orderContext <span class="token operator">=</span> nodeComponent<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行处理业务节点H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"HNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@AllArgsConstructor</span>      <span class="token keyword">enum</span> OrderTypeEnum<span class="token punctuation">{</span>          <span class="token function">TO_C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"to_c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">TO_B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"to_b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**订单类型*/</span>          <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**订单处理的节点ID*/</span>          <span class="token keyword">public</span> <span class="token keyword">final</span> String chainId<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getChainId</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OrderTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>orderTypeEnum <span class="token operator">-</span><span class="token operator">></span> orderTypeEnum<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>chainId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不支持的订单类型"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了上面的<code>SWITCH</code>选择组件以及CMMON普通组件外，他还有如下组件：</p><ul><li>条件组件：IF组件，条件组件用于在流程中进行条件判断。它可以返回布尔值（true/false），根据条件的结果决定流程的走向。在LiteFlow中，条件组件可以通过实现特定的接口或继承特定的类来定义，例如<code>NodeIfComponent</code>。用于<code>IF...ELIF...ELSE</code>编排。 相当于Java中的<code>if..else..</code>。</li><li>次数循环组件：FOR组件，用于固定次数的循环执行某个流程片段。用于<code>FOR...DO...</code>表达式编排。相当于Java中的<code>for(int i=0;i&lt;size;i++){//循环}</code>。</li><li>条件循环组件：WHILE组件，用于根据条件进行循环执行。它会不断检查指定的条件，只要条件满足，就会继续执行循环体。用于<code>WHILE...DO...</code>表达式编排。相当于Java中的<code>while(){//循环}</code>。</li><li>迭代循环组件：ITERATOR组件，类似于编程语言中的迭代器，用于遍历集合或数组等数据结构。可以对集合中的每个元素执行相同的操作。用于<code>ITERATOR...DO...</code>表达式编排。相当于Java中的<code>forEach</code>循环。</li><li>跳出循环组件：BREAK组件。用于在循环体内部满足特定条件时提前结束循环。它可以打破当前循环的执行流程，使流程跳出循环体，继续执行后续的逻辑。用于<code>FOR...DO...BREAK</code>,<code>WHILE...DO...BREAK</code>,<code>ITERATOR...DO...BREAK</code>表达式编排。相当于Java中的<code>break</code>。</li></ul><p>使用@LiteflowComponent和@LiteflowMethod进行声明式组件的开发，可以大大提高业务流程的灵活性和可维护性。通过将业务流程拆分成独立的组件，我们可以方便地对组件进行复用、测试和扩展。同时，通过简单的配置即可实现业务流程的调整和优化，而无需修改和重新编译代码。</p><h3 id="数据上下文"><a href="#数据上下文" class="headerlink" title="数据上下文"></a>数据上下文</h3><p><code>OrderContext</code>即为<code>LiteFlow</code>中的上下文。LiteFlow中的上下文（Context）是一个非常重要的概念，它是整个流程执行过程中的数据共享和传递的桥梁。上下文可以理解为流程中的“全局变量”或“共享数据区”，它存储了流程执行过程中需要用到的各种数据。这些数据可以是流程参数、业务数据、中间结果等。</p><p>LiteFlow中的每个组件都可以访问上下文，并从中获取所需的数据或将数据存入上下文中。组件之间通过上下文进行数据交换，而不需要直接相互调用或传递参数。这种设计方式降低了组件之间的耦合度，提高了流程的灵活性和可维护性。</p><p>上下文对象会随着流程的执行而传递，每个组件都可以访问和修改上下文中的数据。当流程执行完成后，可以通过上下文对象获取流程的执行结果和其他相关数据。</p><p>对于上下文我们可以将任意的Bean当做上下文进行传入。LiteFlow对上下文的Bean没有任何要求。我们可以传入一个或者多个上下文对象的class，也可以将一个或者多个初始化好的对象当做上下文传入。</p><pre class="line-numbers language-java"><code class="language-java">LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>OrderContext orderContext1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  DataContext dataContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> orderContext1<span class="token punctuation">,</span> dataContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行器执行流程"><a href="#执行器执行流程" class="headerlink" title="执行器执行流程"></a>执行器执行流程</h3><p>我们使用<code>LiteFlow</code>执行器执行订单处理的流程：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>  <span class="token keyword">private</span> FlowExecutor flowExecutor<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runOrderFlowTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      OrderParam orderParam <span class="token operator">=</span> OrderParam<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      OrderContext orderContext <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240126200213.png" alt="image.png"></p><p>LiteFlow的执行器（<code>FlowExecutor</code>）负责解析和执行定义好的业务流程。执行器接收流程定义和输入参数，然后按照流程定义的顺序和逻辑调用相应的组件来执行具体的业务操作。还可以通过执行器来启动、暂停、恢复和终止流程的执行。执行器还负责管理流程的上下文，确保数据在流程中的正确传递和共享。</p><p>LiteFlow的入参是在启动流程时传递给执行器的数据。入参可以是任何类型的对象，比如基本数据类型、自定义的Java Bean等。入参的传递方式取决于你在定义流程时指定的参数类型和传递方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 入参</span>OrderParam orderParam <span class="token operator">=</span> OrderParam<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 通过执行器flowExecutor 执行 流程</span>LiteflowResponse response <span class="token operator">=</span> flowExecutor<span class="token punctuation">.</span><span class="token function">execute2Resp</span><span class="token punctuation">(</span><span class="token string">"order_handle"</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">,</span> OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  OrderContext orderContext <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getContextBean</span><span class="token punctuation">(</span>OrderContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>LiteFlow是一个现代化的规则引擎框架，融合了编排特性和规则引擎的所有特性。它可以将瀑布流式的代码，转变成以组件为核心概念的代码结构，组件与组件之间是解耦的，组件可以用脚本来定义，组件之间的流转全靠规则来驱动，可以任意编排。</p><p>LiteFlow非常适合用于解耦复杂逻辑。如果你要对复杂业务逻辑进行新写或者重构，用LiteFlow最合适不过。使用LiteFlow，你就可以把复杂的业务逻辑按业务流程将瀑布式代码分成一个个小组件，并定义好规则流程配置。这样，所有的组件，就能按照你的规则配置去进行复杂的流转。</p><p>本节我们只是简单的使用了一下LiteFlow，我们接下来会详细的去介绍LiteFlow强大的功能，欢迎关注。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> LiteFlow </tag>
            
            <tag> 流程引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里二面：SpringBoot可以同时处理多少个请求？当场懵了。。。。</title>
      <link href="/article/springbootmaxhandlerequest.html"/>
      <url>/article/springbootmaxhandlerequest.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>SpringBoot以其简洁高效的开发方式和强大的内嵌容器特性，为开发者提供了构建高性能后端服务的便利。然而，当面临高并发场景时，理解并合理配置Spring Boot应用以达到最佳的并发处理能力至关重要。在Spring Boot中，应用程序对HTTP请求的并发处理主要依赖于内嵌的Servlet容器（如Tomcat）。接下来我们以Tomcat为例谈谈这个问题。</p><blockquote><p>本文以SpringBoot2.7.0为例。</p></blockquote><p>在接下来讲解Tomcat工作线程池之前，你可以先了解一下Java线程池的工作原理，请参考这篇文章：<a href="https://mp.weixin.qq.com/s/jasS6Sp7LcaLs4qkuvatpw" target="_blank" rel="noopener">Java线程池最全详解</a></p><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>我们的程序实际上是运行在Tomcat里的。所以SpringBoot可以处理多少请求，其实也就是看Tomcat可以处理多少请求。Tomcat的工作线程池负责接收并处理这些请求。在SpringBoot中关于Tomcat工作项城池的参数可以在<code>spring-boot-autoconfigure</code>的依赖包中的<code>spring-configuration-metadata.json</code>中有如下四个参数控制Tomcat的工作线程池：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.threads.max"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Maximum amount of worker threads."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Threads"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">200</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.threads.min-spare"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Minimum amount of worker threads."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Threads"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.max-connections"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Maximum number of connections that the server accepts and processes at any given time. Once the limit has been reached, the operating system may still accept connections based on the \"acceptCount\" property."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">8192</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"server.tomcat.accept-count"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"java.lang.Integer"</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Maximum queue length for incoming connection requests when all possible request processing threads are in use."</span><span class="token punctuation">,</span>        <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"</span><span class="token punctuation">,</span>        <span class="token property">"defaultValue"</span><span class="token operator">:</span> <span class="token number">100</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看一下这四个参数的含义：</p><ul><li><p>server.tomcat.threads.max：用于配置<code>Tomcat</code>内嵌服务器的工作线程池的最大工作线程数。工作线程用于处理接收到的HTTP请求，处理完毕后将返回到线程池中等待下一个请求。当并发请求数量小于等于 <code>threads.max</code> 时，<code>Tomcat</code>尽可能使用现有的工作线程来处理请求，如果并发请求数量超过了 <code>threads.max</code>，<code>Tomcat</code>不再创建新的工作线程，而是将请求放入队列等待。该值可以看做是一个临时工，如果并发请求的数量在<code>threads.min-spare</code>到<code>threads.max</code>之间，就会使用这些临时工线程进行处理。默认值为200。主要关注的是工作线程池，用于处理请求的线程数。适用于调整并发请求的处理能力。</p></li><li><p>server.tomcat.threads.min-spare：确定了工作线程池的最小空闲线程数量，即使没有请求需要处理，也会保持这些线程处于等待状态，以便快速响应新的请求。该值可以看做是一个长期工，如果并发请求数小于<code>min-spare</code>,就会使用这些线程去处理请求。默认值是10，即使没有活跃的请求，<code>Tomcat</code>也会保持至少 10 个空闲线程。</p></li><li><p>server.tomcat.max-connections：用于配置<code>Tomcat</code>内嵌服务器的连接池的最大连接数。即允许同时存在的最大连接数。这个连接数是针对整个连接池的，不仅仅是工作线程的数量。当并发请求数量导致服务器需要创建新的连接时，Tomcat 会检查连接池中的连接数是否已经达到了 <code>max-connections</code> 配置的最大值。如果已经达到最大值，新的连接请求将被放入等待队列中，直到有连接被释放。默认值8192。</p></li><li><p>server.tomcat.accept-count：用于配置<code>Tomcat</code>连接器所允许的最大等待接受连接的请求数（即等待队列）。当所有线程都在处理其他请求时，新的连接请求将会排队等待。如果队列已满，额外的连接将被拒绝。默认值是100。</p></li></ul><p>我们以饭馆的示例去说明这几个参数之间的关系：<br>我们把<code>Tomcat</code>比作一家热门的餐厅，每个顾客都是一个请求。餐厅里一直有一部分厨师一直待命，无论有没有顾客，确保随时能够处理点单。这部分厨师就是<strong>min-spare（长期工）</strong>,当餐厅遇到一些大的宴会时，餐厅老板就会从外面找过来一批厨师帮忙，这部分厨师就是临时工，<strong>临时工+长期工就是(max)</strong>。餐厅的座位就表示同时最大可以容纳啊就餐的顾客人数，即<strong>max-connections</strong>。假如某时餐厅生意火爆，餐厅的座位都坐满以后，此时餐厅就会想办法在餐厅门口放上一排座椅，可以让后来的顾客在这里等待，假如里面有顾客吃完，这时外面等待的顾客就可以进去用餐。如果餐厅门口的座椅也做满，再来的顾客就会离开。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128225903.png" alt></p><p>假如上述就是那家餐厅，2个绿色框代表长期工厨师即min-spare，3个红色框代表临时工厨师，共有5名厨师，即max数量，5个棕色的队列即餐厅椅子数量，即5个max-connections，餐厅最多可以容忍5名顾客吃饭，2个橘色队列代表门口等待区椅子数量，即2个accept-count。假如此时来了4个客人，那就可以区餐厅吃饭，如果来了7个客人，那么有5个客人进去吃饭，2个客人在门口等待，如果来了8个客人，那么有5个客人进去吃饭，2个客人在门口等待，剩下1个客人就会直接离开。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>我们创建一个SpringBoot项目，我们将上述四个参数分别修改为如下：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">server.tomcat.accept-count</span><span class="token punctuation">=</span><span class="token attr-value">2  </span><span class="token attr-name">server.tomcat.max-connections</span><span class="token punctuation">=</span><span class="token attr-value">5  </span><span class="token attr-name">server.tomcat.threads.max</span><span class="token punctuation">=</span><span class="token attr-value">5  </span><span class="token attr-name">server.tomcat.threads.min-spare</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在定义一个接口，用于模拟客户端请求：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMaxRequestController</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"maxRequest"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token keyword">public</span> String <span class="token function">testMaxRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前请求线程: "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们启动项目，使用<code>JVisualVM</code>监测一下此时项目中的线程数为2个：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128231335.png" alt="image.png"></p><p>此时我们使用<code>Apifox</code>发起一个请求，观察线程数没有增长。我们在使用<code>Apifox</code>中模拟3个线程同时请求，发现此时线程数变成5个：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128232351.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129005649.png" alt></p><p>我们继续增加线程数到7个，我们发现线程数还是5个，因最大线程数等于5个：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240128233213.png" alt="image.png"></p><p>后台请求全部成功：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129005304.png" alt="image.png"></p><p>我们继续增加线程数到8个，此时线城数依然是5个，设置请求超时时间为1秒，但是有一个请求失败：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129010330.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129010103.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129011159.png" alt="image.png"></p><p>服务端只处理了7个请求：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240129010447.png" alt="image.png"></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>SpringBoot可以同时处理多少个请求，需要看其内嵌的Sevlet处理线程的能力，以Tomcat为例，即Tomcat可以处理多少请求，这需要看配置文件中设置的<code>server.tomcat.accept-count</code>以及<code>server.tomcat.max-connections</code>的大小。Tomcat同时可以处理的请求为<code>server.tomcat.accept-count</code>加上 <code>server.tomcat.max-connections</code>。实际生产应用中我们需要根据服务器，硬件的配置等综合因素考虑后，调节这两个值，确保应用程序能够处理预期的并发量。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊日常开发中如何优雅的避免那无处不在的空指针异常</title>
      <link href="/article/javanpe.html"/>
      <url>/article/javanpe.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在Java编程语言中，<code>NullPointerException</code>（简称NPE）是一种常见的运行时异常，当程序试图访问或操作一个还未初始化（即值为null）的对象引用时，Java虚拟机就会抛出<code>NullPointerException</code>。如果我们在日常开发中，不能很好的去规避NPE，那么可能因为数据或者其他问题就会导致线上问题。。。很烦。。。。</p><p>阿里巴巴开发手册规约中也说明防止NPE，是程序员的基本素养。。。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240131003821.png" alt="image.png"></p><p>接下来我们先谈谈几种可能会出现空指针异常的方式。</p><h3 id="出现空指针异常的情况"><a href="#出现空指针异常的情况" class="headerlink" title="出现空指针异常的情况"></a>出现空指针异常的情况</h3><ul><li><strong>访问空对象的属性或调用空对象的方法</strong><br>当一个对象是null时，试图访问一个对象的属性或调用其方法，就会触发空指针异常。<pre class="line-numbers language-java"><code class="language-java">String text <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">int</span> length <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>User user = null;<br>String userName = user.getUserName();</p><pre><code>- **数组为null或者数组元素为null**当尝试访问数组中的某个索引处的元素，而该元素为`null`时，同样会导致空指针异常。```javaString[] strs = null;int length = strs.length;String[] strs = new String[3];  int length = strs[2].length();</code></pre><ul><li><strong>集合中null元素访问</strong><br>当集合中存在null元素，当我们遍历集合，访问到这个元素的属性或者方法时也会抛出NPE，这种情况也会出现在我们的日常开发中，有时候就会因为数据问题导致这种情况发生，常常也莫名其妙。。。。</li></ul><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>调用的方法返回null</strong><br>调用某个方法，期望其返回一个非null的对象，但实际返回了null。当然这种情况等同于访问空对象的属性或者方法。这在实际开发过程中极易出现的一种情况。比如我们使用<code>Mybatis</code>从数据库中查询一条记录时，数据不存在，就会返回null。这种情况尤为注意。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> User <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>User user <span class="token operator">=</span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用基本数据类型的包装类</strong><br>在使用基本数据类型的包装类时，如果未正确初始化，再转成int时，可能导致空指针异常。</li></ul><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上大概是我想到或者常遇到的一些可能会发生NPE的情况，如果还有其他情况，可以贴出来讨论。</p><p>那么我们该如何避免NPE呢？</p><h3 id="避免NPE的几种方式"><a href="#避免NPE的几种方式" class="headerlink" title="避免NPE的几种方式"></a>避免NPE的几种方式</h3><ul><li><strong>访问对象前要谨慎</strong><br>在使用对象之前，始终检查它是否为null。这包括方法参数、返回值以及对象的属性。在访问对象的方法或属性之前，使用条件语句判断对象是否为null。比如我们在访问User对象前，一定要判null</li></ul><pre class="line-numbers language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>      String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Address address <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>address <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>          String coutry <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者我们的user是从一个方法中获取的，例如数据库中查询，那么我们在访问这个对象前，一定要判null，如果为null要抛出对应的业务异常，然后我们就可以在接口响应中对应返回错误的信息即可，此时就算是一个正常的流程了。这点尤为重要，一定要注意。</p><pre class="line-numbers language-java"><code class="language-java">User user <span class="token operator">=</span> userManager<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">""</span>当前查询的对象不存在<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于SpringBoot项目中捕获自定义业务异常，统一异常管理，统一结果返回，可以参考这篇文章：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一结果返回，统一异常处理，大牛都这么玩 | 码农Academy的博客</a></p></blockquote><p>当然如果使我们在写<code>User getUserById(Long id)</code>返回对象或者<code>List&lt;User&gt; listUserByIds(List&lt;Long&gt; idList)</code>时我们可以不返回<code>null</code>，可以返回一个对象默认信息或者一个空集合，这样调用方就不会出现NPE风险，当然我们不强制返回一个对象或者空集合，但是必须添加注释充分 说明什么情况下会返回null值。这也是阿里巴巴开发手册规约的建议。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240131003727.png" alt="image.png"></p><ul><li><strong>使用Optional类</strong><br>JDK8以上版本提供了<code>Optional</code>类，它是一个容器对象，可用于包装可能为null的值。我们可以使用它判断null问题，同时也解决了多层级访问问题，配合使用orElse时，会先执行orElse方法，然后执行逻辑代码，不管是否出现了空指针。</li></ul><pre class="line-numbers language-java"><code class="language-java">String country <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAddress<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Address<span class="token operator">:</span><span class="token operator">:</span>getCountry<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String country <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getAddress<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Address<span class="token operator">:</span><span class="token operator">:</span>getCountry<span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">defaultContry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> String <span class="token function">defaultContry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"CN"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用orElseThrow()方法，当Optional中的对象是一个null时我们直接抛出异常：</p><pre class="line-numbers language-java"><code class="language-java">String userName <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getUserName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span><span class="token string">"当前用户信息不存在"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>使用断言避免空指针</strong><br>使用Java断言（assert）来检查变量是否为null。但要注意，断言通常在开发和测试阶段启用，而在生产环境中可能被禁用（在生产环境中，通常不会启用断言以避免不必要的性能开销以及防止潜在的错误信息泄漏）。</li></ul><pre class="line-numbers language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span> user <span class="token operator">!=</span> null <span class="token operator">:</span> <span class="token string">"user should not be null"</span><span class="token punctuation">;</span>Address address <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">assert</span> address <span class="token operator">!=</span> null <span class="token operator">:</span> <span class="token string">"address should not be null"</span><span class="token punctuation">;</span>  String coutry <span class="token operator">=</span> address<span class="token punctuation">.</span><span class="token function">getCountry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用@Nullable注解</strong><br>使用<code>javax.annotation.Nullable</code>注解，<code>@Nullable</code>注解通常用于标记一个方法的参数、返回值或者字段可能为null。这个注解并非Java标准库的一部分，但在一些第三方库（如JSR 305库中的<code>javax.annotation.Nullable</code>，以及Google Guava和JetBrains的Kotlin标准库等）中广泛使用，并且被许多IDE和静态分析工具支持。以便在编译期或开发工具中提示可能的NPE风险。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">handlerUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> User user<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Long userId <span class="token operator">=</span> 0L<span class="token punctuation">;</span>    User user <span class="token operator">=</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    String userName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">handlerUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时IDEA就会警告会出现NPE风险<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240130235558.png" alt="image.png"></p><ul><li><strong>借助工具扫描代码</strong><br>在Java开发中，我们还可以使用以下工具扫描代码以发现潜在的空指针异常风险。</li></ul><ol><li><strong>IntelliJ IDEA</strong>：内置了强大的静态代码分析器，能够检测出可能的NPE和其他代码问题。 </li><li><strong>SonarQube</strong> / <strong>SonarLint</strong>：提供持续集成和本地IDE插件形式的静态代码分析，能找出潜在的空指针以及其他质量或安全问题。Sonar可以定时扫描仓库中的代码，可以发现代码中的一些潜在风险，可以通过一些通知例如邮件等告知代码提交者这段代码的风险。</li><li><strong>FindBugs</strong>（现更名为SpotBugs）：另一个开源的静态分析工具，能够发现潜在的bug，包括可能导致NPE的情况。</li><li><strong>阿里巴巴Java开发规约插件</strong>： 对于Eclipse和IntelliJ IDEA都有相应的插件版本，基于阿里巴巴内部Java编码规范，包含了对可能出现NPE情况的检测。</li></ol><h3 id="补充一点"><a href="#补充一点" class="headerlink" title="补充一点"></a>补充一点</h3><p>在JDK 17中引入的Helpful NullPointerExceptions特性确实增强了空指针异常信息的准确性与可用性。当发生NullPointerException时，JVM现在能够提供更精确的位置信息，特别是在链式调用场景下，它会指出导致空指针异常的具体对象引用。这有助于开发者更快地定位到代码中的问题所在，无需通过堆栈跟踪逐层分析来判断哪个对象引用为null。<br>假如我们访问<code>user.getAddress().getCountry().length()</code>时，在JDK17以前，如果发生了空指针异常，他只会打印出来发生了空指针异常，但是并没有告知到底是user对象还是address对象还是coutnry发生了异常：</p><pre class="line-numbers language-text"><code class="language-text">Exception in thread "main" java.lang.NullPointerException    at com.study.base.core.base.NpeTest.main(NpeTest.java:23)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是在JDK17以后，借助Helpful NullPointerExceptions特性，异常信息将更加精确，可能会类似打印这样的信息，精确到那个值发生了空指针异常：</p><pre class="line-numbers language-text"><code class="language-text">Exception in thread "main" java.lang.NullPointerException: Cannot invoke "Address.getCountry()" because "user.address" is null    at com.study.base.core.base.NpeTest.main(NpeTest.java:23)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这又多了一个升级JDK到17以上的理由。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>NullPointerException（NPE）是Java开发中常见的运行时异常，源于对未初始化或已置为null的对象引用进行操作。在实际开发过程中，进行非空检查、使用Optional类以及采用Null安全注解以及使用检查工具等策略可以有效避免此类异常的发生。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 空指针异常 </tag>
            
            <tag> NullPointerException </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊BigDecimal使用时的陷阱</title>
      <link href="/article/javabigdecimal.html"/>
      <url>/article/javabigdecimal.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>在Java开发中，我们常常需要处理精确的数值计算，特别是在金融领域或其他要求高精度的场景。而为了避免浮点数运算中可能引发的精度丢失问题，Java提供了BigDecimal类，它被设计用于处理精确的十进制数值。</p><p>BigDecimal是Java中用于处理高精度数值计算的类，它提供了丰富的方法来支持基本的数学运算，包括加法、减法、乘法和除法等。除了基本运算，BigDecimal还支持比较操作和取整操作，允许设置小数位数、指定舍入模式等。此外，它还提供了一系列附加功能，例如转换为科学计数法、格式化输出以及判断是否为整数等。这使得BigDecimal成为处理金融、科学等领域需要高精度计算的理想选择。通过利用BigDecimal的强大功能，开发者可以确保在涉及复杂数值计算时获得准确而可靠的结果。</p><p>然而，在使用BigDecimal的过程中，如果我们使用不当的话，就会造成一些莫名其妙的bug。下面我们就来聊一聊使用BigDecimal不当所带来的”灾难”。</p><h3 id="BigDecimal构造器使用不当"><a href="#BigDecimal构造器使用不当" class="headerlink" title="BigDecimal构造器使用不当"></a>BigDecimal构造器使用不当</h3><p>假如现在有一个浮点类型值<code>0.01</code>，我们要给转换为BigDecimal，以便我们做一些原酸。那么我们就会这么做：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal1<span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal2<span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal3 <span class="token operator">=</span> BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么这三个BigDecimal的对象的值各是多少呢？输出结果如下：</p><pre><code>0.010000000000000000208166817117216851329430937767028808593750.010.01</code></pre><p>为何出现如此差异呢？</p><p>当使用<code>new BigDecimal(0.01)</code>时，传入的是浮点数，因为浮点数在计算机中以二进制形式表示，0.01在二进制中是无限循环小数，导致转换为BigDecimal时发生了精度丢失。</p><p>而使用<code>new BigDecimal(&quot;0.01&quot;)</code>时，由于字符串表示形式准确地包含了小数点和所有位数信息，因此这个构造函数能够精确无误地解析并存储这个数值，不存在浮点数精度问题。<strong>也是官方推荐的构建BigDecimal的方式。</strong></p><p>我们使用<code>BigDecimal.valueOf(0.01)</code>时，方法首先通过 <code>Double.toString(0.01)</code> 将传入的 <code>double</code> 类型数值转换为其标准字符串表示形式，在通过<code>new BigDecimal(Strin val)</code>去构建BigDecimal。其源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> BigDecimal <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">double</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Reminder: a zero double returns '0.0', so we cannot fastpath  </span>    <span class="token comment" spellcheck="true">// to use the constant ZERO.  This might be important enough to    </span>    <span class="token comment" spellcheck="true">// justify a factory approach, a cache, or a few private    </span>    <span class="token comment" spellcheck="true">// constants, later.    </span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用equals-方法进行数值比较"><a href="#使用equals-方法进行数值比较" class="headerlink" title="使用equals()方法进行数值比较"></a>使用equals()方法进行数值比较</h3><p>假如我们要比较下面两个值的大小：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.010"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal6<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>decimal7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal6<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>decimal7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre><code>false0 </code></pre><p>结果显示<code>equals()</code>方法返回不相等，而<code>compareTo()</code>方法返回相等。为什么会出现如此的差异？</p><p>我们先看一下<code>BigDecimal</code>的<code>equals()</code>，发现<code>BigDecimal</code>重写了<code>equals()</code>方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      BigDecimal xDec <span class="token operator">=</span> <span class="token punctuation">(</span>BigDecimal<span class="token punctuation">)</span> x<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 比较两个值的精度    </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scale <span class="token operator">!=</span> xDec<span class="token punctuation">.</span>scale<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> s <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>intCompact<span class="token punctuation">;</span>      <span class="token keyword">long</span> xs <span class="token operator">=</span> xDec<span class="token punctuation">.</span>intCompact<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> INFLATED<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>xs <span class="token operator">==</span> INFLATED<span class="token punctuation">)</span>              xs <span class="token operator">=</span> <span class="token function">compactValFor</span><span class="token punctuation">(</span>xDec<span class="token punctuation">.</span>intVal<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> xs <span class="token operator">==</span> s<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>xs <span class="token operator">!=</span> INFLATED<span class="token punctuation">)</span>          <span class="token keyword">return</span> xs <span class="token operator">==</span> <span class="token function">compactValFor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>intVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inflated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>xDec<span class="token punctuation">.</span><span class="token function">inflated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法的注释中写道：与 compareTo 不同，此方法仅当两个 BigDecimal 对象在值和小数位数上相等时才认为它们相等（因此，使用此方法进行比较时，2.0 不等于 2.00）。不仅比较两个 <code>BigDecimal</code> 实例的数值是否相等，还要求它们的标度（scale）完全一致。</p><p>而 <code>compareTo()</code> 方法则专门针对数值大小进行了设计，它只比较两个 <code>BigDecimal</code> 对象的实际数值大小，不关心它们的标度差异。这意味着即使两个 <code>BigDecimal</code> 对象的小数位数不同，只要数值相同，<code>compareTo()</code> 方法也能正确地判断它们在数值上的相等性。</p><p>在实际开发中，当你仅需要判断两个 <code>BigDecimal</code> 是否数值相等时，通常推荐使用 <code>compareTo()</code> 方法，并检查返回值是否为 0，而不是直接使用 <code>equals()</code> 方法。如果确实需要同时判断数值与标度，则可以使用 <code>equals()</code> 方法。</p><h3 id="除法运算未指定舍入模式"><a href="#除法运算未指定舍入模式" class="headerlink" title="除法运算未指定舍入模式"></a>除法运算未指定舍入模式</h3><p>使用BigDecimal进行除法运算时，一定要正确的使用舍入模式，避免舍入误差引起的问题，并且有时候出现结果是无限小数，程序会抛出异常。例如：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal10 <span class="token operator">=</span> decimal8<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>decimal9<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal10<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时会抛出异常：</p><pre><code>Exception in thread &quot;main&quot; java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</code></pre><p><code>divide()</code>方法的结果是一个非终止（无限）的小数扩展，并且没有精确的十进制表示形式可以完全存储到 <code>BigDecimal</code> 对象中时，就会触发这个异常。如果不指定合适的舍入模式或精度，当除不尽的结果无法准确转换为有限长度的十进制数字时，就会抛出此异常。</p><p>为了避免这个异常，我们需要制定结果精度：</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal9 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  BigDecimal decimal10 <span class="token operator">=</span> decimal8<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>decimal9<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> RoundingMode<span class="token punctuation">.</span>HALF_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal10<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre><code>0.33</code></pre><p>关于舍入模式的值如下：</p><pre><code>RoundingMode.UP：向远离零的方向舍入RoundingMode.DOWN：向靠近零的方向舍入RoundingMode.CEILING：向正无穷方向舍入RoundingMode.FLOOR：向负无穷方向舍入RoundingMode.HALF_UP：四舍五入，如果舍弃部分大于等于 0.5RoundingMode.HALF_DOWN：四舍五入，如果舍弃部分大于 0.5RoundingMode.HALF_EVEN：银行家舍入法，遵循 IEEE 754 标准</code></pre><p>当然我们在指定舍入模式时一定要谨慎，要充分了解精度设置所带来的误差对于业务的影响。</p><h3 id="转换double丢失精度"><a href="#转换double丢失精度" class="headerlink" title="转换double丢失精度"></a>转换double丢失精度</h3><p>我们在使用<code>doubleValue()</code>方法将BigDecimal转为double可能引入精度丢失。</p><pre class="line-numbers language-java"><code class="language-java">BigDecimal decimal11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"3.141592653589793238"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> d <span class="token operator">=</span> decimal11<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre><code>3.141592653589793</code></pre><p><code>BigDecimal</code> 类型转换为 <code>double</code> 类型时可能会出现精度问题。由于 <code>double</code> 是一种 IEEE 754 标准的二进制浮点数格式，它在计算机内存中是以近似值存储的，因此无法精确表示所有十进制小数。</p><p>当一个 <code>BigDecimal</code> 对象包含不能被精确表示为 <code>double</code> 类型的小数值时，转换过程中会发生舍入误差。在实际业务中如果要求高精度计算或绝对无损的数值转换，应该避免直接将 <code>BigDecimal</code> 转换为 <code>double</code>，应当保持使用 <code>BigDecimal</code> 进行计算以确保精度。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在处理精确数值计算时，BigDecimal是Java中一个强大的工具，但在使用过程中需要注意一些潜在的问题。避免使用浮点数构造BigDecimal，而是使用String类型的构造器，在进行除法运算时一定要指定舍入模式，谨慎指定舍入模式，使用compareTo比较BigDecimal的值，要使用BigDecimal进行高精度的运算。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>华为二面：SpringBoot如何自定义Starter？</title>
      <link href="/article/springbootcustomstarter.html"/>
      <url>/article/springbootcustomstarter.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>Spring Boot的自动配置机制为开发人员提供了一种轻松集成和配置各种功能的便捷方式。然而，随着项目的复杂性增加，更好地组织和分享通用功能变得至关重要。自定义Starter成为了理想的解决方案，旨在简化项目的依赖管理和自动配置，使开发者能够迅速而灵活地集成特定的功能模块。本文将深入探讨在Spring Boot中如何创建自定义Starter，为构建模块化且易维护的应用提供有力的支持。</p><p>接下来我们来实现一个自定义的<code>starter</code>。</p><h3 id="实现自定义Starter"><a href="#实现自定义Starter" class="headerlink" title="实现自定义Starter"></a>实现自定义Starter</h3><p>首先，我们需要明确自定义starter的目标功能，如提供特定领域的服务或集成第三方库。比如我们创建一个<code>coderacademy-spring-boot-starter</code>的starter，用于提供某些服务。例如我们的服务就实现一个打印功能：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello 码农Academy！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>本文旨在介绍如何自定义starter，故而starter的功能不是本文的主要内容，后续我们会提供一个基于注解实现ES操作/搜索的服务的starter。感兴趣的，点个关注哦~</p></blockquote><h4 id="创建项目结构"><a href="#创建项目结构" class="headerlink" title="创建项目结构"></a>创建项目结构</h4><p>我们创建一个名为<code>springboot-coderacademy-starter</code>的项目，在<code>pom.xml</code>中设置<code>groupId</code>，<code>artifactId</code>还有<code>version</code>。其中<code>groupId</code>与<code>artifactId</code>应反映starter的名称。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在引入一些我们需要是用到的依赖，比如我们要使用<code>@Configuration</code>，<code>@EnableConfigurationProperties</code>等注解：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>spring-boot-configuration-processor</code>这个依赖主要用于IDEA支持和编译时生成元数据。</p><blockquote><p>本文使用的springboot版本为2.7.0</p></blockquote><h4 id="创建自动配置类"><a href="#创建自动配置类" class="headerlink" title="创建自动配置类"></a>创建自动配置类</h4><p>自动配置类负责定义Spring Boot应用程序中的通用配置和功能。这个类通常使用<code>@Configuration</code>注解进行标记，在这个类中注入服务、组件或其他你需要自动配置的对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>starter<span class="token punctuation">.</span>coderacademy<span class="token punctuation">.</span>service<span class="token punctuation">.</span>CoderAcademyService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @version 1.0 * @description: &lt;p>&lt;/p > * @author: 码农Academy * @create: 2024/1/31 14:38 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指定自动装配类"><a href="#指定自动装配类" class="headerlink" title="指定自动装配类"></a>指定自动装配类</h4><p>在<code>resources</code>文件夹下创建一个<code>META-INF/spring.factories</code>文件，在这个文件中指定自动装配类<code>CoderAcademyAutoConfig</code>：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>META-INF/spring.factories</code>文件中，<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>是一个特殊的键，它的值是一个包含要应用的自动配置类的全限定名列表。当应用启动时，SpringBoot的引导过程会扫描所有已引入jar包中的<code>spring.factories</code>文件，并根据<code>EnableAutoConfiguration</code>键下的类来加载和执行相应的自动配置逻辑。</p><p>当然如果不使用这个配置，在调用方使用<code>@ComponentScan</code>也可以扫描到<code>CoderAcademyAutoConfig</code>。但是这跟Starter的设计理念相悖。在Starter的设计中，一般不推荐调用方手动进行额外的扫描。这是因为调用方引入了Starter，就应该依赖于 Starter提供的自动配置。手动扫描可能会导致不必要的麻烦，例如循环依赖、配置类的重复加载等问题。</p><p>假如我们现在没有其他的配置了，比如说一下额外的属性配置，那我们就可以打包与发布了。</p><h4 id="打包与发布"><a href="#打包与发布" class="headerlink" title="打包与发布"></a>打包与发布</h4><p>此时我们就可以将自定义Starter打包，并发布到Maven仓库或其他仓库管理工具。</p><blockquote><p>本地开发时，可以直接install。不必发不到私服。</p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我们新建一个调用方的项目，在其中引入<code>coderacademy-spring-boot-starter</code>。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们编写测试类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">class</span> <span class="token class-name">SpringbootCodeApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> CoderAcademyService coderAcademyService<span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCoderAcademy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       String str <span class="token operator">=</span> coderAcademyService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCoderAcademyService</span><span class="token punctuation">(</span>CoderAcademyService coderAcademyService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coderAcademyService <span class="token operator">=</span> coderAcademyService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240201173812.png" alt="image.png"></p><p>这样一个很简单的Starter就完成了。<br>当然在实际开发中，我们还需要一些自定义配置项需要注入到Starter中，才可以提供完整的服务。</p><h4 id="配置属性"><a href="#配置属性" class="headerlink" title="配置属性"></a>配置属性</h4><p>我们新建一个<code>CoderAcademyProperties</code>类用于接收，调用方在自己项目中的<code>application.yaml</code>或者其他的配置中心配置的信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string">"码农Academy"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ConfigurationProperties</code> 是 SpringBoot中用于绑定外部配置到Bean的属性上，<code>prefix</code>属性指定了配置前缀。这样我们就可以在调用方的<code>application.yml</code>中配置以<code>coderacademy</code>为前缀的信息。这里我们也给了默认值。</p><p>然后我们将这个配置注入到<code>CoderAcademyService</code>中去。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CoderAcademyProperties coderAcademyProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello "</span><span class="token operator">+</span> coderAcademyConfig<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CoderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coderAcademyProperties <span class="token operator">=</span> coderAcademyProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们改动一下<code>CoderAcademyService</code>的AutoConfig。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我重新<code>Deploy</code>之后，然后在调用方配置一下<code>CoderAcademyProperties</code>中对应的属性：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">coderacademy.name</span> <span class="token punctuation">=</span> <span class="token attr-value">CoderAcademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次跑一下单测：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240201194917.png" alt="image.png"></p><p>在实际开发场景中，我们有时会遇到这样的需求：调用方希望根据自身项目的需求灵活定义配置项，无需严格遵循<code>CoderAcademyProperties</code>中预设的模式（例如<code>coderacademy.name</code>）。例如，他们可能倾向于通过自定义属性<code>customer.starter.name</code>来代替，并将这个属性值映射到其项目的配置文件中。随后，在调用方自己的<code>@Configuration</code>类里，基于这些个性化配置来创建一个<code>CoderAcademyService</code>实例。</p><p>然而，问题在于，Starter模块内部预先提供了一个默认的<code>CoderAcademyService</code> Bean定义。当调用方在其应用上下文中也声明了同类型的Bean时，这将触发Spring容器中的Bean冲突和初始化异常。为了解决这个问题，我们在设计<code>Starter</code>时需要考虑到这一点，我们在自动配置类中利用<code>@ConditionalOnMissingBean</code>注解来确保仅在容器中尚无<code>CoderAcademyService</code> Bean时才进行创建操作。这样就避免了重复注册同一类型Bean导致的问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CoderAcademyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在调用方设计一个配置类，用于创建一个<code>CoderAcademyService</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${customer.coderacademy.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String customerName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>customerName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在调用方的<code>application.properties</code>加上<code>customer.coderacademy.name</code>配置。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">customer.coderacademy.name</span> <span class="token punctuation">=</span> <span class="token attr-value">customer,coderacademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们再次在调用方执行：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202102135.png" alt="image.png"></p><h4 id="属性配置提示"><a href="#属性配置提示" class="headerlink" title="属性配置提示"></a>属性配置提示</h4><p>我们在使用其他的官方<code>Starter</code>时在<code>application.properties</code>或者<code>application.yml</code>配置相关属性时，IDEA会自动给出属性的Key的提示，以及给出默认值。那么在自定义<code>Starter</code>中该如何实现这功能呢？其实这就需要用到了我们引入的<code>spring-boot-configuration-processor</code>依赖。</p><p><code>spring-boot-configuration-processor</code> 是 Spring Boot 提供的一个注解处理器，用于处理 <code>@ConfigurationProperties</code> 注解，生成配置属性的元数据，以提供更好的 IDE 支持和配置文件提示。注解处理器会扫描项目中标注了<code>@ConfigurationProperties</code> 注解的类，然后生成包含有关这些配置属性的详细信息的 <code>spring-configuration-metadata.json</code>文件。该文件位于<code>META-INF</code>下。这个元数据文件包含了配置属性的描述、类型、默认值等信息，以提供更好的代码提示和文档生成功能。元数据文件被 IDE（如 IDEA、Eclipse）使用，用于提供更强大的代码提示和补全功能。开发者在编辑配置文件时可以看到配置属性的描述、类型等信息，更容易正确地配置应用程序。</p><p>当然添加依赖之后，我们还需要添加Maven的插件（如果使用的是Maven）。</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们执行<code>mvn clean -U install -DskipTests</code>命令后，就可以在target下的<code>META-INF</code>就可以看见这个元数据文件。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202143323.png" alt="image.png"></p><p>我们在重新打包之后，在调用方的<code>application.properties</code>中配置属性信息时，可以看到效果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202143528.png" alt="image.png"></p><h4 id="配置文件默认值"><a href="#配置文件默认值" class="headerlink" title="配置文件默认值"></a>配置文件默认值</h4><p>在上述示例中，我们在<code>CoderAcademyProperties</code>代码中显示的给<code>name</code>赋值了一个默认值。这种方式实现也可以，但是不够优雅，我们换一种优雅的方式去实现配置的默认值设置。我们该用设置一个存储默认值的配置文件<code>coderacademy-default.properties</code>，从这个文件绑定配置的默认值。</p><p>我们在<code>resources/META-INF</code>下创建一个<code>coderacademy-default.properties</code>。</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">coderacademy.name</span> <span class="token punctuation">=</span> <span class="token attr-value">Default CoderAcademy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在<code>CoderAcademyAutoConfig</code>中使用<code>@PropertySource</code>将这这个默认文件中的配置加载绑定到Bean中即<code>CoderAcademyProperties</code>中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyPropertiesAutoConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>CoderAcademyService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CoderAcademy Default Properties"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"classpath:/META-INF/coderacademy-default.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 在SpringBoot应用中，通过<code>application.properties</code>或<code>application.yml</code>设置的属性具有较高的优先级。如果使用<code>@PropertySource</code>加载的属性与前者有冲突，则会被后者覆盖。</p><p>我们在调用方直接使用<code>Starter</code>中创建的<code>CoderAcademyService</code>，看一下效果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202150918.png" alt="image.png"></p><p>即此时使用的是<code>coderacademy-default.properties</code>中配置的默认值。<br>我们在调用方配置<code>coderacademy.name</code>的值</p><pre class="line-numbers language-properites"><code class="language-properites">coderacademy.name = This is CoderAcademy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次运行一下数据</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202150948.png" alt="image.png"></p><p>至此一个自定义的<code>Starter</code>就完成了。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>项目架构：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240202153807.png" alt="image.png"></p></li><li><p>依赖：</p></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.springboot.coderacaemy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>coderacermy-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>服务配置信息</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略get set方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CoderAcademyProperties</code>主要作用是为了绑定<code>application.properites</code>中配置信息。其默认的配置文件<code>coderacademy-default.properties</code>：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">coderacademy.url</span><span class="token punctuation">=</span><span class="token attr-value">https://www.coderacademy.online/  </span><span class="token attr-name">coderacademy.port</span><span class="token punctuation">=</span><span class="token attr-value">8080  </span><span class="token attr-name">coderacademy.user-name</span><span class="token punctuation">=</span><span class="token attr-value">CoderAcademy  </span><span class="token attr-name">coderacademy.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>服务配置类<br>新建一个<code>CoderAcademyConfig</code>用于创建<code>CoderAcademyService</code>服务。<code>CoderAcademyProperties</code>只作为服务的配置信息，主要参与绑定外部配置文件中的配置信息。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 省略 get  set</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建一个将<code>CoderAcademyProperties</code>的参数绑定到配置类<code>CoderAcademyConfig</code>的一个自动装配类<code>CoderAcademyPropertiesAutoConfig</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"CoderAcademy Default Properties"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"classpath:/META-INF/coderacademy-default.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyPropertiesAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CoderAcademyConfig <span class="token function">coderAcademyConfig</span><span class="token punctuation">(</span>CoderAcademyProperties coderAcademyProperties<span class="token punctuation">)</span><span class="token punctuation">{</span>        CoderAcademyConfig coderAcademyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coderAcademyConfig<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span>coderAcademyProperties<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> coderAcademyConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>服务类<br>服务类中就是用<code>CoderAcademyConfig</code>创建。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CoderAcademyConfig coderAcademyConfig<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">connectDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Connect to "</span> <span class="token operator">+</span> coderAcademyConfig<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> coderAcademyConfig<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" successfully!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CoderAcademyService</span><span class="token punctuation">(</span>CoderAcademyConfig coderAcademyConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coderAcademyConfig <span class="token operator">=</span> coderAcademyConfig<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个服务自动装配类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyPropertiesAutoConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span>CoderAcademyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoderAcademyAutoConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> CoderAcademyService <span class="token function">coderAcademyService</span><span class="token punctuation">(</span>CoderAcademyConfig coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CoderAcademyService</span><span class="token punctuation">(</span>coderAcademyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>META-INF/spring.factories</code>下中使用<code>EnableAutoConfiguration</code>指定自动配置类。</p><pre class="line-numbers language-xml"><code class="language-xml">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.springboot.starter.coderacademy.config.CoderAcademyAutoConfig,com.springboot.starter.coderacademy.config.CoderAcademyPropertiesAutoConfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时就可以把这个Starter打包推到私服，就可以使用了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自定义Spring Boot Starter的原理是在应用启动时，SpringBoot扫描含有spring.factories的jar包，加载其中的org.springframework.boot.autoconfigure.EnableAutoConfiguration条目。引入自定义starter后，相应的自动配置类会被检测并加载到Spring容器执行。通过条件注解等机制，可根据用户提供的配置信息或其他Bean的存在动态配置和初始化Bean，实现功能的自动化装配。自定义starter体现了SpringBoot模块化和可扩展性，简化了依赖管理和配置，使开发者能迅速构建具有特定功能的应用。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 自定义Starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：Mysql千万级大表如何进行深度分页优化</title>
      <link href="/article/mysqloffset.html"/>
      <url>/article/mysqloffset.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>假如有一张千万级的订单表，这张表没有采用分区分表，也没有使用ES等技术，分页查询进行到一定深度分页之后（比如1000万行后）查询比较缓慢，我们该如何进行优化？</p><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>订单表结构如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_order<span class="token punctuation">`</span> <span class="token punctuation">(</span>      <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>order_no<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单编号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'客户编号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>order_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单状态'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>warehouse_code<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'发货地仓库编码'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">16</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人国家'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>state<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人州'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人城市'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>street<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">256</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人街道'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>zip_code<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人邮编'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>contact_email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">128</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人邮箱'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>contact_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人姓名'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>contact_mobile<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">32</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'收货人手机号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>deleted<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否已被删除'</span><span class="token punctuation">,</span>      <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_customer<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>deleted<span class="token punctuation">`</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">KEY</span> <span class="token punctuation">`</span>idx_create_time<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>deleted<span class="token punctuation">`</span> <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span> <span class="token string">'销售订单表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>Mysql</code>版本为8.0。我们使用Python脚本向表中插入2000万条数据。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql  <span class="token keyword">from</span> faker <span class="token keyword">import</span> Faker  <span class="token keyword">import</span> random  <span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime  <span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor  <span class="token comment" spellcheck="true"># MySQL 连接配置  </span>db_config <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'your_database_host'</span><span class="token punctuation">,</span>    <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'your_database_user'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'your_database_password'</span><span class="token punctuation">,</span>    <span class="token string">'database'</span><span class="token punctuation">:</span> <span class="token string">'your_database_name'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 创建 MySQL 连接  </span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token operator">**</span>db_config<span class="token punctuation">)</span>  cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 Faker 生成模拟数据  </span>fake <span class="token operator">=</span> Faker<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取国家下发货仓库编码  </span><span class="token keyword">def</span> <span class="token function">generate_warehousecode</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> country <span class="token operator">==</span> <span class="token string">"US"</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token string">"US-"</span><span class="token operator">+</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"WEST"</span><span class="token punctuation">,</span> <span class="token string">"EAST"</span><span class="token punctuation">,</span> <span class="token string">"MIDDLE"</span><span class="token punctuation">,</span> <span class="token string">"SOUTH"</span><span class="token punctuation">,</span> <span class="token string">"NORTH"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-0"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token keyword">return</span> country <span class="token operator">+</span> <span class="token string">"00"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 插入 t_order 表数据（多线程并发，每个线程插入1万条，共2000个线程）  </span><span class="token keyword">def</span> <span class="token function">insert_data_thread</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 创建 MySQL 连接  </span>    conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token operator">**</span>db_config<span class="token punctuation">)</span>      cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>      order_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          order_no <span class="token operator">=</span> <span class="token string">"OC"</span><span class="token operator">+</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 取前16位  </span>        customer_no <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>        order_status <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          country <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>              <span class="token punctuation">[</span><span class="token string">"CA"</span><span class="token punctuation">,</span> <span class="token string">"US"</span><span class="token punctuation">,</span> <span class="token string">"MX"</span><span class="token punctuation">,</span> <span class="token string">"JP"</span><span class="token punctuation">,</span> <span class="token string">"UK"</span><span class="token punctuation">,</span> <span class="token string">"TR"</span><span class="token punctuation">,</span> <span class="token string">"DE"</span><span class="token punctuation">,</span> <span class="token string">"ES"</span><span class="token punctuation">,</span> <span class="token string">"FR"</span><span class="token punctuation">,</span> <span class="token string">"IT"</span><span class="token punctuation">,</span> <span class="token string">"NL"</span><span class="token punctuation">,</span> <span class="token string">"PL"</span><span class="token punctuation">,</span> <span class="token string">"SE"</span><span class="token punctuation">,</span> <span class="token string">"BR"</span><span class="token punctuation">,</span> <span class="token string">"CN"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          warehouse_code <span class="token operator">=</span> generate_warehousecode<span class="token punctuation">(</span>country<span class="token punctuation">)</span>          state <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>          city <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>          street <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span>          zip_code <span class="token operator">=</span> fake<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>          contact_email <span class="token operator">=</span> fake<span class="token punctuation">.</span>email<span class="token punctuation">(</span><span class="token punctuation">)</span>          contact_name <span class="token operator">=</span> fake<span class="token punctuation">.</span>name<span class="token punctuation">(</span><span class="token punctuation">)</span>          contact_mobile <span class="token operator">=</span> fake<span class="token punctuation">.</span>phone_number<span class="token punctuation">(</span><span class="token punctuation">)</span>          create_time <span class="token operator">=</span> fake<span class="token punctuation">.</span>date_time_between<span class="token punctuation">(</span>start_date<span class="token operator">=</span>datetime<span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end_date<span class="token operator">=</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          update_time <span class="token operator">=</span> create_time          deleted <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 默认未删除  </span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""              INSERT INTO t_order (                order_no, customer_no, order_status, warehouse_code, country,                state, city, street, zip_code, contact_email, contact_name,                contact_mobile, create_time, update_time, deleted            )            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)        """</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>order_no<span class="token punctuation">,</span> customer_no<span class="token punctuation">,</span> order_status<span class="token punctuation">,</span> warehouse_code<span class="token punctuation">,</span> country<span class="token punctuation">,</span>                state<span class="token punctuation">,</span> city<span class="token punctuation">,</span> street<span class="token punctuation">,</span> zip_code<span class="token punctuation">,</span> contact_email<span class="token punctuation">,</span> contact_name<span class="token punctuation">,</span>                contact_mobile<span class="token punctuation">,</span> create_time<span class="token punctuation">,</span> update_time<span class="token punctuation">,</span> deleted<span class="token punctuation">)</span><span class="token punctuation">)</span>          order_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span>lastrowid<span class="token punctuation">,</span> order_no<span class="token punctuation">,</span> customer_no<span class="token punctuation">,</span> create_time<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保存插入的行的 ID  </span>    <span class="token comment" spellcheck="true"># 提交 t_order 数据插入  </span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>thread_id<span class="token operator">+</span> <span class="token string">"已经跑完10000条数据。。。。。。。。。"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 关闭数据库连接  </span>    cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 ThreadPoolExecutor 并发插入  </span><span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 可以根据需要调整最大线程数  </span>    executor<span class="token punctuation">.</span>map<span class="token punctuation">(</span>insert_data_thread<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123201518.png" alt="image.png"></p><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>导出数据时我们需要按照时间倒序。所以我们先执行以下sql查询前100条</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>共花费210ms。执行计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123201659.png" alt="image.png"></p><p>然后我们继续执行sql，我们从第100万行开始取100条数据：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时耗时3分2秒，耗时明显增加。执行计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123202248.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123202322.png" alt="image.png"><br>由执行计划看，此时索引已经失效了。。。。</p><p>我们继续执行sql，从第1000万行开始取100条数据：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">10000000</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时耗时4分14秒，时间真是太长了，执行计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203426.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123202846.png" alt="image.png"></p><p>后面还有接近1000万条数据没有取出来，直接就废了。</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>当我们使用 <code>LIMIT offset, count</code> 查询语句进行深度分页查询时，例如 <code>LIMIT 10000000,100</code> ，会发生以下过程：</p><ol><li>MySQL首先会根据给定条件从相应的索引树中查找m+n条记录。对于聚集索引来说，它直接找到需要的结果即丢弃前<code>offset</code>条数据，返回<code>count</code>条数据并返回；而对于二级索引，则可能涉及回表操作。</li><li>如果使用的是二级索引，在查到m+n条记录后还需要通过这些记录所关联的主键<code>ID</code>去聚集索引里再次搜索出完整的行数据，然后再丢弃掉前<code>offset</code>条数据，返回<code>count</code>条数据。因此在这个过程中可能会产生大量的“回表”操作，这将导致性能下降。</li></ol><p>我们借助<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html" target="_blank" rel="noopener"><strong>B+ Tree Visualization</strong></a>演示一下这张表的索引结构：</p><ul><li>聚集索引（主键ID）</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122233800.png" alt="聚集索引（主键ID）"></p><ul><li>二级索引（idx_create_time）</li></ul><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122234301.png" alt="二级索引（create_time）"></p><p>以上述例子来说，当我们查询<code>LIMIT 10000000,100</code>时，它会先从二级索引中查询10000000+100条记录对应的ID，然后再用这些记录的ID去聚集索引中查询ID对应的记录，然后舍弃掉前10000000条数据，返回后100条数据。</p><p>所以当<code>offset</code>+<code>count</code>量很大时，Mysql的执行器认为全表扫描的性能更由于使用索引，所以也导致索引失效。所以我们要做的尽可能的减少回表的记录数量。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h4><p>我们改造sql，通过一个子查询按照<code>create_time</code>倒排，获取第<code>offset</code> + 1条记录的最新的create_time，create_time直接从二级索引上可以获取，不会进行回表，然后我们再根据这个create_time传递到主查询时，取100条数据，即回表数据也仅仅只有count条即100条数据，大大减少了回表的记录数量。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order  <span class="token keyword">WHERE</span> create_time <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> create_time <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询第100万时耗时556毫秒。</p><p>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203520.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203725.png" alt="image.png"><br>可以看出主查询以及子查询都使用到了索引，回表查询的数据记录数也大大减少。</p><p>继续查询到第1000万行时耗时接近6秒。<br>执行结果，执行计划</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123203937.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204350.png" alt="image.png"><br>可以看出主查询以及子查询都使用到了索引，回表查询的数据记录数也大大减少。</p><p><mark style="background: #FF5582A6;">这种方式需要<code>create_time</code> 的分布是相对均匀的，否则可能会导致某个时间段内的数据较多，影响查询性能。</mark></p><h4 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h4><p>我们改造sql，<code>create_time</code>跟<code>id</code>都存储在二级索引中，我们获取这两列值不需要回表，所以我们创建一个偏移量为<code>offset</code>，个数为<code>count</code>并且包含<code>create_time</code>以及<code>id</code>的临时表，临时表中数据不需要回表。然后再跟自身通过主键<code>ID</code>进行关联，仅需要回表<code>count</code>条数据，大大减少了回表的记录格式。同时也使用了主键索引关联，效率也大大提高。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> torder<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span>  t_order torder    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> t_order <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span><span class="token number">100</span>     <span class="token punctuation">)</span> tmp <span class="token keyword">ON</span> torder<span class="token punctuation">.</span>id <span class="token operator">=</span> tmp<span class="token punctuation">.</span>id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    create_time <span class="token keyword">DESC</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询第100万时耗时260毫秒。<br>执行结果，执行计划。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204450.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204625.png" alt="image.png"></p><p>继续查询到第1000万行时耗时接近2秒<br>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204711.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204815.png" alt="image.png"></p><p>这种方式要保证<code>INNER JOIN</code>使用了合适的索引。</p><h4 id="SEARCH-AFTER"><a href="#SEARCH-AFTER" class="headerlink" title="SEARCH AFTER"></a>SEARCH AFTER</h4><p>每次查询都保留上次的最小的<code>create_time</code>，然后下次查询只查询比上一页的<code>create_time</code>小的数据。单表查询，并且使用索引，回表数据少，不需要子查询以及关联查询，查询效率高。类似ES的<code>SEARCH AFTER</code>的查询方式。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 我们模拟连续分页到第1000000页，最小的一条数据的create_time</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order  <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">ASC</span>  <span class="token keyword">LIMIT</span> <span class="token number">1000000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order  <span class="token keyword">WHERE</span> create_time <span class="token operator">&lt;=</span> <span class="token string">'2023-01-22 00:00:00'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> create_time <span class="token keyword">desc</span> <span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询第100万时耗时142毫秒。</p><p>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123204928.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123205002.png" alt="image.png"></p><p>继续查询到第1000万行时耗时244毫秒</p><p>执行结果，执行计划<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123210129.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240123210351.png" alt="image.png"></p><p><mark style="background: #FF5582A6;">当然该种方式缺点也很明显：只能支持连续分页，不能支持获取随意页的数据。</mark></p><h4 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h4><ul><li>限制查询范围： 在需求层面，可以限制只能查询前100页数据，或者规定只能获取某个时间段内的数据，从而避免深度分页。</li><li>水平分表：考虑将数据按照某个维度进行水平分表，以减小单表的数据量</li><li>使用ES，Hive，ClickHouse等OLAP方案</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql优化 </tag>
            
            <tag> Mysql </tag>
            
            <tag> 面试 </tag>
            
            <tag> Mysql深度分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：Mysql中EXISTS与IN的使用有哪些差异</title>
      <link href="/article/mysqlexistsin.html"/>
      <url>/article/mysqlexistsin.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎老铁来到我的博客，扫码下图关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>在数据库查询优化中，查询效率直接关系到应用程序性能。其中，IN和EXISTS是两种常见的子查询操作符，广泛应用于SQL查询语句，但它们在执行效率上有所不同。</p><p>本文深入探讨IN和EXISTS的工作原理，以及在何种情境下选择更为合适。通过对这两种操作符的详细分析，揭示它们在实际应用中的优缺点，一起了解如何在数据库查询中灵活运用IN和EXISTS，以优化查询语句的执行。</p><h3 id="IN与EXISTS基本概念与用法"><a href="#IN与EXISTS基本概念与用法" class="headerlink" title="IN与EXISTS基本概念与用法"></a>IN与EXISTS基本概念与用法</h3><h4 id="IN子查询"><a href="#IN子查询" class="headerlink" title="IN子查询"></a>IN子查询</h4><p>在MySQL中，当使用<code>IN</code>子查询时，主查询（外表）中的每一行都会与子查询（内表）的结果集进行比较。先执行子查询生成一个临时表，然后主查询取出对应的字段值，系统会遍历子查询结果集，检查这个字段值是否存在于子查询结果集中。如果存在，则该行满足条件，会被加入到最终的查询结果中。例如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">where</span> customer_no <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，对于<code>t_order</code>表中的每一行，MySQL会查看<code>t_customer</code>表中是否存在与其<code>customer_no</code>相匹配的记录。如果<code>t_customer</code>表中有任何行的<code>customer_no</code>与<code>t_order</code>表中当前行的<code>customer_no</code>相同，那么这一行就会被包含在最终查询结果中。</p><p><code>IN</code>子查询的效率通常在子查询结果集较小的情况下较高，因为它需要处理并可能缓存整个子查询结果。</p><h4 id="EXISTS子查询"><a href="#EXISTS子查询" class="headerlink" title="EXISTS子查询"></a>EXISTS子查询</h4><p><code>EXISTS</code>子查询则是用于判断关联性，它并不关心子查询返回的具体数据值，而只关注是否存在匹配的行。对于主查询表中的每一行，执行内部的<code>EXISTS</code>子查询。当<code>EXISTS</code>子查询找到一行或多行符合<code>WHERE</code>条件的记录时，立即返回真(<code>TRUE</code>)。这个<code>TRUE</code>值会导致外层查询的那一行被纳入最终结果中，因为<code>WHERE EXISTS</code>条件为真。一旦<code>EXISTS</code>子查询找到匹配项，它就不需要继续查找剩余的记录了，即实现了所谓的“短路”或“早期终结”。例如：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order torder <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no <span class="token operator">AND</span> tcustomer<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子中，只要<code>t_customer</code>表中存在至少一条记录，其<code>customer_no</code>与<code>t_order</code>表中的当前行<code>customer_no</code>相符，MySQL就认为<code>EXISTS</code>条件为真，并将当前的<code>t_order</code>表行作为结果返回。无论<code>t_customer</code>表有多少其他相关记录，都不再影响此条目是否被选中。<br><code>EXISTS</code>在子查询表大但只需验证是否存在对应关系时更高效，它支持“短路”机制，一旦找到匹配项就结束子查询，不必遍历完整个子查询表。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>MySQL中的<code>IN</code>语句是把外表和内表作<code>HASH</code>连接，而<code>EXISTS</code>语句是对外表作<code>LOOP</code>循环，每次<code>LOOP</code>循环再对内表进行查询，单纯的理解<code>EXISTS</code>比<code>IN</code>语句的效率要高的说法其实是不准确的，要区分情景:</p><ul><li>如果查询的两不表大小相当，那么用<code>EXISTS</code>和<code>IN</code>差别不大。</li><li>如果两个表中一个较小，一个是大表，则子查询表大的用<code>EXISTS</code>,子查询表小的用 <code>IN</code>。</li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>下面我们来通过实际案例去验证数据量和索引对<code>IN</code>与<code>EXISTS</code>子查询性能的影响。<br>我们创建两张表：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- t_order</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t_order<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_order<span class="token punctuation">`</span><span class="token punctuation">(</span>   id                 <span class="token keyword">bigint</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span>          <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>order_no<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单编号'</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'客户编号'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span>  <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">'测试订单表'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- t_customer</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span><span class="token punctuation">;</span>  <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_customer<span class="token punctuation">`</span><span class="token punctuation">(</span>       id                 <span class="token keyword">bigint</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键'</span>          <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>       <span class="token punctuation">`</span>customer_no<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'客户编号'</span><span class="token punctuation">,</span>      <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span>      <span class="token keyword">datetime</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span>  <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span>    <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> <span class="token operator">=</span> utf8mb4 <span class="token keyword">COMMENT</span> <span class="token operator">=</span><span class="token string">'测试订单客户表'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们通过<code>Python</code>脚本往<code>t_order</code>中插入100万条数据，<code>t_customer</code>中插入1万条数据。</p><p>案例<code>sql</code>:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">where</span> customer_no <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order torder <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no <span class="token operator">AND</span> tcustomer<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>案例执行建立在没有加索引情况下进行。</p></blockquote><h4 id="IN小表，EXISTS小表"><a href="#IN小表，EXISTS小表" class="headerlink" title="IN小表，EXISTS小表"></a>IN小表，EXISTS小表</h4><p>我们在执行上面两条sql时会发现<code>IN</code>查询的速度远远高于<code>EXISTS</code>。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order <span class="token keyword">where</span> customer_no <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_order torder <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no <span class="token operator">AND</span> tcustomer<span class="token punctuation">.</span>country <span class="token operator">=</span> <span class="token string">'US'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们先看两个sql的执行计划：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122114228.png" alt="image.png"><br>本案例中<code>IN</code>查询的SQL执行了近5秒。<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122114623.png" alt="image.png"><br>本案例中<code>EXISTS</code>查询的SQL执行了超过5分钟。</p><p>从上述执行计划中，我们可以看到<code>IN</code>查询和<code>EXISTS</code>查询在没有索引的情况下都进行了全表扫描：</p><ul><li><p>IN查询：</p><ul><li>主查询对<code>t_order</code>表进行了全表扫描（ALL），由于没有索引，MySQL需要遍历1005915行数据。</li><li>子查询对<code>t_customer</code>表也进行了全表扫描（MATERIALIZED），查找国家为’US’的客户编号。该表大小较小，有1000行数据。</li></ul></li><li><p>EXISTS查询：</p><ul><li>主查询同样对<code>t_order</code>表进行了全表扫描（ALL），同理，无索引导致效率较低。</li><li>子查询对<code>t_customer</code>表进行了全表扫描（DEPENDENT SUBQUERY），并且根据WHERE条件过滤出与主查询关联的数据。</li></ul></li></ul><p>虽然两者都未使用索引，但根据执行计划中的rows值，<code>IN</code>查询的子查询涉及的数据量要远小于主查询涉及的数据量。具体来说，在<code>IN</code>查询中，子查询只需要处理1000行数据，并将结果用于筛选主查询中的1005915行数据。而在<code>EXISTS</code>查询中，子查询虽然只返回1.00（几乎为1）个匹配记录，但它需要针对每一行主查询的结果进行检查，总共要处理1005915次。</p><p>因此，在这种情况下，<code>IN</code>查询的效率高于<code>EXISTS</code>查询的原因主要是子查询数据集大小的不同以及子查询对主查询的影响程度。尽管两个查询都没有利用到索引优化，但在实际执行时，<code>IN</code>查询所需的计算量相对较小，故其性能优于<code>EXISTS</code>查询。</p><h4 id="IN大表，EXISTS大表"><a href="#IN大表，EXISTS大表" class="headerlink" title="IN大表，EXISTS大表"></a>IN大表，EXISTS大表</h4><p>我们再次变更一下sql，让子查询是大表，观察一下他们的执行情况。即sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_customer <span class="token keyword">WHERE</span> customer_no <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> customer_no <span class="token keyword">FROM</span> t_order<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t_customer tcustomer <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span>  t_order torder <span class="token keyword">WHERE</span> tcustomer<span class="token punctuation">.</span>customer_no <span class="token operator">=</span> torder<span class="token punctuation">.</span>customer_no<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们再次查看sql的执行计划：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122152320.png" alt="image.png"><br>执行IN查询语句时花费2秒。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240122152415.png" alt="image.png"><br>执行<code>EXISTS</code>查询花费0.25秒。</p><p>由此可以看出<code>EXISTS</code>查询的效率远高于<code>IN</code>查询，我们结合执行计划进行分析：</p><ul><li>IN查询：<ul><li>主查询（<code>t_customer</code>）由于没有索引，MySQL需要对整个表进行全表扫描，涉及行数为1000行。</li><li>子查询（<code>t_order</code>）同样进行了全表扫描，涉及行数为1005915行。虽然子查询的结果通过自动生成的临时键与主查询关联，并且对于每一个主查询中的<code>customer_no</code>，子查询都能很快找到对应的记录（rows值为1），但由于子查询的数据量巨大，所以整体查询效率不高。</li></ul></li><li>EXISTS查询：<ul><li>主查询（<code>t_customer</code>）仍然进行了全表扫描，涉及行数为1000行。</li><li>子查询（<code>t_order</code>）也是全表扫描，但关键在于它是“DEPENDENT SUBQUERY”，这意味着它会依赖于外部查询（即主查询）的每一行结果来决定是否执行。尽管子查询需要处理1005915行数据，但由于其是根据主查询的每一条<code>customer_no</code>逐个检查是否存在匹配项，因此当遇到第一条不满足条件的<code>customer_no</code>时，就可以立即停止对子查询中剩余行的处理。这导致了在实际执行过程中，可能只需要检查一部分<code>t_order</code>表的数据即可完成所有主查询记录的验证，从而提高了查询效率。</li></ul></li></ul><p>在这个案例中，因为主查询表（<code>t_customer</code>）较小，而子查询表（<code>t_order</code>）较大，<code>EXISTS</code>查询能够在较早阶段停止不必要的计算，使得整体查询效率优于<code>IN</code>查询。</p><h3 id="数据量以及索引对IN与-EXISTS性能的影响"><a href="#数据量以及索引对IN与-EXISTS性能的影响" class="headerlink" title="数据量以及索引对IN与`EXISTS性能的影响"></a>数据量以及索引对<code>IN</code>与`EXISTS性能的影响</h3><p>在MySQL中，<code>IN</code>和<code>EXISTS</code>子查询的性能很大程度上取决于内外表的数据量以及相关的索引设置。</p><h4 id="数据量的影响"><a href="#数据量的影响" class="headerlink" title="数据量的影响"></a>数据量的影响</h4><ul><li><p>对于<code>IN</code>子查询：当内表（子查询结果集）较小且数据能够被有效索引时，<code>IN</code>通常表现良好。如果内表很大，即使有索引，由于需要生成并存储完整的子查询结果集以供主查询进行比对，因此随着内表记录数的增长，性能会逐渐下降。</p></li><li><p>对于<code>EXISTS</code>子查询：当外层主查询表较大，而内表虽大但匹配条件的行数较少时，<code>EXISTS</code>的优势更加明显。因为它仅需找到一个匹配项就可以立即结束内部循环，返回真值，无需遍历整个内表。当内表数据量巨大但能快速定位到满足条件的少数行时，<code>EXISTS</code>相比<code>IN</code>更高效。</p><h4 id="索引的影响："><a href="#索引的影响：" class="headerlink" title="索引的影响："></a>索引的影响：</h4></li><li><p>对于<code>IN</code>子查询：如果<code>IN</code>子查询中的字段具有有效的索引，可以减少内表的全表扫描，转而通过索引查找，显著提高查询效率。尤其是覆盖索引（索引包含了查询所需的所有列），可以直接从索引中获取信息，避免回表操作。</p></li><li><p>对于<code>EXISTS</code>子查询：对于<code>EXISTS</code>子查询，同样要求相关联的字段上有合适的索引。例如，在上面的例子中，若<code>t_customer</code>的<code>customer_no</code>字段有索引，那么在执行<code>WHERE tcustomer.customer_no = torder.customer_no</code>时，可以通过索引快速定位匹配记录，从而加速子查询的执行过程。</p></li></ul><p>在决定使用<code>IN</code>还是<code>EXISTS</code>时，首先应考虑的是内外表的数据规模以及关联字段上的索引情况。若内表较小或子查询结果集易于通过索引优化，<code>IN</code>可能是更好的选择。若关注是否存在关联关系且内表虽大但能满足条件的行数有限，同时外层主查询表可能更大，则<code>EXISTS</code>可能提供更高的查询性能。 </p><p>当然最佳实践是结合实际业务需求、数据分布特点以及数据库统计信息，通过分析SQL执行计划来确定最合适的查询策略，并根据实际情况调整表结构和索引设计。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 面试 </tag>
            
            <tag> exists与in </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot责任链与自定义注解：优雅解耦复杂业务</title>
      <link href="/article/springbootchain.html"/>
      <url>/article/springbootchain.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>责任链模式是一种行为设计模式，它允许你将请求沿着处理者链进行传递，直到有一个处理者处理请求。在实际应用中，责任链模式常用于解耦发送者和接收者，使得请求可以按照一定的规则被多个处理者依次处理。</p><p>首先，本文会通过一个实例去讲解<code>SpringBoot</code>使用责任链模式以及自定义注解优雅的实现一个功能。我们现在有如下图一样的一个创建订单的业务流程处理，我们选择使用责任链模式去实现。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240115175330.png" alt="image.png"></p><p>我们分析下流程，发现从条件x开始，就分为了两条业务线，我们定义走业务节点A的叫规则A，走业务节点B的叫规则B。这样就形成了两条业务链路：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240115175344.png" alt="image.png"></p><p>那我就开始使用自定义注解定义规则A，以及规则B。</p><h3 id="规则注解"><a href="#规则注解" class="headerlink" title="规则注解"></a>规则注解</h3><p>定义<code>@RuleA</code>标识处理规则A的节点：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RuleA</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义<code>@RuleB</code>标识处理规则B的节点：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RuleB</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Spring框架中，<code>@Qualifier</code>注解用于指定要注入的具体bean的名称。当一个接口或抽象类有多个实现类时，通过<code>@Qualifier</code>注解可以明确告诉Spring框架要注入哪一个实现类。</p><p>自定义注解与<code>@Qualifier</code>结合使用的含义在于，你可以通过自定义注解为特定的实现类分组，并在使用<code>@Qualifier</code>时引用这个自定义注解。这样做的主要目的是提高代码的可读性和可维护性，使得注入的意图更加清晰。</p><h3 id="业务处理"><a href="#业务处理" class="headerlink" title="业务处理"></a>业务处理</h3><p>各业务节点处理的数据是同一份，处理方法是一个，只是处理的业务不同。所以我们定义一个业务处理点的接口，让各业务节点去实现业务处理接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INodeComponent</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**  * 定义所有数据处理节点的接口  * @param orderContext 数据上下文  * @param orderParam 数据处理入参参数  */</span>  <span class="token keyword">void</span> <span class="token function">handleData</span><span class="token punctuation">(</span>OrderContext orderContext<span class="token punctuation">,</span> OrderParam orderParam<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们实现业务处理接口：<br>我们定义在规则A流程中执行的节点都是用注解<code>@RuleA</code>去标记，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ANodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleData</span><span class="token punctuation">(</span>OrderContext orderContext<span class="token punctuation">,</span> OrderParam orderParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RuleA流程执行处理业务节点A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ANodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 不同类型订单，订单号不同，可在节点中个处理</span>    orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOC11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span> <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义在规则B流程中执行的节点都是用注解<code>@RuleB</code>去标记，如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleB</span> <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"RuleB流程执行处理业务节点B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> executeRuleList <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      executeRuleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BNodeComponent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    orderContext<span class="token punctuation">.</span><span class="token function">setExecuteRuleList</span><span class="token punctuation">(</span>executeRuleList<span class="token punctuation">)</span><span class="token punctuation">;</span>      orderContext<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span><span class="token string">"TOB11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ENodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@RuleB</span>  <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HNodeComponent</span> <span class="token keyword">implements</span> <span class="token class-name">INodeComponent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略具体的业务处理逻辑</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到如果规则A和规则B都需要执行的业务用了<code>@RuleA</code>和<code>@RuleB</code>去标记。同时我们使用<code>@Order</code>注解定义<code>NodeComponent</code>的注入顺序，值越小越先注入。</p><blockquote><p>基于@Order定义<code>NodeComponent</code>的注入顺序不是那么的友好，最好的方式是与规则注解耦合，即一个规则下定义注入顺序，</p></blockquote><h3 id="规则处理器"><a href="#规则处理器" class="headerlink" title="规则处理器"></a>规则处理器</h3><p>我们在定义条件X节点对应的针对处理规则A和规则B的处理器。<br>同理，因规则A以及规则B处理数据的数据是同一份，方法也是同一个，所以我们还是定义一个处理器超类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**  * 处理校验订单以及创建订单信息  * @param requestVO 订单创建入参  * @return 订单DO实体类  */</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> OrderDO <span class="token function">handleOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**  * 执行业务处理链路  * @param requestVO 订单创建入参  * @param nodeComponentList 业务处理节点  * @return  */</span>  <span class="token keyword">protected</span> OrderDO <span class="token function">executeChain</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">,</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">INodeComponent</span><span class="token operator">></span> nodeComponentList<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">final</span> OrderParam orderParam <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildOrderParam</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> OrderContext orderContext <span class="token operator">=</span> OrderContext<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>INodeComponent nodeComponent <span class="token operator">:</span> nodeComponentList<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处进行业务处理节点的调用</span>        nodeComponent<span class="token punctuation">.</span><span class="token function">handleData</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">,</span> orderParam<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"执行的链路：{}"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">.</span><span class="token function">getExecuteRuleList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildOrderDO</span><span class="token punctuation">(</span>orderContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的超类对外提供统一的业务处理接口方法，同时对业务处理节点的调用进行处理的管理，对于规则处理者来说，他只需要实现<code>handlerOrder</code>的方法。以下是规则处理器的实现代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"ruleA"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleAHandler</span> <span class="token keyword">extends</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@RuleA</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">INodeComponent</span><span class="token operator">></span> nodeComponents<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 处理校验订单以及创建订单信息      *      * @param requestVO 订单创建入参      * @return 订单DO实体类      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderDO <span class="token function">handleOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">executeChain</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">,</span> nodeComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"ruleB"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuleBHandler</span> <span class="token keyword">extends</span> <span class="token class-name">NodeHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@RuleB</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">INodeComponent</span><span class="token operator">></span> nodeComponents<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 处理校验订单以及创建订单信息      *      * @param requestVO 订单创建入参      * @return 订单DO实体类      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderDO <span class="token function">handleOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">executeChain</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">,</span> nodeComponents<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订单处理器"><a href="#订单处理器" class="headerlink" title="订单处理器"></a>订单处理器</h3><p>最后我们在创建一个订单处理器，为业务代码中提供服务接口。<br>先创建一个订单类型的枚举，枚举中定义使用哪个规则处理器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> OrderHandlerEnum <span class="token punctuation">{</span>      <span class="token function">TO_C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ruleA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">TO_B</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ruleB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer orderType<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String ruleHandler<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getRuleHandler</span><span class="token punctuation">(</span>Integer orderType<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OrderHandlerEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>orderType<span class="token punctuation">,</span> orderType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>OrderHandlerEnum<span class="token punctuation">.</span>TO_C<span class="token punctuation">)</span><span class="token punctuation">.</span>ruleHandler<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  `<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以定义一个订单处理器了，处理中决定调用那个规则处理器去执行规则。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFactory</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> NodeHandler<span class="token operator">></span> nodeHandlerMap<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 创建订单      * @param requestVO 订单参数      * @return 订单实体DO      */</span>      <span class="token keyword">public</span> OrderDO <span class="token function">createOrder</span><span class="token punctuation">(</span>OrderCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">final</span> Integer orderType <span class="token operator">=</span> requestVO<span class="token punctuation">.</span><span class="token function">getOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取node规则执行器名称  </span>        <span class="token keyword">final</span> String ruleHandler <span class="token operator">=</span> OrderHandlerEnum<span class="token punctuation">.</span><span class="token function">getRuleHandler</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 获取node规则执行器  </span>        <span class="token keyword">final</span> NodeHandler nodeHandler <span class="token operator">=</span> nodeHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ruleHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeHandler <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 异常  </span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> nodeHandler<span class="token punctuation">.</span><span class="token function">handleOrder</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们编写测试类看一下效果：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootCodeApplicationTests</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> OrderFactory orderFactory<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Test</span>      <span class="token keyword">void</span> <span class="token function">testOrderCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> OrderCreateRequestVO requestVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderCreateRequestVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setOrderNo</span><span class="token punctuation">(</span><span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setOrderType</span><span class="token punctuation">(</span>OrderHandlerEnum<span class="token punctuation">.</span>TO_C<span class="token punctuation">.</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          requestVO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> OrderDO orderDO <span class="token operator">=</span> orderFactory<span class="token punctuation">.</span><span class="token function">createOrder</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>orderDO<span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果日志如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240115184118.png" alt="image.png"></p><p>执行结果是我们想要的。</p><p>通过采用责任链模式结合Spring Boot的优化方案，我们实现了一种高度解耦的业务逻辑处理方式。其中的主要优势在于，我们成功地将各个业务节点的处理逻辑进行解耦，使得每个节点能够独立演进，降低了代码的耦合性。</p><p>其中的最大优势体现在替换或新增业务节点处理规则时的灵活性。若需替换某一节点的处理规则，只需实现新的<code>INodeComponent</code>并标记相应的规则注解，系统将自动将其纳入责任链中。这意味着我们能够以最小的改动实现业务逻辑的变更，而无需涉及其他节点。</p><p>进一步地，若新增一条处理规则，只需定义新的规则注解（如<code>@RuleC</code>），并实现相应的<code>INodeComponent</code>接口，定义规则C下各节点的处理逻辑。然后，创建对应的规则C处理器即可，系统将自动将其整合到责任链中。这种设计允许我们以一种清晰、简便的方式进行代码扩展，同时使得代码接口清晰易懂，为后续维护和升级提供了便利。这种设计理念在面对日益变化的业务规则时，具有显著的适应性和可维护性。</p><p>上述示例中我们也使用了表驱动，策略模式+工厂模式，以及枚举等方式，具体请参考我另一篇的文章：<a href="https://www.coderacademy.online/article/7fd1e424.html">代码整洁之道（一）之优化if-else的8种方案</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过使用责任链模式，我们可以更优雅地组织和扩展业务逻辑。在Spring Boot中，结合自定义注解和<code>@Qualifier</code>注解，以及构造函数注入，可以实现更清晰、可读性更强的代码。通过控制处理者的顺序，我们可以确保责任链的执行顺序符合业务需求。</p><p>责任链模式的优雅实践使得我们的代码更具可维护性，更容易应对业务的变化。在设计和实现中，要根据实际业务场景的需要进行灵活调整，以达到最佳的解耦和可扩展性。</p><p>有的小伙伴可能也会发现我们的类定义为<code>NodeComponent</code>，很熟悉，是的，此类名参考一个规则引擎开源项目<code>LiteFlow</code>，我们下一期将会使用<code>LiteFolw</code>改造这个案例，由此打开学习<code>LiteFlow</code>的篇章，需要了解的小伙伴们注意点关注哦。。。。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 责任链模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乖乖，咱不用BeanUtil.copy了，咱试试这款神级工具（超详细）</title>
      <link href="/article/mapstruct.html"/>
      <url>/article/mapstruct.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在现代Java应用程序开发中，处理对象之间的映射是一个常见而且必不可少的任务。随着项目规模的增长，手动编写繁琐的映射代码不仅耗时且容易出错，因此开发者们一直在寻找更高效的解决方案。比如基于<code>Dozer</code>封装的或者<code>Spring</code>自带的<code>BeanUtil.copyProperties</code>对应对象之间的属性拷贝。但是<code>Dozer</code>采用运行时映射的方式，通过反射在运行时动态生成映射代码。这意味着在每次映射时都需要进行反射操作，Dozer在处理复杂映射时可能需要额外的配置和自定义转换器,可能导致一定的性能开销,尤其在大型项目中可能表现不佳。另外在处理处理复杂映射（例如字段名称不一致，某些字段不需要映射）时可能需要额外的配置和自定义转换器，使用起来并不是那么的便捷。那么此时<code>MapStruct</code>变应用而生，成为简化Java Bean映射的利器。</p><p><code>MapStruct</code>是一款基于注解和编译时代码生成的工具，旨在简化Java Bean之间的映射过程。通过在<strong>编译时生成高效的映射代码</strong>，避免了运行时的性能开销，使得映射过程更加高效。<code>MapStruct</code>不仅消除了手写映射代码的痛苦，还提供了性能优势。它支持在Java Bean之间进行映射，并通过使用注解标记映射方法和类，提供了一种声明性的方式定义映射规则，简化了映射代码的编写。使得开发者能够专注于业务逻辑而不必过多关注对象之间的转换。并且它还支持自定义转换器和表达式，适用于处理各种复杂的映射场景。</p><p>下面我们就开始介绍如何使用<code>MapStruct</code>来高效的完成对象之间的映射。</p><h3 id="如何MapStruct使用"><a href="#如何MapStruct使用" class="headerlink" title="如何MapStruct使用"></a>如何MapStruct使用</h3><p>使用MapStruct进行Java Bean映射通常包括几个基本步骤，包括项目配置、注解标记、自定义转换器等。以下是详细的使用步骤：</p><h4 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在 <code>pom.xml</code> 需要正确配置<code>MapStruct</code>的依赖和注解处理器插件。例如：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">></span></span>                                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok-mapstruct-binding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然如果你同时使用了<code>lombok</code>，也需要同时配置<code>lombok</code>编译生成代码的插件。</p><h4 id="2、创建映射接口"><a href="#2、创建映射接口" class="headerlink" title="2、创建映射接口"></a>2、创建映射接口</h4><p>创建一个Java接口，并使用<code>@Mapper</code>注解标记它。例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义其他映射方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码定义了一个映射接口<code>MyMapper</code>，其中有一个映射方法<code>sourceToTarget</code>用于将<code>SourceObject</code>映射为<code>TargetObject</code>。<code>INSTANCE</code>字段用于获取映射器的实例。</p><p>此时我们编译项目之后，可以看见生成的<code>MyMapper</code>实现类中的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就省去了我们自己手写两个对象之间的字段映射，避免了大量的重复工作，大大增加了开发效率，其次也是最重要的一点就是我们可以很直观的看见两个对象之间的字段映射关系，不像<code>Dozer</code>那样每次基于反射区实现映射，我们无法看见两边的字段的映射，出现问题后不方便排查，功能上不可控。</p><blockquote><p>很重要的一点提示：我们要养成在写完一个映射方法后，要养成一定一定提前编译看一下生成的实现类方法是否正确，同时也看看是否存在字段映射关系设置错误导致编译不通过。</p></blockquote><h4 id="3、映射接口使用"><a href="#3、映射接口使用" class="headerlink" title="3、映射接口使用"></a>3、映射接口使用</h4><p>在业务代码或者其他代码方法中，我们可以直接使用<code>MyConverter.INSTANCE.sourceToTarget(source)</code>进行<code>source</code>与<code>target</code>之间的转换。</p><pre class="line-numbers language-java"><code class="language-java">TargetObject <span class="token function">handleObject</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> MyConverter<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">sourceToTarget</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>怎么样？是不是很简单。接下来让我们继续介绍<code>MapStruct</code>的详细功能，揭开它神秘的面纱。。。。。</p><h3 id="MapStruct常用注解"><a href="#MapStruct常用注解" class="headerlink" title="MapStruct常用注解"></a>MapStruct常用注解</h3><p>了解MapStruct的注解及其属性是非常重要的，因为它们定义了映射规则和行为。以下是MapStruct中常用的注解及其属性：</p><h4 id="1-Mapper"><a href="#1-Mapper" class="headerlink" title="1.@Mapper"></a>1.<code>@Mapper</code></h4><p>用于标记一个接口或抽象类，用于定义对象之间的映射规则。它有多个属性可以配置映射器的功能。以下是 <code>@Mapper</code> 注解的一些常用属性：</p><h5 id="1-1-componentModel"><a href="#1-1-componentModel" class="headerlink" title="1.1 componentModel"></a>1.1 <code>componentModel</code></h5><p>指定生成的映射器实例的组件模型,以便与应用框架集成。他有”default”（默认值）、”cdi”、”spring”等可选值（具体参考<code>MappingConstants.ComponentModel</code>）。我们着重介绍一下default以及spring：</p><ul><li><p>default：<code>MapStruct</code>的默认组件模型<br>在默认模式下，MapStruct 会生成一个无参数的构造函数的映射器实例。映射器实例的创建和管理由 <code>MapStruct</code>自动处理。实例通常通过 <code>Mappers.getMapper（Class）</code>获取。适用于简单的映射场景，无需额外的依赖注入或容器管理。</p></li><li><p>spring：使用<code>Spring Framework</code>的组件模型<br>在 Spring 模式下，MapStruct 会生成一个使用 <code>@Component</code> 注解标记的映射器实例，从而允许通过 Spring 的 IoC 容器进行管理和依赖注入。适用于 Spring 框架中的应用，可以利用 Spring 的依赖注入功能。稍后我们会介绍这种模型的使用，也是我们日常使用<code>SpringBoot</code>开发时用的比较多的模型。比如上例中，我们使用spring的模型，则生成的代码：</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpringMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MySpringMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看见实现类中自动加上了<code>@Component</code>，注入到Spring的容器中管理。</p><ul><li>cdi：使用 Contexts and Dependency Injection (CDI) 的组件模型。<br>在 CDI 模式下，MapStruct 会生成一个使用 <code>@Dependent</code> 注解标记的映射器实例，允许通过 CDI 容器进行管理和依赖注入。适用于<code>Java EE</code> 或<code>Jakarta EE</code>中使用 CDI 的应用，可以利用 CDI 容器进行管理。</li></ul><p>其余的大家感兴趣的可以去阅读源码，平时使用不多，这里就不过多介绍了。</p><h5 id="1-2-uses"><a href="#1-2-uses" class="headerlink" title="1.2 uses"></a>1.2 uses</h5><p>指定映射器使用的自定义转换器。自定义转换器是在映射过程中调用的方法，用于处理特定类型之间的自定义映射逻辑。如果我们两个对象之间有一个字段的属性值需要特殊处理之后在进行映射，即需要加上一些转换逻辑，我们就可以自定义一个转换器，然后在映射器中使用转换器中的方法。例如：SoureObject中的有一个枚举值，但是转换到TargetObject中时需要转换为具体的说明，那么此时我们就可以使用自定义转换器。</p><p>我们自定义一个转换器，并且定义一个转换方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConverter</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">convertSexDesc</span><span class="token punctuation">(</span>Integer sex<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再映射器<code>MyMapper</code>中使用<code>uses</code>指定转换器，同时使用<code>@Mapping</code>注解指定两个字段的映射规则：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后可以看见实现类中生成的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> MyConverter myConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> myConverter<span class="token punctuation">.</span><span class="token function">convertSexDesc</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然假如你的转换器或者转换方法，是你这个映射器独有，其他映射器不会使用这个转换方法，那么你可以直接在<code>MyMapper</code>中定义一个<code>default</code>的转换方法，就不必使用<code>uses</code>引入转换器：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      <span class="token keyword">default</span> String <span class="token function">convertSexDesc</span><span class="token punctuation">(</span>Integer sex<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中，直接可以调用到这个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> <span class="token function">convertSexDesc</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在Java中，接口可以包含默认方法（Default Methods）。默认方法是在接口中提供一个默认的实现，这样在接口的实现类中就不需要强制性地实现该方法了。默认方法使用关键字 <code>default</code> 进行声明。</p></blockquote><h5 id="1-3-imports"><a href="#1-3-imports" class="headerlink" title="1.3 imports"></a>1.3 imports</h5><p>导入其他类的全限定名，使其在生成的映射器接口中可见。比如我们可以导入其他的工具类去处理我们的字段，例如:<code>StringUtils</code>, <code>CollectionUtils</code>，<code>MapUtils</code>,或者一些枚举类等。同常运用<code>@Mapping</code>中的<code>expression</code>上。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>imports <span class="token operator">=</span> <span class="token punctuation">{</span>StringUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span>  expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中直接<code>import</code>了<code>imports</code>中定义的类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>code<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>SexEnum<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然我们也可以不使用<code>imports</code>去导入其他的类，那我们在使用这些类的方法时，必须写上他们的全路径:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span>  expression <span class="token operator">=</span> <span class="token string">"java(com.springboot.code.mapstruct.SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中，就不会<code>import</code>类了：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> com<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>code<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4-config"><a href="#1-4-config" class="headerlink" title="1.4 config"></a>1.4 config</h5><p><code>config</code> 属性允许你指定一个映射器配置类，该配置类用于提供全局的配置选项。通过配置类，你可以定义一些全局行为，例如处理 <code>null</code> 值的策略、映射器名称、映射器组件模型等。</p><p>我们使用<code>@MapperConfig</code>定义一个映射器配置类 <code>MyMapperConfig</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MapperConfig</span><span class="token punctuation">(</span>          nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">,</span>          componentModel <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">,</span>          uses <span class="token operator">=</span> MyConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>          unmappedTargetPolicy <span class="token operator">=</span> org<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>ReportingPolicy<span class="token punctuation">.</span>WARN  <span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapperConfig</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再<code>MyMapper</code>中指定config：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>config <span class="token operator">=</span> MyMapperConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以集中管理映射器的一些全局行为，而不需要在每个映射器中重复配置。<br>在实际应用中，你可以根据项目需求定义不同的映射器配置类，用于管理不同的全局配置选项。这有助于提高代码的组织性和可维护性。</p><h5 id="1-5-nullValueCheckStrategy"><a href="#1-5-nullValueCheckStrategy" class="headerlink" title="1.5 nullValueCheckStrategy"></a>1.5 nullValueCheckStrategy</h5><p>用于指定映射器对源对象字段的<code>null</code>值进行检查的策略。检查策略枚举类<code>NullValueCheckStrategy</code>值如下：</p><ul><li>ALWAYS：始终对源值进行<code>NULL</code>检查。<br>生成的实现类中，都是源值进行判<code>NULL</code>：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> myConverter<span class="token punctuation">.</span><span class="token function">convertSexDesc</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ON_IMPLICIT_CONVERSION：不检查<code>NULL</code>值，直接将源值赋值给目标值</li></ul><p>除了上述的属性值之外，还有一些其他的属性值，例如：</p><ul><li><code>unmappedSourcePolicy</code>： 未映射源对象字段的处理策略。</li><li><code>unmappedTargetPolicy</code>： 未映射目标对象字段的处理策略。<br>可选值：<code>ReportingPolicy.IGNORE</code>（忽略未映射字段，默认）、<code>ReportingPolicy.WARN</code>（警告）、<code>ReportingPolicy.ERROR</code>（抛出错误）。</li></ul><p>以及其他的一些属性值，如果需要用到的同学，可以看一下源码中的介绍，这里就不过多叙述了。</p><h4 id="2-MapperConfig"><a href="#2-MapperConfig" class="headerlink" title="2.@MapperConfig"></a>2.<code>@MapperConfig</code></h4><p>注解用于定义映射器配置类，它允许在一个单独的配置类中集中管理映射器的全局配置选项。可以将一些全局的配置选项集中在一个配置类中，使得映射器的配置更为清晰和可维护。在实际应用中，可以根据需要定义不同的映射器配置类，以便在不同的场景中使用。配置类可以在映射器中通过<code>@Mapper</code>的<code>config</code>属性引入。它大部分的属性值跟<code>@Mapper</code>一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@MapperConfig</span><span class="token punctuation">(</span>          nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ON_IMPLICIT_CONVERSION<span class="token punctuation">,</span>          componentModel <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">,</span>          uses <span class="token operator">=</span> MyConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>          unmappedTargetPolicy <span class="token operator">=</span> org<span class="token punctuation">.</span>mapstruct<span class="token punctuation">.</span>ReportingPolicy<span class="token punctuation">.</span>WARN  <span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapperConfig</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再<code>MyMapper</code>中指定config：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>config <span class="token operator">=</span> MyMapperConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Mapping"><a href="#3-Mapping" class="headerlink" title="3.@Mapping"></a>3.<code>@Mapping</code></h4><p>用于自定义映射器方法中的映射规则。它允许你指定源对象和目标对象之间字段的映射关系。</p><h5 id="3-1-source-和-target"><a href="#3-1-source-和-target" class="headerlink" title="3.1 source 和 target:"></a>3.1 <code>source</code> 和 <code>target</code>:</h5><ul><li><strong><code>source</code> 含义：</strong> 源对象字段的名称或表达式。</li><li><strong><code>target</code> 含义：</strong> 目标对象字段的名称。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sourceField"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sourceField"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者使用表达式的方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>expression <span class="token operator">=</span> <span class="token string">"java(source.getSourceField())"</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">"targetField"</span><span class="token punctuation">)</span>TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-2-qualifiedByName-和-qualifiedBy"><a href="#3-2-qualifiedByName-和-qualifiedBy" class="headerlink" title="3.2 qualifiedByName 和 qualifiedBy:"></a>3.2 <code>qualifiedByName</code> 和 <code>qualifiedBy</code>:</h5><ul><li><code>qualifiedByName</code>： 指定使用自定义转换器方法进行映射。</li></ul><p>定义一个转换器<code>MyNameConverter</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNameConverter</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertUserName"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> String <span class="token function">convertUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自定义转换器的方法:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span> uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyNameConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      MyMapper INSTANCE <span class="token operator">=</span> Mappers<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>MyMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"convertUserName"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>qualifiedBy</code>： 指定使用基于<code>@qualifier</code>注解的转换方法</li></ul><p>先定义一个基于<code>@qualifier</code>(mapstruct包下)的作用于转换器类上的注解<code>@StrConverter</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">StrConverter</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再定义一个基于<code>@qualifier</code>(mapstruct包下)的作用于转换器方法上的注解<code>@NameUpper</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Qualifier</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>CLASS<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NameUpper</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后定义一个自定义转换器<code>MyNameConverter</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@StrConverter</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyNameConverter</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NameUpper</span>      <span class="token keyword">public</span> String <span class="token function">convertUserName</span><span class="token punctuation">(</span>String userName<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">:</span><span class="token operator">:</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在<code>@Mappinbg</code>中通过使用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyNameConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span> <span class="token punctuation">,</span>nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> qualifiedBy <span class="token operator">=</span> NameUpper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>     TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终两种方式编译后的结果是一致的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> MyNameConverter myNameConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyNameConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> myNameConverter<span class="token punctuation">.</span><span class="token function">convertUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>以上基于qualifiedBy的使用示例参考自@Qualifier源码文档。</p></blockquote><h5 id="3-3-ignore"><a href="#3-3-ignore" class="headerlink" title="3.3 ignore"></a>3.3 <code>ignore</code></h5><p>是否忽略某字段的映射。为true时忽略。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后实现类中不会对这个字段进行赋值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-defaultExpression"><a href="#3-4-defaultExpression" class="headerlink" title="3.4 defaultExpression"></a>3.4 <code>defaultExpression</code></h5><p>指定默认表达式，当源对象字段为 <code>null</code> 时使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> defaultExpression <span class="token operator">=</span> <span class="token string">"java(SexEnum.MAN.desc)"</span><span class="token punctuation">)</span>TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后实现类：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span>MAN<span class="token punctuation">.</span>desc <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>defaultExpression不能与expression，defaultValue，constant一起使用。</p></blockquote><h5 id="3-5-defaultValue"><a href="#3-5-defaultValue" class="headerlink" title="3.5 defaultValue"></a>3.5 <code>defaultValue</code></h5><p>指定默认值，当源对象字段为 <code>null</code> 时使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"男人"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> <span class="token string">"男人"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>defaultValue不能与expression，defaultExpression，constant一起使用。</p></blockquote><h5 id="3-6-constant"><a href="#3-6-constant" class="headerlink" title="3.6 constant"></a>3.6 constant</h5><p>将目标对象的字段设置为该常量。不从源对象中映射值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java">targetObject<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span> <span class="token string">"API"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>constant不能与defaultExpression，expression，defaultValue，constant, source一起使用。</p></blockquote><h5 id="3-7-expression"><a href="#3-7-expression" class="headerlink" title="3.7 expression"></a>3.7 <code>expression</code></h5><p>通过表达式完成映射。要基于该字符串设置指定的目标属性。目前，Java 是唯一受支持的“表达式语言”，表达式必须使用以下格式以 Java 表达式的形式给出：<code>java（&lt;EXPRESSION&gt;）</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java">targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>expression不能与source, defaultValue, defaultExpression, qualifiedBy, qualifiedByName 以及constant 一起使用</p></blockquote><h5 id="3-8-dateFormat"><a href="#3-8-dateFormat" class="headerlink" title="3.8 dateFormat"></a>3.8 dateFormat</h5><p>指定日期格式化模式，仅适用于日期类型的字段。可以实现<code>String</code>类型时间和<code>Date</code>相互转换，基于<code>SimpleDateFormat</code>实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String createTime<span class="token punctuation">;</span>      <span class="token keyword">private</span> Date loginDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>      <span class="token keyword">private</span> String loginDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getLoginDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setLoginDate</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span> <span class="token string">"yyyy-MM-dd"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getLoginDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span> ParseException e <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-9-numberFormat"><a href="#3-9-numberFormat" class="headerlink" title="3.9 numberFormat"></a>3.9 numberFormat</h5><p>指定数值格式化格式，仅适用<code>Number</code>类型的字段。可以实现<code>String</code>类型数值与<code>Number</code>相互转换，基于<code>DecimalFormat</code>实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amountDouble<span class="token punctuation">;</span>      <span class="token keyword">private</span> String amountStr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SourceObject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String amountStr<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">double</span> amountDouble<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getAmountStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setAmountDouble</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span> <span class="token string">"#,###.00"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getAmountStr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span> ParseException e <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  targetObject<span class="token punctuation">.</span><span class="token function">setAmountStr</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span> <span class="token string">"#,###.00"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getAmountDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有其他的属性，这里就不过多叙述了，有兴趣或者需要的可以阅读源码。</p><h4 id="4-Mappings"><a href="#4-Mappings" class="headerlink" title="4.@Mappings"></a>4.<code>@Mappings</code></h4><p>包含多个<code>@Mapping</code>注解，将多个字段映射规则组合在一起，使代码更清晰。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"loginDate"</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"amountStr"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"amountDouble"</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">"#,###.00"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Named"><a href="#5-Named" class="headerlink" title="5.@Named:"></a>5.<code>@Named</code>:</h4><p>用于标记自定义转换器或者映射器中的某个方法的名称。一般配合<code>qualifiedByName</code> 使用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 标记映射方法名称*/</span><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*** 标记转换器方法名称*/</span><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"convertSexDesc"</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> String <span class="token function">convertSexDesc</span><span class="token punctuation">(</span>Integer sex<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在定义自己的转换器方法时，最好把方法都加上@Named的注解标记你的方法名称，否则如果后续代码中再写一个同类型的不同方法名的转换方法时编译报错：不明确的映射方法。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240114194040.png" alt="image.png"></p><h4 id="6-IterableMapping"><a href="#6-IterableMapping" class="headerlink" title="6. @IterableMapping"></a>6. <code>@IterableMapping</code></h4><pre><code>用于集合映射，定义集合元素的映射规则。其中一些属性例如:`qualifiedByName`，`qualifiedBy`以及`dateFormat`，`numberFormat`参考`@Mapping`中的用法。</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@IterableMapping</span><span class="token punctuation">(</span>qualifiedByName <span class="token operator">=</span> <span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>  List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> <span class="token function">sourceToTargetList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>SourceObject<span class="token operator">></span> sourceObjectList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后的实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> <span class="token function">sourceToTargetList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>SourceObject<span class="token operator">></span> sourceObjectList<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> sourceObjectList <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>TargetObject<span class="token operator">></span><span class="token punctuation">(</span> sourceObjectList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> SourceObject sourceObject <span class="token operator">:</span> sourceObjectList <span class="token punctuation">)</span> <span class="token punctuation">{</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> <span class="token function">sourceToTarget</span><span class="token punctuation">(</span> sourceObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可看出它内部循环调用<code>sourceToTarget</code>的方法完成list的转换。</p><blockquote><p>需要特别注意，在写集合类型的转换时一定要配合<code>IterableMapping</code>的<code>qualifiedByName</code>和<code>Named</code>使用，如果不使用<code>@IterableMapping</code>中显示声明循环使用的方法时，它的内部会重新生成一个映射方法去使用。这样会在开发过程中出现一些莫名其妙的忽然就不好使的错误。。。。。</p></blockquote><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget2"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    @IterableMapping(qualifiedByName = "sourceToTarget")  </span>    List<span class="token operator">&lt;</span>TargetObject<span class="token operator">></span> <span class="token function">sourceToTargetList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>SourceObject<span class="token operator">></span> sourceObjectList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后，实现类中代码可以看出并没有使用以上两个方法，而是重新生成的：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240114194643.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240114194658.png" alt="image.png"></p><h4 id="7-MappingTarget"><a href="#7-MappingTarget" class="headerlink" title="7.@MappingTarget"></a>7.<code>@MappingTarget</code></h4><p>标记在映射方法的目标对象参数上，允许在映射方法中修改目标对象的属性。当目标对象已经创建了，此时可以将目标对象也当做参数传递到映射器方法中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget3"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">sourceToTarget3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译后实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sourceToTarget3</span><span class="token punctuation">(</span>TargetObject targetObject<span class="token punctuation">,</span> SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span> <span class="token string">"API"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-InheritConfiguration"><a href="#8-InheritConfiguration" class="headerlink" title="8.@InheritConfiguration"></a>8.<code>@InheritConfiguration</code></h4><p>它用于在映射接口中引用另一个映射方法的配置。主要用于减少代码重复，提高映射方法的可维护性。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@InheritConfiguration</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget2"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@InheritConfiguration</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      <span class="token keyword">void</span> <span class="token function">sourceToTarget4</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sourceToTarget2</code>和<code>sourceToTarget4</code>就可以直接继承使用<code>sourceToTarget</code>的规则了。避免了再次定义一份相同的规则。</p><h4 id="9-BeanMapping"><a href="#9-BeanMapping" class="headerlink" title="9. @BeanMapping"></a>9. <code>@BeanMapping</code></h4><p>用于配置映射方法级别的注解，它允许在单个映射方法上指定一些特定的配置。例如忽略某些属性、配置映射条件等(开始我们在<code>@Mapper</code>中定义)。它提供了一种在方法级别自定义映射行为的方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@BeanMapping</span><span class="token punctuation">(</span>nullValueCheckStrategy <span class="token operator">=</span> NullValueCheckStrategy<span class="token punctuation">.</span>ALWAYS<span class="token punctuation">)</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget2"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译后实现的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget2</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>校验了源对象值的null</p><h4 id="10-ValueMapping"><a href="#10-ValueMapping" class="headerlink" title="10.@ValueMapping"></a>10.<code>@ValueMapping</code></h4><p>用于自定义枚举类型或其他可映射类型的值映射。该注解允许在枚举类型映射时，定义自定义的值映射规则，使得在映射中可以转换不同的枚举值。他只有两个属性值：</p><ul><li><code>source</code>：只能取值：枚举值名称，<code>MappingConstants.NULL</code>，<code>MappingConstants.ANY_REMAINING</code>，<code>MappingConstants.ANY_UNMAPPED</code></li><li><code>target</code>: 只能取值：枚举值名称<code>MappingConstants.NULL</code>，<code>MappingConstants.ANY_UNMAPPED</code></li></ul><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">enum</span> OrderType <span class="token punctuation">{</span> RETAIL<span class="token punctuation">,</span> B2B<span class="token punctuation">,</span> C2C<span class="token punctuation">,</span> EXTRA<span class="token punctuation">,</span> STANDARD<span class="token punctuation">,</span> NORMAL <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> ExternalOrderType <span class="token punctuation">{</span> RETAIL<span class="token punctuation">,</span> B2B<span class="token punctuation">,</span> SPECIAL<span class="token punctuation">,</span> DEFAULT <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ValueMappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"SPECIAL"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"EXTRA"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"DEFAULT"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"STANDARD"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"DEFAULT"</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"NORMAL"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token annotation punctuation">@ValueMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> MappingConstants<span class="token punctuation">.</span>THROW_EXCEPTION<span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">"C2C"</span> <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  ExternalOrderTypeEnum <span class="token function">mapOrderType</span><span class="token punctuation">(</span>OrderTypeEnum orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> ExternalOrderTypeEnum <span class="token function">mapOrderType</span><span class="token punctuation">(</span>OrderTypeEnum orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> orderType <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      ExternalOrderTypeEnum externalOrderTypeEnum<span class="token punctuation">;</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span> orderType <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> EXTRA<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>SPECIAL<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> STANDARD<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> NORMAL<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> C2C<span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span> <span class="token string">"Unexpected enum constant: "</span> <span class="token operator">+</span> orderType <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> RETAIL<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>RETAIL<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> B2B<span class="token operator">:</span> externalOrderTypeEnum <span class="token operator">=</span> ExternalOrderTypeEnum<span class="token punctuation">.</span>B2B<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span> <span class="token string">"Unexpected enum constant: "</span> <span class="token operator">+</span> orderType <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> externalOrderTypeEnum<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-Context"><a href="#11-Context" class="headerlink" title="11.@Context"></a>11.<code>@Context</code></h4><p><code>@Context</code>注解在MapStruct框架中用于标记映射方法的参数，使得这些参数作为映射上下文来处理。被标注为<code>@Context</code>的参数会在适用的情况下传递给其他映射方法、<code>@ObjectFactory</code>方法或者<code>@BeforeMapping</code>和<code>@AfterMapping</code>方法，从而可以在自定义代码中使用它们。</p><p>具体作用如下：</p><ul><li><p><strong>传递上下文信息</strong>： 当MapStruct执行映射操作时，它会将带有<code>@Context</code>注解的参数值向下传递到关联的方法中。这意味着你可以在不同的映射阶段（包括属性映射、对象工厂方法调用以及映射前后的处理方法）共享和利用这些上下文数据。</p></li><li><p><strong>调用相关方法</strong>： MapStruct还会检查带有<code>@Context</code>注解的参数类型上是否声明了<code>@BeforeMapping</code>或<code>@AfterMapping</code>方法，并在适用时对提供的上下文参数值调用这些方法。</p></li><li><p><strong>空值处理</strong>： 注意，MapStruct不会在调用与<code>@Context</code>注解参数相关的映射前后方法或对象工厂方法之前进行空值检查。调用者需要确保在这种情况下不传递null值。</p></li><li><p><strong>生成代码的要求</strong>： 为了使生成的代码能够正确调用带有<code>@Context</code>参数的方法，正在生成的映射方法声明必须至少包含那些相同类型（或可赋值类型）的<code>@Context</code>参数。MapStruct不会为缺失的<code>@Context</code>参数创建新实例，也不会以null代替它们传递。</p></li></ul><p>因此，<code>@Context</code>注解提供了一种机制，允许开发者在映射过程中携带并传播额外的状态或配置信息，增强了映射逻辑的灵活性和定制能力。</p><p>一个简单的用法示例：</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>      <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的实现类代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-BeforeMapping"><a href="#12-BeforeMapping" class="headerlink" title="12.@BeforeMapping"></a>12.<code>@BeforeMapping</code></h4><p>这个注解可以标注在一个没有返回值的方法上，该方法会在执行实际映射操作前被调用。在此方法中可以通过<code>@Context</code>注入上下文对象，并根据需要对源对象或上下文进行修改或预处理。</p><pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>      <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>          DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@BeforeMapping</span>      <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject context<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 在映射之前初始化或更新上下文中的信息  </span>        context<span class="token punctuation">.</span><span class="token function">setDateTimeFormatter</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类代码中，会发现在<code>sourceToTarget5</code>的方法第一行会调用<code>beforeFormatDate</code>这个方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第一行调用@BeforeMapping的方法</span>    <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-AfterMapping"><a href="#13-AfterMapping" class="headerlink" title="13.@AfterMapping"></a>13.<code>@AfterMapping</code></h4><p>这个注解同样可以标注在一个没有返回值的方法上，但它会在完成所有属性映射后被调用。你可以在这里执行一些额外的转换逻辑或者基于映射结果和上下文进行后期处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@BeforeMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在映射之前初始化或更新上下文中的信息  </span>    context<span class="token punctuation">.</span><span class="token function">setDateTimeFormatter</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@AfterMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterHandler</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>contextObject<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后，可以发现在<code>sourceTarget5</code>的实现方法中的最后会调用<code>afterHandler</code>方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterHandler</span><span class="token punctuation">(</span> source<span class="token punctuation">,</span> targetObject<span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@BeforeMapping</code> 和 <code>@AfterMapping</code> 注解的方法默认会作用于在同一接口内使用了相同参数类型的映射方法上。如果想要在一个地方定义一个通用的前置或后置处理逻辑，并让它应用于多个映射方法，可以编写一个不带具体映射源和目标参数的方法，并在需要应用这些逻辑的所有映射方法上保持相同的<code>@Context</code>参数类型。</p><h4 id="14-ObjectFactory"><a href="#14-ObjectFactory" class="headerlink" title="14.@ObjectFactory"></a>14.<code>@ObjectFactory</code></h4><p>此注解用于声明一个工厂方法，该方法在目标对象实例化阶段被调用。这里也可以通过<code>@Context</code>获取到上下文信息，以便在创建目标对象时就考虑到某些上下文依赖。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget5"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> qualifiedByName <span class="token operator">=</span> <span class="token string">"formatDate"</span><span class="token punctuation">)</span>  TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"formatDate"</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> String <span class="token function">formatDate</span><span class="token punctuation">(</span>LocalDateTime createTime<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> contextObject<span class="token punctuation">.</span><span class="token function">getDateTimeFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>createTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@BeforeMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject context<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 在映射之前初始化或更新上下文中的信息  </span>    context<span class="token punctuation">.</span><span class="token function">setDateTimeFormatter</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@AfterMapping</span>  <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterHandler</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> TargetObject targetObject<span class="token punctuation">,</span> <span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      targetObject<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>contextObject<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@ObjectFactory</span>  <span class="token keyword">default</span> TargetObject <span class="token function">createTargetObject</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Context</span> ContextObject contextObject<span class="token punctuation">)</span><span class="token punctuation">{</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 根据上下文初始化dto的一些属性  </span>    targetObject<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>contextObject<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后生成的实现类中，会看见<code>TargetObject</code>会通过<code>createTargetObject</code>方法创建：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget5</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">,</span> ContextObject contextObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">beforeFormatDate</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      TargetObject targetObject <span class="token operator">=</span> <span class="token function">createTargetObject</span><span class="token punctuation">(</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> <span class="token function">formatDate</span><span class="token punctuation">(</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> <span class="token string">"createTime"</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterHandler</span><span class="token punctuation">(</span> source<span class="token punctuation">,</span> targetObject<span class="token punctuation">,</span> contextObject <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@ObjectFactory</code> 标记的方法则更具有针对性，它通常用于为特定的目标对象创建实例。如果你定义了一个<code>@ObjectFactory</code>方法且没有指定具体映射方法，则这个工厂方法会作为默认的实例化方式，在所有未明确提供实例化方法的映射目标对象时被调用。</p><h3 id="SpringBoot集成"><a href="#SpringBoot集成" class="headerlink" title="SpringBoot集成"></a>SpringBoot集成</h3><p>上面我们说到了<code>@Mapper</code>注解以及他的属性<code>componentModel</code>，将该值设置为<code>Spring</code>也就是<code>MappingConstants.ComponentModel.SPRING</code>值时，这个映射器生成的实现类就可以被<code>Spring</code>容器管理，这样就可以在使用时就可以注入到其他组件中了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>uses <span class="token operator">=</span> <span class="token punctuation">{</span>MyNameConverter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> imports <span class="token operator">=</span> <span class="token punctuation">{</span>SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> componentModel <span class="token operator">=</span> MappingConstants<span class="token punctuation">.</span>ComponentModel<span class="token punctuation">.</span>SPRING<span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Mappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"source"</span><span class="token punctuation">,</span> constant <span class="token operator">=</span> <span class="token string">"API"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">"java(SexEnum.descOfCode(source.getSex()))"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Named</span><span class="token punctuation">(</span><span class="token string">"sourceToTarget"</span><span class="token punctuation">)</span>      TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的实现类自动加上<code>@Component</code>注解，并将其注册为Spring Bean，：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> TargetObject <span class="token function">sourceToTarget</span><span class="token punctuation">(</span>SourceObject source<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source <span class="token operator">==</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          TargetObject targetObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TargetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span> <span class="token punctuation">{</span>              targetObject<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span> DateTimeFormatter<span class="token punctuation">.</span>ISO_LOCAL_DATE_TIME<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span> source<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span> <span class="token string">"API"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          targetObject<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span> SexEnum<span class="token punctuation">.</span><span class="token function">descOfCode</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> targetObject<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以在其他组件中注入<code>MyMapper</code>：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringbootCodeApplicationTests</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MyMapper mapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>      <span class="token keyword">void</span> <span class="token function">testMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          TargetObject targetObject <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">sourceToTarget</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SourceObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>targetObject<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMapper</span><span class="token punctuation">(</span>MyMapper mapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mapper <span class="token operator">=</span> mapper<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MapStruct是一个利用注解和编译时代码生成技术的Java Bean映射工具，通过在接口上定义映射规则并自动创建实现类，极大地简化了对象转换过程。相比于手动编写映射代码及运行时反射工具如Dozer，MapStruct提供了更高的性能、更好的可读性和易于维护性。它支持灵活的字段映射配置、自定义转换逻辑，并可通过组件模型适应不同框架，是提升开发效率与降低维护成本的理想对象映射解决方案。</p><p>写在最后：可能大家觉得要防御性编程，但是咱可以把编译后实现类的代码CV到你的代码里面就可以了，这样免去了自己手写<code>get</code>，<code>set</code>方法映射，这样不出错，还可以节省时间摸鱼。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
            <tag> MapStruct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几款IDEA插件，助你玩转Mybatis开发</title>
      <link href="/article/ideamybatisplugins.html"/>
      <url>/article/ideamybatisplugins.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>欢迎老铁来到我的博客，扫码下图关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><blockquote><p>写在前面，假如有老铁乘坐传送门过来的，建议扫码关注公众号之后，后台回复[<mark style="background: #FF5582A6;">插件</mark>]即可获取，安装后可享受一下<code>MyBatis Log</code>带来的便捷，真香啊。。。</p></blockquote><p>在软件开发的征程中，MyBatis 框架一直是 Java 开发者中的首选，其简洁的 SQL 映射和强大的灵活性使其成为持久层框架的瑰宝。然而，在我们开发过程中，很多人都曾面对过一个相对繁琐的问题：如何高效而准确地将数据库表映射到实体类和相应的 Mapper 文件中？如何将单测日志中的<code>SQL LOG</code> 快速高效的解析出来？</p><p>当然在将数据库表映射到实体类和相应的 Mapper 文件中我们可以采用代码生成器，比如<code>MyBatis Generator</code>或者结合<code>Spring Freemarker</code>手写代码模板生成， 很多年前用过，但是都是基于配置文件，还要改配置，一点都不方便，下面我们介绍几款插件解决这个问题，当然有免费的插件。。。。</p><h3 id="MyBatisCodeHelperPro"><a href="#MyBatisCodeHelperPro" class="headerlink" title="MyBatisCodeHelperPro"></a>MyBatisCodeHelperPro</h3><p>最好的Mybatis代码提示,代码检测插件,快速生成代码,测试sql,日志转sql等.功能超级全，简直是开发<code>Mybatis</code>用的神级插件。这是官方对这个插件的介绍：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112151551.png" alt="image.png"></p><p>根据介绍，真的可以满足我们日常开发<code>Mybatis</code>所需要的所有功能，除了不会帮你自动写代码以外。。。。</p><p><code>IDEA</code>使用内置的数据库客户端，连接上数据库，选中需要生成代码的表，可以将实体，<code>mapper</code>，<code>mapper xml</code>生成到我们指定的目录里面，我们还可以选择生成的mapper方法，例如：插入，部分字段插入，更新，删除以及查询。最最最让人喜欢的就是在xml中写<code>SQL</code>时的智能提示，这可以快速方便的帮助我们写动态SQL，并且还不会因为字段手写可能会导致的错误。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112145032.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112150712.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112150740.png" alt="image.png"></p><p><strong>但是，他是收费的，并且只能在IDEA企业版中安装</strong></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112152112.png" alt="image.png"></p><p>虽然未激活也可以使用，但是功能比激活状态下的要少很多。</p><h3 id="MybatisX"><a href="#MybatisX" class="headerlink" title="MybatisX"></a>MybatisX</h3><p><strong>首先，他是免费的</strong>。他能做到将表映射到对应目录下的实体，mapper，mapperXml，以及可以从mapper的具体方法链接到xml中的具体sql。但是并没有<code>MybatisCodeHelpPro</code>那么多功能，特别是智能提示，只能做到对数据库字段的提示，没法做到<code>#{}</code>中的提示。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112183152.png" alt="image.png"><br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112183626.png" alt="image.png"></p><p>如果想白嫖的，<strong>建议安装这个插件，比那些代码生成模板好用。</strong></p><h3 id="Mybatis-Log"><a href="#Mybatis-Log" class="headerlink" title="Mybatis Log"></a><code>Mybatis Log</code></h3><p>可以把IDEA控制中打印的SQL执行的日志，直接转换为可以在数据库中直接执行的SQL，不需要我们自己去替换SQL的参数。直接选中日志中的log右键转换即可。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112190935.png" alt="image.png"></p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112164411.png" alt="image.png"><br>直接可以运行的sql，在我们排查数据问题时真的可以节省很多时间，还不用出错。</p><p>还有一个功能：假如你从其他地方拷贝过来的SQL LOG,放在IDEA里面的某个文件中也可以右键使用<code>Mybatis Log</code>转换。</p><p><strong>但是，正版的它也是收费的</strong></p><p><strong>但是，我有破解版。。。。</strong></p><p>传送门：扫码关注公众号后，后台回复[<mark style="background: #FF5582A6;">插件</mark>]即可获取，安装后可享受一下<code>Mybatis Log</code>带来的便捷，真香啊。。。</p><p>当然还有一个<code>Mybatis Log Free</code> ，但是他不能在控制台中选中某一条SQL LOG 进行转化，他只能将控制台中所有的<code>SQL LOG</code>转换为<code>SQL</code>。并且它只能在控制台中转换LOG，IDEA中文件的LOG无法转换。</p>]]></content>
      
      
      <categories>
          
          <category> IDEA插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> IDEA插件 </tag>
            
            <tag> MyBatis插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java基础（一）Java中的四种内部类</title>
      <link href="/article/javainnerclass.html"/>
      <url>/article/javainnerclass.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>当谈到Java基础内部类时，我们通常指的是在一个类的内部定义的另一个类。内部类在Java中有四种类型：成员内部类、静态内部类、局部内部类和匿名内部类。本文将重点介绍成员内部类和静态内部类的用法和示例。</p><h3 id="一、成员内部类"><a href="#一、成员内部类" class="headerlink" title="一、成员内部类"></a>一、成员内部类</h3><p>使用内部类最吸引人的原因是：每个内部类都能独立地继承一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。接口只是解决了部分问题，而内部类使得多重继承的解决方案变得更加完整。而内部类带来的许多好处：</p><ul><li><p>1、内部类可以用多个实例，每个实例都有自己的状态信息，并且与其他外围对象的信息相互独立。</p></li><li><p>2、在单个外围类中，可以让多个内部类以不同的方式实现同一个接口，或者继承同一个类。</p></li><li><p>3、创建内部类对象的时刻并不依赖于外围类对象的创建。</p></li><li><p>4、内部类并没有令人迷惑的“is-a”关系，他就是一个独立的实体。</p></li><li><p>5、内部类提供了更好的封装，除了该外围类，其他类都不能访问。</p></li></ul><p>因为内部类可以随意使用外部类的成员变量（包括私有）而不用生成外部类的对象，这也是内部类的唯一优点，如同心脏可以直接访问身体的血液，而不是通过医生来抽血。内部类在没有同名成员变量和局部变量的情况下，内部类会直接访问外部类的成员变量，而无需指定Out.this.属性名，否则，内部类中的局部变量会覆盖外部类的成员变量。而访问内部类本身的成员变量可用this.属性名，访问外部类的成员变量需要使用Out.this.属性名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 成员内部类   *   *1.成员内部类中的方法可以直接使用外部类的实例变量和实例方法。   *2.在成员内部类中可以直接用内部类创建对象   *3.成员内部类没有用static修饰且定义在在外部类类体中。   * @author 码农Academy   *   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberInnerClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是外部类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>                  <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是内部类的成员变量"</span><span class="token punctuation">;</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类的成员变量："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token function">outerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问外部类方法  </span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部类再次访问外部类的成员变量："</span><span class="token operator">+</span>MemberInnerClass<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> InnerClass <span class="token function">makeInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//在外部类方法中创建内部类实例  </span>                InnerClass innerClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> innerClass<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  MemberInnerClass outerClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MemberInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//成员内部类需要通过外部类的实例才能创建对象，与实例变量需要通过对象来访问相似  </span>                <span class="token comment" spellcheck="true">//MemberInnerClass.InnerClass innerClass  =outerClass.makeInnerClass();  </span>                <span class="token comment" spellcheck="true">//1.开头的MemberInnerClass是为了标明需要生成的内部类对象在哪个外部类当中  </span> <span class="token comment" spellcheck="true">//2.必须先有外部类的对象才能生成内部类的对象，因为内部类的作用就是为了访问外部类中的成员变量  </span>                MemberInnerClass<span class="token punctuation">.</span>InnerClass innerClass <span class="token operator">=</span> outerClass<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  innerClass<span class="token punctuation">.</span><span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、静态内部类"><a href="#二、静态内部类" class="headerlink" title="二、静态内部类"></a>二、静态内部类</h3><p>如果用static 将内部内静态化，那么内部类就只能访问外部类的静态成员变量，具有局限性，对于实例方法或者非静态变量，只有通过对象引用才能访问，static内部类中不能使用this关键字来访问外部类中的实例成员 。其次，因为内部类被静态化，因此Out.In可以当做一个整体看，可以直接new 出内部类的对象（通过类名访问static，生不生成外部类对象都没关系）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 静态嵌套类   * 与类的其他成员相似，可以用static修饰内部类，这样的类称为静态内部类。   * 静态内部类与静态内部方法相似，只能访问外部类的static成员，不能直接访问外部类的实例变量，   * 对于实例方法或者非静态变量，只有通过对象引用才能访问。   * 由于static内部类不具有任何对外部类实例的引用，因此static内部类中不能使用this关键字来访问外部类中的实例成员，   * 但是可以访问外部类中的static成员。这与一般类的static方法想通   * @author 码农Academy   *   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticNestedClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的静态变量"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String outStr<span class="token operator">=</span><span class="token string">"我是外部类的非静态变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>                  <span class="token keyword">private</span>  String str<span class="token operator">=</span><span class="token string">"我说是静态内部类的变量"</span><span class="token punctuation">;</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问外部类："</span><span class="token operator">+</span>StaticNestedClass<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 对于实例方法或者非静态变量，只有通过对象引用才能访问。  </span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问外部类非静态成员变量："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">StaticNestedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>outStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问内部类："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//因为内部类被静态化，因此StaticNestedClass.InnerClass可以当做一个整体看，可以直接new 出内部类的对象（通过类名访问static，生不生成外部类对象都没关系）  </span>                StaticNestedClass<span class="token punctuation">.</span>InnerClass innerClass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StaticNestedClass<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  innerClass<span class="token punctuation">.</span><span class="token function">innerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、局部内部类"><a href="#三、局部内部类" class="headerlink" title="三、局部内部类"></a>三、局部内部类</h3><p>我们将内部类移到了外部类的方法中，然后在外部类的方法中再生成一个内部类对象去调用内部类方法。方法中的内部类可以访问外部类成员。对于方法的参数和局部变量，必须有final修饰才可以访问(JDK 1.8以后不需要！)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 方法内部类（局部内部类）   * 在方法体或语句块（包括方法、构造方法、局部块或静态初始化块）内部定义的类成为局部内部类。   * 局部内部类不能加任何访问修饰符，因为它只对局部块有效。   * 1.局部内部类只在方法体中有效，就想定义的局部变量一样，在定义的方法体外不能创建局部内部类的对象   * 2.在方法内部定义类时，应注意以下问题：   *  (1).方法定义局部内部类同方法定义局部变量一样，不能使用private、protected、public等访问修饰说明符修饰，也不能使用static修饰，但可以使用final和   abstract修饰   *  (2).方法中的内部类可以访问外部类成员。对于方法的参数和局部变量，必须有final修饰才可以访问(JDK 1.8以后不需要！)。   *  (3).static方法中定义的内部类可以访问外部类定义的static成员   * @author 码农Academy   *   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodInnerClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String outerStr<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">outerMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是外部类地方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">method</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>              <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是方法内部类的成员变量"</span><span class="token punctuation">;</span>              <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问方法参数："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问内部类的成员变量："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问外部类的成员变量："</span><span class="token operator">+</span>outerStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是方法内部类地方法,访问外部类与内部类同名的成员变量："</span><span class="token operator">+</span>MethodInnerClass<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>           <span class="token keyword">new</span> <span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          MethodInnerClass out<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MethodInnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          out<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"成员内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、匿名内部类"><a href="#四、匿名内部类" class="headerlink" title="四、匿名内部类"></a>四、匿名内部类</h3><p>定义类的最终目的是创建一个类的实例，但是如果某个类的实例只是用一次，则可以将类的定义与类的创建，放到与一起完成，或者说在定义类的同时就创建一个类。以这种方法定义的没有名字的类成为匿名内部类。  </p><p>匿名内部类因为没有名字，所以不可以继承其他类，但若某个内部类作为一个接口，匿名内部类可以实现接口。我们在使用Lambda表达式时简化匿名内部类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 匿名内部类   * @author 码农Academy   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnonymousInnerClass</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> String str<span class="token operator">=</span><span class="token string">"我是外部类的成员变量"</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> Inner <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">,</span> String city<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">private</span> String nameStr <span class="token operator">=</span> name<span class="token punctuation">;</span>             <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span> nameStr<span class="token punctuation">;</span>              <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java四大内部类 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程的利器：Pair和Triple无缝解决多值返回问题，助力编写高效代码</title>
      <link href="/article/javapairtriple.html"/>
      <url>/article/javapairtriple.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>在实际编码中，经常会遇到一个方法需要返回多个值的情况，你编写一个方法，需要同时返回某个操作的结果和一些相关的附加信息。使用传统的方式，你可能需要创建一个包含这些信息的自定义类或者使用集合（如 <code>Map</code>）来存储这些值。然而，这往往使得代码变得臃肿，而且对于调用方来说，理解和提取这些值可能会显得有些繁琐。</p><p>这时使用<code>org.apache.commons.lang3.tuple</code>下的<code>Pair</code> 或 <code>Triple</code> 及其子类是一种非常便捷的解决方案。这些类提供了一种清晰、简单的方式来组织和传递多个相关联的值，使得代码更加直观和易于理解。</p><p>使用 <code>Pair</code> 或 <code>Triple</code> 就能轻松解决这个问题。你可以在一个方法中返回一个 <code>Pair</code> 或 <code>Triple</code> 对象，其中包含你想要传递的多个值。这样，你可以清晰地表示这些值之间的关系，而且调用方可以轻松地访问和使用这些值，而无需繁琐的解包过程。</p><p>在接下来的部分，我们将深入研究如何在这类场景中使用 <code>Pair</code> 和 <code>Triple</code> 及其子类，以及它们如何简化我们在编码中常遇到的多值返回问题。</p><p>引入依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Pair-类介绍"><a href="#Pair-类介绍" class="headerlink" title="Pair 类介绍"></a>Pair 类介绍</h3><p><code>Pair</code> 类是<code>org.apache.commons.lang3</code>库提供的一个简单的键值对容器，用于表示两个相关联的值。其主要作用是将两个值组织在一起，提供一种便捷的方式进行传递和处理。</p><p>首先我们来看一下<code>Pair</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象类，表示简单的键值对。 * 实现了 Map.Entry 接口，支持在各种集合中使用。 * 实现了 Comparable 接口，用于比较两个 Pair 对象的大小。 * 可序列化，支持对象的序列化和反序列化。 * * @param &lt;L> 左值的类型 * @param &lt;R> 右值的类型 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">>></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4954918890077093841L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空数组，用于表示空的 Pair 对象数组</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Pair<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ARRAY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PairAdapter</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回一个空的 Pair 数组。     *     * @return 空的 Pair 数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Pair<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_ARRAY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 静态工厂方法，创建一个新的 ImmutablePair 对象，表示给定的左右值的键值对。     *     * @param left  左值     * @param right 右值     * @param &lt;L>   左值的类型     * @param &lt;R>   右值的类型     * @return ImmutablePair 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ImmutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 静态工厂方法，创建一个新的 ImmutablePair 对象，表示给定 Map.Entry 对象的键值对。     *     * @param pair Map.Entry 对象     * @param &lt;L>  左值的类型     * @param &lt;R>  右值的类型     * @return ImmutablePair 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> pair<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ImmutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回左值，实现了 Map.Entry 接口。     *     * @return 左值     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> L <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法，由子类实现，用于获取左值。     *     * @return 左值     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 抽象方法，由子类实现，用于获取右值。     *     * @return 右值     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回右值，实现了 Map.Entry 接口。     *     * @return 右值     */</span>    <span class="token keyword">public</span> R <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Pair</code>类是一个抽象类，它有两个子类<code>ImmutablePair</code>和<code>MutablePair</code>。接下来我们介绍一下这两个子类，也是我们要使用的两个类。</p><h4 id="MutablePair"><a href="#MutablePair" class="headerlink" title="MutablePair"></a>MutablePair</h4><p><code>MutablePair</code>是一个可变的。它允许在创建后动态修改键和值，提供了更大的灵活性。但是它是线程不安全的。<br>我们可以根据它提供的几个静态方法或者它的构造器去构造一个<code>MutablePair</code>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个空的 MutablePair</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> MutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，传入给定的左右值的键值对，创建并返回一个MutablePair 对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> MutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，传入给定 Map.Entry 对象的键值对，创建并返回一个新的MutablePair 对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> MutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> pair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 无参构造器</span><span class="token keyword">public</span> <span class="token function">MutablePair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 指定左右值的键值对的构造器</span><span class="token keyword">public</span> <span class="token function">MutablePair</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以根据它的几个方法修改键和值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 修改左值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span>L left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改右值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span>R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 修改新的右值，并返回之前的右值。</span><span class="token keyword">public</span> R <span class="token function">setValue</span><span class="token punctuation">(</span>R value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以根据它的几个方法获取键和值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取左值</span><span class="token keyword">public</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取左值</span><span class="token keyword">public</span> <span class="token keyword">final</span> L <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取右值</span><span class="token keyword">public</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取右值 </span><span class="token keyword">public</span> R <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然我们看到它的<code>left</code>以及<code>right</code>都是<code>public</code>的。所以我们也可以直接取值，不用使用它的<code>get</code>方法。</p></blockquote><h4 id="ImmutablePair"><a href="#ImmutablePair" class="headerlink" title="ImmutablePair"></a>ImmutablePair</h4><p><code>ImmutablePair</code>是<code>Pair</code>的一个不可变的子类。它在创建完成之后，不允许改变键和值。它是线程安全的。</p><p>我们可以看一下它如何进行构造的：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个空的 ImmutablePair 数组。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个包含 null 左值和 null 右值的 ImmutablePair 对象，表示空值。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">nullPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个包含指定左值和 null 右值的 ImmutablePair 对象。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">left</span><span class="token punctuation">(</span>L left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，返回一个包含 null 左值和指定右值的 ImmutablePair 对象。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> Pair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">right</span><span class="token punctuation">(</span>R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，创建并返回一个新的 ImmutablePair 对象，表示给定的左右值的键值对。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 静态工厂方法，创建并返回一个新的 ImmutablePair 对象，表示给定 Map.Entry 对象的键值对。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutablePair<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> R<span class="token operator">></span> pair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 有参构造器 传入给定的左右值的键值对。</span><span class="token keyword">public</span> <span class="token function">ImmutablePair</span><span class="token punctuation">(</span>L left<span class="token punctuation">,</span> R right<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以根据它的几个方法获取键和值：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取左值</span><span class="token keyword">public</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取左值</span><span class="token keyword">public</span> <span class="token keyword">final</span> L <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取右值</span><span class="token keyword">public</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pair中的方法  获取右值 </span><span class="token keyword">public</span> R <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当然我们看到它的<code>left</code>以及<code>right</code>都是<code>public</code>的。所以我们也可以直接取值，不用使用它的<code>get</code>方法。</p></blockquote><p>那我们再看一下为什么<code>ImmutablePair</code>是不可变的，并且是线程安全的。<br>首先我们看一下它的左值以及右值都是<code>final</code>的，不可更改的。并且调用它的<code>setValue</code>会抛出<code>UnsupportedOperationException</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> L left<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">final</span> R right<span class="token punctuation">;</span><span class="token keyword">public</span> R <span class="token function">setValue</span><span class="token punctuation">(</span>R value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类中的 <code>left</code> 和 <code>right</code> 成员变量被声明为 <code>final</code>，这意味着它们在对象创建后不能被修改，确保了线程安全性。<code>ImmutablePair</code> 被设计为不可变的键值对类，即一旦创建，其内容不可更改。这确保了在多线程环境中，不会有并发修改的问题。</p><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 返回MutablePair   * @param userDO   * @return   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> MutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> MutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 返回ImmutablePair   * @param userDO   * @return   */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> ImmutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ImmutablePair<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      UserDO userDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> mutablePair <span class="token operator">=</span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" MutablePair修改前："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      mutablePair<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" MutablePair修改后："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      ImmutablePair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> immutablePair <span class="token operator">=</span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ImmutablePair修改前："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>      immutablePair<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mutablePair<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ImmutablePair修改后："</span><span class="token operator">+</span> mutablePair<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果，我们发现<code>ImmutablePair</code>在修改value时报错：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240112002229.png" alt="image.png"></p><p><code>Pair</code> 类及其子类 <code>ImmutablePair</code> 和 <code>MutablePair</code> 是用于表示键值对的实用工具类。<code>ImmutablePair</code> 是不可变的、线程安全的，适用于安全共享；<code>MutablePair</code> 允许动态修改值，但不具备线程安全性，适用于单线程环境。它们在方法返回多个值时提供了简便的解决方案，提高了代码的灵活性。</p><h3 id="Triple介绍"><a href="#Triple介绍" class="headerlink" title="Triple介绍"></a>Triple介绍</h3><p><code>Triple</code> 是一个用于表示三元组的抽象类。三元组是由三个元素组成的有序集合，其中每个元素都有特定的位置，分别称为左值（Left）、中间值（Middle）和右值（Right）。<code>Triple</code> 类提供了一种便捷的方式来组织和处理这种具有固定顺序的数据。可以在不创建专门类的情况下轻松返回三个值。通过 <code>Triple</code>，开发者可以更方便地处理包含三个元素的数据，减少了创建和维护多个变量的复杂性，使代码更加简洁。</p><p>我们来看一下<code>Triple</code>的源码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示包含三个元素的三元组的抽象类 Triple。 * * 该类是一个抽象实现，定义了基本的 API，将元素分别称为 'left'、'middle' 和 'right'。 * * 子类的实现可以是可变的或不可变的。对存储的对象类型没有限制。 * Triple 对象的可变性取决于其中存储的对象是否是可变的。如果存储的是可变对象，那么 Triple 本身也就变得可变，因为存储的对象状态可以被修改。 * 如果存储的是不可变对象，那么Triple 对象在创建后就保持不可变。 * */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Triple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">>></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 一个空数组。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Triple<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ARRAY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TripleAdapter</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回可分配而无需编译器警告的空数组单例。     *     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_ARRAY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取由三个对象组成的不可变三元组，推断出泛型类型。     *     * 此工厂方法允许使用推断类型来创建三元组以获取泛型类型。     *     * @param left   左元素，可以为 null     * @param middle 中间元素，可以为 null     * @param right  右元素，可以为 null     * @return 由三个参数形成的三元组，非 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> Triple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableTriple</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取此三元组的左元素。     *     * @return 左元素，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> L <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取此三元组的中间元素。     *     * @return 中间元素，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> M <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取此三元组的右元素。     *     * @return 右元素，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> R <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Triple</code>是一个抽象类，它有两个子类：可变<code>MutableTriple</code> 以及不可变 <code>ImmutableTriple</code>。</p><h4 id="MutableTriple"><a href="#MutableTriple" class="headerlink" title="MutableTriple"></a>MutableTriple</h4><p><code>MutableTriple</code> 是可变的，原因在于它提供了公共的设置（set）方法，允许在创建后修改其内部值。具体来说，<code>MutableTriple</code> 提供了 <code>setLeft</code>、<code>setMiddle</code> 和 <code>setRight</code> 方法，使得在对象创建后可以修改左、中、右元素的值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 表示由三个 {@code Object} 元素组成的可变三元组。 * * 非线程安全 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MutableTriple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Triple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过推断泛型类型获取三个对象的可变三元组。     *     * 该工厂允许通过推断泛型类型创建三元组。     *     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> MutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MutableTriple</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** 左对象 */</span>    <span class="token keyword">public</span> L left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 中间对象 */</span>    <span class="token keyword">public</span> M middle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 右对象 */</span>    <span class="token keyword">public</span> R right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个新的三元组实例，包含三个 null 值。     */</span>    <span class="token keyword">public</span> <span class="token function">MutableTriple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建一个新的三元组实例。     *     * @param left   左值，可以为 null     * @param middle 中间值，可以为 null     * @param right  右值，可以为 null     */</span>    <span class="token keyword">public</span> <span class="token function">MutableTriple</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middle <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置三元组的左元素。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置三元组的中间元素。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMiddle</span><span class="token punctuation">(</span><span class="token keyword">final</span> M middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middle <span class="token operator">=</span> middle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置三元组的右元素。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span><span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>MutableTriple</code> 被明确标记为非线程安全。</p><h4 id="ImmutableTriple"><a href="#ImmutableTriple" class="headerlink" title="ImmutableTriple"></a>ImmutableTriple</h4><p><code>ImmutableTriple</code> 是一个不可变的三元组类，由三个泛型元素（left、middle、right）组成。不可变意味着一旦创建，其状态无法修改。该类被设计为线程安全的，但需要注意，如果存储在三元组中的对象是可变的，那么三元组本身实际上就不再是不可变的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 一个由三个元素组成的不可变三元组。 * * ImmutableTriple 是一个最终类，被设计成不可变的，即在实例化后其状态不可更改。 * 如果存储在三元组中的三个对象都是线程安全的，则该类是线程安全的。类的最终性防止了子类化，确保不会添加不希望的行为。 * * 线程安全的 如果三个对象都是线程安全的 * */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ImmutableTriple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Triple</span><span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回可以在不触发编译器警告的情况下分配的空数组单例。     * @return 可以在不触发编译器警告的情况下分配的空数组单例。     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">emptyArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> EMPTY_ARRAY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回一个由 null 组成的不可变三元组。     *     * @return 一个由 null 组成的不可变三元组。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">nullTriple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过推断泛型类型获得由三个对象组成的不可变三元组。     *     * 此工厂允许使用推断创建三元组以获得泛型类型。     *     * @return 由三个参数形成的不可变三元组，不为 null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> ImmutableTriple<span class="token operator">&lt;</span>L<span class="token punctuation">,</span> M<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImmutableTriple</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/** 左对象 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> L left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 中间对象 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> M middle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** 右对象 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> R right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构造方法 创建一个新的三元组实例。     *     */</span>    <span class="token keyword">public</span> <span class="token function">ImmutableTriple</span><span class="token punctuation">(</span><span class="token keyword">final</span> L left<span class="token punctuation">,</span> <span class="token keyword">final</span> M middle<span class="token punctuation">,</span> <span class="token keyword">final</span> R right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>middle <span class="token operator">=</span> middle<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ImmutableTriple</code> 被声明为 <code>final</code>，表示不可继承，确保不可变性。确保不会有子类添加或修改行为。然后类中的属性 <code>left</code>、<code>middle</code>、<code>right</code> 被声明为 <code>final</code>，表示它们在实例化后无法被修改。类中没有提供修改元素的公共方法。<code>ImmutableTriple</code> 主张不可变性，不提供修改实例状态的方法。当然如果存储在三元组中的对象是可变的，则整个三元组就变得可变。这是因为虽然 <code>ImmutableTriple</code> 本身是不可变的，但如果存储的对象是可变的，它们的状态可能会发生变化。</p><p>类声明中使用 <code>#ThreadSafe#</code> 标记，表示在存储的三个对象都是线程安全的情况下，<code>ImmutableTriple</code> 是线程安全的。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 返回可变Truple  * @param userDO  * @return  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> MutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> MutableTriple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**  * 返回不可变Triple  * @param userDO  * @return  */</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> ImmutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>UserDO userDO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ImmutableTriple<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      UserDO userDO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span><span class="token string">"coderacademy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"码农Academy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      userDO<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      MutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> mutableTriple <span class="token operator">=</span> <span class="token function">handleUserInfo1</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mutableTriple改变前的值："</span> <span class="token operator">+</span> mutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      mutableTriple<span class="token punctuation">.</span><span class="token function">setMiddle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mutableTriple改变后的值："</span> <span class="token operator">+</span> mutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      ImmutableTriple<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> UserDO<span class="token operator">></span> immutableTriple <span class="token operator">=</span> <span class="token function">handleUserInfo2</span><span class="token punctuation">(</span>userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImmutableTriple改变前的值："</span> <span class="token operator">+</span> immutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      UserDO userFromTriple <span class="token operator">=</span> immutableTriple<span class="token punctuation">.</span>right<span class="token punctuation">;</span>      userFromTriple<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ImmutableTriple改Right键值对象的值："</span> <span class="token operator">+</span> immutableTriple<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 因ImmutableTriple 不可变，无法通过set方法修改键值。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用 Pair 和 Triple 类可以简化代码、提高可读性，使关联数据更清晰，保持类型安全，增强代码清晰度，提高扩展性，并提供丰富的功能，从而使开发人员更高效地处理相关数据，编写更简洁可读的代码，提升代码质量和开发效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 代码工具类 </tag>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：说一下Mysql中from多表跟join表的区别</title>
      <link href="/article/mysqlfromjoin.html"/>
      <url>/article/mysqlfromjoin.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>在日常的数据库查询中，我们常常需要同时涉及多个表的数据。然而，在处理多表查询时，我们可能会使用不同的语法来达到相同的目的。最近，我的一个同事向我提出了一个问题，他的查询语句使用了 <code>FROM</code> 多表的方式，而我通常更喜欢使用 <code>INNER JOIN</code>。他问：“这两种写法有什么区别吗？它们真的是等效的吗？”这个问题激发了我对这两种写法进行更深入思考的兴趣，我决定动手试试。</p><p>在动手之前，我们先创建两张表<code>t_order</code>和<code>t_address</code>。</p><pre class="line-numbers language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS `t_order`;  CREATE TABLE `t_order`(   id                 bigint UNSIGNED AUTO_INCREMENT COMMENT '自增主键'          PRIMARY KEY,   `order_no` varchar(16) NOT NULL DEFAULT '' COMMENT '订单编号',  `create_time`      datetime        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',  ) ENGINE = InnoDB    AUTO_INCREMENT = 1    DEFAULT CHARSET = utf8mb4 COMMENT ='测试订单表';  DROP TABLE IF EXISTS `t_address`;  CREATE TABLE `t_order`(   id                 bigint UNSIGNED AUTO_INCREMENT COMMENT '自增主键'          PRIMARY KEY,   `order_id` bigint UNSIGNED NOT NULL DEFAULT 0 COMMENT '订单ID',   `address_no` varchar(16) NOT NULL DEFAULT '' COMMENT '地址编号',  `create_time`      datetime        NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',  ) ENGINE = InnoDB    AUTO_INCREMENT = 1    DEFAULT CHARSET = utf8mb4 COMMENT ='测试订单地址表';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试表，无任何业务含义。</p></blockquote><h3 id="FROM-多表"><a href="#FROM-多表" class="headerlink" title="FROM 多表"></a><code>FROM</code> 多表</h3><p>在 SQL 查询中，使用 <code>FROM</code> 多表的方式是一种直接的表连接方法。通过在 <code>FROM</code> 子句中列出多个表，我们可以将这些表的行组合在一起，形成一个结果集。例如：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,          o.order_no,          a.id,          a.order_id,         a.address_no  FROM t_order o,       t_address a  WHERE o.id = a.order_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述查询使用逗号 <code>,</code> 将表 <code>table1</code> 和 <code>table2</code> 连接在一起，并通过 <code>WHERE</code> 子句指定了连接条件。这种写法看似简单直观，但在实际应用中可能引发一些潜在问题。如果没有明确指定连接条件，就有可能导致笛卡尔积的产生。笛卡尔积是指将一个表的每一行与另一个表的每一行组合在一起，形成一个庞大的结果集。这可能导致性能下降和不正确的查询结果。如下这种写法：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,          o.order_no,          a.id,          a.order_id,         a.address_no  FROM t_order o,       t_address a <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a><code>INNER JOIN</code></h3><p>相比于直接使用 <code>FROM</code> 多表，使用 <code>INNER JOIN</code> 提供了更为灵活、明确的连接方式，有助于避免潜在的问题并提升查询的可读性。让我们深入探讨 <code>INNER JOIN</code> 的作用和优势。<code>INNER JOIN</code> 是一种显式的连接语法，通过在 <code>FROM</code> 子句中使用 <code>INNER JOIN</code> 关键字明确指定连接条件。其语法如下：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,         o.order_no,         a.id,         a.order_id,         a.address_no  FROM t_order o  INNER JOIN t_address a ON o.id = a.order_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>INNER JOIN</code> 的主要优势之一是明确指定连接条件。通过在 <code>ON</code> 子句中明确写出连接条件，我们避免了使用逗号 <code>,</code> 连接时可能忽略连接条件的风险。这样做有助于代码的可读性和维护性，减少了产生笛卡尔积的可能性。</p><p>当然还有其他的<code>JOIN</code>，例如：<code>LEFT JOIN</code>和<code>RIGHT JOIN</code>。我们会在后续的文章中继续介绍。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><strong>在Mysql中使用<code>FROM</code>查询多表和使用<code>INNER JOIN</code>连接,查询结果,查询效率是一样的。</strong></p><h4 id="从执行顺序分析"><a href="#从执行顺序分析" class="headerlink" title="从执行顺序分析"></a>从执行顺序分析</h4><p>我们先来看一下Msql的<code>SELECT</code>语句的执行顺序：</p><ol><li><p><strong>FROM 子句：</strong> 从指定的表中获取数据。在这里，涉及到的是表 <code>a</code> 和 <code>b</code>。</p></li><li><p><strong>JOIN 操作：</strong> 如果查询中包含连接操作（如 <code>INNER JOIN</code> 或 <code>,</code> 符号表示的连接），则会执行连接操作。连接操作的目的是将来自不同表的行组合起来。</p></li><li><p><strong>ON 或 WHERE 子句：</strong> 在连接操作后，应用连接条件。如果是 <code>INNER JOIN</code>，连接条件通常包含在 <code>ON</code> 子句中。如果是逗号 <code>,</code> 符号表示的连接，连接条件在 <code>WHERE</code> 子句中。</p></li><li><p><strong>SELECT 子句：</strong> 选择要返回的列。在这里，使用 <code>SELECT *</code> 表示选择所有列。</p></li><li><p><strong>GROUP BY 子句：</strong> 如果有 <code>GROUP BY</code> 子句，则按指定的列对结果进行分组。</p></li><li><p><strong>HAVING 子句：</strong> 如果有 <code>HAVING</code> 子句，则应用于分组后的结果。</p></li><li><p><strong>ORDER BY 子句：</strong> 如果有 <code>ORDER BY</code> 子句，则按指定的列对结果进行排序。</p></li><li><p><strong>LIMIT 子句：</strong> 如果有 <code>LIMIT</code> 子句，则限制返回的行数。</p></li></ol><p>根据这个执行顺序，可以解释两个查询语句的等效性。在第一个查询 <code>SELECT o.*,a.* FROM t_order o INNER JOIN t_address a ON o.id = a.order_id</code> 中，连接条件是通过 <code>ON</code> 子句指定的；而在第二个查询 <code>SELECT o.*,a.* FROM t_order o,t_address a WHERE o.id = a.order_id</code> 中，连接条件则是通过 <code>WHERE</code> 子句指定的。然而，在执行时，MySQL 会在连接操作阶段考虑这两个条件，并选择合适的连接算法来执行连接操作。</p><p>因此，尽管语法稍有不同，但在执行时，MySQL 解释这两个查询时会考虑连接条件，因此它们具有相同的功能。在实际执行中，MySQL 优化器会选择最有效的执行计划，确保得到相同的结果。</p><h4 id="从执行计划分析"><a href="#从执行计划分析" class="headerlink" title="从执行计划分析"></a>从执行计划分析</h4><p>执行计划是由查询优化器生成的，它是描述查询引擎如何获取和处理数据的计划。优化器在生成执行计划时考虑多个因素，包括表的大小、索引情况、连接条件等，以确定最佳的执行计划。</p><p>我们来执行一下通过<code>FROM</code>的方式的计划如下：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111174830.png" alt="image.png"></p><p>接着我们再来看一下<code>INNER JOIN</code>的方式的计划：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111174940.png" alt="image.png"></p><p>通过对比，我们发现两者在执行计划上并没有什么区别。</p><h3 id="实例验证"><a href="#实例验证" class="headerlink" title="实例验证"></a>实例验证</h3><p>接文章开头创建的两张表，我们向t_order表中插入100w条数据，t_address表中插入10w条数据进行验证。</p><p>我们开始执行<code>FROM</code>的方式的sql：</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,       o.order_no,       a.id,       a.order_id,       a.address_noFROM t_order o,     t_address aWHERE o.id = a.order_id  limit 0, 100000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111192515.png" alt="image.png"></p><p>我们在执行一次<code>INNER JOIN</code>的方式的sql:</p><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT o.id,       o.order_no,       a.id,       a.order_id,       a.address_noFROM t_order oINNER JOIN t_address a ON o.id = a.order_id limit 0, 100000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240111192721.png" alt="image.png"><br>可以看出两者查询所花费的时间相差无几。再看一下两种方式的执行计划，也是一样的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由上述我们可以看出在Mysql中使用<code>FROM</code>查询多表和使用<code>JOIN</code>连接，查询结果以及查询效率是一样的。</p><p>但是我们最好还是使用 <code>INNER JOIN</code> ，它的写法更直观、更易于优化器理解，有助于生成更优化的执行计划。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql查询 </tag>
            
            <tag> Mysql面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot统一结果返回，统一异常处理，大牛都这么玩</title>
      <link href="/article/springbootcommonresponse.html"/>
      <url>/article/springbootcommonresponse.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在开发Spring Boot应用时，我们经常面临着不同的控制器方法需要处理各种不同类型的响应结果，以及在代码中分散处理异常可能导致项目难以维护的问题。你是否曾经遇到过在不同地方编写相似的返回格式，或者在处理异常时感到有些混乱？这些看似小问题的积累，实际上可能对项目产生深远的影响。统一结果返回和统一异常处理并非只是为了规范代码，更是为了提高团队的协作效率、降低项目维护的难度，并使代码更易于理解和扩展。</p><p>本文的目的是帮助你更好地理解和应用Spring Boot中的统一结果返回和统一异常处理。通过详细的讨论和实例演示，我们将为你提供一套清晰的指南，让你能够在自己的项目中轻松应用这些技术，提高代码质量，减轻开发压力。</p><h3 id="统一结果返回"><a href="#统一结果返回" class="headerlink" title="统一结果返回"></a>统一结果返回</h3><p>统一结果返回是一种通过定义通用的返回格式，使所有的响应结果都符合同一标准的方法。这有助于提高代码的一致性，减少重复代码的编写，以及使客户端更容易理解和处理API的响应。统一结果返回不仅规范了代码结构，还能提高团队协作效率，降低项目维护的难度。</p><p>接下来让我们一起看看在SpringBoot中如何实现统一结果返回。</p><h4 id="1-定义通用的响应对象"><a href="#1-定义通用的响应对象" class="headerlink" title="1. 定义通用的响应对象"></a>1. 定义通用的响应对象</h4><p>当实现统一结果返回时，需要创建一个通用的响应对象，定义成功和失败的返回情况，并确保在接口中使用这个通用返回对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Setter</span>  <span class="token annotation punctuation">@Getter</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultResponse</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>1133637474601003587L<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 接口响应状态码       */</span>      <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 接口响应信息       */</span>      <span class="token keyword">private</span> String msg<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 接口响应的数据       */</span>      <span class="token keyword">private</span> T data<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-定义接口响应状态码"><a href="#2-定义接口响应状态码" class="headerlink" title="2. 定义接口响应状态码"></a>2. 定义接口响应状态码</h4><p>统一结果返回的关键之一是规定一套通用的状态码。这有助于客户端更容易地理解和处理 API 的响应，同时也为开发者提供了一致的标准。通常，一些 HTTP 状态码已经被广泛接受，如：</p><ul><li><code>200 OK</code>：表示成功处理请求。</li><li><code>201 Created</code>：表示成功创建资源。</li><li><code>204 No Content</code>：表示成功处理请求，但没有返回任何内容。</li></ul><p>对于错误情况，也可以使用常见的 HTTP 状态码，如：</p><ul><li><code>400 Bad Request</code>：客户端请求错误。</li><li><code>401 Unauthorized</code>：未授权访问。</li><li><code>404 Not Found</code>：请求资源不存在。</li><li><code>500 Internal Server Error</code>：服务器内部错误。</li></ul><p>除了 HTTP 状态码外，你还可以定义自己的应用程序特定状态码，以表示更具体的情况。确保文档中清晰地说明了每个状态码所代表的含义，使开发者能够正确地解释和处理它们。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> StatusEnum <span class="token punctuation">{</span>      <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">200</span> <span class="token punctuation">,</span><span class="token string">"请求处理成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">UNAUTHORIZED</span><span class="token punctuation">(</span><span class="token number">401</span> <span class="token punctuation">,</span><span class="token string">"用户认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">FORBIDDEN</span><span class="token punctuation">(</span><span class="token number">403</span> <span class="token punctuation">,</span><span class="token string">"权限不足"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SERVICE_ERROR</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"服务器去旅行了，请稍后重试"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PARAM_INVALID</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"无效的参数"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String message<span class="token punctuation">;</span>      <span class="token function">StatusEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-定义统一的成功和失败的处理方法"><a href="#3-定义统一的成功和失败的处理方法" class="headerlink" title="3. 定义统一的成功和失败的处理方法"></a>3. 定义统一的成功和失败的处理方法</h4><p>定义统一的成功和失败的响应方法有助于保持代码一致性和规范性，简化控制器逻辑，提高代码复用性，降低维护成本，提高可读性，促进团队协作，以及更便于进行测试。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 封装成功响应的方法   * @param data 响应数据   * @return reponse   * @param &lt;T> 响应数据类型   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">success</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultResponse</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 封装error的响应   * @param statusEnum error响应的状态值   * @return   * @param &lt;T>   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">error</span><span class="token punctuation">(</span>StatusEnum statusEnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span>statusEnum<span class="token punctuation">,</span> statusEnum<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 封装error的响应  可自定义错误信息 * @param statusEnum error响应的状态值   * @return   * @param &lt;T>   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">error</span><span class="token punctuation">(</span>StatusEnum statusEnum<span class="token punctuation">,</span> String errorMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ResultResponse<span class="token operator">&lt;</span>T<span class="token operator">></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResultResponse</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>statusEnum<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>      response<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span>errorMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-web层统一响应结果"><a href="#4-web层统一响应结果" class="headerlink" title="4. web层统一响应结果"></a>4. web层统一响应结果</h4><p>在web层使用统一结果返回的目的是将业务逻辑的处理结果按照预定的通用格式进行封装，以提高代码的一致性和可读性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> IUserService userService<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 创建用户       * @param requestVO       * @return       */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**       * 根据用户ID获取用户信息       * @param userId 用户id       * @return 用户信息       */</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>UserInfoResponseVO<span class="token operator">></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请选择用户"</span><span class="token punctuation">)</span> String userId<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">final</span> UserInfoResponseVO responseVO <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserInfoById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>responseVO<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>IUserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用接口，响应的信息统一为：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"userId"</span><span class="token operator">:</span> <span class="token string">"121"</span><span class="token punctuation">,</span>        <span class="token property">"userName"</span><span class="token operator">:</span> <span class="token string">"码农Academy"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统一结果返回通过定义通用的返回格式、成功和失败的返回情况，以及在控制器中使用这一模式，旨在提高代码的一致性、可读性和可维护性。采用统一的响应格式简化了业务逻辑处理流程，使得开发者更容易处理成功和失败的情况，同时客户端也更容易理解和处理 API 的响应。这一实践有助于降低维护成本、提高团队协作效率，并促进代码的规范化。</p><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><p>统一异常处理的必要性体现在保持代码的一致性、提供更清晰的错误信息、以及更容易排查问题。通过定义统一的异常处理方式，确保在整个应用中对异常的处理保持一致，减少了重复编写相似异常处理逻辑的工作，同时提供友好的错误信息帮助开发者和维护人员更快地定位和解决问题，最终提高了应用的可维护性和可读性。</p><h4 id="1-定义统一的异常类"><a href="#1-定义统一的异常类" class="headerlink" title="1.定义统一的异常类"></a>1.定义统一的异常类</h4><p>我们需要定义服务中可能抛出的自定义异常类。这些异常类可以继承自<code>RuntimeException</code>，并携带有关异常的相关信息。即可理解为局部异常，用于特定的业务处理中异常。手动埋点抛出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>3303518302920463234L<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> StatusEnum status<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token function">ServiceException</span><span class="token punctuation">(</span>StatusEnum status<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token function">ServiceException</span><span class="token punctuation">(</span>StatusEnum status<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> status<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-异常处理器"><a href="#2-异常处理器" class="headerlink" title="2.异常处理器"></a>2.异常处理器</h4><p>创建一个全局的异常处理器，使用<code>@ControllerAdvice</code> 或者 <code>@RestControllerAdvice</code>注解和<code>@ExceptionHandler</code>注解来捕获不同类型的异常，并定义处理逻辑。</p><h5 id="2-1-ControllerAdvice注解"><a href="#2-1-ControllerAdvice注解" class="headerlink" title="2.1 @ControllerAdvice注解"></a>2.1 @ControllerAdvice注解</h5><p>用于声明一个全局控制器建言（Advice），相当于把<code>@ExceptionHandler</code>、<code>@InitBinder</code>和<code>@ModelAttribute</code>注解的方法集中到一个地方。常放在一个特定的类上，这个类被认为是全局异常处理器，可以跨足多个控制器。</p><blockquote><p>当时用<code>@ControllerAdvice</code>时，我们需要在异常处理方法上加上<code>@ResponseBody</code>，同理我们的web接口。但是如果我们使用<code>@RestControllerAdvice</code> 就可以不用加，同理也是web定义的接口</p></blockquote><h5 id="2-2-ExceptionHandler注解"><a href="#2-2-ExceptionHandler注解" class="headerlink" title="2.2 @ExceptionHandler注解"></a>2.2 <code>@ExceptionHandler</code>注解</h5><p>用于定义异常处理方法，处理特定类型的异常。放在全局异常处理器类中的具体方法上。</p><p>通过这两个注解的配合，可以实现全局的异常处理。当控制器中抛出异常时，Spring Boot会自动调用匹配的<code>@ExceptionHandler</code>方法来处理异常，并返回定义的响应。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@ControllerAdvice</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionAdvice</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 处理ServiceException       * @param serviceException ServiceException       * @param request 请求参数       * @return 接口响应       */</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ServiceException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleServiceException</span><span class="token punctuation">(</span>ServiceException serviceException<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"request {} throw ServiceException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> serviceException<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>serviceException<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serviceException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 其他异常拦截       * @param ex 异常       * @param request 请求参数       * @return 接口响应       */</span>      <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@ResponseBody</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleException</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request {} throw unExpectException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SERVICE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-异常统一处理使用"><a href="#3-异常统一处理使用" class="headerlink" title="3.异常统一处理使用"></a>3.异常统一处理使用</h4><p>在业务开发过程中，我们可以在<code>service</code>层处理业务时，可以手动抛出业务异常。由全局异常处理器进行统一处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> IUserManager userManager<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**       * 创建用户       *       * @param requestVO 请求参数       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span>UserCreateRequestVO requestVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> UserDO userDO <span class="token operator">=</span> userManager<span class="token punctuation">.</span><span class="token function">selectUserByName</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>userDO <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServiceException</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserManager</span><span class="token punctuation">(</span>IUserManager userManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userManager <span class="token operator">=</span> userManager<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> IUserService userService<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 创建用户       * @param requestVO       * @return       */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          userService<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>requestVO<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>IUserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们请求接口时，假如用户名称已存在，接口就会响应：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"用户名已存在"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统一异常处理带来的好处包括提供一致的异常响应格式，简化异常处理逻辑，记录更好的错误日志，以及更容易排查和解决问题。通过统一处理异常，我们确保在整个应用中对异常的处理方式一致，减少了重复性代码的编写，提高了代码的规范性。简化的异常处理逻辑降低了开发者的工作负担，而更好的错误日志有助于更迅速地定位和解决问题，最终提高了应用的可维护性和稳定性。</p><h3 id="其他类型的异常处理"><a href="#其他类型的异常处理" class="headerlink" title="其他类型的异常处理"></a>其他类型的异常处理</h3><p>在项目开发过程中，我们还有一些常见的特定异常类型，比如<code>MethodArgumentNotValidException</code>和<code>UnexpectedTypeException</code>等，并为它们定义相应的异常处理逻辑。这些特定异常可能由于请求参数校验失败或意外的数据类型问题而引起，因此有必要为它们单独处理，以提供更具体和友好的异常响应。</p><h4 id="1-MethodArgumentNotValidException"><a href="#1-MethodArgumentNotValidException" class="headerlink" title="1.MethodArgumentNotValidException"></a>1.MethodArgumentNotValidException</h4><p>由于请求参数校验失败引起的异常，通常涉及到使用<code>@Valid</code>注解或者<code>@Validated</code>进行请求参数校验。我们可以在异常处理器中编写<code>@ExceptionHandler</code>方法，捕获并处理<code>MethodArgumentNotValidException</code>，提取校验错误信息，并返回详细的错误响应。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 参数非法校验   * @param ex   * @return   */</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleMethodArgumentNotValidException</span><span class="token punctuation">(</span>MethodArgumentNotValidException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>ObjectError<span class="token operator">></span> errors <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          String message <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ObjectError<span class="token operator">:</span><span class="token operator">:</span>getDefaultMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"param illegal: {}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SERVICE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们使用<code>@Valid</code>注解或者<code>@Validated</code>进行请求参数校验不通过时，响应结果为：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"请输入地址信息,用户年龄必须小于60岁,请输入你的兴趣爱好"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关于<code>@Valid</code>注解或者<code>@Validated</code>进行参数校验的功能请参考：<a href="https://www.coderacademy.online/article/springbootvalidation.html">SpringBoot优雅校验参数</a></p></blockquote><h4 id="2-UnexpectedTypeException"><a href="#2-UnexpectedTypeException" class="headerlink" title="2.UnexpectedTypeException"></a>2.UnexpectedTypeException</h4><p>意外的数据类型异常，通常表示程序运行时发生了不符合预期的数据类型问题。一个常见的使用场景是在数据转换或类型处理的过程中。例如，在使用 Spring 表单绑定或数据绑定时，如果尝试将一个不符合预期类型的值转换为目标类型，就可能抛出 <code>UnexpectedTypeException</code>。这通常会发生在将字符串转换为数字、日期等类型时，如果字符串的格式不符合目标类型的要求。</p><p>我们可以在异常处理器中编写<code>@ExceptionHandler</code>方法，捕获并处理<code>UnexpectedTypeException</code>，提供适当的处理方式，例如记录错误日志，并返回合适的错误响应。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>UnexpectedTypeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleUnexpectedTypeException</span><span class="token punctuation">(</span>UnexpectedTypeException ex<span class="token punctuation">,</span>                                                          HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"catch UnexpectedTypeException, errorMessage: \n"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当发生异常时，接口会响应：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"服务器去旅行了，请稍后重试"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-ConstraintViolationException"><a href="#3-ConstraintViolationException" class="headerlink" title="3.ConstraintViolationException"></a>3.ConstraintViolationException</h4><p><code>javax.validation.ConstraintViolationException</code> 是 Java Bean Validation（JSR 380）中的一种异常。它通常在使用 Bean Validation 进行数据校验时，如果校验失败就会抛出这个异常。即我们在使用自定义校验注解时，如果不满足校验规则，就会抛出这个错误。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>ConstraintViolationException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handlerConstraintViolationException</span><span class="token punctuation">(</span>ConstraintViolationException ex<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request {} throw ConstraintViolationException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>PARAM_INVALID<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>案例请参考：<a href="https://www.coderacademy.online/article/springbootvalidation.html">SpringBoot优雅校验参数</a>，注册ConstraintValidator示例中的<code>@UniqueUser</code>校验。</p></blockquote><h4 id="4-HttpMessageNotReadableException"><a href="#4-HttpMessageNotReadableException" class="headerlink" title="4.HttpMessageNotReadableException"></a>4.HttpMessageNotReadableException</h4><p>表示无法读取HTTP消息的异常，通常由于请求体不合法或不可解析。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ResponseBody</span>  <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span>  <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>HttpMessageNotReadableException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleHttpMessageNotReadableException</span><span class="token punctuation">(</span>HttpMessageNotReadableException ex<span class="token punctuation">,</span>  HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"request {} throw ucManagerException \n"</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>SERVICE_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-HttpRequestMethodNotSupportedException"><a href="#5-HttpRequestMethodNotSupportedException" class="headerlink" title="5.HttpRequestMethodNotSupportedException"></a>5.HttpRequestMethodNotSupportedException</h4><p>Spring Framework 中的异常类，表示请求的 HTTP 方法不受支持。当客户端发送了一个使用不被服务器支持的 HTTP 方法（如 GET、POST、PUT、DELETE等）的请求时，可能会抛出这个异常。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>HttpRequestMethodNotSupportedException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpMediaTypeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ResponseBody</span>  <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">handleMethodNotSupportedException</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"HttpRequestMethodNotSupportedException \n"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>StatusEnum<span class="token punctuation">.</span>HTTP_METHOD_NOT_SUPPORT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局异常处理与局部异常处理在Spring Boot应用开发中扮演不同角色。全局异常处理通过统一的异常处理器确保了整个应用对异常的处理一致性，减少了冗余代码，提高了代码的整洁度。然而，这种方式可能在灵活性上略显不足，无法满足每个具体控制器或业务场景的个性化需求。</p><p>相比之下，局部异常处理能够为每个控制器或业务场景提供更具体、灵活的异常处理逻辑，允许定制化的异常响应。这使得在复杂的项目中更容易处理特定的异常情况，同时提供更详细的错误信息。然而，局部异常处理可能带来代码冗余和维护难度的问题，特别是在大型项目中。</p><p>在实际应用中，选择全局异常处理还是局部异常处理应根据项目规模和需求进行权衡。对于小型项目或简单场景，全局异常处理可能是一种更简单、合适的选择。而对于大型项目或需要个性化异常处理的复杂业务逻辑，局部异常处理则提供了更为灵活的方案。最佳实践是在项目中根据具体情况灵活使用这两种方式，以平衡一致性和个性化需求。</p><h3 id="最佳实践与注意事项"><a href="#最佳实践与注意事项" class="headerlink" title="最佳实践与注意事项"></a>最佳实践与注意事项</h3><h4 id="1-最佳实践"><a href="#1-最佳实践" class="headerlink" title="1. 最佳实践"></a>1. 最佳实践</h4><ul><li><p><strong>统一响应格式：</strong> 在异常处理中，使用统一的响应格式有助于客户端更容易理解和处理错误。通常，返回一个包含错误码、错误信息和可能的详细信息的响应对象。</p></li><li><p><strong>详细错误日志：</strong> 在异常处理中记录详细的错误日志，包括异常类型、发生时间、请求信息等。这有助于快速定位和解决问题。</p></li><li><p><strong>使用HTTP状态码：</strong> 根据异常的性质，选择适当的HTTP状态码。例如，使用<code>HttpStatus.NOT_FOUND</code>表示资源未找到，<code>HttpStatus.BAD_REQUEST</code>表示客户端请求错误等。</p></li><li><p><strong>异常分类：</strong> 根据异常的种类，合理分类处理。可以定义不同的异常类来表示不同的异常情况，然后在异常处理中使用<code>@ExceptionHandler</code>分别处理。</p></li><li><p><strong>全局异常处理：</strong> 使用全局异常处理机制来捕获未被特定控制器处理的异常，以确保应用在整体上的健壮性。</p></li></ul><h4 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2 注意事项"></a>2 注意事项</h4><ul><li><p><strong>不滥用异常：</strong> 异常应该用于表示真正的异常情况，而不是用作控制流程。滥用异常可能导致性能问题和代码可读性降低。</p></li><li><p><strong>不忽略异常：</strong> 避免在异常处理中忽略异常或仅仅打印日志而不进行适当的处理。这可能导致潜在的问题被掩盖，难以追踪和修复。</p></li><li><p><strong>避免空的catch块：</strong> 不要在<code>catch</code>块中什么都不做，这样会使得异常难以被发现。至少在<code>catch</code>块中记录日志，以便了解异常的发生。</p></li><li><p><strong>适时抛出异常：</strong> 不要过于吝啬地抛出异常，但也不要无谓地滥用。在必要的时候使用异常，例如表示无法继续执行的错误情况。</p></li><li><p><strong>测试异常场景：</strong> 编写单元测试时，确保覆盖异常场景，验证异常的正确抛出和处理。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>异常处理在应用开发中是至关重要的一环，它能够提高应用的健壮性、可读性和可维护性。全局异常处理和局部异常处理各有优劣，需要根据项目的规模和需求来灵活选择。通过采用统一的响应格式、详细的错误日志、适当的HTTP状态码等最佳实践，可以使异常处理更为有效和易于管理。同时，注意避免滥用异常、忽略异常、适时抛出异常等注意事项，有助于确保异常处理的质量。在开发过程中，持续关注和优化异常处理，将有助于提高应用的稳定性和用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot统一结果返回 </tag>
            
            <tag> SpringBoot统一异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新来的一个同事，把SpringBoot参数校验玩的那叫一个优雅</title>
      <link href="/article/springbootvalidation.html"/>
      <url>/article/springbootvalidation.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在开发现代应用程序时，数据验证是确保用户输入的正确性和应用程序数据完整性的关键方面。Spring Boot 提供了强大的数据验证机制，使开发者能够轻松地执行验证操作。本文将深入介绍 Spring Boot 中的 Validation，以及如何在应用程序中正确使用它。</p><h3 id="为什么使用数据验证？"><a href="#为什么使用数据验证？" class="headerlink" title="为什么使用数据验证？"></a>为什么使用数据验证？</h3><ul><li><p>1.<strong>用户输入的正确性</strong>：数据验证是确保用户输入的正确性的一种重要手段。通过验证用户输入的数据，可以防止无效或错误的数据进入应用程序，提高数据的质量。例如：系统中的备注字段数据库中对应的长度是256，如果用户输入的备注超过这个长度值，那么就会导致mysql报<code>Data too long</code>。</p></li><li><ol start="2"><li><strong>数据完整性：</strong> 数据完整性是指数据在存储和传输过程中的准确性和一致性。数据验证有助于确保数据满足特定的格式、长度、范围等要求，从而提高数据的完整性。</li></ol></li></ul><ol start="3"><li><p><strong>安全性：</strong> 数据验证也是保障应用程序安全性的关键因素。通过验证用户输入，可以防范一些潜在的安全威胁，例如 SQL 注入、跨站脚本攻击等。</p></li><li><p><strong>业务规则的执行：</strong> 在应用程序中，通常存在一些业务规则，例如某个字段不能为空、日期范围必须在某个特定范围内等。通过数据验证，可以确保这些业务规则在应用程序中得到正确执行。</p></li></ol><h3 id="手动数据校验的痛点"><a href="#手动数据校验的痛点" class="headerlink" title="手动数据校验的痛点"></a>手动数据校验的痛点</h3><p>日常开发中，有些写项目可能没有采用Spring Validator，采用的是在代码中手动校验数据。但是手动校验数据会带来代码冗余、错误处理的一致性以及业务规则的维护的一些痛点。</p><ul><li>代码冗余的手动校验逻辑，导致代码中大量的if-else</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">registerUser</span><span class="token punctuation">(</span>UserRegistrationRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Request cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Username cannot be blank"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Password must be at least 6 characters long"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理用户注册逻辑</span>    <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"User registered successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>缺乏统一的错误处理机制</p></li><li><p>业务规则维护的困难<br>随着业务规则的增加，手动编写的校验逻辑可能变得庞大且难以维护。修改和扩展校验规则可能需要修改多个地方，增加了维护成本。</p></li><li><p>缺乏验证组的支持<br>手动校验通常不支持验证组的概念，难以根据不同场景执行不同的验证规则。</p></li><li><p>不易于集成前端验证<br>手动校验不易与前端验证框架集成，导致前后端验证逻辑可能不一致。</p></li></ul><p>通过引入 Spring Validator，我们能够有效解决这些痛点，提高代码的可读性、可维护性，并确保校验逻辑的一致性。</p><h3 id="Spring-Boot-中的-Validation-概述"><a href="#Spring-Boot-中的-Validation-概述" class="headerlink" title="Spring Boot 中的 Validation 概述"></a>Spring Boot 中的 Validation 概述</h3><p>因Springboot的<code>spring-boot-starter-web</code>默认内置了<code>Hibernate-Validator</code>（Spring boot 2.3以前版本），虽然<code>Hibernate-Validator</code>也能做到数据校验，但是考虑到<code>spring-boot-starter-validation</code> 是一个抽象层，使得验证框架的具体实现变得可插拔。这意味着，除了 <code>Hibernate Validator</code>，开发者可以选择其他符合 Bean Validation 规范的实现。所以我们可以手动引入<code>spring-boot-starter-validation</code>实现数据验证。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>spring-boot-starter-validation</code> 不仅支持 JSR-303（Bean Validation 1.0）规范，还提供了对 JSR-380（Bean Validation 2.0）规范的全面支持。这使得开发者可以利用 Bean Validation 2.0 的新特性，更灵活地定义验证规则，包括对集合、嵌套对象的验证等。</p><p>通过在实体类的字段上使用标准的 Bean Validation 注解（如 <code>@NotBlank</code>、<code>@Size</code>、<code>@Email</code> 等），我们能够直观地定义数据的验证规则。这些验证规则会在应用程序的不同层次（如控制器层）生效，确保输入数据的正确性。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Spring Boot Validation 提供了一系列注解，用于在实体类中定义验证规则。以下是一些常用的校验相关的注解及其功能以及用法：<br>1.<strong><code>@NotNull</code>：</strong> 校验元素值不能为 null。如果元素为null，则验证失败。通常用于字段级别的验证。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Name cannot be null"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.<strong><code>@NotBlank</code>：</strong> 校验字符串元素值不能为 null 或空字符串。必须包含至少一个非空格字符(即执行trim()之后不为’’)。如果元素为null或者‘‘，则验证失败。通常用于<code>String</code>类型的字段校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Username cannot be blank"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.<strong><code>NotEmpty</code>：</strong> 校验集合元素或数组元素或者字符串是否非空。通常作用于集合字段或数组字段，此时需要集合或者数字的元素个数大于0。也可以作用于字符串，此时校验字符串不能为null或空串（可以是一个空格）。注意与<code>@NotBlank</code>的使用区别。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"List cannot be empty"</span><span class="token punctuation">)</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> items<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.<strong><code>@Length</code>：</strong> 校验字符串元素的长度。作用于字符串。<strong>注：<code>Hibernate-Validator</code>中注解，等同于<code>spring-boot-starter-validation</code>中的<code>@Size</code></strong>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Length must be between 5 and 20 characters"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5.<strong><code>@Size</code>：</strong> 校验集合元素个数或字符串的长度在指定范围内。在集合或字符串字段上添加 <code>@Size</code> 注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Number of items must be between 1 and 10"</span><span class="token punctuation">)</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> items<span class="token punctuation">;</span><span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Length must be between 5 and 20 characters"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.<strong><code>@Min</code>：</strong> 校验数字元素的最小值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Age must be at least 18"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7.<strong><code>@Max</code>：</strong> 校验数字元素的最大值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Age must not exceed 100"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>9.<strong><code>@DecimalMax</code>：</strong> 作用于<code>BigDecimal</code>类型字段， 校验字段的最大值，支持比较的值为字符串表示的十进制数。通常搭配它的<code>inclusive()</code>使用，区别边界问题。<code>value</code> 属性表示最大值，inclusive 属性表示是否包含最大值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@DecimalMax</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"100.00"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Value must be less than or equal to 100.00"</span><span class="token punctuation">)</span><span class="token keyword">private</span> BigDecimal amount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>10.<strong><code>@DecimalMin</code>：</strong>  作用于<code>BigDecimal</code>类型字段， 校验字段的最小值，支持比较的值为字符串表示的十进制数。通常搭配它的<code>inclusive()</code>使用，区别边界问题。<code>value</code> 属性表示最小值，inclusive 属性表示是否包含最小值。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"0.00"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Value must be greater than 0.00"</span><span class="token punctuation">)</span><span class="token keyword">private</span> BigDecimal amount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>11.<strong><code>@Email</code>：</strong> 校验字符串元素是否为有效的电子邮件地址。可以通过<code>regexp</code>自定义邮箱匹配正则。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Invalid email address"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String email<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>12.<strong><code>@Pattern</code>：</strong>  根据正则表达式校验字符串元素的格式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">"[a-zA-Z0-9]+"</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Only alphanumeric characters are allowed"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String username<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>13.<strong><code>@Digits</code>：</strong> 校验数字元素的整数部分和小数部分的位数。作用于<code>BigDecimal</code>，<code>BigInteger</code>，字符串，以及<code>byte</code>, <code>short</code>,<code>int</code>, <code>long</code>以及它们的包装类型。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Digits</span><span class="token punctuation">(</span>integer <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> fraction <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Number must have up to 5 integer digits and 2 fraction digits"</span><span class="token punctuation">)</span><span class="token keyword">private</span> BigDecimal amount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>14.<strong><code>@Past</code>：</strong> 校验日期或时间元素是否在当前时间之前。即是否是过去时间。作用于Date相关类型的字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Past</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Date must be in the past"</span><span class="token punctuation">)</span><span class="token keyword">private</span> LocalDate startDate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>15.<strong><code>@Future</code>：</strong> 校验日期或时间元素是否在当前时间之后。即是否是未来时间。作用于Date相关类型的字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Future</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"Date must be in the future"</span><span class="token punctuation">)</span><span class="token keyword">private</span> LocalDate endDate<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注：以上只罗列部分注解以及它们的功能，其余他们的字段属性并没有详细说明，其他注解以及详细的说明需要去看源码。</p></blockquote><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><h5 id="1-定义接口入参请求参数"><a href="#1-定义接口入参请求参数" class="headerlink" title="1.定义接口入参请求参数"></a>1.定义接口入参请求参数</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * @description: &lt;p>&lt;/p >  * @author: 码农Academy  * @create: 2024/1/8 16:46  */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度最大为128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请填写正确的邮箱地址"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String email<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须大于18岁"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须小于60岁"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入你的兴趣爱好"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"兴趣爱好最多可以输入5个"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>      <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"体重必须大于50KG"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> BigDecimal weight<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Validated</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入地址信息"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> UserAddressRequestVO address<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-定义请求接口"><a href="#2-定义请求接口" class="headerlink" title="2.定义请求接口"></a>2.定义请求接口</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 创建用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 校验用户邮箱是否合法      * @param email      * @return      */</span>      <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">validUserEmail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span> String email<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h5><ul><li>创建用户校验，Json请求体校验<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108180356.png" alt="image.png"></li></ul><blockquote><p>我们需要捕获一下<code>MethodArgumentNotValidException</code>。该部分内容请参考文章：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一异常处理</a></p></blockquote><ul><li>校验邮箱，单参数校验<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108194014.png" alt="image.png"></li></ul><p><strong>注：单参数校验时我们需要，在方法的类上加上<code>@Validated</code>注解，否则校验不生效。</strong></p><h4 id="嵌套对象的校验"><a href="#嵌套对象的校验" class="headerlink" title="嵌套对象的校验"></a>嵌套对象的校验</h4><p>在<code>UserCreateRequestVO</code>中增加一个<code>address</code>的校验，即需要对嵌套对象进行校验</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * @description: &lt;p>&lt;/p >  * @author: 码农Academy  * @create: 2024/1/8 19:45  */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAddressRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"地址信息中国家长度不能超过16个字符"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"地址信息国家不能为空"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String country<span class="token punctuation">;</span>      <span class="token keyword">private</span> String city<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"详细地址长度不能超过128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String address1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>UserAddressRequestVO</code>中增加<code>address</code>属性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入地址信息"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> UserAddressRequestVO address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法，要在嵌套对象上使用 @Valid 注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入地址信息"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Valid</span>      <span class="token keyword">private</span> UserAddressRequestVO address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109124553.png" alt="image.png"></p><blockquote><p>试了一些其他的方式，好像都不行，有知道其他方式的，欢迎评论区留言探讨</p></blockquote><h3 id="自定义验证注解"><a href="#自定义验证注解" class="headerlink" title="自定义验证注解"></a>自定义验证注解</h3><p>在项目开发中，我们也可以自定义注解去完成我们的字段校验，比如某些枚举值的传递，需要校验枚举值是否合法。在创建自定义注解之前，我们需要了解一下<code>ConstraintValidator</code>以及实现自定义验证注解的原理</p><h4 id="1-ConstraintValidator-接口"><a href="#1-ConstraintValidator-接口" class="headerlink" title="1.ConstraintValidator 接口"></a>1.ConstraintValidator 接口</h4><p><code>ConstraintValidator</code> 是 Java Bean Validation (JSR 380) 规范中用于自定义验证逻辑的接口。它允许你定义针对特定自定义注解的验证规则。它是一个泛型接口，需要提供两个类型参数：</p><ul><li><code>A</code>：是你的自定义注解的类型。</li><li><code>T</code>：是被验证的元素类型，通常是字段类型。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>A constraintAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>T value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>initialize</code> 方法：在验证器初始化时被调用，可以用于获取约束注解中的配置信息。</li><li><code>isValid</code> 方法：执行实际的验证逻辑，返回 <code>true</code> 表示验证通过，<code>false</code> 表示验证失败。</li></ul><p>以下为枚举校验注解的校验规则实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * &lt;p> &lt;/p>  * @author: 码农Academy  * @create: 2024/01/09 3:11 下午  */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>EnumValid<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> Class <span class="token class-name">clazz</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> String validField<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>EnumValid constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>          clazz <span class="token operator">=</span> constraintAnnotation<span class="token punctuation">.</span><span class="token function">enumClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          validField <span class="token operator">=</span> constraintAnnotation<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@SneakyThrows</span>      <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> ConstraintValidatorContext constraintValidatorContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isEnum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          Class<span class="token operator">&lt;</span>Enum<span class="token operator">></span> enumClass <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>Enum<span class="token operator">></span><span class="token punctuation">)</span>clazz<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//获取所有枚举实例  </span>        Enum<span class="token punctuation">[</span><span class="token punctuation">]</span> enumConstants <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 需要比对的字段  </span>        Field field <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>validField<span class="token punctuation">)</span><span class="token punctuation">;</span>          field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>Enum constant <span class="token operator">:</span> enumConstants<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 取值final修饰  </span>            Object validValue <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>constant<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>validValue <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                  Method method <span class="token operator">=</span> enumClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>validField<span class="token punctuation">)</span><span class="token punctuation">;</span>                  validValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>constant<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>validValue <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  validValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span>validValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  object <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Number<span class="token punctuation">)</span> object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>validValue<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建自定义注解"><a href="#2-创建自定义注解" class="headerlink" title="2.创建自定义注解"></a>2.创建自定义注解</h4><p>在 Java Bean Validation 中，约束注解（Constraint Annotation）是通过元注解 <code>@Constraint</code> 来定义的。这个注解包含了以下关键元素：</p><ul><li><code>validatedBy</code>: 指定用于执行验证的 <code>ConstraintValidator</code> 实现类。</li></ul><p>以校验枚举值的合法行为例，我们创建一个<code>EnumValid</code>约束注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>EnumValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> METHOD<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> ANNOTATION_TYPE<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> PARAMETER <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnumValid</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 不合法时 抛出异常信息      */</span>      String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"值不合法"</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 校验的枚举类      * @return      */</span>      Class <span class="token class-name">enumClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> Enum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**      * 对应枚举类中需要比对的字段      * @return      */</span>      String <span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"code"</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-注册-ConstraintValidator"><a href="#3-注册-ConstraintValidator" class="headerlink" title="3.注册 ConstraintValidator"></a>3.注册 ConstraintValidator</h4><p>在大多数情况下，不需要手动注册 <code>ConstraintValidator</code>。当你使用 <code>@Constraint(validatedBy = EnumValidator.class)</code> 注解时，Java Bean Validation 的实现框架会自动发现并注册相应的验证器。但在一些特殊情况下，你可能需要将验证器注册为 Spring 组件或手动配置。比如</p><ul><li><p><strong>需要使用 Spring 管理的组件：</strong> 如果你的验证器需要依赖于 Spring 管理的组件（例如，使用 <code>@Autowired</code> 注解注入其他 bean），那么你可能需要将验证器注册为 Spring bean。这确保了验证器能够正确地使用 Spring 的依赖注入机制。</p></li><li><p><strong>需要通过属性文件进行配置：</strong> 如果你的验证器需要配置属性，而这些属性需要从 Spring 的 <code>application.properties</code> 或 <code>application.yml</code> 文件中获取，那么将验证器注册为 Spring bean 可以更容易地实现这一点。</p></li><li><p><strong>需要在验证器中使用 Spring AOP：</strong> 如果你希望在验证逻辑中使用 Spring AOP 切面，以便添加额外的逻辑或跟踪行为，那么将验证器注册为 Spring bean 可以让你更容易集成这些方面。<br>这种方式可以运用到一些业务校验中，比如账户注册时用户名称不能重复。定义一个校验用户唯一的注解<code>@UniqueUser</code>。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>UniqueUserValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> METHOD<span class="token punctuation">,</span> FIELD<span class="token punctuation">,</span> ANNOTATION_TYPE<span class="token punctuation">,</span> CONSTRUCTOR<span class="token punctuation">,</span> PARAMETER <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RUNTIME<span class="token punctuation">)</span>  <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">UniqueUser</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 不合法时 抛出异常信息      */</span>      String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"值不合法"</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义一个业务的<code>Validator</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniqueUserValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>UniqueUser<span class="token punctuation">,</span> UserCreateRequestVO<span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>UserCreateRequestVO value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> String userName <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> UserDO userDO <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">selectUserByName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">final</span> String userId <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> userDO <span class="token operator">==</span> null<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> userDO <span class="token operator">==</span> null <span class="token operator">||</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userDO<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserRepository</span><span class="token punctuation">(</span>UserRepository userRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository <span class="token operator">=</span> userRepository<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建用户的接口中使用<code>@UniqueUser</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 创建用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@UniqueUser</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名称已存在"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟当用户名存在时，校验不通过</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109191920.png" alt="image.png"></p><blockquote><p>此时会抛出<code>javax.validation.ConstraintViolationException</code>。异常统一处理请参考：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一异常处理</a></p></blockquote><h4 id="4-自定义校验注解使用"><a href="#4-自定义校验注解使用" class="headerlink" title="4.自定义校验注解使用"></a>4.自定义校验注解使用</h4><p>我们创建一个性别的枚举类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @version 1.0  * @description: &lt;p>&lt;/p >  * @author: 码农Academy  * @create: 2024/1/9 16:07  */</span>  <span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> SexEnum <span class="token punctuation">{</span>      <span class="token function">MAN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">WOMAN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> String desc<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们在入参中增加<code>sex</code>字段，并使用<code>@EmunValid</code>注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度最大为128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请填写正确的邮箱地址"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String email<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须大于18岁"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须小于60岁"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入性别"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@EnumValid</span><span class="token punctuation">(</span>enumClass <span class="token operator">=</span> SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"输入性别不合法"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer sex<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入你的兴趣爱好"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"兴趣爱好最多可以输入5个"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>      <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"体重必须大于50KG"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> BigDecimal weight<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109161520.png" alt="image.png"></p><h3 id="分组验证"><a href="#分组验证" class="headerlink" title="分组验证"></a>分组验证</h3><p>在一个应用中，同一个实体类可能会被用于不同的场景，比如用户创建、用户更新、用户删除等。每个场景对于字段的要求可能不同，有些字段在某个场景下需要验证，而在另一个场景下不需要。不同的业务操作可能对同一实体的验证有不同的需求。例如，在用户创建时可能强调用户名和密码的合法性，而在用户更新时可能更关心其他信息的完整性。</p><p>开发中我们针对这种情况，在不知道分组校验的知识时，通常采取的都是对应不同的场景或者业务创建不同的入参实体，比如创建用户<code>UserCreateRequestVO</code>，更新用户<code>UserUpdateRequestVO</code>，删除用户<code>UserDeleteRuquestVO</code>，在不同的实体中根据业务场景设置不同的校验规则。这样做虽然也可以，但是会造成类的膨胀，业务的重复实现。</p><p>而实际上用分组校验可以让你根据场景以及业务的差异性，有选择地执行特定组的验证规则。</p><h4 id="1-定义验证分组接口"><a href="#1-定义验证分组接口" class="headerlink" title="1.定义验证分组接口"></a>1.定义验证分组接口</h4><p>我们定义两个分组接口<code>CreateUserGroup</code>（用户创建组）,<code>UpdateUserGroup</code>（用户更新组）,分别继承<code>javax.validation.groups.Default</code>，标识不同的业务场景。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CreateUserGroup</span> <span class="token keyword">extends</span> <span class="token class-name">Default</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UpdateUserGroup</span> <span class="token keyword">extends</span> <span class="token class-name">Default</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分组校验的使用"><a href="#2-分组校验的使用" class="headerlink" title="2.分组校验的使用"></a>2.分组校验的使用</h4><p>在 Bean Validation 中，分组校验是通过在验证注解上指定 <code>groups</code> 属性来实现的。这个属性允许你为验证规则分配一个或多个验证组。我们设定用户创建时不传递用户ID，其余的参数必传，用户更新接口必须传递用户ID，可以不传递用户名，其他参数必须传递。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCreateRequestVO</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请选择用户"</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> UpdateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userId<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">,</span> groups <span class="token operator">=</span> CreateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户名长度最大为128个字符"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请填写正确的邮箱地址"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> String email<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须大于18岁"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"用户年龄必须小于60岁"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入性别"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@EnumValid</span><span class="token punctuation">(</span>enumClass <span class="token operator">=</span> SexEnum<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"输入性别不合法"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> Integer sex<span class="token punctuation">;</span>      <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"请输入你的兴趣爱好"</span><span class="token punctuation">)</span>      <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"兴趣爱好最多可以输入5个"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span>      <span class="token annotation punctuation">@DecimalMin</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">,</span> inclusive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"体重必须大于50KG"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> BigDecimal weight<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>指定了分组的校验规则，分别在对应的分组校验中生效，没有指定分组使用默认分组<code>Default</code>，即对所有的校验都生效。</p></blockquote><h4 id="3-在接口中使用分组"><a href="#3-在接口中使用分组" class="headerlink" title="3.在接口中使用分组"></a>3.在接口中使用分组</h4><p>使用 <code>@Validated</code> 注解，并指定要执行的验证组。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Validated</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 创建用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"create"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>value <span class="token operator">=</span> CreateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 更新用户      * @param requestVO      * @return      */</span>      <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> ResultResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span><span class="token punctuation">(</span>value <span class="token operator">=</span> UpdateUserGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestBody</span> UserCreateRequestVO requestVO<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> ResultResponse<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们指定create接口指定CreateUserGroup分组，update接口指定UpdateUserGroup</p></blockquote><p>测试接口如下：</p><ul><li><p>创建用户<code>create</code>接口<br>因为<code>userId</code>可以不传递，接口可以校验通过<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109171342.png" alt="image.png"></p></li><li><p>更新用户<code>update</code>接口<br>因为必须传递<code>userId</code>, 我们不传时校验不通过，提示选择用户<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109171552.png" alt="image.png"></p></li></ul><p>传递<code>userId</code>，不传递<code>userName</code>时，校验通过<br><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240109171703.png" alt="image.png"></p><h3 id="处理验证错误"><a href="#处理验证错误" class="headerlink" title="处理验证错误"></a>处理验证错误</h3><p>由上述测试结果中，可以看出接口抛出的一场结果并不是很友好，我们需要统一的处理一下异常以及返回结果，给予用户友好提示。具体实现，在这里不再赘述，可以移步：<a href="https://www.coderacademy.online/article/springbootcommonresponse.html">SpringBoot统一异常处理</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring Boot Validation通过简化验证流程、集成Bean Validation规范、支持分组验证以及提供友好的错误处理，为Java应用开发者提供了强大而灵活的数据验证机制。最佳实践包括在控制器层使用<code>@Validated</code>注解、合理利用各种验证注解、使用自定义验证注解解决特定业务需求，确保代码清晰简洁、符合规范，并提高系统的可维护性和用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringBoot Validation </tag>
            
            <tag> SpringBoot参数校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java基础（三）之Java虚拟机类加载机制探究：生命周期、初始化、使用与验证</title>
      <link href="/article/jvmclassloader.html"/>
      <url>/article/jvmclassloader.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="一、java虚拟机与程序的生命周期"><a href="#一、java虚拟机与程序的生命周期" class="headerlink" title="一、java虚拟机与程序的生命周期"></a>一、java虚拟机与程序的生命周期</h3><p>在如下几种情况之下，java虚拟机将结束生命周期：</p><ul><li>执行了<code>System.exit()</code>方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或者错误而异常终止</li><li>由于操作系统用出现错误而导致java虚拟机进程终止<h3 id="二、类的加载，链接，初始化"><a href="#二、类的加载，链接，初始化" class="headerlink" title="二、类的加载，链接，初始化"></a>二、类的加载，链接，初始化</h3><h4 id="2-1-加载：查找并加载类的二进制数据"><a href="#2-1-加载：查找并加载类的二进制数据" class="headerlink" title="2.1 加载：查找并加载类的二进制数据"></a>2.1 加载：查找并加载类的二进制数据</h4></li></ul><p>类加载器并不需要某个类被首次主动使用时再加载他。JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(<code>LinkageError</code>错误)。如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。类被加载后，就进入连接阶段。</p><h4 id="2-2-连接："><a href="#2-2-连接：" class="headerlink" title="2.2 连接："></a>2.2 连接：</h4><p>将已经读入到内存的类的二进制数据合并到虚拟机的运行时环境中去。然后要经过一系列的验证。</p><h5 id="2-2-1-验证：确保被加载的类的正确性（验证字节码）"><a href="#2-2-1-验证：确保被加载的类的正确性（验证字节码）" class="headerlink" title="2.2.1 验证：确保被加载的类的正确性（验证字节码）"></a>2.2.1 验证：确保被加载的类的正确性（验证字节码）</h5><ul><li>类文件的结构检查：确保类文件遵从java类文件的固定格式。</li><li>语义检查：确保类本身符合java语言的语法规定，比如验证final类型的类没有子类，以及final类型的方法没有被覆盖。（虽然编译时就可以发现错误，但不经过编译，手动生成class文件，那么就会发现不了final类型的方法被覆盖，但是语义检查就可以发现）</li><li>字节码验证：确保字节码流可以被java虚拟机安全的执行。字节码流代表java方法（报空静态方法和实例方法），它是由被称作操作码的单字节指令组成的序列，每一个操作码后跟着一个或多个操作数。字节码验证步骤会检查每个操作码是否合法，即是否有着合法的操作数。</li><li>二进制兼容性的验证：确保相互引用的类之间的协调一致，例如在<code>Wroker</code>类的<code>gotoWork()</code>方法中会调用Car类的run()方法。java虚拟机在验证work()类时，会检查在方法区内是否存在Car类的run()方法，假如不存在（当worker类和Car类的版本不兼容，就会出现这种问题），就会抛出<code>NoSuchMethodError</code>方法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wroker</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gotoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这段代码在worker类的二进制数据中表示为符号引用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-准备：为类的静态变量分配内存，并将其初始化为默认"><a href="#2-2-准备：为类的静态变量分配内存，并将其初始化为默认" class="headerlink" title="2.2 准备：为类的静态变量分配内存，并将其初始化为默认"></a>2.2 准备：为类的静态变量分配内存，并将其初始化为默认</h5><p>在准备阶段，Java虚拟机为类的静态变量分配内存，并设置默认的初始值。例如对于一下Sample类，在准备阶端，将为int类型的静态变量a分配4个字节的内存空间，并且赋予默认值0，为long类型的静态变量b分配8个字节的内存空间，并且赋予默认值0。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-解析：把类中的符号引用转换为直接引用"><a href="#2-3-解析：把类中的符号引用转换为直接引用" class="headerlink" title="2.3  解析：把类中的符号引用转换为直接引用"></a>2.3  解析：把类中的符号引用转换为直接引用</h5><p>在解析阶段，java虚拟机会把类的二进制数据中的符号引用替换为直接引用。例如在Worker类的gotoWork()方法中会引用Car类的run()方法。</p><p>在Worker类中的二进制数据中，包含了一个对Car类的run()方法的符号引用，它由run()方法的全名和相关描述符组成。在解析阶段，Java虚拟机会把这个符号替换为一个指针，该指针指向Car类的run()方法在方法区内的内存位置。这个指针就是直接引用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wroker</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gotoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这段代码在worker类的二进制数据中表示为符号引用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-初始化：为类的静态成员变量赋予正确的初始值"><a href="#2-3-初始化：为类的静态成员变量赋予正确的初始值" class="headerlink" title="2.3 初始化：为类的静态成员变量赋予正确的初始值"></a>2.3 初始化：为类的静态成员变量赋予正确的初始值</h4><p>在初始化阶段，java虚拟机执行类的初始化语句，为类的静态变量赋予初始值。在程序中，静态变量初始化有两种途径：</p><ul><li>在静态变量的声明处进行初始化</li><li>在静态代码快中进行初始化。例如在以下代码中，静态变量a和b都被显示初始化，而静态变量c没有被显示初始化，它将保持默认值为0；但是如果要使用c，则必须进行初始化。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在静态变量声明出进行初始化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//但是如果要使用c，则必须进行初始化</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在静态代码块中进行初始化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton singleton<span class="token operator">=</span>Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"counter1= "</span><span class="token operator">+</span>singleton<span class="token punctuation">.</span>counter1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"counter2= "</span><span class="token operator">+</span>singleton<span class="token punctuation">.</span>counter2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***程序是从上向下顺序执行* new Singleton()时，counter1，counter2初始值均为0* 在通过构造方法Singleton()，均加1.则返回的值counter1，counter2均为1* 然后再程序在继续向下执行，由于counter1没有显示初始化，则值还是为1* 但是counter2经过显示初始化后，其值为0* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new语句在这是结果为counter1= 1；counter2= 0</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//private static Singleton singleton=new Singleton();//new语句在这是结果为counter1= 1；counter2= 1</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        counter1<span class="token operator">++</span><span class="token punctuation">;</span>        counter2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态变量的声明语句，以及静态代码块都被看做类的初始化语句，java虚拟机会按照初始化语句在类文件中的先后顺序来一次执行他们。</li><li>类的初始化步骤</li><li>假如这个类还没有被加载和连接，那就先进行加载和连接</li><li>假如类存在直接的父类，并且这个父类还没有被初始化，那就先初始化直接的父类。</li><li>假如父类中存在初始化语句，那就依次执行这些初始化语句。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 当X=6/3时，编译时即可算出X=2，即编译时常量，即不需要运行类，所以不打印静态代码块中的内容*当X=new Random().nextInt(100)时，编译时不能算出X的值，只有运行程序才知道，所以打印结果为：FinalTest static final 2* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X<span class="token operator">=</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印结果： 2</span>    <span class="token comment" spellcheck="true">//public static final int X=new Random().nextInt(100);//打印结果为FinalTest static final 2</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FinalTest static final"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类的初始化时机：当java虚拟机初始化一个类时，要求他的所有父类都已经被初始化，但是这条规则并不适用于接口。</li><li>在初始化一个类时，并不先初始化它所实现的接口</li><li>在初始化一个接口时，并不会先初始化他的父接口<br>因此，一个父接口并不会因为他的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test4 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Test4 static block* Parent static block* Child static block* 4* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如以下示例赋值的执行流程：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//首先在准备阶段java虚拟在内存中为a分配内存，int的初始值是0，所以此时a的值是0；在初始化阶段，给赋值为3</span><span class="token comment" spellcheck="true">//相当于：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从上到下执行</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108225351.png" alt="image.png"></p><h3 id="三、java程序对类的使用方式可分为两种："><a href="#三、java程序对类的使用方式可分为两种：" class="headerlink" title="三、java程序对类的使用方式可分为两种："></a>三、java程序对类的使用方式可分为两种：</h3><h4 id="3-1-主动使用"><a href="#3-1-主动使用" class="headerlink" title="3.1 主动使用"></a>3.1 主动使用</h4><ul><li>创建类的实例。比如：<code>new Test()</code></li><li>访问某个类或者接口的静态变量，或者对该静态变量赋值。比如：<code>int b=Test.a</code></li><li>调用类的静态方法。例如：<code>Test.doSomething()</code>;</li><li>反射(如<code>class.forName(&quot;com.jvm.classloader.test&quot;)</code>)</li><li>初始化一个类的子类(对父类的主动使用)。例如</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>java虚拟机启动时被表明为启动类的类</li></ul><p>程序中对子类的“主动使用”会导致父类被初始化，但对父类的“主动使用”并不会导致子类初始化，不可能说生成一个Object类的对象就导致系统中所有的子类都会被初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test5</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test5 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Parent2 parent<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Parent2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Test5 static block* -------------* Parent2 static block* 3* Child2 static block* 4**/</span><span class="token keyword">class</span> <span class="token class-name">Parent2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent2 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child2</span> <span class="token keyword">extends</span> <span class="token class-name">Parent2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child2 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当程序访问的静态变量或静态方法确实在当前接口定义时，才可以认为是对类或接口的主动使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child3<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        Child3<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Parent3 static block* 3* doSomething* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Parent3</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent3 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child3</span> <span class="token keyword">extends</span> <span class="token class-name">Parent3</span><span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child3 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>ClassLoader</code>类的<code>loadClass</code>方法加载一个类，并不是对类的主动使用，不会导致类的初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        ClassLoader loader<span class="token operator">=</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token operator">=</span>loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** ------------------------*Z static block* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Z</span><span class="token punctuation">{</span>  <span class="token keyword">static</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Z static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-被动使用"><a href="#3-2-被动使用" class="headerlink" title="3.2 被动使用"></a>3.2 被动使用</h4><p> 除去以上六种主动使用以外的使用都是被动使用，都不会导致类的初始化。所有的java虚拟机实现必须在每个类或接口被java程序首次主动使用时才初始化他们。<br>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其方法存进运行时数据区的方法区内。然后在堆区创建一个Java.lang.Class对象，用来封装在类在方法区内的数据结构。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108223927.png" alt="image.png"></p><h3 id="四、-加载class文件的方式"><a href="#四、-加载class文件的方式" class="headerlink" title="四、 加载class文件的方式"></a>四、 加载class文件的方式</h3><h4 id="4-1-本地系统中直接加载"><a href="#4-1-本地系统中直接加载" class="headerlink" title="4.1 本地系统中直接加载"></a>4.1 本地系统中直接加载</h4><ul><li>通过网络下载.class文件(<code>java.net.URLClassLoader(URL[] urls)</code>)</li><li>从zip，jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将java源文件动态编译为.class文件。<br>类的加载的最终产品是位于堆区中的Class对象。Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。<h4 id="4-2、两种类型的类加载器"><a href="#4-2、两种类型的类加载器" class="headerlink" title="4.2、两种类型的类加载器"></a>4.2、两种类型的类加载器</h4><h5 id="4-2-1-Java虚拟机自带的加载器"><a href="#4-2-1-Java虚拟机自带的加载器" class="headerlink" title="4.2.1 Java虚拟机自带的加载器"></a>4.2.1 Java虚拟机自带的加载器</h5></li><li>根类加载器(<code>Bootstrap</code>)。使用C++编写，程序员无法在java代码中获得该类。</li><li>扩展类加载器（<code>Extension</code>），使用java代码实现</li><li>系统类加载器(<code>System</code>)，应用加载器，使用java代码实现<h5 id="4-2-2-用户自定义的类加载器"><a href="#4-2-2-用户自定义的类加载器" class="headerlink" title="4.2.2 用户自定义的类加载器"></a>4.2.2 用户自定义的类加载器</h5></li><li><code>java.lang.ClassLoader</code>的子类</li><li>用户可以定制类的加载方式<br><code>public ClassLoader getClassLoader()</code>方法。针对这个类返回一个个加载器，但是某些实现可能会返回null代表根类加载器。如果使用根类加载器加载类，那么这个方法就会返回null；例：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootStrapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader loader<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * 打印结果为null        */</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz2</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader loader2<span class="token operator">=</span>clazz2<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * 打印结果为：sun.misc.Launcher$AppClassLoader@54a5f709 应用加载器         */</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loader2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java核心基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Java类加载 </tag>
            
            <tag> java核心基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工具类（二）之深入Guava集合操作</title>
      <link href="/article/7cd2c424.html"/>
      <url>/article/7cd2c424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><h2 id="深入Guava集合操作"><a href="#深入Guava集合操作" class="headerlink" title="深入Guava集合操作"></a>深入Guava集合操作</h2><p>在Java开发中，Google Guava库是处理集合的强大工具。起源于Google内部需求，Guava以简洁性、性能优化为理念，提供高效不可变集合和实用工具类。本文深入剖析Guava的核心功能，为开发者呈现集合操作的全新视角，无论经验水平，都能获得实用技巧和深刻见解。</p><h3 id="一、不可变集合"><a href="#一、不可变集合" class="headerlink" title="一、不可变集合"></a>一、不可变集合</h3><h4 id="1、为什么使用不可变集合"><a href="#1、为什么使用不可变集合" class="headerlink" title="1、为什么使用不可变集合"></a>1、为什么使用不可变集合</h4><p>不可变对象有很多优点，包括： </p><ul><li>当对象被不可信的库调用时，不可变形式是安全的；</li><li>不可变对象被多个线程调用时，不存在竞态条件问题</li><li>可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；</li><li>不可变对象因为有固定不变，可以作为常量来安全使用。</li></ul><h4 id="2、创建不可变集合的方式："><a href="#2、创建不可变集合的方式：" class="headerlink" title="2、创建不可变集合的方式："></a>2、创建不可变集合的方式：</h4><ul><li>copyOf方法，如ImmutableSet.copyOf(set);</li><li>of方法，如ImmutableSet.of(“a”, “b”, “c”)或 ImmutableMap.of(“a”, 1, “b”, 2); </li><li>Builder工具，如：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutableSet<span class="token operator">&lt;</span>String<span class="token operator">></span> SET <span class="token operator">=</span>             ImmutableSet<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，对有序不可变集合来说，排序是在构造集合的时候完成的，如： <code>ImmutableSortedSet.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;);</code></p><p>会在构造时就把元素排序为a, b, c, d。</p><h4 id="3、asList视图"><a href="#3、asList视图" class="headerlink" title="3、asList视图"></a>3、asList视图</h4><p>所有不可变集合都有一个asList()方法提供ImmutableList视图，来帮助你用列表形式方便地读取集合元素。例如，你可以使用sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。</p><p>asList()返回的ImmutableList通常是——并不总是——开销稳定的视图实现，而不是简单地把元素拷贝进List。也就是说，asList返回的列表视图通常比一般的列表平均性能更好，比如，在底层集合支持的情况下，它总是使用高效的contains方法。</p><h3 id="二、关联可变集合和不可变集合"><a href="#二、关联可变集合和不可变集合" class="headerlink" title="二、关联可变集合和不可变集合"></a>二、关联可变集合和不可变集合</h3><table><thead><tr><th>可变集合接口</th><th>属于JDK还是Guava</th><th>不可变版本</th></tr></thead><tbody><tr><td>Collection</td><td>JDK</td><td>ImmutableCollection</td></tr><tr><td>List</td><td>JDK</td><td>ImmutableList</td></tr><tr><td>Set</td><td>JDK</td><td>ImmutableSet</td></tr><tr><td>SortedSet/NavigableSet</td><td>JDK</td><td>ImmutableSortedSet</td></tr><tr><td>Map</td><td>JDK</td><td>ImmutableMap</td></tr><tr><td>SortedMap</td><td>JDK</td><td>ImmutableSortedMap</td></tr><tr><td>Multiset</td><td>Guava</td><td>ImmutableMultiset</td></tr><tr><td>SortedMultiset</td><td>Guava</td><td>ImmutableSortedMultiset</td></tr><tr><td>Multimap</td><td>Guava</td><td>ImmutableMultimap</td></tr><tr><td>ListMultimap</td><td>Guava</td><td>ImmutableListMultimap</td></tr><tr><td>SetMultimap</td><td>Guava</td><td>ImmutableSetMultimap</td></tr><tr><td>BiMap</td><td>Guava</td><td>ImmutableBiMap</td></tr><tr><td>ClassToInstanceMap</td><td>Guava</td><td>ImmutableClassToInstanceMap</td></tr><tr><td>Table</td><td>Guava</td><td>ImmutableTable</td></tr></tbody></table><h3 id="三、新集合类型"><a href="#三、新集合类型" class="headerlink" title="三、新集合类型"></a>三、新集合类型</h3><h4 id="1、Multiset"><a href="#1、Multiset" class="headerlink" title="1、Multiset"></a>1、Multiset</h4><p>Multiset可以多次添加相等元素，集合[set]概念的延伸，它的元素可以重复出现…与集合[set]相同而与元组[tuple]相反的是，Multiset元素的顺序是无关紧要的：Multiset {a, a, b}和{a, b, a}是相等的</p><p>可以用两种方式看待Multiset：</p><ul><li>没有元素顺序限制的ArrayList</li><li>Map&lt;E, Integer&gt;，键为元素，值为计数<h5 id="（1）、常见方法"><a href="#（1）、常见方法" class="headerlink" title="（1）、常见方法"></a>（1）、常见方法</h5></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int count(E)</td><td>给定元素在Multiset中的计数</td></tr><tr><td>Set&lt;E&gt; elementSet()</td><td>Multiset中不重复元素的集合，类型为Set&lt;E&gt;</td></tr><tr><td>Set&lt;Multiset.Entry&lt;E&gt;&gt; entrySet()</td><td>和Map的entrySet类似，返回Set&lt;Multiset.Entry&lt;E&gt;&gt;，其中包含的Entry支持getElement()和getCount()方法</td></tr><tr><td>int add(E, int)</td><td>增加给定元素在Multiset中的计数</td></tr><tr><td>boolean add(E element)</td><td>增加一个指定的元素到multiset</td></tr><tr><td>boolean contains(E element)</td><td>判断此多集中是否包含指定的元素</td></tr><tr><td>boolean containsAll(Collection&lt;\?&gt; elements)</td><td>判断此多集至少包含一个出现指定集合的所有元素</td></tr><tr><td>remove(E, int)</td><td>减少给定元素在Multiset中的计数,删除指定元素</td></tr><tr><td>removeAll(Collection&lt;?&gt; c)</td><td>删除包含在指定集合中的元素</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; e)</td><td>保持包含指定集合中的元素</td></tr><tr><td>int setCount(E, int)</td><td>设置给定元素在Multiset中的计数，不可以为负数，添加/删除指定元素，使其达到所期望的元素个数</td></tr><tr><td>int size()</td><td>返回集合元素的总个数（包括重复的元素）</td></tr><tr><td>Iterator iterator()</td><td>返回一个迭代器，包含Multiset的所有元素（包括重复的元素）</td></tr></tbody></table><h5 id="2-、示例"><a href="#2-、示例" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * MultiSet     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiSetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Multiset<span class="token operator">&lt;</span>String<span class="token operator">></span> multiset <span class="token operator">=</span> HashMultiset<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multiset<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multiset的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> multiset<span class="token punctuation">.</span><span class="token function">elementSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不重复元素："</span><span class="token operator">+</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> multiset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multiset元素："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Multiset<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token operator">>></span> entrySet <span class="token operator">=</span>  multiset<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> setMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entrySet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            setMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素详情："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>setMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multiset<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除a后，a的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含List："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含List："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）、SortedMultiset"><a href="#（3）、SortedMultiset" class="headerlink" title="（3）、SortedMultiset"></a>（3）、SortedMultiset</h5><p>SortedMultiset是Multiset 接口的变种，它支持高效地获取指定范围的子集</p><h4 id="2、MultiMap"><a href="#2、MultiMap" class="headerlink" title="2、MultiMap"></a>2、MultiMap</h4><p>Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。 可以用两种方式思考Multimap的概念：”键-单个值映射”的集合：<br>a -&gt; 1 a -&gt; 2 a -&gt;4 b -&gt; 3 c -&gt; 5<br>或者”键-值集合映射”的映射：<br>a -&gt; [1, 2, 4] b -&gt; 3 c -&gt; 5<br>一般来说，Multimap接口应该用第一种方式看待，但asMap()视图返回Map&lt;K, Collection&gt;，让你可以按另一种方式看待Multimap。重要的是，不会有任何键映射到空集合：一个键要么至少到一个值，要么根本就不在Multimap中。 很少会直接使用Multimap接口，更多时候你会用ListMultimap或SetMultimap接口，它们分别把键映射到List或Set。</p><h5 id="1-、常用方法"><a href="#1-、常用方法" class="headerlink" title="(1)、常用方法"></a>(1)、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th><th>等价于</th></tr></thead><tbody><tr><td>boolean put(K, V)</td><td>添加键到单个值的映射</td><td>multimap.get(key).add(value)</td></tr><tr><td>boolean putAll(K, Iterable&lt;V&gt;)</td><td>依次添加键到多个值的映射</td><td>Iterables.addAll(multimap.get(key), values)</td></tr><tr><td>remove(K, V)</td><td>移除键到值的映射；如果有这样的键值并成功移除，返回true。</td><td>multimap.get(key).remove(value)</td></tr><tr><td>removeAll(K)</td><td>清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。</td><td>multimap.get(key).clear()</td></tr><tr><td>replaceValues(K, Iterable&lt;V&gt;)</td><td>清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。</td><td>multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)</td></tr><tr><td>Map&lt;K,Collection&lt;V&gt;&gt; asMap()</td><td>获取MultiMap的视图，键值K，以及K对应的集合</td><td></td></tr><tr><td>void clear()</td><td>清除所有的键值对</td><td></td></tr><tr><td>boolean containsEntry(Object key,Object value)</td><td>判断是否包含key-value对应的键值对</td><td></td></tr><tr><td>boolean containsKey(Object key)</td><td>判断是否包含键值key</td><td></td></tr><tr><td>boolean containsValue(Object value)</td><td>判断是否包含值value</td><td></td></tr><tr><td>Collection&lt;Map.Entry&lt;K,V&gt;&gt; entries()</td><td>MultiMap为Map&lt;Entry&gt;情况下，返回所有的键值对集合</td><td></td></tr><tr><td>Collection&lt;V&gt; get(K k)</td><td>返回键k对应的所有集合</td><td></td></tr><tr><td>boolean isEmpty()</td><td>判断MultiMap是否是空，即不包含键值对</td><td></td></tr><tr><td>MultiSet&lt;K&gt; keys()</td><td>返回所有的键值K，包含重复</td><td></td></tr><tr><td>Set&lt;K&gt; keySet()</td><td>返回所有的键值K，不重复</td><td></td></tr><tr><td>int size()</td><td>返回键值对的数量</td><td></td></tr><tr><td>Collection&lt;V&gt; values</td><td>返回所有的value</td><td></td></tr></tbody></table><h5 id="2-、示例-1"><a href="#2-、示例-1" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * MultiMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Multimap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> multimap <span class="token operator">=</span> HashMultimap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> asMap <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"asMap视图："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>asMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Multiset<span class="token operator">&lt;</span>String<span class="token operator">></span> multisetKey <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的key:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multisetKey<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不重复的key："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>keySet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lower:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加后的lower:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"upper:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除元素后的upper："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含lower-b:"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsEntry</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含lower-b:"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsEntry</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含key(upper):"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含value(c):"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> collection <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MultiMap详情："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MultiMap所有的value："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-、Multimap不是Map"><a href="#3-、Multimap不是Map" class="headerlink" title="(3)、Multimap不是Map"></a>(3)、Multimap不是Map</h5><p>Multimap&lt;K, V&gt;不是Map&lt;K,Collection&gt;，虽然某些Multimap实现中可能使用了map。它们之间的显著区别包括：</p><ul><li><p>Multimap.get(key)总是返回非null、但是可能空的集合。这并不意味着Multimap为相应的键花费内存创建了集合，而只是提供一个集合视图方便你为键增加映射值——译者注：如果有这样的键，返回的集合只是包装了Multimap中已有的集合；如果没有这样的键，返回的空集合也只是持有Multimap引用的栈对象，让你可以用来操作底层的Multimap。因此，返回的集合不会占据太多内存，数据实际上还是存放在Multimap中。</p></li><li><p>如果你更喜欢像Map那样，为Multimap中没有的键返回null，请使用asMap()视图获取一个Map&lt;K, Collection&lt;V&gt;&gt;。（或者用静态方法Multimaps.asMap()为ListMultimap返回一个Map&lt;K, List&lt;V&gt;&gt;。对于SetMultimap和SortedSetMultimap，也有类似的静态方法存在）</p></li><li><p>当且仅当有值映射到键时，Multimap.containsKey(key)才会返回true。尤其需要注意的是，如果键k之前映射过一个或多个值，但它们都被移除后，Multimap.containsKey(key)会返回false。</p></li><li><p>Multimap.entries()返回Multimap中所有”键-单个值映射”——包括重复键。如果你想要得到所有”键-值集合映射”，请使用asMap().entrySet()。</p></li><li><p>Multimap.size()返回所有”键-单个值映射”的个数，而非不同键的个数。要得到不同键的个数，请改用Multimap.keySet().size()。</p><h5 id="4-、Multimap的各种实现"><a href="#4-、Multimap的各种实现" class="headerlink" title="(4)、Multimap的各种实现"></a>(4)、Multimap的各种实现</h5></li></ul><table><thead><tr><th>实现</th><th>键行为类似</th><th>值行为类似</th></tr></thead><tbody><tr><td>ArrayListMultimap</td><td>HashMap</td><td>ArrayList</td></tr><tr><td>HashMultimap</td><td>HashMap</td><td>HashSet</td></tr><tr><td><em>LinkedListMultimap</em></td><td><em>LinkedHashMap</em></td><td><em>LinkedList</em></td></tr><tr><td><em>LinkedHashMultimap</em></td><td>LinkedHashMap</td><td>LinkedHashMap</td></tr><tr><td>TreeMultimap</td><td>TreeMap</td><td>TreeSet</td></tr><tr><td>ImmutableListMultimap</td><td>ImmutableMap</td><td>ImmutableList</td></tr><tr><td>ImmutableSetMultimap</td><td>ImmutableMap</td><td>ImmutableSet</td></tr></tbody></table><p>除了两个不可变形式的实现，其他所有实现都支持null键和null值</p><ul><li><p>LinkedListMultimap.entries()保留了所有键和值的迭代顺序。详情见doc链接。</p></li><li><p>LinkedHashMultimap保留了映射项的插入顺序，包括键插入的顺序，以及键映射的所有值的插入顺序。 请注意，并非所有的Multimap都和上面列出的一样，使用Map&lt;K, Collection&lt;V&gt;&gt;来实现（特别是，一些Multimap实现用了自定义的hashTable，以最小化开销）</p></li></ul><h4 id="3、BiMap"><a href="#3、BiMap" class="headerlink" title="3、BiMap"></a>3、BiMap</h4><p>BiMap&lt;K, V&gt;是特殊的Map：</p><ul><li>可以用 inverse()反转BiMap&lt;K, V&gt;的键值映射</li><li>保证值是唯一的，因此 values()返回Set而不是普通的Collection</li></ul><p>在BiMap中，如果你想把键映射到已经存在的值，会抛出IllegalArgumentException异常。</p><h5 id="（1）、常用方法"><a href="#（1）、常用方法" class="headerlink" title="（1）、常用方法"></a>（1）、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>V forcePut(String key, V value)</td><td>对于特定的值，强制替换它的键</td></tr><tr><td>BiMap&lt;K,V&gt; inverse()</td><td>k-v键值对的转换，即v-k</td></tr><tr><td>V put&lt;K key,V value&gt;</td><td>关联v到k</td></tr><tr><td>void putAll(Map&lt;\? extend k,\? extend V&gt; map)</td><td>将map加入到BiMap</td></tr><tr><td>Set values()</td><td>返回BiMap映射中包含的Collection视图</td></tr><tr><td>##### (2)、BiMap的各种实现</td><td></td></tr></tbody></table><table><thead><tr><th>键–值实现</th><th>值–键实现</th><th>对应的BiMap实现</th></tr></thead><tbody><tr><td>HashMap</td><td>HashMap</td><td>HashBiMap</td></tr><tr><td>ImmutableMap</td><td>ImmutableMap</td><td>ImmutableBiMap</td></tr><tr><td>EnumMap</td><td>EnumMap</td><td>EnumBiMap</td></tr><tr><td>EnumMap</td><td>HashMap</td><td>EnumHashBiMap</td></tr></tbody></table><h5 id="（3）、示例"><a href="#（3）、示例" class="headerlink" title="（3）、示例"></a>（3）、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * BiMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">biMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BiMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> biMap <span class="token operator">=</span> HashBiMap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换后所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v <span class="token operator">=</span> biMap<span class="token punctuation">.</span><span class="token function">forcePut</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换的值："</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、Table"><a href="#4、Table" class="headerlink" title="4、Table"></a>4、Table</h4><p>Table是Guava提供的一个接口 Interface Table&lt;R,C,V&gt;，由rowKey+columnKey+value组成 它有两个键，一个值，和一个n行三列的数据表类似，n行取决于Table对对象中存储了多少个数据。</p><h5 id="（1）、常用方法-1"><a href="#（1）、常用方法-1" class="headerlink" title="（1）、常用方法"></a>（1）、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Set&lt;Table.Cell&lt;R,C,V&gt;&gt; cellSet()</td><td>返回集合中的行键，列键，值三元组</td></tr><tr><td>void clear()</td><td>清除所有的键值对</td></tr><tr><td>Map&lt;R,V&gt; column(C columnKey)</td><td>获取列键对应的键值对</td></tr><tr><td>Map&lt;C,V&gt; row(R row)</td><td>获取行键对应的列以及值</td></tr><tr><td>Set&lt;C&gt; columnKeySet()</td><td>获取所有的列键</td></tr><tr><td>Set&lt;R&gt; rowKeySet()</td><td>获取行键</td></tr><tr><td>Map&lt;C,Map&lt;R,V&gt;&gt; columnMap</td><td>返回列键对应的行键-值的视图</td></tr><tr><td>boolean contains(Object rowKey,Object columnKey)</td><td>判断是否包含指定的行键，列键</td></tr><tr><td>boolean containsColumn(Object columnKey)</td><td>判断是否包含指定的列键</td></tr><tr><td>boolean containsRow(Object rowKey)</td><td>判断是否包含指定的行键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断是否包含值</td></tr><tr><td>V get(Object rowKey,Object columnKey)</td><td>返回指定的行键，列键对应的值，不存在则返回null</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>V put(Object rowKey,Object columnKey,Object value)</td><td>put值</td></tr><tr><td>void putAll(Table&lt;\? extend R,? extend C,? extend V&gt; table)</td><td>put指定的table</td></tr><tr><td>V remove(Object rowKey,Object columnKey)</td><td>如果有，则移除指定行键，列键</td></tr><tr><td>Map&lt;R,Map&lt;C,V&gt;&gt; rowMap()</td><td>获取每个行键对应的列键，值的视图</td></tr><tr><td>int size()</td><td>集合的个数(行键/列键/值)</td></tr><tr><td>Collection&lt;V&gt; values()</td><td>集合值的集合，包括重复的</td></tr></tbody></table><h5 id="2-、示例-2"><a href="#2-、示例-2" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Table     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Table<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> table <span class="token operator">=</span> HashBasedTable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_1"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_1"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Table<span class="token punctuation">.</span>Cell<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> cellSet <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">cellSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cell <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"table中的行："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getRowKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";列："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getColumnKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";值："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"grade1对应的class："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class1对应的grade："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string">"class_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的grade:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">rowKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的class："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">columnKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> rowMap <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">rowMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rowMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>map<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row <span class="token operator">+</span><span class="token string">"行对应的列值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> columnMap <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">columnMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span>map<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>column <span class="token operator">+</span><span class="token string">"列对应的行值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含grade_1 和 class_2:"</span><span class="token operator">+</span>table<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含grade_1 和 class_2:"</span><span class="token operator">+</span>table<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）、Table有如下几种实现："><a href="#（3）、Table有如下几种实现：" class="headerlink" title="（3）、Table有如下几种实现："></a>（3）、Table有如下几种实现：</h5><ul><li><p>HashBasedTable：本质上用HashMap&lt;R, HashMap&lt;C, V&gt;&gt;实现；</p></li><li><p>TreeBasedTable：本质上用TreeMap&lt;R, TreeMap&lt;C,V&gt;&gt;实现；</p></li><li><p>ImmutableTable：本质上用ImmutableMap&lt;R, ImmutableMap&lt;C, V&gt;&gt;实现；注：ImmutableTable对稀疏或密集的数据集都有优化。</p></li><li><p>ArrayTable：要求在构造时就指定行和列的大小，本质上由一个二维数组实现，以提升访问速度和密集Table的内存利用率。ArrayTable与其他Table的工作原理有点不同。</p></li></ul><h4 id="5、ClassToInstanceMap"><a href="#5、ClassToInstanceMap" class="headerlink" title="5、ClassToInstanceMap"></a>5、ClassToInstanceMap</h4><p>ClassToInstanceMap是一种特殊的Map：它的键是类型，而值是符合键所指类型的对象。<br>为了扩展Map接口，ClassToInstanceMap额外声明了两个方法：T getInstance(Class T) 和T putInstance(Class , T)，从而避免强制类型转换，同时保证了类型安全。</p><p>ClassToInstanceMap有唯一的泛型参数，通常称为B，代表Map支持的所有类型的上界。</p><p>对于ClassToInstanceMap，Guava提供了两种有用的实现：MutableClassToInstanceMap和 ImmutableClassToInstanceMap。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * ClassToInstanceMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">classToInstanceMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ClassToInstanceMap<span class="token operator">&lt;</span>Number<span class="token operator">></span> instanceMap <span class="token operator">=</span> MutableClassToInstanceMap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>456L<span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">789.09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Integer:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Long:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、RangSet"><a href="#6、RangSet" class="headerlink" title="6、RangSet"></a>6、RangSet</h4><p>RangeSet描述了一组不相连的、非空的区间。当把一个区间添加到可变的RangeSet时，所有相连的区间会被合并，空区间会被忽略。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过深入探索Google Guava库的集合操作，我们不仅仅发现了一个功能强大的工具，更是领略到了一个高效、简洁的Java编程理念。Guava不仅提供了基础数据结构，还为开发者提供了一整套处理集合的利器，从不可变集合到高效工具类，无一不展现出其设计的巧妙之处。</p><p>在实际项目中，Guava为我们提供了更清晰、更简单的集合操作方式，帮助我们避免了许多常见的错误和异常。它的性能优化更是让我们在处理大规模数据时事半功倍。</p><p>作为Java开发者，我们应该充分了解并灵活运用Guava库，以提高代码的可读性、可维护性和性能。无论是新手还是老手，Guava都能为我们的开发工作带来便捷和效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Guava </tag>
            
            <tag> Guava集合操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：请说一下Mysql中count(1)、count(*)以及count(列)的区别？</title>
      <link href="/article/1d31dad8.html"/>
      <url>/article/1d31dad8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>近期在Review项目代码时，发现同事们在查询MySQL行数时存在多样的方式，有的使用<code>COUNT(1)</code>, 有的用<code>COUNT(id)</code>, 还有人选择了<code>COUNT(*)</code>。这混杂的选择引发了我的思考。当然这三种count的方式也是众说纷纭，其中最大的分歧点就是<code>COUNT(*)</code>和<code>COUNT(1)</code>查询性能上，有人觉得<code>COUNT(*)</code>需要转换为<code>COUNT(1)</code>，所以<code>COUNT(1)</code>得速度更快。究竟这三种计数方式之间有何区别，它们的背后原理是怎样的呢？</p><h3 id="COUNT-含义"><a href="#COUNT-含义" class="headerlink" title="COUNT()含义"></a>COUNT()含义</h3><p>在《高性能Mysql》一书第236页中是这么解释<code>COUNT</code>的作用的：</p><blockquote><p>COUNT()是一个特殊的函数，有两种非常不同的作用:它可以统计某个列值的数量，也可以统计行数。在统计列值时要求列值是非空的(不统计NULL)。如果在COUNT()的括号中指定了列或者列的表达式，则统计的就是这个表达式有值的结果数”。因为很多人对 NULL理解有问题，所以这里很容易产生误解。<br>COUNT()的另一个作用是统计结果集的行数。当MySOL确认括号内的表达式值不可能为空时，实际上就是在统计行数。最简单的就是当我们使用COUNT(<em>)的时候，这种情况下通配符</em>并不会像我们猜想的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计所有的行数。<br>我们发现一个最常见的错误就是，在括号内指定了一个列却希望统计结果集的行数。如果希望知道的是结果集的行数，最好使用<code>COUNT(*)</code>，这样写意义清晰，性能也会很好</p></blockquote><p>由此我们也可以大概总结<code>COUNT</code>函数的种方式如下：</p><ul><li><p><code>COUNT(1)</code>: 此查询返回的是结果集中的行数，不关心具体的列内容，因此使用常数1。<br>在很多数据库系统中，这种方式被优化为与 <code>SELECT COUNT(*)</code> 相同的性能水平，因为数据库引擎通常忽略括号内的内容。</p></li><li><p><code>COUNT(*)</code>：统计整个表的行数，不考虑是否有NULL值。<br>通常优于 <code>COUNT(id)</code>，因为它不需要关心具体的列，且现代数据库引擎会对其进行特殊优化。</p></li><li><p><code>COUNT(列)</code> ：统计指定列非空值的数量。需要考虑是否有NULL值<br>此种方式取决于列是否有索引。如果 列有索引，数据库引擎可能会利用索引进行快速计数。如果没有索引，或者有大量NULL值，性能可能较差，因为需要扫描整个表。</p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="1、Mysql5-7"><a href="#1、Mysql5-7" class="headerlink" title="1、Mysql5.7"></a>1、Mysql5.7</h4><p>在<a href="https://dev.mysql.com/doc/refman/5.7/en/aggregate-functions.html#function_count" target="_blank" rel="noopener">MySql 5.7官方文档</a>中是这么介绍<code>COUNT(expr)</code>函数的</p><blockquote><p><code>COUNT(expr)</code><br>Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value.<br>If there are no matching rows, <code>COUNT()</code>returns 0.<br><code></code>mysql&gt; SELECT student.student_name,COUNT(<em>)<br>       FROM student,course<br>       WHERE student.student_id=course.student_id<br>       GROUP BY student_name;<code></code><br>`COUNT(</em>)` is somewhat different in that it returns a count of the number of rows retrieved, whether or not they contain NULL values.</p><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>Prior to MySQL 5.7.18, InnoDB processes <code>SELECT COUNT(*)</code> statements by scanning the clustered index. As of MySQL 5.7.18, InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, the clustered index is scanned.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use SHOW TABLE STATUS.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For MyISAM tables, <code>COUNT(*)</code> is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:<br><code>mysql&gt; SELECT COUNT(*) FROM student;</code><br>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly. COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p>从官方文档中我们可以看出mysql官方对<code>COUNT</code>函数的解释：</p><ul><li><p><code>COUNT(expr)</code> 返回由 SELECT 语句检索的行中 _expr_ 的非 NULL 值的数量，结果为 BIGINT 值。如果没有匹配的行，<code>COUNT()</code> 返回 0。</p></li><li><p><code>COUNT(*)</code> 有所不同，它返回所检索的行数的计数，无论它们是否包含 NULL 值。</p></li><li><p>对于事务性存储引擎（如 InnoDB），存储准确的行数是有问题的。因为多个事务可能同时影响计数，InnoDB 不会保留表中行的内部计数。<code>SELECT COUNT(*)</code> 只会计算当前事务可见的行。</p></li><li><p>在 MySQL 5.7.18 之前，InnoDB 通过扫描聚集索引处理 <code>SELECT COUNT(*)</code> 语句。从 MySQL 5.7.18 开始，除非索引或优化器提示指示使用其他索引，InnoDB 会通过遍历最小的可用二级索引来处理 <code>SELECT COUNT(*)</code> 语句。如果没有二级索引，则将扫描聚集索引。</p></li><li><p>处理 <code>SELECT COUNT(*)</code> 语句可能花费一些时间，如果索引记录没有完全在缓冲池中。为了更快的计数，可以创建一个计数器表，并根据插入和删除操作进行更新。然而，在成千上万的并发事务更新同一计数器表的情况下，该方法可能无法很好地扩展。如果粗略的行数足够，可以使用<code>SHOW TABLE STATUS</code>。</p></li><li><p><strong>InnoDB 处理 <code>SELECT COUNT(*)</code> 和 <code>SELECT COUNT(1)</code> 操作的方式相同，没有性能差异。</strong></p></li><li><p>对于 MyISAM 表，<code>COUNT(\*)</code> 在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回，因为 MyISAM 存储了准确的行数。COUNT(1) 只有在第一列被定义为 NOT NULL 时才能进行相同的优化。</p></li></ul><h4 id="2、Mysql-8-0"><a href="#2、Mysql-8-0" class="headerlink" title="2、Mysql 8.0"></a>2、Mysql 8.0</h4><p>在<a href="https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count" target="_blank" rel="noopener">Mysql8.0的文档</a>中对<code>COUNT(expr)</code>的解释是这样</p><blockquote><p><code>COUNT(expr) [over_clause]</code></p><p>Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value.</p><p>If there are no matching rows, <code>COUNT()</code> returns 0.<code>COUNT(NULL)</code>returns 0.</p><p>This function executes as a window function if over_clause is present. over_clause is as described in Section 12.20.2, “Window Function Concepts and Syntax”.</p><p><code>mysql&gt; SELECT student.student_name,COUNT(*)       FROM student,course       WHERE student.student_id=course.student_id       GROUP BY student_name;</code><br><code>COUNT(*)</code>is somewhat different in that it returns a count of the number of rows retrieved, whether or not they contain NULL values.</p><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>As of MySQL 8.0.13, <code>SELECT COUNT(*)</code> FROM tbl_name query performance for InnoDB tables is optimized for single-threaded workloads if there are no extra clauses such as WHERE or GROUP BY.</p><p>InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, InnoDB processes SELECT COUNT(*) statements by scanning the clustered index.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use SHOW TABLE STATUS.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For MyISAM tables, <code>COUNT(*)</code>is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:</p><p><code>mysql&gt; SELECT COUNT(*) FROM student;</code><br>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly. COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p>从mysql8.0的文档中我们可以看出mysql8.0对<code>COUNT</code>的解释</p><ul><li><p><code>COUNT(expr)</code> 返回在由 SELECT 语句检索的行中 <code>_expr_</code> 的非 NULL 值的数量，结果为 BIGINT 值。如果没有匹配的行，<code>COUNT()</code> 返回 0。<code>COUNT(NULL)</code> 也返回 0。</p></li><li><p><code>COUNT(*)</code> 有所不同，它返回所检索的行数的计数，无论它们是否包含 NULL 值。</p></li><li><p>对于事务性存储引擎（如 InnoDB），存储准确的行数是有问题的，因为多个事务可能同时影响计数。InnoDB 不会保留表中行的内部计数。<code>SELECT COUNT(*)</code> 只计算当前事务可见的行。</p></li><li><p>在 MySQL 8.0.13 及以后版本，对于 InnoDB 表，执行 <code>SELECT COUNT(*) FROM tbl_name</code> 查询性能在没有额外子句（如 WHERE 或 GROUP BY）的情况下进行了优化，特别适用于单线程工作负载。</p></li><li><p>InnoDB 处理 <code>SELECT COUNT(*)</code> 语句的方式：</p><ul><li>通过遍历最小可用二级索引，除非指示使用其他索引。</li><li>如果没有二级索引，InnoDB 通过扫描聚集索引来处理 <code>SELECT COUNT(*)</code> 语句。</li></ul></li><li><p>处理 <code>SELECT COUNT(*)</code> 语句可能花费一些时间，如果索引记录没有完全在缓冲池中。为了更快的计数，可以创建一个计数器表，让应用程序根据插入和删除操作进行更新。但是，这种方法在数千个并发事务同时对同一计数器表进行更新的情况下可能不会很好地扩展。如果粗略的行数足够，可以使用 <code>SHOW TABLE STATUS</code>。</p></li><li><p><strong>InnoDB 对待 <code>SELECT COUNT(*)</code> 和 <code>SELECT COUNT(1)</code> 操作的方式相同，没有性能差异。</strong></p></li><li><p>对于 MyISAM 表，<code>COUNT(*)</code> 在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回，因为 MyISAM 存储了准确的行数。COUNT(1) 只有在第一列被定义为 NOT NULL 时才能进行相同的优化。</p></li></ul><p>结合Mysql5.7与Mysql8.0的文档我们可以看出两个版本对<code>COUNT</code>的支持的差异：</p><ul><li><strong>MySQL 8.0 优化了 InnoDB 表的 <code>SELECT COUNT(*)</code> 查询性能：</strong> 在 MySQL 8.0.13 及以后版本，对于 InnoDB 表，执行 <code>SELECT COUNT(*)</code> 查询的性能进行了优化，特别适用于单线程工作负载。这是 MySQL 5.7 文档中未包含的新特性。</li><li><strong>MyISAM 表的优化说明：</strong><br>   MySQL 8.0 文档中强调了 MyISAM 表在执行 <code>COUNT(*)</code> 时的优化情况，即在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回。MySQL 5.7 文档中也提到了 MyISAM 表的优化，但对于 <code>COUNT(*)</code> 的具体优化情况没有细节。</li></ul><p>MySQL 8.0 在性能优化方面对于 InnoDB 表的 <code>SELECT COUNT(*)</code> 查询进行了特别的关注，而且在 MyISAM 表的优化方面进行了详细的说明。其他方面，两个版本在<code>COUNT()</code>函数的解释和使用上基本保持一致。</p><p>基于此我们明白，其实<code>COUNT(*)</code>和<code>COUNT(1)</code>其实是一样的，在性能上并没有差异。</p><p>那这两种方式与<code>COUNT(列)</code>的差异呢？从以上《高性能Mysql》以及Mysql官方文档中我们知道，<code>COUNT(列)</code>是统计非空列的行数，它也会遍历整张表，然后会对列对应的值做非空判断，非空的字段进行个数累加。当然这是列为主键索引时的操作。如果列不为主键索引时，那么查询时还需要进行回表操作，再根据主键获取数据，此时无疑是增加了一次IO，在性能上其实是不如<code>COUNT(*)</code>和<code>COUNT(1)</code>的。那么我们就可以知道，按照效率来看，<strong><code>count(*)</code> = count(1) &gt; count(主键) &gt; count(非主键列)</strong>。</p><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ul><li><p>如果你想知道一张表的大概行数，我们可以直接使用<code>show table status</code>命令或者咱们使用的一些mysql客户端Navicat或者datagrip都可以办到。</p></li><li><p>如果你想获取一张表的确切行数时，我可以是优先使用<strong>使用 <code>COUNT(*)</code> 获取行数</strong>，这样写法清晰，性能较好，尤其对于 InnoDB 表的优化更为明显。我们要<strong>避免使用 <code>COUNT(列)</code> 统计行数</strong>，除非你真的需要统计该列非空值的数量，否则容易产生误解。</p></li></ul><p>篇幅有限，深入验证将在后续文章中介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql的count函数 </tag>
            
            <tag> Mysql </tag>
            
            <tag> 高性能mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java基础（二）之Java线程池最全详解</title>
      <link href="/article/2d9d416b.html"/>
      <url>/article/2d9d416b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>在当今高度并发的软件开发环境中，有效地管理线程是确保程序性能和稳定性的关键因素之一。Java线程池作为一种强大的并发工具，不仅能够提高任务执行的效率，还能有效地控制系统资源的使用。<br>本文将深入探讨Java线程池的原理、参数配置、自定义以及实际应用。通过理解这些关键概念，开发者将能够更好地应对不同的并发场景，优化程序的执行效率。<br>首先，我们将介绍线程池的基本概念，解释它在并发编程中的作用和优势。随后，我们将深入研究Java线程池的工作原理，剖析其在任务提交、执行和线程管理方面的内部机制。</p><h3 id="2-Java线程池的基础概念"><a href="#2-Java线程池的基础概念" class="headerlink" title="2. Java线程池的基础概念"></a>2. Java线程池的基础概念</h3><p>在并发编程中，线程池是一种重要的设计模式，它能够有效地管理和复用线程，提高程序的性能和资源利用率。Java线程池作为Java并发包（java.util.concurrent）的一部分，为开发者提供了方便、高效的多线程处理方式。同时在阿里巴巴开发规范中，强制要使用线程池去提供线程，不允许在代码中显示的创建线程。</p><h4 id="2-1-什么是线程池？"><a href="#2-1-什么是线程池？" class="headerlink" title="2.1 什么是线程池？"></a>2.1 什么是线程池？</h4><p>线程池是由一组线程组成的线程队列，它们在程序启动时就被创建并一直存在。这些线程可被用来执行提交到线程池的各种任务，从而避免为每个任务都创建新线程。这种机制能够降低线程创建和销毁的开销，提高系统性能。</p><h4 id="2-2-线程池的工作原理"><a href="#2-2-线程池的工作原理" class="headerlink" title="2.2 线程池的工作原理"></a>2.2 线程池的工作原理</h4><p>线程池的工作原理基于任务队列和线程管理机制。当任务被提交到线程池时，线程池会选择合适的线程来执行任务。如果核心线程数未达到上限，新任务可能会导致新线程的创建。如果核心线程已满，任务将被放入任务队列等待执行。当任务队列也已满，而同时线程数未达到最大线程数，新的任务将创建临时线程来执行。</p><h4 id="2-3-线程池的优势"><a href="#2-3-线程池的优势" class="headerlink" title="2.3 线程池的优势"></a>2.3 线程池的优势</h4><p>使用线程池的优势主要体现在以下几个方面：<br><strong>减少资源消耗</strong>： 线程的创建和销毁是有开销的，线程池通过复用线程，减少了这些开销。<br><strong>提高响应速度</strong>： 由于线程池中的线程一直存在，可以更迅速地响应任务的到来。<br><strong>避免系统过载</strong>： 控制线程数量，防止系统因过多线程而过载。</p><h3 id="3-Java线程池的工作原理"><a href="#3-Java线程池的工作原理" class="headerlink" title="3. Java线程池的工作原理"></a>3. Java线程池的工作原理</h3><p>Java线程池的工作原理涉及线程的创建、任务的提交与执行，以及对线程的管理。深入理解这些机制对于优化并发程序至关重要。</p><h4 id="3-1-线程池的创建与初始化"><a href="#3-1-线程池的创建与初始化" class="headerlink" title="3.1 线程池的创建与初始化"></a>3.1 线程池的创建与初始化</h4><p>在程序启动时，线程池被创建并初始化。这一过程包括设置线程池的基本参数，如核心线程数、最大线程数、任务队列等。核心线程数是线程池中一直存活的线程数量，而最大线程数则是线程池允许创建的最大线程数量。例如创建一个固定核心线程数的线程：</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中参数<code>corePoolSize</code>即为核心线程数</p><h4 id="3-2-任务的提交与执行"><a href="#3-2-任务的提交与执行" class="headerlink" title="3.2 任务的提交与执行"></a>3.2 任务的提交与执行</h4><p>任务提交到线程池后，线程池会根据一定的策略选择线程来执行任务。首先，线程池会检查核心线程是否已满，如果未满，新的任务可能会导致新线程的创建。如果核心线程已满，任务将被放入任务队列。<br>在Java线程池中，任务的提交与执行有两个主要的方法：<code>submit</code>和<code>execute</code>。这两种方法有一些区别，主要体现在返回值、异常处理和任务包装上。</p><h5 id="3-2-1-submit方法"><a href="#3-2-1-submit方法" class="headerlink" title="3.2.1 submit方法"></a>3.2.1 submit方法</h5><p><code>submit</code>方法用于提交实现了<code>Callable</code>接口的任务，它可以返回一个<code>Future</code>对象，通过该对象可以获取任务执行的结果，取消任务等。<code>submit</code>方法还可以接受实现了<code>Runnable</code>接口的任务，但它无法获取任务的执行结果。<code>submit</code>方法在<code>ExecutorService</code>中定义的，并定义了三种重载方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span><span class="token punctuation">;</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体使用如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 提交callable任务，可以拿到返回值</span>Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> future1 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>Future<span class="token operator">&lt;</span>Void<span class="token operator">></span> future2 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future3 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要特点：</strong></p><ul><li>返回一个<code>Future</code>对象，可通过<code>Future</code>的<code>get()</code>方法可以获取到线程执行的返回值，<code>get()</code>方法是同步的，执行<code>get()</code>方法时，如果线程还没执行完，会同步等待，直到线程执行完成。</li><li>可以接受<code>Callable</code>和<code>Runnable</code>类型的任务。</li><li>执行<code>Runnable</code>和<code>Callable</code>的任务时，run()/call()方法没显式抛出异常。<h4 id="3-2-2-execute方法"><a href="#3-2-2-execute方法" class="headerlink" title="3.2.2 execute方法"></a>3.2.2 execute方法</h4><code>execute</code>方法用于提交实现了<code>Runnable</code>接口的任务，它没有返回值，因此无法获取任务的执行结果。如果任务执行过程中抛出了异常，线程池会捕获并记录该异常，但无法通过<code>execute</code>方法获知。<code>execute</code>方法是在线程池的顶级接口<code>Executor</code>中定义的，而且只有这一个接口。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>使用：<pre class="line-numbers language-java"><code class="language-java">executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体业务逻辑  </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>主要特点：</strong></p><ul><li>没有返回值，无法获取任务的执行结果。</li><li>只能接受<code>Runnable</code>类型的任务。</li></ul><p>总的来说，<code>submit</code>方法更加灵活，适用于更多场景，而<code>execute</code>方法更加简单，适用于只关心任务执行而不需要获取结果的场景。在实际应用中，根据具体需求选择合适的方法。如果需要获取任务的执行结果、取消任务等，建议使用<code>submit</code>方法。只是执行任务而不关心返回值，可以使用<code>execute</code>方法。</p><h3 id="4-线程池的参数以及配置"><a href="#4-线程池的参数以及配置" class="headerlink" title="4. 线程池的参数以及配置"></a>4. 线程池的参数以及配置</h3><p>Java线程池的性能和行为可以通过一系列参数进行调整，以满足不同的并发需求。<code>ThreadPoolExecutor</code>中提供的构造器如下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPoolExecutor.png" alt="ThreadPoolExecutor.png"></p><h4 id="4-1-七大参数"><a href="#4-1-七大参数" class="headerlink" title="4.1 七大参数"></a>4.1 七大参数</h4><h5 id="4-1-核心线程数（Core-Pool-Size）"><a href="#4-1-核心线程数（Core-Pool-Size）" class="headerlink" title="4.1 核心线程数（Core Pool Size）"></a>4.1 核心线程数（Core Pool Size）</h5><p>核心线程数是线程池中一直存活的线程数量（<strong>即使它们处于空闲状态</strong>）。这些线程用于执行提交到线程池的任务。通过合理设置核心线程数，可以在系统负载增加时迅速响应任务。</p><h5 id="4-2-最大线程数（Maximum-Pool-Size）"><a href="#4-2-最大线程数（Maximum-Pool-Size）" class="headerlink" title="4.2 最大线程数（Maximum Pool Size）"></a>4.2 最大线程数（Maximum Pool Size）</h5><p>最大线程数定义了线程池中允许创建的最大线程数量。当核心线程都在执行任务，而新任务仍然到来时，线程池会创建新线程，直到达到最大线程数。超过最大线程数的任务会被拒绝。</p><h5 id="4-3-线程存活时间（Keep-Alive-Time）"><a href="#4-3-线程存活时间（Keep-Alive-Time）" class="headerlink" title="4.3 线程存活时间（Keep Alive Time）"></a>4.3 线程存活时间（Keep Alive Time）</h5><p>线程存活时间指的是非核心线程在空闲状态下的最大存活时间。当线程池中线程数量超过核心线程数时，空闲的非核心线程在经过一定时间后会被终止，从而释放系统资源。</p><h5 id="4-4-TimeUnit"><a href="#4-4-TimeUnit" class="headerlink" title="4.4 TimeUnit"></a>4.4 TimeUnit</h5><p>keepAliveTime的单位(ms、s…)</p><h5 id="4-5-工作队列（Work-Queue）"><a href="#4-5-工作队列（Work-Queue）" class="headerlink" title="4.5 工作队列（Work Queue）"></a>4.5 工作队列（Work Queue）</h5><p>工作队列用于存放等待执行的任务。不同类型的队列对线程池的行为有重要影响，例如有界队列和无界队列。有界队列在任务数达到上限时会触发拒绝策略。</p><h5 id="4-6-ThreadFactory"><a href="#4-6-ThreadFactory" class="headerlink" title="4.6 ThreadFactory"></a>4.6 ThreadFactory</h5><p>线程池中生成线程的工厂。默认使用默认工厂<code>Executors.defaultThreadFactory()</code>。但是实际使用时建议使用Guava的<code>ThreadFactory</code>自定义线程的名字，方便排查线程问题（阿里开发规范中也建议这么做）。如下：</p><pre class="line-numbers language-java"><code class="language-java">ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-7-拒绝策略（Rejected-Execution-Policy）"><a href="#4-7-拒绝策略（Rejected-Execution-Policy）" class="headerlink" title="4.7 拒绝策略（Rejected Execution Policy）"></a>4.7 拒绝策略（Rejected Execution Policy）</h5><p>拒绝策略定义了当工作队列满，并且当前工作的线程数等于最大线程数时，后续再提交的任务如何处理。例如，可以选择抛弃任务、抛出异常或在调用线程中直接执行。Java线程池提供了几种常见的拒绝策略：</p><ul><li><strong>AbortPolicy（默认策略）：</strong><br>直接抛出<code>RejectedExecutionException</code>，阻止系统继续接受新任务，保持原有状态。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>CallerRunsPolicy：</strong><br>将任务返回给调用者，由调用线程直接执行。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>DiscardPolicy：</strong><br>直接丢弃无法处理的任务，不抛出异常。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>DiscardOldestPolicy：</strong><br>当任务被拒绝添加时，会抛弃任务队列中最旧的任务也就是最先加入队列的，再把这个新任务添加进去。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="4-2-线程池提交任务执行流程"><a href="#4-2-线程池提交任务执行流程" class="headerlink" title="4.2 线程池提交任务执行流程"></a>4.2 线程池提交任务执行流程</h4><h5 id="4-2-1-执行流程"><a href="#4-2-1-执行流程" class="headerlink" title="4.2.1 执行流程"></a>4.2.1 执行流程</h5><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="线程池执行流程.png"></p><h5 id="4-2-2-实例讲解"><a href="#4-2-2-实例讲解" class="headerlink" title="4.2.2 实例讲解"></a>4.2.2 实例讲解</h5><p>某银行柜台，共有5个窗口（Maximum Pool Size），平时常开2个窗口办理业务（Core Pool Size），银行大厅摆了5个椅子（Work Queue）供客户等待。银行规定当常开的窗口都在办理业务，并且大厅椅子上都坐满了客户，那么另外3个不常开的窗口也要打开办理业务。如果这3个窗口也都全部在办理业务，后面继续来银行办理业务的客户银行将拒绝办理。如果某个员工空闲下并且超过了5（Keep Alive Time）秒钟（TimeUnit）那么他就可以关闭窗口去休息。但是必须保留2个常开的窗口。<br>我们先按照上述流程创建一个线程池：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 推荐使用Guava的ThreadFactory构建ThreadFactory，自定义线程名称 方便后续排查问题  </span>ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义号线程  </span>ExecutorService executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">// 核心线程数，即2个常开窗口  </span>        <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 最大的线程数，银行所有的窗口  </span>        <span class="token number">5</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 空闲时间  </span>        <span class="token number">5</span><span class="token punctuation">,</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 工作队列  </span>        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 线程工厂  </span>        threadFactory<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 拒绝策略  </span>        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）初始状态下，只有2个窗口为2个客户办理业务。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E6%BC%94%E7%A4%BA1.png" alt="ThreadPool_演示1.png"></p><p>（2）在客户1,客户2办理业务或者说常开窗口一直都有客户在办理业务，此时陆续有客户进来，需要在银行大厅的椅子上等待。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A32.png" alt="ThreadPool_图解2.png"></p><p>（3）直到大厅的椅子都坐满。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A35.png" alt="ThreadPool_图解5.png"></p><p>（4）此时如果在所有的窗口都在办理业务，大厅椅子坐满，如果再来一个客户，将开启3/4/5的窗口</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A37.png" alt="ThreadPool_图解7.png"></p><p>（5）此时如果在所有的窗口都在办理业务，大厅椅子坐满，还从外面再来2个客户办理业务，那么就需要把剩下的窗口都要打开去办理业务。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A38.png" alt="ThreadPool_图解8.png"></p><p>（6）此时如果再来1个客户，就会按照线程池定义的拒绝策略去执行，比如我们设置策略为：AbortPolicy，就会抛出异常。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E5%9B%BE%E8%A7%A39.png" alt="ThreadPool_图解9.png"></p><h4 id="4-3-线程池参数配置"><a href="#4-3-线程池参数配置" class="headerlink" title="4.3 线程池参数配置"></a>4.3 线程池参数配置</h4><p>线程池的配置参数在实际应用中需要根据具体的业务场景和性能需求进行巧妙调整。这就好比在日常生活中，如果有一个任务需要三人协同完成，但却有六人前来参与，就会造成三人的资源浪费；反之，若只安排两人协作，可能会超负荷而不切实际。因此，在线程池参数配置时，过小或过大都会带来问题。</p><p>当线程池数量设置过小时，面对大量同时到达的任务或请求，可能导致这些任务在任务队列中排队等待执行。甚至在任务队列达到最大容量时，无法处理额外的任务，或者导致任务队列积压，有可能引发内存溢出（OOM）问题。这明显是一个问题，因为CPU资源无法得到充分利用。</p><p>相反，若线程数量设置过大，大量线程可能会同时争夺CPU资源，导致频繁的上下文切换，从而增加线程的执行时间，影响整体执行效率。因此，在线程池配置中需要平衡线程数量，以满足高并发场景下的任务处理需求，同时避免不必要的资源争夺和上下文切换，以保障系统的稳定性和性能。</p><p>并没有一个通用的标准来设置参数，因此需要结合实际实战经验、业务需求以及服务器资源的状况，灵活而合理地进行参数配置。最终，合适的配置才是最为优越的选择。</p><p>当然也有一个简单而广泛适用的公式，可以用于确定线程池中的线程数：</p><ol><li><strong>CPU 密集型任务（N+1）：</strong><ul><li>对于消耗主要是CPU资源的任务，可以将线程数设置为N（CPU核心数）+1。额外的一个线程用于防止线程偶发的缺页中断或其他原因导致的任务暂停，防止空闲时间的浪费。一旦任务暂停，多出来的一个线程可以充分利用CPU的空闲时间。</li></ul></li><li><strong>I/O 密集型任务（2N）：</strong><ul><li>对于主要涉及I/O交互的任务，系统会在大部分时间内处理I/O，而在线程处理I/O的时间段内不会占用CPU。因此，在I/O密集型任务中，可以配置更多的线程，具体计算方法是2N。</li></ul></li></ol><p>那我们如何判断任务是CPU密集型还是IO密集型呢？简而言之，CPU密集型任务主要利用CPU计算能力，例如对内存中大量数据进行排序。而IO密集型任务涉及网络读取、文件读取等，其特点是CPU计算耗费的时间相对较少，大部分时间花在等待IO操作完成上。</p><p>但是我们在实际的业务中会发现，我们一个服务器上可能跑多种类型的业务，不太好判断到底是CPU密集任务还是IO密集型。我们可以根据监控服务线程池资源利用情况结合业务场景动态配制合理参数。这里我们就不得不提一下美团的线程池参数动态化配置：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践 - 美团技术团队</a>。</p><h3 id="5-线程池的使用"><a href="#5-线程池的使用" class="headerlink" title="5. 线程池的使用"></a>5. 线程池的使用</h3><p>日常开发中我们可以通过<code>Executors</code>去创建线程池，例如：<br>（1）newFixedThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService1 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建固定线程数的线程池，核心线程数等于最大线程数，此时keepAliveTime失效 。但是他的工作队列的长度为<code>Integer.MAX_VALUE</code>。可能会导致堆积大量的请求，导致OOM。</p><p>（2）newSingleThreadExecutor()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService2 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建单线程的线程池，即核心线程数等于最大线程数均等于1，keepAliveTime失效 。但是他的工作队列的长度为<code>Integer.MAX_VALUE</code>。可能会导致堆积大量的请求，导致OOM。</p><p>（3）newCachedThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService3 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个核心线程数等于0，并且允许创建的最大线程数等于Integer.MAX。keepAliveTime为60秒。可能会造成创建大量的线程，从而导致OOM。</p><p>（4）newScheduledThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService4 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个允许最大线程数等于Integer.MAX，但是他使用的阻塞工作队列是<code>DelayedWorkQueue</code>。<code>DelayedWorkQueue</code>的核心数据结构是二叉最小堆的优先队列，队列满时会自动扩容。所以最大线程数没有意义，线程池中永远会保持至多有核心线程数个工作线程正在运行。</p><p><strong>注意：</strong> 以上创建线程池的方法，可以做自己Demo使用，不应该用在项目中。在阿里巴巴代码规范中，不支持使用这种方式去创建，支持手动创建线程池。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ThreadPool_%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.png" alt="ThreadPool_阿里巴巴开发规范.png"></p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>Java线程池是多线程编程中的重要工具，能够有效管理和复用线程，提高系统性能和资源利用率。本文深入探讨了线程池的基础概念、工作原理、参数配置、自定义以及使用示例，并强调了注意事项。<br>通过了解线程池的工作原理，开发者可以更好地配置线程池以适应不同的并发需求。自定义线程池则使得线程池更灵活地适应特定业务场景。在实际应用中，要谨慎选择线程池类型、合理配置参数、注意任务的生命周期和线程安全等问题，以确保系统的稳定性和性能。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1、<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践 - 美团技术团队 (meituan.com)</a><br>2、《Java并发编程实战》</p>]]></content>
      
      
      <categories>
          
          <category> Java核心基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java线程池 </tag>
            
            <tag> 自定义线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工具类（一）之Guava操作字符串</title>
      <link href="/article/8fd2c424.html"/>
      <url>/article/8fd2c424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><h2 id="Guava字符串操作"><a href="#Guava字符串操作" class="headerlink" title="Guava字符串操作"></a>Guava字符串操作</h2><p>在Java开发的道路上，我们经常会面临各种各样的字符串处理任务，从简单的判空到复杂的拆分和连接操作。为了简化这些常见但有时繁琐的任务，Google推出了一款强大的Java库——Guava。Guava不仅为我们提供了丰富的集合工具，还包括了许多方便而高效的字符串处理工具。</p><p>在本文中，我们将专注于探讨Guava库中关于字符串操作的强大功能。无论您是正在寻找更好的字符串拆分方法，还是希望提高代码的可读性和性能，Guava都为您提供了解决方案。</p><h3 id="一、连接器【Joiner】"><a href="#一、连接器【Joiner】" class="headerlink" title="一、连接器【Joiner】"></a>一、连接器【Joiner】</h3><p>Joiner是字符串连接器，可以处理字符串中的null值，简洁方便。<br></p><h4 id="1、常用方法："><a href="#1、常用方法：" class="headerlink" title="1、常用方法："></a>1、常用方法：</h4><table><thead><tr><th>方法名称</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>skipNulls()</td><td>跳过空值</td><td></td></tr><tr><td>useForNull(String)</td><td>使用参数替换字符串中的null值</td><td></td></tr><tr><td>withKeyValueSeparator(String)</td><td>使用参数连接map结构</td><td></td></tr></tbody></table><h4 id="2、Joiner的使用分为三个步骤："><a href="#2、Joiner的使用分为三个步骤：" class="headerlink" title="2、Joiner的使用分为三个步骤："></a>2、Joiner的使用分为三个步骤：<br></h4><p>(1)、on方法用来设置链接符<br><br>(2)、在on方法之后 join方法之前 ，我们可以做一些扩展操作，比如s使用useForNull是为null值设置默认值。<br><br>(3)、join方法用来设置被操作的集合<br></p><h4 id="3、使用示例："><a href="#3、使用示例：" class="headerlink" title="3、使用示例："></a>3、使用示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">joinerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"World"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// skipNulls</span>    Joiner joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// useForNull</span>    joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useForNull</span><span class="token punctuation">(</span><span class="token string">"My"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// withKeyValueSeparator</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：joiner实例总是不可变的。用来定义joiner目标语义的配置方法总会返回一个新的joiner实例。这使得joiner实例都是线程安全的，你可以将其定义为static final常量。</strong></p><h3 id="二、字符串拆分器【Splitter】"><a href="#二、字符串拆分器【Splitter】" class="headerlink" title="二、字符串拆分器【Splitter】"></a>二、字符串拆分器【Splitter】</h3><p>Splitter可以被设置为按照任何模式、字符、字符串或字符匹配器拆分。返回一个Iterable&lt;T&gt;</p><h4 id="1、拆分器工厂"><a href="#1、拆分器工厂" class="headerlink" title="1、拆分器工厂"></a>1、拆分器工厂</h4><table><thead><tr><th>方法</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>Splitter.on(Char)</td><td>按照单个字符拆分</td><td>Splitter.on(“,”)</td></tr><tr><td>Splitter.on(CharMatcher)</td><td>按字符匹配器拆分</td><td>Splitter.on(CharMatcher.BREAKING_WHITESPACE)</td></tr><tr><td>Splitter.on(String)</td><td>按字符串拆分</td><td>Splitter.on(“a”)</td></tr><tr><td>Splitter.on(Pattern) <br> Splitter.onPattern(String)</td><td>按正则表达式拆分</td><td>Splitter.onPattern(“\r?\n”)</td></tr><tr><td>Splitter.fixedLength(int)</td><td>按固定长度拆分；最后一段可能比给定长度短，但不会为空。</td><td>Splitter.fixedLength(3)</td></tr></tbody></table><h4 id="2、拆分器修饰符"><a href="#2、拆分器修饰符" class="headerlink" title="2、拆分器修饰符"></a>2、拆分器修饰符</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>omitEmptyStrings()</td><td>从结果中自动忽略空字符串</td></tr><tr><td>trimResults()</td><td>移除结果字符串的前导空白和尾部空白</td></tr><tr><td>trimResults(CharMatcher)</td><td>给定匹配器，移除结果字符串的前导匹配字符和尾部匹配字符</td></tr><tr><td>limit(int)</td><td>限制拆分出的字符串数量,即只有前几个拆分符生效</td></tr><tr><td>splitToList</td><td>将拆分接口用List返回</td></tr><tr><td>withKeyValueSeparator</td><td>将String转换Map\&lt;String,String&gt;</td></tr></tbody></table><h4 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">splitterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// trimResults 去掉头尾空格 |a||b|c||</span>     List<span class="token operator">&lt;</span>String<span class="token operator">></span> splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// omitEmptyStrings 忽略空串  |a|b|c|</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 两者一起使用 a|b|c</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// limit a|b,c,,</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// withKeyValueSeparator  a=1|b=2</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> splitterMap <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"a-1;b-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：splitter实例总是不可变的。用来定义splitter目标语义的配置方法总会返回一个新的splitter实例。这使得splitter实例都是线程安全的，你可以将其定义为static final常量。</strong></p><h3 id="三、字符匹配器【CharMatcher】"><a href="#三、字符匹配器【CharMatcher】" class="headerlink" title="三、字符匹配器【CharMatcher】"></a>三、字符匹配器【CharMatcher】</h3><p>直观上可以认为CharMatcher实例代表着某一类字符，如数字或空白字符。事实上来说，CharMatcher实例就是对字符的布尔判断——CharMatcher确实也实现了Predicate&lt;Character&gt;。<br><br>使用CharMatcher的好处更在于它提供了一系列方法，让你对字符作特定类型的操作：修剪[trim]、折叠[collapse]、移除[remove]、保留[retain]等等。CharMatcher实例首先代表概念1：怎么才算匹配字符？然后它还提供了很多操作概念2：如何处理这些匹配字符？</p><h4 id="1、常见字符匹配器常量"><a href="#1、常见字符匹配器常量" class="headerlink" title="1、常见字符匹配器常量"></a>1、常见字符匹配器常量</h4><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>ANY</td><td>匹配任何字符</td></tr><tr><td>ASCII</td><td>匹配是否是ASCII字符</td></tr><tr><td>BREAKING_WHITESPACE</td><td>匹配所有可换行的空白字符(不包括非换行空白字符,例如”\u00a0”)</td></tr><tr><td>DIGIT</td><td>匹配ASCII数字</td></tr><tr><td>INVISIBLE</td><td>匹配所有看不见的字符</td></tr><tr><td>JAVA_DIGIT</td><td>匹配UNICODE数字, 使用 Character.isDigit() 实现</td></tr><tr><td>JAVA_ISO_CONTROL</td><td>匹配ISO控制字符, 使用 Charater.isISOControl() 实现</td></tr><tr><td>JAVA_LETTER</td><td>匹配字母, 使用 Charater.isLetter() 实现</td></tr><tr><td>JAVA_LETTER_OR_DIGET</td><td>匹配数字或字母</td></tr><tr><td>JAVA_LOWER_CASE</td><td>匹配小写</td></tr><tr><td>JAVA_UPPER_CASE</td><td>匹配大写</td></tr><tr><td>NONE</td><td>不匹配所有字符</td></tr><tr><td>SINGLE_WIDTH</td><td>匹配单字宽字符, 如中文字就是双字宽</td></tr><tr><td>WHITESPACE</td><td>匹配所有空白字符</td></tr></tbody></table><h4 id="2、常用操作方法"><a href="#2、常用操作方法" class="headerlink" title="2、常用操作方法"></a>2、常用操作方法</h4><pre class="line-numbers language-java"><code class="language-java">CharMatcher <span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">char</span> match<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配指定字符的Matcher </span>CharMatcher <span class="token function">isNot</span><span class="token punctuation">(</span><span class="token keyword">char</span> match<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回不匹配指定字符的Matcher &lt;br /></span>CharMatcher <span class="token function">anyOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配sequence中任意字符的Matcher</span>CharMatcher <span class="token function">noneOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回不匹配sequence中任何一个字符的Matcher</span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">inRange</span><span class="token punctuation">(</span><span class="token keyword">char</span> startInclusive<span class="token punctuation">,</span> <span class="token keyword">char</span> endInclusive<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配范围内任意字符的Matcher</span>CharMatcher <span class="token function">forPredicate</span><span class="token punctuation">(</span>Predicate\<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Charater<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回使用predicate的apply()判断匹配的Matcher </span>CharMatcher <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回以当前Matcher判断规则相反的Matcher &lt;br /></span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">and</span><span class="token punctuation">(</span>CharMatcher other<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回与other匹配条件组合做与来判断的Matcher</span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">or</span><span class="token punctuation">(</span>CharMatcher other<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回与other匹配条件组合做或来判断的Matcher</span><span class="token keyword">boolean</span> <span class="token function">matchesAnyOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//只要sequence中有任意字符能匹配Matcher,返回true </span><span class="token keyword">boolean</span> <span class="token function">matchesAllOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//sequence中所有字符都能匹配Matcher,返回true </span><span class="token keyword">boolean</span> <span class="token function">matchesNoneOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//sequence中所有字符都不能匹配Matcher,返回true </span><span class="token keyword">int</span> <span class="token function">indexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中匹配到的第一个字符的坐标 </span><span class="token keyword">int</span> <span class="token function">indexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回从start开始,在sequence中匹配到的第一个字符的坐标</span><span class="token keyword">int</span> <span class="token function">lastIndexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中最后一次匹配到的字符的坐标 </span><span class="token keyword">int</span> <span class="token function">countIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中匹配到的字符计数 </span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">removeFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除sequence中匹配到到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">retainFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//保留sequence中匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">replaceFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//替换sequence中匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除首尾匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimLeadingFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除首部匹配到的字符</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimTrailingFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除尾部匹配到的字符</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">collapseFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//将匹配到的组(连续匹配的字符)替换成replacement</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimAndCollapseFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//先trim在replace></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、示例："><a href="#3、示例：" class="headerlink" title="3、示例："></a>3、示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charMatcherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> String testStr <span class="token operator">=</span> <span class="token string">"FirstName LastName +1 123 456 789 !@#$%^&amp;*()_+|}{:\"?>&lt;"</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstNameLastName</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLetterOrDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FirstNameLastName1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// irstameastame</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countIn</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 54</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstName LastName +    !@#$%^&amp;*()_+|}{:"?>&lt;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//   1 123 456 789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// aaa1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstName LastName +* *** *** *** !@#$%^&amp;*()_+|}{:"?>&lt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：CharMatcher只处理char类型代表的字符；</strong></p><h3 id="四、字符集【Charsets】"><a href="#四、字符集【Charsets】" class="headerlink" title="四、字符集【Charsets】"></a>四、字符集【Charsets】</h3><p>Charsets针对所有Java平台都要保证支持的六种字符集提供了常量引用。尝试使用这些常量，而不是通过名称获取字符集实例。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><code>bytes = string.getBytes(Charsets.UTF_8);</code></p><h3 id="五、大小写格式【CaseFormat】"><a href="#五、大小写格式【CaseFormat】" class="headerlink" title="五、大小写格式【CaseFormat】"></a>五、大小写格式【CaseFormat】</h3><p>CaseFormat被用来方便地在各种ASCII大小写规范间转换字符串——比如，编程语言的命名规范。CaseFormat支持的格式如下：<br></p><table><thead><tr><th>格式</th><th>范例</th></tr></thead><tbody><tr><td>LOWER_CAMEL</td><td>lowerCamel</td></tr><tr><td>LOWER_HYPHEN</td><td>lower-hyphen</td></tr><tr><td>LOWER_UNDERSCORE</td><td>lower_underscore</td></tr><tr><td>UPPER_CAMEL</td><td>UpperCamel</td></tr><tr><td>UPPER_UNDERSCORE</td><td>UPPER_UNDERSCORE</td></tr></tbody></table><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">caseFormatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">,</span><span class="token string">"FIRSTNAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// firstname</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x20-总结"><a href="#x20-总结" class="headerlink" title="&#x20;总结"></a>&#x20;总结</h3><p>在使用Guava字符串处理工具时，性能是一个不可忽视的因素。Guava库经过精心设计，旨在提供高效的操作，但在一些特定场景下，合理的性能考虑仍然是必要的。</p><p>首先，Guava的字符串处理工具通常在处理大规模数据时表现出色。例如，在使用<code>Splitter</code>进行字符串拆分时，Guava能够更有效地处理大型字符串，相较于传统的字符串拆分方法，这将在处理大量文本数据时体现出明显的性能优势。</p><p>其次，Guava的一些设计目标是为了避免不必要的内存分配和拷贝，从而提高性能。例如，使用<code>Joiner</code>连接字符串时，Guava可以更智能地处理拼接过程，减少临时对象的创建，从而降低了内存开销。然而，在某些场景下，如果性能是关键问题，开发者仍需谨慎选择适当的方法和工具。Guava提供了丰富的选项，通过合理地选择工具和参数，可以使得性能得到最优化。</p><p>Guava字符串处理工具为Java开发者提供了强大而灵活的解决方案，能够简化日常的字符串操作，并在性能方面展现出色的表现。通过本文的介绍，我们深入了解了Guava中关于字符串的各种特性，从基础的判空和拆分，到高级的不可变字符串。</p><p>在使用Guava时，我们学习了如何利用<code>Splitter</code>和<code>Joiner</code>等工具执行各种字符串操作，以及如何通过<code>CharMatcher</code>处理字符匹配和替换。同时，我们也了解了不可变字符串的优势，以及在一些特定场景中的应用。</p><p>在选择使用Guava字符串处理工具时，我们需要根据具体的需求和场景来权衡灵活性和性能。Guava为我们提供了丰富的选择，让我们在处理字符串时更加便捷高效。</p><p>总的来说，Guava的字符串处理工具不仅为我们提供了更好的开发体验，同时也通过其高效的设计为项目性能提供了可靠的支持。在今后的Java开发中，深入了解并灵活应用Guava的字符串处理工具，将是提高代码质量和开发效率的不错选择。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Guava </tag>
            
            <tag> Java工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道（一）之优化if-else的8种方案</title>
      <link href="/article/7fd1e424.html"/>
      <url>/article/7fd1e424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><p>我们日常开发的项目中，如果代码中存在大量的if-else语句，阅读起来非常的折磨（直接劝退），维护起来也很难，也特别容易出问题。比如说以下：</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ifelse%E5%9E%83%E5%9C%BE%E4%BB%A3%E7%A0%81.png" alt="ifelse垃圾代码.png"></p><p>接下来，本文介绍我们常使用的8种方法去优化if-else。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/ifelse%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88.png" alt="ifelse优化方案.png"></p><h3 id="1、提前return，让正常流程走主干"><a href="#1、提前return，让正常流程走主干" class="headerlink" title="1、提前return，让正常流程走主干"></a>1、提前return，让正常流程走主干</h3><p>如果if-else代码中包含return语句，或者我们可以将包含if-else的代码从主干中抽取到一个单独方法，这样就可以在这个方法中可以return掉。这中思想也是短路求值的一种体现。把多余 else 干掉，使代码更加优雅。</p><ul><li>优化前代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// doSomething  </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// doSomething1  </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// doSomething2  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// doSomething</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token comment" spellcheck="true">//doSomething  </span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 主流程代码  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// doSomething1  </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// doSomething2  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用三目运算符"><a href="#2、使用三目运算符" class="headerlink" title="2、使用三目运算符"></a>2、使用三目运算符</h3><p>某些if-else可以优化为使用三目运算符，这样会让代码更简洁，可读性高。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> price<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span><span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> price <span class="token operator">=</span> condition1 <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>condition2 <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、使用Optional"><a href="#3、使用Optional" class="headerlink" title="3、使用Optional"></a>3、使用Optional</h3><p>我们在代码中判null会导致存在大量的if-else，这个时候我们可以考虑使用Java8的<code>Optional</code>去优化。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String s <span class="token operator">=</span> <span class="token function">handleStr</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">handleStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Null"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">handleStr</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"Null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">handleStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 其余业务逻辑，同样适用于处理一个对象，判null</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、多态"><a href="#4、多态" class="headerlink" title="4、多态"></a>4、多态</h3><p>我们可以将一些操作（比如一些状态）的一些共性的方法抽象成一个公共接口，然后针对这些操作实现这些接口完成不同的逻辑，在调用时我们只需要传入对应的操作类即可，对外的操作方法都是同一个。</p><ul><li>优化前代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProcessing</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"pending"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"paid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"shipped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span>String status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"pending"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Handling payment for pending order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理支付逻辑</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment handled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cannot ship. Payment pending."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"paid"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Handling shipping for paid order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理发货逻辑</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"shipped"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order already shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid order status: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 状态接口</span><span class="token keyword">interface</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体状态类</span><span class="token keyword">class</span> <span class="token class-name">PendingPaymentState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment handled for pending order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cannot ship. Payment pending."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PaidState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shipping handled for paid order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ShippedState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order already shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上下文类</span><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OrderState currentState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>OrderState initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentState<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentState<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>OrderState newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatePatternExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PendingPaymentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShippedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、枚举"><a href="#5、枚举" class="headerlink" title="5、枚举"></a>5、枚举</h3><p>对一些创建了枚举值，针对不同的枚举值有不同的操作时，枚举也可以消除if-else。个人感觉有点像策略模式或者表驱动。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> OperateTypeEnum<span class="token punctuation">{</span>      <span class="token function">PO</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DC_INBOUND</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DC_OUTBOUND</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token function">OperateTypeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span>Integer operator<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>PO<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getPoOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>PR<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getPrOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>DC_INBOUND<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getDcInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>DC_OUTBOUND<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getDcOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getPoOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 1L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getPrOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 2L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDcInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 3L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDcOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 4L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDwInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 5L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDwOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 6L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后的代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> OperateTypeEnum<span class="token punctuation">{</span>      <span class="token function">PO</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 1L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">PR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 2L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">DC_INBOUND</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 3L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">DC_OUTBOUND</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 4L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token function">OperateTypeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> OperateTypeEnum <span class="token function">ofCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 定义一个公共方法      */</span>      <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span>Integer operatorType<span class="token punctuation">)</span><span class="token punctuation">{</span>      OperateTypeEnum operateTypeEnum <span class="token operator">=</span> OperateTypeEnum<span class="token punctuation">.</span><span class="token function">ofCode</span><span class="token punctuation">(</span>operatorType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> operateTypeEnum<span class="token punctuation">.</span><span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式也是我再处理一些枚举时，对应不同的处理逻辑时常用的一种方式。比如根据订单类型的不同返回类型对应的数据。当然我们枚举方法中处理逻辑时如果想用bean的话，可以当做参数传入或者直接从Spring容器中获取。</p><h3 id="6、表驱动（Map-函数方法）"><a href="#6、表驱动（Map-函数方法）" class="headerlink" title="6、表驱动（Map+函数方法）"></a>6、表驱动（Map+函数方法）</h3><p>表驱动编程是一种通过查找表格而不是嵌套条件语句来实现的编程方法。可以使用数据结构（如数组、Map）来存储条件和对应的操作，这样就不必用很多的逻辑语句（if 或 case）来把它们找出来的方法。</p><ul><li>优化前代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> OrderInfoVO <span class="token function">operateOrder</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handlePoOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handleInboundOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handleOutboundOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>OrderInfoDO<span class="token punctuation">,</span> OrderInfoVO<span class="token operator">>></span> functionMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handlePoOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handleInboundOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handleOutboundOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> functionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然<code>Funtion</code>也可以根据业务需要，可以为<code>Consumer</code>，<code>Predicate</code>等。<br>不过我们也可以利用Spring的依赖注入，将其转换为对应的Map&lt;String, Bean&gt;。比如上述代码也可以这么优化：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 定义统一的处理接口      * @param orderInfo      * @return      */</span>      OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">PoOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Po      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">InboundOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Inbound      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 具体处理逻辑  </span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">InboundOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Outbound      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSerivceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> IOrderHandler<span class="token operator">></span> orderHandlerMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> OrderInfoVO <span class="token function">handleOrderInfo</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>        IOrderHandler orderHandler <span class="token operator">=</span> orderHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> orderHandler<span class="token punctuation">.</span><span class="token function">handlerOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、策略模式-工厂模式"><a href="#7、策略模式-工厂模式" class="headerlink" title="7、策略模式+工厂模式"></a>7、策略模式+工厂模式</h3><p>我们可以使用策略模式将每个条件分支抽象为一个策略类，然后在主逻辑中使用策略类来执行相应的逻辑。这种方式可以降低代码的耦合性，使得代码更加可维护和可扩展。然后再使用工厂模式定义一个策略工厂类去管理这些策略，即对外提供的都是策略工厂的方法。这种方法可以有效的去除if-else，并且代码逻辑更容易阅读维护以及扩展。<br>比如上例中，我们在处理不同订单类型时的handler类就是一个个的策略，我们也可以创建一个策略工厂类。</p><pre class="line-numbers language-java"><code class="language-java">publid <span class="token keyword">class</span> <span class="token class-name">OrderHandlerFactory</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> IOrderHandler<span class="token operator">></span> orderHandlerMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PoOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InboundOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutboundOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*** 获取具体处理的类*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> IOrderHandler <span class="token function">getOrderHandler</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> orderHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、规则引擎"><a href="#8、规则引擎" class="headerlink" title="8、规则引擎"></a>8、规则引擎</h3><p>使用规则引擎来管理条件和对应的执行逻辑。例如，Drools 是一个强大的规则引擎，它允许你定义规则并动态执行它们。再比如LiteFlow，EasyRule，都可以通过管理条件和对应的执行逻辑。可以消除if-else。规则引擎适合处理复杂的业务逻辑。通过编排条件去处理业务逻辑。后续会分享规则引擎相关的干货。有兴趣的同学可以关注公众号<code>码农Academy</code>。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>上述方案都可以达到优化if-else的效果，但是采用那种方案还是要看具体的代码逻辑以及业务处理逻辑，重要的是要评估项目的复杂性、维护性和性能需求，选择最适合项目需求的优化方案。在实际开发中，通常会根据具体情况结合多种方式来达到更好的优化效果。</p>]]></content>
      
      
      <categories>
          
          <category> 代码整洁之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码优化 </tag>
            
            <tag> 代码整洁之道 </tag>
            
            <tag> if-else优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
