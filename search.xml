<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>重温Java基础（三）之Java虚拟机类加载机制探究：生命周期、初始化、使用与验证</title>
      <link href="/article/jvmclassloader.html"/>
      <url>/article/jvmclassloader.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/medias/contact.jpg" alt="contact.jpg"></p><h3 id="一、java虚拟机与程序的生命周期"><a href="#一、java虚拟机与程序的生命周期" class="headerlink" title="一、java虚拟机与程序的生命周期"></a>一、java虚拟机与程序的生命周期</h3><p>在如下几种情况之下，java虚拟机将结束生命周期：</p><ul><li>执行了<code>System.exit()</code>方法</li><li>程序正常执行结束</li><li>程序在执行过程中遇到了异常或者错误而异常终止</li><li>由于操作系统用出现错误而导致java虚拟机进程终止<h3 id="二、类的加载，链接，初始化"><a href="#二、类的加载，链接，初始化" class="headerlink" title="二、类的加载，链接，初始化"></a>二、类的加载，链接，初始化</h3><h4 id="2-1-加载：查找并加载类的二进制数据"><a href="#2-1-加载：查找并加载类的二进制数据" class="headerlink" title="2.1 加载：查找并加载类的二进制数据"></a>2.1 加载：查找并加载类的二进制数据</h4></li></ul><p>类加载器并不需要某个类被首次主动使用时再加载他。JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(<code>LinkageError</code>错误)。如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。类被加载后，就进入连接阶段。</p><h4 id="2-2-连接："><a href="#2-2-连接：" class="headerlink" title="2.2 连接："></a>2.2 连接：</h4><p>将已经读入到内存的类的二进制数据合并到虚拟机的运行时环境中去。然后要经过一系列的验证。</p><h5 id="2-2-1-验证：确保被加载的类的正确性（验证字节码）"><a href="#2-2-1-验证：确保被加载的类的正确性（验证字节码）" class="headerlink" title="2.2.1 验证：确保被加载的类的正确性（验证字节码）"></a>2.2.1 验证：确保被加载的类的正确性（验证字节码）</h5><ul><li>类文件的结构检查：确保类文件遵从java类文件的固定格式。</li><li>语义检查：确保类本身符合java语言的语法规定，比如验证final类型的类没有子类，以及final类型的方法没有被覆盖。（虽然编译时就可以发现错误，但不经过编译，手动生成class文件，那么就会发现不了final类型的方法被覆盖，但是语义检查就可以发现）</li><li>字节码验证：确保字节码流可以被java虚拟机安全的执行。字节码流代表java方法（报空静态方法和实例方法），它是由被称作操作码的单字节指令组成的序列，每一个操作码后跟着一个或多个操作数。字节码验证步骤会检查每个操作码是否合法，即是否有着合法的操作数。</li><li>二进制兼容性的验证：确保相互引用的类之间的协调一致，例如在<code>Wroker</code>类的<code>gotoWork()</code>方法中会调用Car类的run()方法。java虚拟机在验证work()类时，会检查在方法区内是否存在Car类的run()方法，假如不存在（当worker类和Car类的版本不兼容，就会出现这种问题），就会抛出<code>NoSuchMethodError</code>方法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wroker</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gotoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这段代码在worker类的二进制数据中表示为符号引用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-准备：为类的静态变量分配内存，并将其初始化为默认"><a href="#2-2-准备：为类的静态变量分配内存，并将其初始化为默认" class="headerlink" title="2.2 准备：为类的静态变量分配内存，并将其初始化为默认"></a>2.2 准备：为类的静态变量分配内存，并将其初始化为默认</h5><p>在准备阶段，Java虚拟机为类的静态变量分配内存，并设置默认的初始值。例如对于一下Sample类，在准备阶端，将为int类型的静态变量a分配4个字节的内存空间，并且赋予默认值0，为long类型的静态变量b分配8个字节的内存空间，并且赋予默认值0。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-解析：把类中的符号引用转换为直接引用"><a href="#2-3-解析：把类中的符号引用转换为直接引用" class="headerlink" title="2.3  解析：把类中的符号引用转换为直接引用"></a>2.3  解析：把类中的符号引用转换为直接引用</h5><p>在解析阶段，java虚拟机会把类的二进制数据中的符号引用替换为直接引用。例如在Worker类的gotoWork()方法中会引用Car类的run()方法。</p><p>在Worker类中的二进制数据中，包含了一个对Car类的run()方法的符号引用，它由run()方法的全名和相关描述符组成。在解析阶段，Java虚拟机会把这个符号替换为一个指针，该指针指向Car类的run()方法在方法区内的内存位置。这个指针就是直接引用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wroker</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gotoWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       Car car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             car<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这段代码在worker类的二进制数据中表示为符号引用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-初始化：为类的静态成员变量赋予正确的初始值"><a href="#2-3-初始化：为类的静态成员变量赋予正确的初始值" class="headerlink" title="2.3 初始化：为类的静态成员变量赋予正确的初始值"></a>2.3 初始化：为类的静态成员变量赋予正确的初始值</h4><p>在初始化阶段，java虚拟机执行类的初始化语句，为类的静态变量赋予初始值。在程序中，静态变量初始化有两种途径：</p><ul><li>在静态变量的声明处进行初始化</li><li>在静态代码快中进行初始化。例如在以下代码中，静态变量a和b都被显示初始化，而静态变量c没有被显示初始化，它将保持默认值为0；但是如果要使用c，则必须进行初始化。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在静态变量声明出进行初始化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> c<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//但是如果要使用c，则必须进行初始化</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在静态代码块中进行初始化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Singleton singleton<span class="token operator">=</span>Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"counter1= "</span><span class="token operator">+</span>singleton<span class="token punctuation">.</span>counter1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"counter2= "</span><span class="token operator">+</span>singleton<span class="token punctuation">.</span>counter2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/***程序是从上向下顺序执行* new Singleton()时，counter1，counter2初始值均为0* 在通过构造方法Singleton()，均加1.则返回的值counter1，counter2均为1* 然后再程序在继续向下执行，由于counter1没有显示初始化，则值还是为1* 但是counter2经过显示初始化后，其值为0* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//new语句在这是结果为counter1= 1；counter2= 0</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter1<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//private static Singleton singleton=new Singleton();//new语句在这是结果为counter1= 1；counter2= 1</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        counter1<span class="token operator">++</span><span class="token punctuation">;</span>        counter2<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态变量的声明语句，以及静态代码块都被看做类的初始化语句，java虚拟机会按照初始化语句在类文件中的先后顺序来一次执行他们。</li><li>类的初始化步骤</li><li>假如这个类还没有被加载和连接，那就先进行加载和连接</li><li>假如类存在直接的父类，并且这个父类还没有被初始化，那就先初始化直接的父类。</li><li>假如父类中存在初始化语句，那就依次执行这些初始化语句。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 当X=6/3时，编译时即可算出X=2，即编译时常量，即不需要运行类，所以不打印静态代码块中的内容*当X=new Random().nextInt(100)时，编译时不能算出X的值，只有运行程序才知道，所以打印结果为：FinalTest static final 2* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> X<span class="token operator">=</span><span class="token number">6</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印结果： 2</span>    <span class="token comment" spellcheck="true">//public static final int X=new Random().nextInt(100);//打印结果为FinalTest static final 2</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"FinalTest static final"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类的初始化时机：当java虚拟机初始化一个类时，要求他的所有父类都已经被初始化，但是这条规则并不适用于接口。</li><li>在初始化一个类时，并不先初始化它所实现的接口</li><li>在初始化一个接口时，并不会先初始化他的父接口<br>因此，一个父接口并不会因为他的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test4 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Test4 static block* Parent static block* Child static block* 4* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如以下示例赋值的执行流程：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//首先在准备阶段java虚拟在内存中为a分配内存，int的初始值是0，所以此时a的值是0；在初始化阶段，给赋值为3</span><span class="token comment" spellcheck="true">//相当于：</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从上到下执行</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108225351.png" alt="image.png"></p><h3 id="三、java程序对类的使用方式可分为两种："><a href="#三、java程序对类的使用方式可分为两种：" class="headerlink" title="三、java程序对类的使用方式可分为两种："></a>三、java程序对类的使用方式可分为两种：</h3><h4 id="3-1-主动使用"><a href="#3-1-主动使用" class="headerlink" title="3.1 主动使用"></a>3.1 主动使用</h4><ul><li>创建类的实例。比如：<code>new Test()</code></li><li>访问某个类或者接口的静态变量，或者对该静态变量赋值。比如：<code>int b=Test.a</code></li><li>调用类的静态方法。例如：<code>Test.doSomething()</code>;</li><li>反射(如<code>class.forName(&quot;com.jvm.classloader.test&quot;)</code>)</li><li>初始化一个类的子类(对父类的主动使用)。例如</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>java虚拟机启动时被表明为启动类的类</li></ul><p>程序中对子类的“主动使用”会导致父类被初始化，但对父类的“主动使用”并不会导致子类初始化，不可能说生成一个Object类的对象就导致系统中所有的子类都会被初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test5</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Test5 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Parent2 parent<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Parent2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Parent2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child2<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Test5 static block* -------------* Parent2 static block* 3* Child2 static block* 4**/</span><span class="token keyword">class</span> <span class="token class-name">Parent2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent2 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child2</span> <span class="token keyword">extends</span> <span class="token class-name">Parent2</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child2 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当程序访问的静态变量或静态方法确实在当前接口定义时，才可以认为是对类或接口的主动使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Child3<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        Child3<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** Parent3 static block* 3* doSomething* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Parent3</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Parent3 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Child3</span> <span class="token keyword">extends</span> <span class="token class-name">Parent3</span><span class="token punctuation">{</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Child3 static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>ClassLoader</code>类的<code>loadClass</code>方法加载一个类，并不是对类的主动使用，不会导致类的初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test7</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        ClassLoader loader<span class="token operator">=</span>ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token operator">=</span>loader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.Z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** ------------------------*Z static block* @author coderacademy*/</span><span class="token keyword">class</span> <span class="token class-name">Z</span><span class="token punctuation">{</span>  <span class="token keyword">static</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Z static block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-被动使用"><a href="#3-2-被动使用" class="headerlink" title="3.2 被动使用"></a>3.2 被动使用</h4><p> 除去以上六种主动使用以外的使用都是被动使用，都不会导致类的初始化。所有的java虚拟机实现必须在每个类或接口被java程序首次主动使用时才初始化他们。<br>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其方法存进运行时数据区的方法区内。然后在堆区创建一个Java.lang.Class对象，用来封装在类在方法区内的数据结构。</p><p><img src="https://coderacademy.oss-cn-zhangjiakou.aliyuncs.com/blogcontent/20240108223927.png" alt="image.png"></p><h3 id="四、-加载class文件的方式"><a href="#四、-加载class文件的方式" class="headerlink" title="四、 加载class文件的方式"></a>四、 加载class文件的方式</h3><h4 id="4-1-本地系统中直接加载"><a href="#4-1-本地系统中直接加载" class="headerlink" title="4.1 本地系统中直接加载"></a>4.1 本地系统中直接加载</h4><ul><li>通过网络下载.class文件(<code>java.net.URLClassLoader(URL[] urls)</code>)</li><li>从zip，jar等归档文件中加载.class文件</li><li>从专有数据库中提取.class文件</li><li>将java源文件动态编译为.class文件。<br>类的加载的最终产品是位于堆区中的Class对象。Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。<h4 id="4-2、两种类型的类加载器"><a href="#4-2、两种类型的类加载器" class="headerlink" title="4.2、两种类型的类加载器"></a>4.2、两种类型的类加载器</h4><h5 id="4-2-1-Java虚拟机自带的加载器"><a href="#4-2-1-Java虚拟机自带的加载器" class="headerlink" title="4.2.1 Java虚拟机自带的加载器"></a>4.2.1 Java虚拟机自带的加载器</h5></li><li>根类加载器(<code>Bootstrap</code>)。使用C++编写，程序员无法在java代码中获得该类。</li><li>扩展类加载器（<code>Extension</code>），使用java代码实现</li><li>系统类加载器(<code>System</code>)，应用加载器，使用java代码实现<h5 id="4-2-2-用户自定义的类加载器"><a href="#4-2-2-用户自定义的类加载器" class="headerlink" title="4.2.2 用户自定义的类加载器"></a>4.2.2 用户自定义的类加载器</h5></li><li><code>java.lang.ClassLoader</code>的子类</li><li>用户可以定制类的加载方式<br><code>public ClassLoader getClassLoader()</code>方法。针对这个类返回一个个加载器，但是某些实现可能会返回null代表根类加载器。如果使用根类加载器加载类，那么这个方法就会返回null；例：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootStrapTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader loader<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * 打印结果为null        */</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loader<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz2</span><span class="token operator">=</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jvm.classloader.C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader loader2<span class="token operator">=</span>clazz2<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        * 打印结果为：sun.misc.Launcher$AppClassLoader@54a5f709 应用加载器         */</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loader2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java类加载 </tag>
            
            <tag> java </tag>
            
            <tag> java核心基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工具类（二）之深入Guava集合操作</title>
      <link href="/article/7cd2c424.html"/>
      <url>/article/7cd2c424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><h2 id="深入Guava集合操作"><a href="#深入Guava集合操作" class="headerlink" title="深入Guava集合操作"></a>深入Guava集合操作</h2><p>在Java开发中，Google Guava库是处理集合的强大工具。起源于Google内部需求，Guava以简洁性、性能优化为理念，提供高效不可变集合和实用工具类。本文深入剖析Guava的核心功能，为开发者呈现集合操作的全新视角，无论经验水平，都能获得实用技巧和深刻见解。</p><h3 id="一、不可变集合"><a href="#一、不可变集合" class="headerlink" title="一、不可变集合"></a>一、不可变集合</h3><h4 id="1、为什么使用不可变集合"><a href="#1、为什么使用不可变集合" class="headerlink" title="1、为什么使用不可变集合"></a>1、为什么使用不可变集合</h4><p>不可变对象有很多优点，包括： </p><ul><li>当对象被不可信的库调用时，不可变形式是安全的；</li><li>不可变对象被多个线程调用时，不存在竞态条件问题</li><li>可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变形式有更好的内存利用率（分析和测试细节）；</li><li>不可变对象因为有固定不变，可以作为常量来安全使用。</li></ul><h4 id="2、创建不可变集合的方式："><a href="#2、创建不可变集合的方式：" class="headerlink" title="2、创建不可变集合的方式："></a>2、创建不可变集合的方式：</h4><ul><li>copyOf方法，如ImmutableSet.copyOf(set);</li><li>of方法，如ImmutableSet.of(“a”, “b”, “c”)或 ImmutableMap.of(“a”, 1, “b”, 2); </li><li>Builder工具，如：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ImmutableSet<span class="token operator">&lt;</span>String<span class="token operator">></span> SET <span class="token operator">=</span>             ImmutableSet<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，对有序不可变集合来说，排序是在构造集合的时候完成的，如： <code>ImmutableSortedSet.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;d&quot;, &quot;b&quot;);</code></p><p>会在构造时就把元素排序为a, b, c, d。</p><h4 id="3、asList视图"><a href="#3、asList视图" class="headerlink" title="3、asList视图"></a>3、asList视图</h4><p>所有不可变集合都有一个asList()方法提供ImmutableList视图，来帮助你用列表形式方便地读取集合元素。例如，你可以使用sortedSet.asList().get(k)从ImmutableSortedSet中读取第k个最小元素。</p><p>asList()返回的ImmutableList通常是——并不总是——开销稳定的视图实现，而不是简单地把元素拷贝进List。也就是说，asList返回的列表视图通常比一般的列表平均性能更好，比如，在底层集合支持的情况下，它总是使用高效的contains方法。</p><h3 id="二、关联可变集合和不可变集合"><a href="#二、关联可变集合和不可变集合" class="headerlink" title="二、关联可变集合和不可变集合"></a>二、关联可变集合和不可变集合</h3><table><thead><tr><th>可变集合接口</th><th>属于JDK还是Guava</th><th>不可变版本</th></tr></thead><tbody><tr><td>Collection</td><td>JDK</td><td>ImmutableCollection</td></tr><tr><td>List</td><td>JDK</td><td>ImmutableList</td></tr><tr><td>Set</td><td>JDK</td><td>ImmutableSet</td></tr><tr><td>SortedSet/NavigableSet</td><td>JDK</td><td>ImmutableSortedSet</td></tr><tr><td>Map</td><td>JDK</td><td>ImmutableMap</td></tr><tr><td>SortedMap</td><td>JDK</td><td>ImmutableSortedMap</td></tr><tr><td>Multiset</td><td>Guava</td><td>ImmutableMultiset</td></tr><tr><td>SortedMultiset</td><td>Guava</td><td>ImmutableSortedMultiset</td></tr><tr><td>Multimap</td><td>Guava</td><td>ImmutableMultimap</td></tr><tr><td>ListMultimap</td><td>Guava</td><td>ImmutableListMultimap</td></tr><tr><td>SetMultimap</td><td>Guava</td><td>ImmutableSetMultimap</td></tr><tr><td>BiMap</td><td>Guava</td><td>ImmutableBiMap</td></tr><tr><td>ClassToInstanceMap</td><td>Guava</td><td>ImmutableClassToInstanceMap</td></tr><tr><td>Table</td><td>Guava</td><td>ImmutableTable</td></tr></tbody></table><h3 id="三、新集合类型"><a href="#三、新集合类型" class="headerlink" title="三、新集合类型"></a>三、新集合类型</h3><h4 id="1、Multiset"><a href="#1、Multiset" class="headerlink" title="1、Multiset"></a>1、Multiset</h4><p>Multiset可以多次添加相等元素，集合[set]概念的延伸，它的元素可以重复出现…与集合[set]相同而与元组[tuple]相反的是，Multiset元素的顺序是无关紧要的：Multiset {a, a, b}和{a, b, a}是相等的</p><p>可以用两种方式看待Multiset：</p><ul><li>没有元素顺序限制的ArrayList</li><li>Map&lt;E, Integer&gt;，键为元素，值为计数<h5 id="（1）、常见方法"><a href="#（1）、常见方法" class="headerlink" title="（1）、常见方法"></a>（1）、常见方法</h5></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int count(E)</td><td>给定元素在Multiset中的计数</td></tr><tr><td>Set&lt;E&gt; elementSet()</td><td>Multiset中不重复元素的集合，类型为Set&lt;E&gt;</td></tr><tr><td>Set&lt;Multiset.Entry&lt;E&gt;&gt; entrySet()</td><td>和Map的entrySet类似，返回Set&lt;Multiset.Entry&lt;E&gt;&gt;，其中包含的Entry支持getElement()和getCount()方法</td></tr><tr><td>int add(E, int)</td><td>增加给定元素在Multiset中的计数</td></tr><tr><td>boolean add(E element)</td><td>增加一个指定的元素到multiset</td></tr><tr><td>boolean contains(E element)</td><td>判断此多集中是否包含指定的元素</td></tr><tr><td>boolean containsAll(Collection&lt;\?&gt; elements)</td><td>判断此多集至少包含一个出现指定集合的所有元素</td></tr><tr><td>remove(E, int)</td><td>减少给定元素在Multiset中的计数,删除指定元素</td></tr><tr><td>removeAll(Collection&lt;?&gt; c)</td><td>删除包含在指定集合中的元素</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; e)</td><td>保持包含指定集合中的元素</td></tr><tr><td>int setCount(E, int)</td><td>设置给定元素在Multiset中的计数，不可以为负数，添加/删除指定元素，使其达到所期望的元素个数</td></tr><tr><td>int size()</td><td>返回集合元素的总个数（包括重复的元素）</td></tr><tr><td>Iterator iterator()</td><td>返回一个迭代器，包含Multiset的所有元素（包括重复的元素）</td></tr></tbody></table><h5 id="2-、示例"><a href="#2-、示例" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * MultiSet     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiSetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Multiset<span class="token operator">&lt;</span>String<span class="token operator">></span> multiset <span class="token operator">=</span> HashMultiset<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multiset<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multiset的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> multiset<span class="token punctuation">.</span><span class="token function">elementSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不重复元素："</span><span class="token operator">+</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> multiset<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"multiset元素："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Multiset<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token operator">>></span> entrySet <span class="token operator">=</span>  multiset<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> setMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entrySet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            setMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素详情："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>setMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multiset<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除a后，a的个数："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含List："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含List："</span><span class="token operator">+</span>multiset<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）、SortedMultiset"><a href="#（3）、SortedMultiset" class="headerlink" title="（3）、SortedMultiset"></a>（3）、SortedMultiset</h5><p>SortedMultiset是Multiset 接口的变种，它支持高效地获取指定范围的子集</p><h4 id="2、MultiMap"><a href="#2、MultiMap" class="headerlink" title="2、MultiMap"></a>2、MultiMap</h4><p>Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。 可以用两种方式思考Multimap的概念：”键-单个值映射”的集合：<br>a -&gt; 1 a -&gt; 2 a -&gt;4 b -&gt; 3 c -&gt; 5<br>或者”键-值集合映射”的映射：<br>a -&gt; [1, 2, 4] b -&gt; 3 c -&gt; 5<br>一般来说，Multimap接口应该用第一种方式看待，但asMap()视图返回Map&lt;K, Collection&gt;，让你可以按另一种方式看待Multimap。重要的是，不会有任何键映射到空集合：一个键要么至少到一个值，要么根本就不在Multimap中。 很少会直接使用Multimap接口，更多时候你会用ListMultimap或SetMultimap接口，它们分别把键映射到List或Set。</p><h5 id="1-、常用方法"><a href="#1-、常用方法" class="headerlink" title="(1)、常用方法"></a>(1)、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th><th>等价于</th></tr></thead><tbody><tr><td>boolean put(K, V)</td><td>添加键到单个值的映射</td><td>multimap.get(key).add(value)</td></tr><tr><td>boolean putAll(K, Iterable&lt;V&gt;)</td><td>依次添加键到多个值的映射</td><td>Iterables.addAll(multimap.get(key), values)</td></tr><tr><td>remove(K, V)</td><td>移除键到值的映射；如果有这样的键值并成功移除，返回true。</td><td>multimap.get(key).remove(value)</td></tr><tr><td>removeAll(K)</td><td>清除键对应的所有值，返回的集合包含所有之前映射到K的值，但修改这个集合就不会影响Multimap了。</td><td>multimap.get(key).clear()</td></tr><tr><td>replaceValues(K, Iterable&lt;V&gt;)</td><td>清除键对应的所有值，并重新把key关联到Iterable中的每个元素。返回的集合包含所有之前映射到K的值。</td><td>multimap.get(key).clear(); Iterables.addAll(multimap.get(key), values)</td></tr><tr><td>Map&lt;K,Collection&lt;V&gt;&gt; asMap()</td><td>获取MultiMap的视图，键值K，以及K对应的集合</td><td></td></tr><tr><td>void clear()</td><td>清除所有的键值对</td><td></td></tr><tr><td>boolean containsEntry(Object key,Object value)</td><td>判断是否包含key-value对应的键值对</td><td></td></tr><tr><td>boolean containsKey(Object key)</td><td>判断是否包含键值key</td><td></td></tr><tr><td>boolean containsValue(Object value)</td><td>判断是否包含值value</td><td></td></tr><tr><td>Collection&lt;Map.Entry&lt;K,V&gt;&gt; entries()</td><td>MultiMap为Map&lt;Entry&gt;情况下，返回所有的键值对集合</td><td></td></tr><tr><td>Collection&lt;V&gt; get(K k)</td><td>返回键k对应的所有集合</td><td></td></tr><tr><td>boolean isEmpty()</td><td>判断MultiMap是否是空，即不包含键值对</td><td></td></tr><tr><td>MultiSet&lt;K&gt; keys()</td><td>返回所有的键值K，包含重复</td><td></td></tr><tr><td>Set&lt;K&gt; keySet()</td><td>返回所有的键值K，不重复</td><td></td></tr><tr><td>int size()</td><td>返回键值对的数量</td><td></td></tr><tr><td>Collection&lt;V&gt; values</td><td>返回所有的value</td><td></td></tr></tbody></table><h5 id="2-、示例-1"><a href="#2-、示例-1" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * MultiMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Multimap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> multimap <span class="token operator">=</span> HashMultimap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">,</span>Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">>></span> asMap <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">asMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"asMap视图："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>asMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Multiset<span class="token operator">&lt;</span>String<span class="token operator">></span> multisetKey <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的key:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multisetKey<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不重复的key："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>keySet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lower:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加后的lower:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"upper:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        multimap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"移除元素后的upper："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>multimap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含lower-b:"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsEntry</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含lower-b:"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsEntry</span><span class="token punctuation">(</span><span class="token string">"lower"</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含key(upper):"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"upper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含value(c):"</span><span class="token operator">+</span>multimap<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">>></span> collection <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MultiMap详情："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> values <span class="token operator">=</span> multimap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MultiMap所有的value："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-、Multimap不是Map"><a href="#3-、Multimap不是Map" class="headerlink" title="(3)、Multimap不是Map"></a>(3)、Multimap不是Map</h5><p>Multimap&lt;K, V&gt;不是Map&lt;K,Collection&gt;，虽然某些Multimap实现中可能使用了map。它们之间的显著区别包括：</p><ul><li><p>Multimap.get(key)总是返回非null、但是可能空的集合。这并不意味着Multimap为相应的键花费内存创建了集合，而只是提供一个集合视图方便你为键增加映射值——译者注：如果有这样的键，返回的集合只是包装了Multimap中已有的集合；如果没有这样的键，返回的空集合也只是持有Multimap引用的栈对象，让你可以用来操作底层的Multimap。因此，返回的集合不会占据太多内存，数据实际上还是存放在Multimap中。</p></li><li><p>如果你更喜欢像Map那样，为Multimap中没有的键返回null，请使用asMap()视图获取一个Map&lt;K, Collection&lt;V&gt;&gt;。（或者用静态方法Multimaps.asMap()为ListMultimap返回一个Map&lt;K, List&lt;V&gt;&gt;。对于SetMultimap和SortedSetMultimap，也有类似的静态方法存在）</p></li><li><p>当且仅当有值映射到键时，Multimap.containsKey(key)才会返回true。尤其需要注意的是，如果键k之前映射过一个或多个值，但它们都被移除后，Multimap.containsKey(key)会返回false。</p></li><li><p>Multimap.entries()返回Multimap中所有”键-单个值映射”——包括重复键。如果你想要得到所有”键-值集合映射”，请使用asMap().entrySet()。</p></li><li><p>Multimap.size()返回所有”键-单个值映射”的个数，而非不同键的个数。要得到不同键的个数，请改用Multimap.keySet().size()。</p><h5 id="4-、Multimap的各种实现"><a href="#4-、Multimap的各种实现" class="headerlink" title="(4)、Multimap的各种实现"></a>(4)、Multimap的各种实现</h5></li></ul><table><thead><tr><th>实现</th><th>键行为类似</th><th>值行为类似</th></tr></thead><tbody><tr><td>ArrayListMultimap</td><td>HashMap</td><td>ArrayList</td></tr><tr><td>HashMultimap</td><td>HashMap</td><td>HashSet</td></tr><tr><td><em>LinkedListMultimap</em></td><td><em>LinkedHashMap</em></td><td><em>LinkedList</em></td></tr><tr><td><em>LinkedHashMultimap</em></td><td>LinkedHashMap</td><td>LinkedHashMap</td></tr><tr><td>TreeMultimap</td><td>TreeMap</td><td>TreeSet</td></tr><tr><td>ImmutableListMultimap</td><td>ImmutableMap</td><td>ImmutableList</td></tr><tr><td>ImmutableSetMultimap</td><td>ImmutableMap</td><td>ImmutableSet</td></tr></tbody></table><p>除了两个不可变形式的实现，其他所有实现都支持null键和null值</p><ul><li><p>LinkedListMultimap.entries()保留了所有键和值的迭代顺序。详情见doc链接。</p></li><li><p>LinkedHashMultimap保留了映射项的插入顺序，包括键插入的顺序，以及键映射的所有值的插入顺序。 请注意，并非所有的Multimap都和上面列出的一样，使用Map&lt;K, Collection&lt;V&gt;&gt;来实现（特别是，一些Multimap实现用了自定义的hashTable，以最小化开销）</p></li></ul><h4 id="3、BiMap"><a href="#3、BiMap" class="headerlink" title="3、BiMap"></a>3、BiMap</h4><p>BiMap&lt;K, V&gt;是特殊的Map：</p><ul><li>可以用 inverse()反转BiMap&lt;K, V&gt;的键值映射</li><li>保证值是唯一的，因此 values()返回Set而不是普通的Collection</li></ul><p>在BiMap中，如果你想把键映射到已经存在的值，会抛出IllegalArgumentException异常。</p><h5 id="（1）、常用方法"><a href="#（1）、常用方法" class="headerlink" title="（1）、常用方法"></a>（1）、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>V forcePut(String key, V value)</td><td>对于特定的值，强制替换它的键</td></tr><tr><td>BiMap&lt;K,V&gt; inverse()</td><td>k-v键值对的转换，即v-k</td></tr><tr><td>V put&lt;K key,V value&gt;</td><td>关联v到k</td></tr><tr><td>void putAll(Map&lt;\? extend k,\? extend V&gt; map)</td><td>将map加入到BiMap</td></tr><tr><td>Set values()</td><td>返回BiMap映射中包含的Collection视图</td></tr><tr><td>##### (2)、BiMap的各种实现</td><td></td></tr></tbody></table><table><thead><tr><th>键–值实现</th><th>值–键实现</th><th>对应的BiMap实现</th></tr></thead><tbody><tr><td>HashMap</td><td>HashMap</td><td>HashBiMap</td></tr><tr><td>ImmutableMap</td><td>ImmutableMap</td><td>ImmutableBiMap</td></tr><tr><td>EnumMap</td><td>EnumMap</td><td>EnumBiMap</td></tr><tr><td>EnumMap</td><td>HashMap</td><td>EnumHashBiMap</td></tr></tbody></table><h5 id="（3）、示例"><a href="#（3）、示例" class="headerlink" title="（3）、示例"></a>（3）、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * BiMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">biMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BiMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> biMap <span class="token operator">=</span> HashBiMap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"转换后所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String v <span class="token operator">=</span> biMap<span class="token punctuation">.</span><span class="token function">forcePut</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换的值："</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>biMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、Table"><a href="#4、Table" class="headerlink" title="4、Table"></a>4、Table</h4><p>Table是Guava提供的一个接口 Interface Table&lt;R,C,V&gt;，由rowKey+columnKey+value组成 它有两个键，一个值，和一个n行三列的数据表类似，n行取决于Table对对象中存储了多少个数据。</p><h5 id="（1）、常用方法-1"><a href="#（1）、常用方法-1" class="headerlink" title="（1）、常用方法"></a>（1）、常用方法</h5><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Set&lt;Table.Cell&lt;R,C,V&gt;&gt; cellSet()</td><td>返回集合中的行键，列键，值三元组</td></tr><tr><td>void clear()</td><td>清除所有的键值对</td></tr><tr><td>Map&lt;R,V&gt; column(C columnKey)</td><td>获取列键对应的键值对</td></tr><tr><td>Map&lt;C,V&gt; row(R row)</td><td>获取行键对应的列以及值</td></tr><tr><td>Set&lt;C&gt; columnKeySet()</td><td>获取所有的列键</td></tr><tr><td>Set&lt;R&gt; rowKeySet()</td><td>获取行键</td></tr><tr><td>Map&lt;C,Map&lt;R,V&gt;&gt; columnMap</td><td>返回列键对应的行键-值的视图</td></tr><tr><td>boolean contains(Object rowKey,Object columnKey)</td><td>判断是否包含指定的行键，列键</td></tr><tr><td>boolean containsColumn(Object columnKey)</td><td>判断是否包含指定的列键</td></tr><tr><td>boolean containsRow(Object rowKey)</td><td>判断是否包含指定的行键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断是否包含值</td></tr><tr><td>V get(Object rowKey,Object columnKey)</td><td>返回指定的行键，列键对应的值，不存在则返回null</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>V put(Object rowKey,Object columnKey,Object value)</td><td>put值</td></tr><tr><td>void putAll(Table&lt;\? extend R,? extend C,? extend V&gt; table)</td><td>put指定的table</td></tr><tr><td>V remove(Object rowKey,Object columnKey)</td><td>如果有，则移除指定行键，列键</td></tr><tr><td>Map&lt;R,Map&lt;C,V&gt;&gt; rowMap()</td><td>获取每个行键对应的列键，值的视图</td></tr><tr><td>int size()</td><td>集合的个数(行键/列键/值)</td></tr><tr><td>Collection&lt;V&gt; values()</td><td>集合值的集合，包括重复的</td></tr></tbody></table><h5 id="2-、示例-2"><a href="#2-、示例-2" class="headerlink" title="(2)、示例"></a>(2)、示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Table     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Table<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> table <span class="token operator">=</span> HashBasedTable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_1"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_1"</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grade_2"</span><span class="token punctuation">,</span><span class="token string">"class_3"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Table<span class="token punctuation">.</span>Cell<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> cellSet <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">cellSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellSet<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cell <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"table中的行："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getRowKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";列："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getColumnKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">";值："</span><span class="token operator">+</span>cell<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"grade1对应的class："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class1对应的grade："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string">"class_1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的grade:"</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">rowKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有的class："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">columnKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> rowMap <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">rowMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rowMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>map<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row <span class="token operator">+</span><span class="token string">"行对应的列值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span> columnMap <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">columnMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        columnMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span>map<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>column <span class="token operator">+</span><span class="token string">"列对应的行值："</span><span class="token operator">+</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含grade_1 和 class_2:"</span><span class="token operator">+</span>table<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        table<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否包含grade_1 和 class_2:"</span><span class="token operator">+</span>table<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"grade_1"</span><span class="token punctuation">,</span><span class="token string">"class_2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="（3）、Table有如下几种实现："><a href="#（3）、Table有如下几种实现：" class="headerlink" title="（3）、Table有如下几种实现："></a>（3）、Table有如下几种实现：</h5><ul><li><p>HashBasedTable：本质上用HashMap&lt;R, HashMap&lt;C, V&gt;&gt;实现；</p></li><li><p>TreeBasedTable：本质上用TreeMap&lt;R, TreeMap&lt;C,V&gt;&gt;实现；</p></li><li><p>ImmutableTable：本质上用ImmutableMap&lt;R, ImmutableMap&lt;C, V&gt;&gt;实现；注：ImmutableTable对稀疏或密集的数据集都有优化。</p></li><li><p>ArrayTable：要求在构造时就指定行和列的大小，本质上由一个二维数组实现，以提升访问速度和密集Table的内存利用率。ArrayTable与其他Table的工作原理有点不同。</p></li></ul><h4 id="5、ClassToInstanceMap"><a href="#5、ClassToInstanceMap" class="headerlink" title="5、ClassToInstanceMap"></a>5、ClassToInstanceMap</h4><p>ClassToInstanceMap是一种特殊的Map：它的键是类型，而值是符合键所指类型的对象。<br>为了扩展Map接口，ClassToInstanceMap额外声明了两个方法：T getInstance(Class T) 和T putInstance(Class , T)，从而避免强制类型转换，同时保证了类型安全。</p><p>ClassToInstanceMap有唯一的泛型参数，通常称为B，代表Map支持的所有类型的上界。</p><p>对于ClassToInstanceMap，Guava提供了两种有用的实现：MutableClassToInstanceMap和 ImmutableClassToInstanceMap。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * ClassToInstanceMap     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">classToInstanceMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ClassToInstanceMap<span class="token operator">&lt;</span>Number<span class="token operator">></span> instanceMap <span class="token operator">=</span> MutableClassToInstanceMap<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>456L<span class="token punctuation">)</span><span class="token punctuation">;</span>        instanceMap<span class="token punctuation">.</span><span class="token function">putInstance</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token number">789.09</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Integer:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Long:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Double:"</span><span class="token operator">+</span>instanceMap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6、RangSet"><a href="#6、RangSet" class="headerlink" title="6、RangSet"></a>6、RangSet</h4><p>RangeSet描述了一组不相连的、非空的区间。当把一个区间添加到可变的RangeSet时，所有相连的区间会被合并，空区间会被忽略。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过深入探索Google Guava库的集合操作，我们不仅仅发现了一个功能强大的工具，更是领略到了一个高效、简洁的Java编程理念。Guava不仅提供了基础数据结构，还为开发者提供了一整套处理集合的利器，从不可变集合到高效工具类，无一不展现出其设计的巧妙之处。</p><p>在实际项目中，Guava为我们提供了更清晰、更简单的集合操作方式，帮助我们避免了许多常见的错误和异常。它的性能优化更是让我们在处理大规模数据时事半功倍。</p><p>作为Java开发者，我们应该充分了解并灵活运用Guava库，以提高代码的可读性、可维护性和性能。无论是新手还是老手，Guava都能为我们的开发工作带来便捷和效率。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Guava </tag>
            
            <tag> Guava集合操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试官：请说一下Mysql中count(1)、count(*)以及count(列)的区别？</title>
      <link href="/article/1d31dad8.html"/>
      <url>/article/1d31dad8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>近期在Review项目代码时，发现同事们在查询MySQL行数时存在多样的方式，有的使用<code>COUNT(1)</code>, 有的用<code>COUNT(id)</code>, 还有人选择了<code>COUNT(*)</code>。这混杂的选择引发了我的思考。当然这三种count的方式也是众说纷纭，其中最大的分歧点就是<code>COUNT(*)</code>和<code>COUNT(1)</code>查询性能上，有人觉得<code>COUNT(*)</code>需要转换为<code>COUNT(1)</code>，所以<code>COUNT(1)</code>得速度更快。究竟这三种计数方式之间有何区别，它们的背后原理是怎样的呢？</p><h3 id="COUNT-含义"><a href="#COUNT-含义" class="headerlink" title="COUNT()含义"></a>COUNT()含义</h3><p>在《高性能Mysql》一书第236页中是这么解释<code>COUNT</code>的作用的：</p><blockquote><p>COUNT()是一个特殊的函数，有两种非常不同的作用:它可以统计某个列值的数量，也可以统计行数。在统计列值时要求列值是非空的(不统计NULL)。如果在COUNT()的括号中指定了列或者列的表达式，则统计的就是这个表达式有值的结果数”。因为很多人对 NULL理解有问题，所以这里很容易产生误解。<br>COUNT()的另一个作用是统计结果集的行数。当MySOL确认括号内的表达式值不可能为空时，实际上就是在统计行数。最简单的就是当我们使用COUNT(<em>)的时候，这种情况下通配符</em>并不会像我们猜想的那样扩展成所有的列，实际上，它会忽略所有的列而直接统计所有的行数。<br>我们发现一个最常见的错误就是，在括号内指定了一个列却希望统计结果集的行数。如果希望知道的是结果集的行数，最好使用<code>COUNT(*)</code>，这样写意义清晰，性能也会很好</p></blockquote><p>由此我们也可以大概总结<code>COUNT</code>函数的种方式如下：</p><ul><li><p><code>COUNT(1)</code>: 此查询返回的是结果集中的行数，不关心具体的列内容，因此使用常数1。<br>在很多数据库系统中，这种方式被优化为与 <code>SELECT COUNT(*)</code> 相同的性能水平，因为数据库引擎通常忽略括号内的内容。</p></li><li><p><code>COUNT(*)</code>：统计整个表的行数，不考虑是否有NULL值。<br>通常优于 <code>COUNT(id)</code>，因为它不需要关心具体的列，且现代数据库引擎会对其进行特殊优化。</p></li><li><p><code>COUNT(列)</code> ：统计指定列非空值的数量。需要考虑是否有NULL值<br>此种方式取决于列是否有索引。如果 列有索引，数据库引擎可能会利用索引进行快速计数。如果没有索引，或者有大量NULL值，性能可能较差，因为需要扫描整个表。</p></li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><h4 id="1、Mysql5-7"><a href="#1、Mysql5-7" class="headerlink" title="1、Mysql5.7"></a>1、Mysql5.7</h4><p>在<a href="https://dev.mysql.com/doc/refman/5.7/en/aggregate-functions.html#function_count" target="_blank" rel="noopener">MySql 5.7官方文档</a>中是这么介绍<code>COUNT(expr)</code>函数的</p><blockquote><p><code>COUNT(expr)</code><br>Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value.<br>If there are no matching rows, <code>COUNT()</code>returns 0.<br><code></code>mysql&gt; SELECT student.student_name,COUNT(<em>)<br>       FROM student,course<br>       WHERE student.student_id=course.student_id<br>       GROUP BY student_name;<code></code><br>`COUNT(</em>)` is somewhat different in that it returns a count of the number of rows retrieved, whether or not they contain NULL values.</p><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>Prior to MySQL 5.7.18, InnoDB processes <code>SELECT COUNT(*)</code> statements by scanning the clustered index. As of MySQL 5.7.18, InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, the clustered index is scanned.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use SHOW TABLE STATUS.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For MyISAM tables, <code>COUNT(*)</code> is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:<br><code>mysql&gt; SELECT COUNT(*) FROM student;</code><br>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly. COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p>从官方文档中我们可以看出mysql官方对<code>COUNT</code>函数的解释：</p><ul><li><p><code>COUNT(expr)</code> 返回由 SELECT 语句检索的行中 _expr_ 的非 NULL 值的数量，结果为 BIGINT 值。如果没有匹配的行，<code>COUNT()</code> 返回 0。</p></li><li><p><code>COUNT(*)</code> 有所不同，它返回所检索的行数的计数，无论它们是否包含 NULL 值。</p></li><li><p>对于事务性存储引擎（如 InnoDB），存储准确的行数是有问题的。因为多个事务可能同时影响计数，InnoDB 不会保留表中行的内部计数。<code>SELECT COUNT(*)</code> 只会计算当前事务可见的行。</p></li><li><p>在 MySQL 5.7.18 之前，InnoDB 通过扫描聚集索引处理 <code>SELECT COUNT(*)</code> 语句。从 MySQL 5.7.18 开始，除非索引或优化器提示指示使用其他索引，InnoDB 会通过遍历最小的可用二级索引来处理 <code>SELECT COUNT(*)</code> 语句。如果没有二级索引，则将扫描聚集索引。</p></li><li><p>处理 <code>SELECT COUNT(*)</code> 语句可能花费一些时间，如果索引记录没有完全在缓冲池中。为了更快的计数，可以创建一个计数器表，并根据插入和删除操作进行更新。然而，在成千上万的并发事务更新同一计数器表的情况下，该方法可能无法很好地扩展。如果粗略的行数足够，可以使用<code>SHOW TABLE STATUS</code>。</p></li><li><p><strong>InnoDB 处理 <code>SELECT COUNT(*)</code> 和 <code>SELECT COUNT(1)</code> 操作的方式相同，没有性能差异。</strong></p></li><li><p>对于 MyISAM 表，<code>COUNT(\*)</code> 在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回，因为 MyISAM 存储了准确的行数。COUNT(1) 只有在第一列被定义为 NOT NULL 时才能进行相同的优化。</p></li></ul><h4 id="2、Mysql-8-0"><a href="#2、Mysql-8-0" class="headerlink" title="2、Mysql 8.0"></a>2、Mysql 8.0</h4><p>在<a href="https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count" target="_blank" rel="noopener">Mysql8.0的文档</a>中对<code>COUNT(expr)</code>的解释是这样</p><blockquote><p><code>COUNT(expr) [over_clause]</code></p><p>Returns a count of the number of non-NULL values of expr in the rows retrieved by a SELECT statement. The result is a BIGINT value.</p><p>If there are no matching rows, <code>COUNT()</code> returns 0.<code>COUNT(NULL)</code>returns 0.</p><p>This function executes as a window function if over_clause is present. over_clause is as described in Section 12.20.2, “Window Function Concepts and Syntax”.</p><p><code>mysql&gt; SELECT student.student_name,COUNT(*)       FROM student,course       WHERE student.student_id=course.student_id       GROUP BY student_name;</code><br><code>COUNT(*)</code>is somewhat different in that it returns a count of the number of rows retrieved, whether or not they contain NULL values.</p><p>For transactional storage engines such as InnoDB, storing an exact row count is problematic. Multiple transactions may be occurring at the same time, each of which may affect the count.</p><p>InnoDB does not keep an internal count of rows in a table because concurrent transactions might “see” different numbers of rows at the same time. Consequently, <code>SELECT COUNT(*)</code> statements only count rows visible to the current transaction.</p><p>As of MySQL 8.0.13, <code>SELECT COUNT(*)</code> FROM tbl_name query performance for InnoDB tables is optimized for single-threaded workloads if there are no extra clauses such as WHERE or GROUP BY.</p><p>InnoDB processes <code>SELECT COUNT(*)</code> statements by traversing the smallest available secondary index unless an index or optimizer hint directs the optimizer to use a different index. If a secondary index is not present, InnoDB processes SELECT COUNT(*) statements by scanning the clustered index.</p><p>Processing <code>SELECT COUNT(*)</code> statements takes some time if index records are not entirely in the buffer pool. For a faster count, create a counter table and let your application update it according to the inserts and deletes it does. However, this method may not scale well in situations where thousands of concurrent transactions are initiating updates to the same counter table. If an approximate row count is sufficient, use SHOW TABLE STATUS.</p><p>InnoDB handles <code>SELECT COUNT(*)</code> and <code>SELECT COUNT(1)</code> operations in the same way. There is no performance difference.</p><p>For MyISAM tables, <code>COUNT(*)</code>is optimized to return very quickly if the SELECT retrieves from one table, no other columns are retrieved, and there is no WHERE clause. For example:</p><p><code>mysql&gt; SELECT COUNT(*) FROM student;</code><br>This optimization only applies to MyISAM tables, because an exact row count is stored for this storage engine and can be accessed very quickly. COUNT(1) is only subject to the same optimization if the first column is defined as NOT NULL.</p></blockquote><p>从mysql8.0的文档中我们可以看出mysql8.0对<code>COUNT</code>的解释</p><ul><li><p><code>COUNT(expr)</code> 返回在由 SELECT 语句检索的行中 <code>_expr_</code> 的非 NULL 值的数量，结果为 BIGINT 值。如果没有匹配的行，<code>COUNT()</code> 返回 0。<code>COUNT(NULL)</code> 也返回 0。</p></li><li><p><code>COUNT(*)</code> 有所不同，它返回所检索的行数的计数，无论它们是否包含 NULL 值。</p></li><li><p>对于事务性存储引擎（如 InnoDB），存储准确的行数是有问题的，因为多个事务可能同时影响计数。InnoDB 不会保留表中行的内部计数。<code>SELECT COUNT(*)</code> 只计算当前事务可见的行。</p></li><li><p>在 MySQL 8.0.13 及以后版本，对于 InnoDB 表，执行 <code>SELECT COUNT(*) FROM tbl_name</code> 查询性能在没有额外子句（如 WHERE 或 GROUP BY）的情况下进行了优化，特别适用于单线程工作负载。</p></li><li><p>InnoDB 处理 <code>SELECT COUNT(*)</code> 语句的方式：</p><ul><li>通过遍历最小可用二级索引，除非指示使用其他索引。</li><li>如果没有二级索引，InnoDB 通过扫描聚集索引来处理 <code>SELECT COUNT(*)</code> 语句。</li></ul></li><li><p>处理 <code>SELECT COUNT(*)</code> 语句可能花费一些时间，如果索引记录没有完全在缓冲池中。为了更快的计数，可以创建一个计数器表，让应用程序根据插入和删除操作进行更新。但是，这种方法在数千个并发事务同时对同一计数器表进行更新的情况下可能不会很好地扩展。如果粗略的行数足够，可以使用 <code>SHOW TABLE STATUS</code>。</p></li><li><p><strong>InnoDB 对待 <code>SELECT COUNT(*)</code> 和 <code>SELECT COUNT(1)</code> 操作的方式相同，没有性能差异。</strong></p></li><li><p>对于 MyISAM 表，<code>COUNT(*)</code> 在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回，因为 MyISAM 存储了准确的行数。COUNT(1) 只有在第一列被定义为 NOT NULL 时才能进行相同的优化。</p></li></ul><p>结合Mysql5.7与Mysql8.0的文档我们可以看出两个版本对<code>COUNT</code>的支持的差异：</p><ul><li><strong>MySQL 8.0 优化了 InnoDB 表的 <code>SELECT COUNT(*)</code> 查询性能：</strong> 在 MySQL 8.0.13 及以后版本，对于 InnoDB 表，执行 <code>SELECT COUNT(*)</code> 查询的性能进行了优化，特别适用于单线程工作负载。这是 MySQL 5.7 文档中未包含的新特性。</li><li><strong>MyISAM 表的优化说明：</strong><br>   MySQL 8.0 文档中强调了 MyISAM 表在执行 <code>COUNT(*)</code> 时的优化情况，即在从一个表中检索、没有检索其他列、没有 WHERE 子句的情况下可以快速返回。MySQL 5.7 文档中也提到了 MyISAM 表的优化，但对于 <code>COUNT(*)</code> 的具体优化情况没有细节。</li></ul><p>MySQL 8.0 在性能优化方面对于 InnoDB 表的 <code>SELECT COUNT(*)</code> 查询进行了特别的关注，而且在 MyISAM 表的优化方面进行了详细的说明。其他方面，两个版本在<code>COUNT()</code>函数的解释和使用上基本保持一致。</p><p>基于此我们明白，其实<code>COUNT(*)</code>和<code>COUNT(1)</code>其实是一样的，在性能上并没有差异。</p><p>那这两种方式与<code>COUNT(列)</code>的差异呢？从以上《高性能Mysql》以及Mysql官方文档中我们知道，<code>COUNT(列)</code>是统计非空列的行数，它也会遍历整张表，然后会对列对应的值做非空判断，非空的字段进行个数累加。当然这是列为主键索引时的操作。如果列不为主键索引时，那么查询时还需要进行回表操作，再根据主键获取数据，此时无疑是增加了一次IO，在性能上其实是不如<code>COUNT(*)</code>和<code>COUNT(1)</code>的。那么我们就可以知道，按照效率来看，<strong><code>count(*)</code> = count(1) &gt; count(主键) &gt; count(非主键列)</strong>。</p><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ul><li><p>如果你想知道一张表的大概行数，我们可以直接使用<code>show table status</code>命令或者咱们使用的一些mysql客户端Navicat或者datagrip都可以办到。</p></li><li><p>如果你想获取一张表的确切行数时，我可以是优先使用<strong>使用 <code>COUNT(*)</code> 获取行数</strong>，这样写法清晰，性能较好，尤其对于 InnoDB 表的优化更为明显。我们要<strong>避免使用 <code>COUNT(列)</code> 统计行数</strong>，除非你真的需要统计该列非空值的数量，否则容易产生误解。</p></li></ul><p>篇幅有限，深入验证将在后续文章中介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql的count函数 </tag>
            
            <tag> Mysql </tag>
            
            <tag> 高性能mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重温Java基础（二）之Java线程池最全详解</title>
      <link href="/article/2d9d416b.html"/>
      <url>/article/2d9d416b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>在当今高度并发的软件开发环境中，有效地管理线程是确保程序性能和稳定性的关键因素之一。Java线程池作为一种强大的并发工具，不仅能够提高任务执行的效率，还能有效地控制系统资源的使用。<br>本文将深入探讨Java线程池的原理、参数配置、自定义以及实际应用。通过理解这些关键概念，开发者将能够更好地应对不同的并发场景，优化程序的执行效率。<br>首先，我们将介绍线程池的基本概念，解释它在并发编程中的作用和优势。随后，我们将深入研究Java线程池的工作原理，剖析其在任务提交、执行和线程管理方面的内部机制。</p><h3 id="2-Java线程池的基础概念"><a href="#2-Java线程池的基础概念" class="headerlink" title="2. Java线程池的基础概念"></a>2. Java线程池的基础概念</h3><p>在并发编程中，线程池是一种重要的设计模式，它能够有效地管理和复用线程，提高程序的性能和资源利用率。Java线程池作为Java并发包（java.util.concurrent）的一部分，为开发者提供了方便、高效的多线程处理方式。同时在阿里巴巴开发规范中，强制要使用线程池去提供线程，不允许在代码中显示的创建线程。</p><h4 id="2-1-什么是线程池？"><a href="#2-1-什么是线程池？" class="headerlink" title="2.1 什么是线程池？"></a>2.1 什么是线程池？</h4><p>线程池是由一组线程组成的线程队列，它们在程序启动时就被创建并一直存在。这些线程可被用来执行提交到线程池的各种任务，从而避免为每个任务都创建新线程。这种机制能够降低线程创建和销毁的开销，提高系统性能。</p><h4 id="2-2-线程池的工作原理"><a href="#2-2-线程池的工作原理" class="headerlink" title="2.2 线程池的工作原理"></a>2.2 线程池的工作原理</h4><p>线程池的工作原理基于任务队列和线程管理机制。当任务被提交到线程池时，线程池会选择合适的线程来执行任务。如果核心线程数未达到上限，新任务可能会导致新线程的创建。如果核心线程已满，任务将被放入任务队列等待执行。当任务队列也已满，而同时线程数未达到最大线程数，新的任务将创建临时线程来执行。</p><h4 id="2-3-线程池的优势"><a href="#2-3-线程池的优势" class="headerlink" title="2.3 线程池的优势"></a>2.3 线程池的优势</h4><p>使用线程池的优势主要体现在以下几个方面：<br><strong>减少资源消耗</strong>： 线程的创建和销毁是有开销的，线程池通过复用线程，减少了这些开销。<br><strong>提高响应速度</strong>： 由于线程池中的线程一直存在，可以更迅速地响应任务的到来。<br><strong>避免系统过载</strong>： 控制线程数量，防止系统因过多线程而过载。</p><h3 id="3-Java线程池的工作原理"><a href="#3-Java线程池的工作原理" class="headerlink" title="3. Java线程池的工作原理"></a>3. Java线程池的工作原理</h3><p>Java线程池的工作原理涉及线程的创建、任务的提交与执行，以及对线程的管理。深入理解这些机制对于优化并发程序至关重要。</p><h4 id="3-1-线程池的创建与初始化"><a href="#3-1-线程池的创建与初始化" class="headerlink" title="3.1 线程池的创建与初始化"></a>3.1 线程池的创建与初始化</h4><p>在程序启动时，线程池被创建并初始化。这一过程包括设置线程池的基本参数，如核心线程数、最大线程数、任务队列等。核心线程数是线程池中一直存活的线程数量，而最大线程数则是线程池允许创建的最大线程数量。例如创建一个固定核心线程数的线程：</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中参数<code>corePoolSize</code>即为核心线程数</p><h4 id="3-2-任务的提交与执行"><a href="#3-2-任务的提交与执行" class="headerlink" title="3.2 任务的提交与执行"></a>3.2 任务的提交与执行</h4><p>任务提交到线程池后，线程池会根据一定的策略选择线程来执行任务。首先，线程池会检查核心线程是否已满，如果未满，新的任务可能会导致新线程的创建。如果核心线程已满，任务将被放入任务队列。<br>在Java线程池中，任务的提交与执行有两个主要的方法：<code>submit</code>和<code>execute</code>。这两种方法有一些区别，主要体现在返回值、异常处理和任务包装上。</p><h5 id="3-2-1-submit方法"><a href="#3-2-1-submit方法" class="headerlink" title="3.2.1 submit方法"></a>3.2.1 submit方法</h5><p><code>submit</code>方法用于提交实现了<code>Callable</code>接口的任务，它可以返回一个<code>Future</code>对象，通过该对象可以获取任务执行的结果，取消任务等。<code>submit</code>方法还可以接受实现了<code>Runnable</code>接口的任务，但它无法获取任务的执行结果。<code>submit</code>方法在<code>ExecutorService</code>中定义的，并定义了三种重载方式：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>T<span class="token operator">></span> Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span><span class="token punctuation">;</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体使用如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 提交callable任务，可以拿到返回值</span>Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> future1 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>Future<span class="token operator">&lt;</span>Void<span class="token operator">></span> future2 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future3 <span class="token operator">=</span> executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主要特点：</strong></p><ul><li>返回一个<code>Future</code>对象，可通过<code>Future</code>的<code>get()</code>方法可以获取到线程执行的返回值，<code>get()</code>方法是同步的，执行<code>get()</code>方法时，如果线程还没执行完，会同步等待，直到线程执行完成。</li><li>可以接受<code>Callable</code>和<code>Runnable</code>类型的任务。</li><li>执行<code>Runnable</code>和<code>Callable</code>的任务时，run()/call()方法没显式抛出异常。<h4 id="3-2-2-execute方法"><a href="#3-2-2-execute方法" class="headerlink" title="3.2.2 execute方法"></a>3.2.2 execute方法</h4><code>execute</code>方法用于提交实现了<code>Runnable</code>接口的任务，它没有返回值，因此无法获取任务的执行结果。如果任务执行过程中抛出了异常，线程池会捕获并记录该异常，但无法通过<code>execute</code>方法获知。<code>execute</code>方法是在线程池的顶级接口<code>Executor</code>中定义的，而且只有这一个接口。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>使用：<pre class="line-numbers language-java"><code class="language-java">executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 具体业务逻辑  </span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>主要特点：</strong></p><ul><li>没有返回值，无法获取任务的执行结果。</li><li>只能接受<code>Runnable</code>类型的任务。</li></ul><p>总的来说，<code>submit</code>方法更加灵活，适用于更多场景，而<code>execute</code>方法更加简单，适用于只关心任务执行而不需要获取结果的场景。在实际应用中，根据具体需求选择合适的方法。如果需要获取任务的执行结果、取消任务等，建议使用<code>submit</code>方法。只是执行任务而不关心返回值，可以使用<code>execute</code>方法。</p><h3 id="4-线程池的参数以及配置"><a href="#4-线程池的参数以及配置" class="headerlink" title="4. 线程池的参数以及配置"></a>4. 线程池的参数以及配置</h3><p>Java线程池的性能和行为可以通过一系列参数进行调整，以满足不同的并发需求。<code>ThreadPoolExecutor</code>中提供的构造器如下：<br><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPoolExecutor.png" alt="ThreadPoolExecutor.png"></p><h4 id="4-1-七大参数"><a href="#4-1-七大参数" class="headerlink" title="4.1 七大参数"></a>4.1 七大参数</h4><h5 id="4-1-核心线程数（Core-Pool-Size）"><a href="#4-1-核心线程数（Core-Pool-Size）" class="headerlink" title="4.1 核心线程数（Core Pool Size）"></a>4.1 核心线程数（Core Pool Size）</h5><p>核心线程数是线程池中一直存活的线程数量（<strong>即使它们处于空闲状态</strong>）。这些线程用于执行提交到线程池的任务。通过合理设置核心线程数，可以在系统负载增加时迅速响应任务。</p><h5 id="4-2-最大线程数（Maximum-Pool-Size）"><a href="#4-2-最大线程数（Maximum-Pool-Size）" class="headerlink" title="4.2 最大线程数（Maximum Pool Size）"></a>4.2 最大线程数（Maximum Pool Size）</h5><p>最大线程数定义了线程池中允许创建的最大线程数量。当核心线程都在执行任务，而新任务仍然到来时，线程池会创建新线程，直到达到最大线程数。超过最大线程数的任务会被拒绝。</p><h5 id="4-3-线程存活时间（Keep-Alive-Time）"><a href="#4-3-线程存活时间（Keep-Alive-Time）" class="headerlink" title="4.3 线程存活时间（Keep Alive Time）"></a>4.3 线程存活时间（Keep Alive Time）</h5><p>线程存活时间指的是非核心线程在空闲状态下的最大存活时间。当线程池中线程数量超过核心线程数时，空闲的非核心线程在经过一定时间后会被终止，从而释放系统资源。</p><h5 id="4-4-TimeUnit"><a href="#4-4-TimeUnit" class="headerlink" title="4.4 TimeUnit"></a>4.4 TimeUnit</h5><p>keepAliveTime的单位(ms、s…)</p><h5 id="4-5-工作队列（Work-Queue）"><a href="#4-5-工作队列（Work-Queue）" class="headerlink" title="4.5 工作队列（Work Queue）"></a>4.5 工作队列（Work Queue）</h5><p>工作队列用于存放等待执行的任务。不同类型的队列对线程池的行为有重要影响，例如有界队列和无界队列。有界队列在任务数达到上限时会触发拒绝策略。</p><h5 id="4-6-ThreadFactory"><a href="#4-6-ThreadFactory" class="headerlink" title="4.6 ThreadFactory"></a>4.6 ThreadFactory</h5><p>线程池中生成线程的工厂。默认使用默认工厂<code>Executors.defaultThreadFactory()</code>。但是实际使用时建议使用Guava的<code>ThreadFactory</code>自定义线程的名字，方便排查线程问题（阿里开发规范中也建议这么做）。如下：</p><pre class="line-numbers language-java"><code class="language-java">ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-7-拒绝策略（Rejected-Execution-Policy）"><a href="#4-7-拒绝策略（Rejected-Execution-Policy）" class="headerlink" title="4.7 拒绝策略（Rejected Execution Policy）"></a>4.7 拒绝策略（Rejected Execution Policy）</h5><p>拒绝策略定义了当工作队列满，并且当前工作的线程数等于最大线程数时，后续再提交的任务如何处理。例如，可以选择抛弃任务、抛出异常或在调用线程中直接执行。Java线程池提供了几种常见的拒绝策略：</p><ul><li><strong>AbortPolicy（默认策略）：</strong><br>直接抛出<code>RejectedExecutionException</code>，阻止系统继续接受新任务，保持原有状态。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>CallerRunsPolicy：</strong><br>将任务返回给调用者，由调用线程直接执行。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>DiscardPolicy：</strong><br>直接丢弃无法处理的任务，不抛出异常。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><strong>DiscardOldestPolicy：</strong><br>当任务被拒绝添加时，会抛弃任务队列中最旧的任务也就是最先加入队列的，再把这个新任务添加进去。<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="4-2-线程池提交任务执行流程"><a href="#4-2-线程池提交任务执行流程" class="headerlink" title="4.2 线程池提交任务执行流程"></a>4.2 线程池提交任务执行流程</h4><h5 id="4-2-1-执行流程"><a href="#4-2-1-执行流程" class="headerlink" title="4.2.1 执行流程"></a>4.2.1 执行流程</h5><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="线程池执行流程.png"></p><h5 id="4-2-2-实例讲解"><a href="#4-2-2-实例讲解" class="headerlink" title="4.2.2 实例讲解"></a>4.2.2 实例讲解</h5><p>某银行柜台，共有5个窗口（Maximum Pool Size），平时常开2个窗口办理业务（Core Pool Size），银行大厅摆了5个椅子（Work Queue）供客户等待。银行规定当常开的窗口都在办理业务，并且大厅椅子上都坐满了客户，那么另外3个不常开的窗口也要打开办理业务。如果这3个窗口也都全部在办理业务，后面继续来银行办理业务的客户银行将拒绝办理。如果某个员工空闲下并且超过了5（Keep Alive Time）秒钟（TimeUnit）那么他就可以关闭窗口去休息。但是必须保留2个常开的窗口。<br>我们先按照上述流程创建一个线程池：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 推荐使用Guava的ThreadFactory构建ThreadFactory，自定义线程名称 方便后续排查问题  </span>ThreadFactory threadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"mythread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义号线程  </span>ExecutorService executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>          <span class="token comment" spellcheck="true">// 核心线程数，即2个常开窗口  </span>        <span class="token number">2</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 最大的线程数，银行所有的窗口  </span>        <span class="token number">5</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 空闲时间  </span>        <span class="token number">5</span><span class="token punctuation">,</span>          TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 工作队列  </span>        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 线程工厂  </span>        threadFactory<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 拒绝策略  </span>        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）初始状态下，只有2个窗口为2个客户办理业务。</p><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPool_%E6%BC%94%E7%A4%BA1.png" alt="ThreadPool_演示1.png"></p><p>（2）在客户1,客户2办理业务或者说常开窗口一直都有客户在办理业务，此时陆续有客户进来，需要在银行大厅的椅子上等待。</p><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPool_%E5%9B%BE%E8%A7%A32.png" alt="ThreadPool_图解2.png"></p><p>（3）直到大厅的椅子都坐满。</p><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPool_%E5%9B%BE%E8%A7%A35.png" alt="ThreadPool_图解5.png"></p><p>（4）此时如果在所有的窗口都在办理业务，大厅椅子坐满，如果再来一个客户，将开启3/4/5的窗口</p><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPool_%E5%9B%BE%E8%A7%A37.png" alt="ThreadPool_图解7.png"></p><p>（5）此时如果在所有的窗口都在办理业务，大厅椅子坐满，还从外面再来2个客户办理业务，那么就需要把剩下的窗口都要打开去办理业务。<br><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPool_%E5%9B%BE%E8%A7%A38.png" alt="ThreadPool_图解8.png"></p><p>（6）此时如果再来1个客户，就会按照线程池定义的拒绝策略去执行，比如我们设置策略为：AbortPolicy，就会抛出异常。<br><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPool_%E5%9B%BE%E8%A7%A39.png" alt="ThreadPool_图解9.png"></p><h4 id="4-3-线程池参数配置"><a href="#4-3-线程池参数配置" class="headerlink" title="4.3 线程池参数配置"></a>4.3 线程池参数配置</h4><p>线程池的配置参数在实际应用中需要根据具体的业务场景和性能需求进行巧妙调整。这就好比在日常生活中，如果有一个任务需要三人协同完成，但却有六人前来参与，就会造成三人的资源浪费；反之，若只安排两人协作，可能会超负荷而不切实际。因此，在线程池参数配置时，过小或过大都会带来问题。</p><p>当线程池数量设置过小时，面对大量同时到达的任务或请求，可能导致这些任务在任务队列中排队等待执行。甚至在任务队列达到最大容量时，无法处理额外的任务，或者导致任务队列积压，有可能引发内存溢出（OOM）问题。这明显是一个问题，因为CPU资源无法得到充分利用。</p><p>相反，若线程数量设置过大，大量线程可能会同时争夺CPU资源，导致频繁的上下文切换，从而增加线程的执行时间，影响整体执行效率。因此，在线程池配置中需要平衡线程数量，以满足高并发场景下的任务处理需求，同时避免不必要的资源争夺和上下文切换，以保障系统的稳定性和性能。</p><p>并没有一个通用的标准来设置参数，因此需要结合实际实战经验、业务需求以及服务器资源的状况，灵活而合理地进行参数配置。最终，合适的配置才是最为优越的选择。</p><p>当然也有一个简单而广泛适用的公式，可以用于确定线程池中的线程数：</p><ol><li><strong>CPU 密集型任务（N+1）：</strong><ul><li>对于消耗主要是CPU资源的任务，可以将线程数设置为N（CPU核心数）+1。额外的一个线程用于防止线程偶发的缺页中断或其他原因导致的任务暂停，防止空闲时间的浪费。一旦任务暂停，多出来的一个线程可以充分利用CPU的空闲时间。</li></ul></li><li><strong>I/O 密集型任务（2N）：</strong><ul><li>对于主要涉及I/O交互的任务，系统会在大部分时间内处理I/O，而在线程处理I/O的时间段内不会占用CPU。因此，在I/O密集型任务中，可以配置更多的线程，具体计算方法是2N。</li></ul></li></ol><p>那我们如何判断任务是CPU密集型还是IO密集型呢？简而言之，CPU密集型任务主要利用CPU计算能力，例如对内存中大量数据进行排序。而IO密集型任务涉及网络读取、文件读取等，其特点是CPU计算耗费的时间相对较少，大部分时间花在等待IO操作完成上。</p><p>但是我们在实际的业务中会发现，我们一个服务器上可能跑多种类型的业务，不太好判断到底是CPU密集任务还是IO密集型。我们可以根据监控服务线程池资源利用情况结合业务场景动态配制合理参数。这里我们就不得不提一下美团的线程池参数动态化配置：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践 - 美团技术团队</a>。</p><h3 id="5-线程池的使用"><a href="#5-线程池的使用" class="headerlink" title="5. 线程池的使用"></a>5. 线程池的使用</h3><p>日常开发中我们可以通过<code>Executors</code>去创建线程池，例如：<br>（1）newFixedThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService1 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建固定线程数的线程池，核心线程数等于最大线程数，此时keepAliveTime失效 。但是他的工作队列的长度为<code>Integer.MAX_VALUE</code>。可能会导致堆积大量的请求，导致OOM。</p><p>（2）newSingleThreadExecutor()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService2 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建单线程的线程池，即核心线程数等于最大线程数均等于1，keepAliveTime失效 。但是他的工作队列的长度为<code>Integer.MAX_VALUE</code>。可能会导致堆积大量的请求，导致OOM。</p><p>（3）newCachedThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService3 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个核心线程数等于0，并且允许创建的最大线程数等于Integer.MAX。keepAliveTime为60秒。可能会造成创建大量的线程，从而导致OOM。</p><p>（4）newScheduledThreadPool()</p><pre class="line-numbers language-java"><code class="language-java">ExecutorService executorService4 <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个允许最大线程数等于Integer.MAX，但是他使用的阻塞工作队列是<code>DelayedWorkQueue</code>。<code>DelayedWorkQueue</code>的核心数据结构是二叉最小堆的优先队列，队列满时会自动扩容。所以最大线程数没有意义，线程池中永远会保持至多有核心线程数个工作线程正在运行。</p><p><strong>注意：</strong> 以上创建线程池的方法，可以做自己Demo使用，不应该用在项目中。在阿里巴巴代码规范中，不支持使用这种方式去创建，支持手动创建线程池。</p><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ThreadPool_%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.png" alt="ThreadPool_阿里巴巴开发规范.png"></p><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h3><p>Java线程池是多线程编程中的重要工具，能够有效管理和复用线程，提高系统性能和资源利用率。本文深入探讨了线程池的基础概念、工作原理、参数配置、自定义以及使用示例，并强调了注意事项。<br>通过了解线程池的工作原理，开发者可以更好地配置线程池以适应不同的并发需求。自定义线程池则使得线程池更灵活地适应特定业务场景。在实际应用中，要谨慎选择线程池类型、合理配置参数、注意任务的生命周期和线程安全等问题，以确保系统的稳定性和性能。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1、<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践 - 美团技术团队 (meituan.com)</a><br>2、《Java并发编程实战》</p>]]></content>
      
      
      <categories>
          
          <category> Java核心基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> Java线程池 </tag>
            
            <tag> 自定义线程池 </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道（一）之优化if-else的8种方案</title>
      <link href="/article/7fd1e424.html"/>
      <url>/article/7fd1e424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><p><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/contact.jpg" alt="contact.jpg"></p><p>我们日常开发的项目中，如果代码中存在大量的if-else语句，阅读起来非常的折磨（直接劝退），维护起来也很难，也特别容易出问题。比如说以下：<br><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ifelse%E5%9E%83%E5%9C%BE%E4%BB%A3%E7%A0%81.png" alt="ifelse垃圾代码.png"></p><p>接下来，本文介绍我们常使用的8种方法去优化if-else。<br><img src="https://raw.githubusercontent.com/coderacademyonline/blogimage/master/coderacademy/ifelse%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88.png" alt="ifelse优化方案.png"></p><h3 id="1、提前return，让正常流程走主干"><a href="#1、提前return，让正常流程走主干" class="headerlink" title="1、提前return，让正常流程走主干"></a>1、提前return，让正常流程走主干</h3><p>如果if-else代码中包含return语句，或者我们可以将包含if-else的代码从主干中抽取到一个单独方法，这样就可以在这个方法中可以return掉。这中思想也是短路求值的一种体现。把多余 else 干掉，使代码更加优雅。</p><ul><li>优化前代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// doSomething  </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// doSomething1  </span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// doSomething2  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// doSomething</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 主流程代码  </span><span class="token comment" spellcheck="true">//doSomething  </span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 主流程代码  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// doSomething1  </span>    <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// doSomething2  </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用三目运算符"><a href="#2、使用三目运算符" class="headerlink" title="2、使用三目运算符"></a>2、使用三目运算符</h3><p>某些if-else可以优化为使用三目运算符，这样会让代码更简洁，可读性高。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> price<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span><span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> price <span class="token operator">=</span> condition1 <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>condition2 <span class="token operator">?</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、使用Optional"><a href="#3、使用Optional" class="headerlink" title="3、使用Optional"></a>3、使用Optional</h3><p>我们在代码中判null会导致存在大量的if-else，这个时候我们可以考虑使用Java8的<code>Optional</code>去优化。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String s <span class="token operator">=</span> <span class="token function">handleStr</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">handleStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Null"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码：</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token function">handleStr</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>str <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"。。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                       <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">"Null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">handleStr</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 其余业务逻辑，同样适用于处理一个对象，判null</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、多态"><a href="#4、多态" class="headerlink" title="4、多态"></a>4、多态</h3><p>我们可以将一些操作（比如一些状态）的一些共性的方法抽象成一个公共接口，然后针对这些操作实现这些接口完成不同的逻辑，在调用时我们只需要传入对应的操作类即可，对外的操作方法都是同一个。</p><ul><li>优化前代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderProcessing</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"pending"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"paid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token string">"shipped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processOrder</span><span class="token punctuation">(</span>String status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"pending"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Handling payment for pending order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理支付逻辑</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment handled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cannot ship. Payment pending."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"paid"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Handling shipping for paid order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理发货逻辑</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"shipped"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order already shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Invalid order status: "</span> <span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 状态接口</span><span class="token keyword">interface</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体状态类</span><span class="token keyword">class</span> <span class="token class-name">PendingPaymentState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment handled for pending order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cannot ship. Payment pending."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PaidState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Shipping handled for paid order."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ShippedState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Payment already received."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Order already shipped."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上下文类</span><span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> OrderState currentState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>OrderState initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentState<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentState<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>OrderState newState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatePatternExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PendingPaymentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShippedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handlePayment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">handleShipping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、枚举"><a href="#5、枚举" class="headerlink" title="5、枚举"></a>5、枚举</h3><p>对一些创建了枚举值，针对不同的枚举值有不同的操作时，枚举也可以消除if-else。个人感觉有点像策略模式或者表驱动。</p><ul><li>优化前</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> OperateTypeEnum<span class="token punctuation">{</span>      <span class="token function">PO</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">PR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DC_INBOUND</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DC_OUTBOUND</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token function">OperateTypeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span>Integer operator<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>PO<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getPoOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>PR<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getPrOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>DC_INBOUND<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getDcInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span>DC_OUTBOUND<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>operator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">getDcOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getPoOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 1L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getPrOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 2L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDcInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 3L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDcOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 4L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDwInboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 5L<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getDwOutboundOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> 6L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后的代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">enum</span> OperateTypeEnum<span class="token punctuation">{</span>      <span class="token function">PO</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 1L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">PR</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 2L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">DC_INBOUND</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 3L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">DC_OUTBOUND</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> 4L<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">final</span> Integer code<span class="token punctuation">;</span>      <span class="token function">OperateTypeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> OperateTypeEnum <span class="token function">ofCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>OperateTypeEnum<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"出错了"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**      * 定义一个公共方法      */</span>      <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long <span class="token function">getOperator</span><span class="token punctuation">(</span>Integer operatorType<span class="token punctuation">)</span><span class="token punctuation">{</span>      OperateTypeEnum operateTypeEnum <span class="token operator">=</span> OperateTypeEnum<span class="token punctuation">.</span><span class="token function">ofCode</span><span class="token punctuation">(</span>operatorType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> operateTypeEnum<span class="token punctuation">.</span><span class="token function">getOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式也是我再处理一些枚举时，对应不同的处理逻辑时常用的一种方式。比如根据订单类型的不同返回类型对应的数据。当然我们枚举方法中处理逻辑时如果想用bean的话，可以当做参数传入或者直接从Spring容器中获取。</p><h3 id="6、表驱动（Map-函数方法）"><a href="#6、表驱动（Map-函数方法）" class="headerlink" title="6、表驱动（Map+函数方法）"></a>6、表驱动（Map+函数方法）</h3><p>表驱动编程是一种通过查找表格而不是嵌套条件语句来实现的编程方法。可以使用数据结构（如数组、Map）来存储条件和对应的操作，这样就不必用很多的逻辑语句（if 或 case）来把它们找出来的方法。</p><ul><li>优化前代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> OrderInfoVO <span class="token function">operateOrder</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handlePoOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handleInboundOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">handleOutboundOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化后代码</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>      Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Function<span class="token operator">&lt;</span>OrderInfoDO<span class="token punctuation">,</span> OrderInfoVO<span class="token operator">>></span> functionMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handlePoOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handleInboundOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      functionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">handleOutboundOrder</span><span class="token punctuation">(</span>orderInfo1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> functionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然<code>Funtion</code>也可以根据业务需要，可以为<code>Consumer</code>，<code>Predicate</code>等。<br>不过我们也可以利用Spring的依赖注入，将其转换为对应的Map&lt;String, Bean&gt;。比如上述代码也可以这么优化：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 定义统一的处理接口      * @param orderInfo      * @return      */</span>      OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">PoOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Po      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">InboundOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Inbound      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 具体处理逻辑  </span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">)</span>  <span class="token keyword">class</span> <span class="token class-name">InboundOrderHandler</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderHandler</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**      * 处理Outbound      *      * @param orderInfo      * @return      */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> OrderInfoVO <span class="token function">handlerOrder</span><span class="token punctuation">(</span>OrderInfoDO orderInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderSerivceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IOrderService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> IOrderHandler<span class="token operator">></span> orderHandlerMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> OrderInfoVO <span class="token function">handleOrderInfo</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">,</span> OrderInfoDO orderInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>        IOrderHandler orderHandler <span class="token operator">=</span> orderHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> orderHandler<span class="token punctuation">.</span><span class="token function">handlerOrder</span><span class="token punctuation">(</span>orderInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、策略模式-工厂模式"><a href="#7、策略模式-工厂模式" class="headerlink" title="7、策略模式+工厂模式"></a>7、策略模式+工厂模式</h3><p>我们可以使用策略模式将每个条件分支抽象为一个策略类，然后在主逻辑中使用策略类来执行相应的逻辑。这种方式可以降低代码的耦合性，使得代码更加可维护和可扩展。然后再使用工厂模式定义一个策略工厂类去管理这些策略，即对外提供的都是策略工厂的方法。这种方法可以有效的去除if-else，并且代码逻辑更容易阅读维护以及扩展。<br>比如上例中，我们在处理不同订单类型时的handler类就是一个个的策略，我们也可以创建一个策略工厂类。</p><pre class="line-numbers language-java"><code class="language-java">publid <span class="token keyword">class</span> <span class="token class-name">OrderHandlerFactory</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> IOrderHandler<span class="token operator">></span> orderHandlerMap <span class="token operator">=</span> Maps<span class="token punctuation">.</span><span class="token function">newHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"PO"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PoOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"INBOUND"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InboundOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      orderHandlerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"OUTBOUND"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OutboundOrderHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*** 获取具体处理的类*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> IOrderHandler <span class="token function">getOrderHandler</span><span class="token punctuation">(</span>String orderType<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> orderHandlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、规则引擎"><a href="#8、规则引擎" class="headerlink" title="8、规则引擎"></a>8、规则引擎</h3><p>使用规则引擎来管理条件和对应的执行逻辑。例如，Drools 是一个强大的规则引擎，它允许你定义规则并动态执行它们。再比如LiteFlow，EasyRule，都可以通过管理条件和对应的执行逻辑。可以消除if-else。规则引擎适合处理复杂的业务逻辑。通过编排条件去处理业务逻辑。后续会分享规则引擎相关的干货。有兴趣的同学可以关注公众号<code>码农Academy</code>。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>上述方案都可以达到优化if-else的效果，但是采用那种方案还是要看具体的代码逻辑以及业务处理逻辑，重要的是要评估项目的复杂性、维护性和性能需求，选择最适合项目需求的优化方案。在实际开发中，通常会根据具体情况结合多种方式来达到更好的优化效果。</p>]]></content>
      
      
      <categories>
          
          <category> 代码整洁之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java代码优化 </tag>
            
            <tag> 代码整洁之道 </tag>
            
            <tag> if-else优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工具类（一）之Guava操作字符串</title>
      <link href="/article/8fd2c424.html"/>
      <url>/article/8fd2c424.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【码农Academy】，每日技术干货马上就来！</p></blockquote><h2 id="Guava字符串操作"><a href="#Guava字符串操作" class="headerlink" title="Guava字符串操作"></a>Guava字符串操作</h2><p>在Java开发的道路上，我们经常会面临各种各样的字符串处理任务，从简单的判空到复杂的拆分和连接操作。为了简化这些常见但有时繁琐的任务，Google推出了一款强大的Java库——Guava。Guava不仅为我们提供了丰富的集合工具，还包括了许多方便而高效的字符串处理工具。</p><p>在本文中，我们将专注于探讨Guava库中关于字符串操作的强大功能。无论您是正在寻找更好的字符串拆分方法，还是希望提高代码的可读性和性能，Guava都为您提供了解决方案。</p><h3 id="一、连接器【Joiner】"><a href="#一、连接器【Joiner】" class="headerlink" title="一、连接器【Joiner】"></a>一、连接器【Joiner】</h3><p>Joiner是字符串连接器，可以处理字符串中的null值，简洁方便。<br></p><h4 id="1、常用方法："><a href="#1、常用方法：" class="headerlink" title="1、常用方法："></a>1、常用方法：</h4><table><thead><tr><th>方法名称</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>skipNulls()</td><td>跳过空值</td><td></td></tr><tr><td>useForNull(String)</td><td>使用参数替换字符串中的null值</td><td></td></tr><tr><td>withKeyValueSeparator(String)</td><td>使用参数连接map结构</td><td></td></tr></tbody></table><h4 id="2、Joiner的使用分为三个步骤："><a href="#2、Joiner的使用分为三个步骤：" class="headerlink" title="2、Joiner的使用分为三个步骤："></a>2、Joiner的使用分为三个步骤：<br></h4><p>(1)、on方法用来设置链接符<br><br>(2)、在on方法之后 join方法之前 ，我们可以做一些扩展操作，比如s使用useForNull是为null值设置默认值。<br><br>(3)、join方法用来设置被操作的集合<br></p><h4 id="3、使用示例："><a href="#3、使用示例：" class="headerlink" title="3、使用示例："></a>3、使用示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">joinerTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"World"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// skipNulls</span>    Joiner joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skipNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// useForNull</span>    joiner <span class="token operator">=</span> Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useForNull</span><span class="token punctuation">(</span><span class="token string">"My"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>joiner<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// withKeyValueSeparator</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> ImmutableMap<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：joiner实例总是不可变的。用来定义joiner目标语义的配置方法总会返回一个新的joiner实例。这使得joiner实例都是线程安全的，你可以将其定义为static final常量。</strong></p><h3 id="二、字符串拆分器【Splitter】"><a href="#二、字符串拆分器【Splitter】" class="headerlink" title="二、字符串拆分器【Splitter】"></a>二、字符串拆分器【Splitter】</h3><p>Splitter可以被设置为按照任何模式、字符、字符串或字符匹配器拆分。返回一个Iterable&lt;T&gt;</p><h4 id="1、拆分器工厂"><a href="#1、拆分器工厂" class="headerlink" title="1、拆分器工厂"></a>1、拆分器工厂</h4><table><thead><tr><th>方法</th><th>描述</th><th>范例</th></tr></thead><tbody><tr><td>Splitter.on(Char)</td><td>按照单个字符拆分</td><td>Splitter.on(“,”)</td></tr><tr><td>Splitter.on(CharMatcher)</td><td>按字符匹配器拆分</td><td>Splitter.on(CharMatcher.BREAKING_WHITESPACE)</td></tr><tr><td>Splitter.on(String)</td><td>按字符串拆分</td><td>Splitter.on(“a”)</td></tr><tr><td>Splitter.on(Pattern) <br> Splitter.onPattern(String)</td><td>按正则表达式拆分</td><td>Splitter.onPattern(“\r?\n”)</td></tr><tr><td>Splitter.fixedLength(int)</td><td>按固定长度拆分；最后一段可能比给定长度短，但不会为空。</td><td>Splitter.fixedLength(3)</td></tr></tbody></table><h4 id="2、拆分器修饰符"><a href="#2、拆分器修饰符" class="headerlink" title="2、拆分器修饰符"></a>2、拆分器修饰符</h4><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>omitEmptyStrings()</td><td>从结果中自动忽略空字符串</td></tr><tr><td>trimResults()</td><td>移除结果字符串的前导空白和尾部空白</td></tr><tr><td>trimResults(CharMatcher)</td><td>给定匹配器，移除结果字符串的前导匹配字符和尾部匹配字符</td></tr><tr><td>limit(int)</td><td>限制拆分出的字符串数量,即只有前几个拆分符生效</td></tr><tr><td>splitToList</td><td>将拆分接口用List返回</td></tr><tr><td>withKeyValueSeparator</td><td>将String转换Map\&lt;String,String&gt;</td></tr></tbody></table><h4 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">splitterTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// trimResults 去掉头尾空格 |a||b|c||</span>     List<span class="token operator">&lt;</span>String<span class="token operator">></span> splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// omitEmptyStrings 忽略空串  |a|b|c|</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 两者一起使用 a|b|c</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// limit a|b,c,,</span>     splitterList <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">" ,a,,b,c,, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// withKeyValueSeparator  a=1|b=2</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> splitterMap <span class="token operator">=</span> Splitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"a-1;b-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Joiner<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>splitterMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：splitter实例总是不可变的。用来定义splitter目标语义的配置方法总会返回一个新的splitter实例。这使得splitter实例都是线程安全的，你可以将其定义为static final常量。</strong></p><h3 id="三、字符匹配器【CharMatcher】"><a href="#三、字符匹配器【CharMatcher】" class="headerlink" title="三、字符匹配器【CharMatcher】"></a>三、字符匹配器【CharMatcher】</h3><p>直观上可以认为CharMatcher实例代表着某一类字符，如数字或空白字符。事实上来说，CharMatcher实例就是对字符的布尔判断——CharMatcher确实也实现了Predicate&lt;Character&gt;。<br><br>使用CharMatcher的好处更在于它提供了一系列方法，让你对字符作特定类型的操作：修剪[trim]、折叠[collapse]、移除[remove]、保留[retain]等等。CharMatcher实例首先代表概念1：怎么才算匹配字符？然后它还提供了很多操作概念2：如何处理这些匹配字符？</p><h4 id="1、常见字符匹配器常量"><a href="#1、常见字符匹配器常量" class="headerlink" title="1、常见字符匹配器常量"></a>1、常见字符匹配器常量</h4><table><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td>ANY</td><td>匹配任何字符</td></tr><tr><td>ASCII</td><td>匹配是否是ASCII字符</td></tr><tr><td>BREAKING_WHITESPACE</td><td>匹配所有可换行的空白字符(不包括非换行空白字符,例如”\u00a0”)</td></tr><tr><td>DIGIT</td><td>匹配ASCII数字</td></tr><tr><td>INVISIBLE</td><td>匹配所有看不见的字符</td></tr><tr><td>JAVA_DIGIT</td><td>匹配UNICODE数字, 使用 Character.isDigit() 实现</td></tr><tr><td>JAVA_ISO_CONTROL</td><td>匹配ISO控制字符, 使用 Charater.isISOControl() 实现</td></tr><tr><td>JAVA_LETTER</td><td>匹配字母, 使用 Charater.isLetter() 实现</td></tr><tr><td>JAVA_LETTER_OR_DIGET</td><td>匹配数字或字母</td></tr><tr><td>JAVA_LOWER_CASE</td><td>匹配小写</td></tr><tr><td>JAVA_UPPER_CASE</td><td>匹配大写</td></tr><tr><td>NONE</td><td>不匹配所有字符</td></tr><tr><td>SINGLE_WIDTH</td><td>匹配单字宽字符, 如中文字就是双字宽</td></tr><tr><td>WHITESPACE</td><td>匹配所有空白字符</td></tr></tbody></table><h4 id="2、常用操作方法"><a href="#2、常用操作方法" class="headerlink" title="2、常用操作方法"></a>2、常用操作方法</h4><pre class="line-numbers language-java"><code class="language-java">CharMatcher <span class="token function">is</span><span class="token punctuation">(</span><span class="token keyword">char</span> match<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配指定字符的Matcher </span>CharMatcher <span class="token function">isNot</span><span class="token punctuation">(</span><span class="token keyword">char</span> match<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回不匹配指定字符的Matcher &lt;br /></span>CharMatcher <span class="token function">anyOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配sequence中任意字符的Matcher</span>CharMatcher <span class="token function">noneOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回不匹配sequence中任何一个字符的Matcher</span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">inRange</span><span class="token punctuation">(</span><span class="token keyword">char</span> startInclusive<span class="token punctuation">,</span> <span class="token keyword">char</span> endInclusive<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回匹配范围内任意字符的Matcher</span>CharMatcher <span class="token function">forPredicate</span><span class="token punctuation">(</span>Predicate\<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> Charater<span class="token operator">></span> predicate<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回使用predicate的apply()判断匹配的Matcher </span>CharMatcher <span class="token function">negate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回以当前Matcher判断规则相反的Matcher &lt;br /></span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">and</span><span class="token punctuation">(</span>CharMatcher other<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回与other匹配条件组合做与来判断的Matcher</span><span class="token operator">*</span><span class="token operator">*</span>CharMatcher <span class="token function">or</span><span class="token punctuation">(</span>CharMatcher other<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回与other匹配条件组合做或来判断的Matcher</span><span class="token keyword">boolean</span> <span class="token function">matchesAnyOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//只要sequence中有任意字符能匹配Matcher,返回true </span><span class="token keyword">boolean</span> <span class="token function">matchesAllOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//sequence中所有字符都能匹配Matcher,返回true </span><span class="token keyword">boolean</span> <span class="token function">matchesNoneOf</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//sequence中所有字符都不能匹配Matcher,返回true </span><span class="token keyword">int</span> <span class="token function">indexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中匹配到的第一个字符的坐标 </span><span class="token keyword">int</span> <span class="token function">indexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回从start开始,在sequence中匹配到的第一个字符的坐标</span><span class="token keyword">int</span> <span class="token function">lastIndexIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中最后一次匹配到的字符的坐标 </span><span class="token keyword">int</span> <span class="token function">countIn</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//返回sequence中匹配到的字符计数 </span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">removeFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除sequence中匹配到到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">retainFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//保留sequence中匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">replaceFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//替换sequence中匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除首尾匹配到的字符并返回</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimLeadingFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除首部匹配到的字符</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimTrailingFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//删除尾部匹配到的字符</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">collapseFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//将匹配到的组(连续匹配的字符)替换成replacement</span><span class="token operator">*</span><span class="token operator">*</span>String <span class="token function">trimAndCollapseFrom</span><span class="token punctuation">(</span>CharSequence sequence<span class="token punctuation">,</span> <span class="token keyword">char</span> replacement<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token comment" spellcheck="true">//先trim在replace></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、示例："><a href="#3、示例：" class="headerlink" title="3、示例："></a>3、示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">charMatcherTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> String testStr <span class="token operator">=</span> <span class="token string">"FirstName LastName +1 123 456 789 !@#$%^&amp;*()_+|}{:\"?>&lt;"</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstNameLastName</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLetterOrDigit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// FirstNameLastName1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">javaLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// irstameastame</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countIn</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 54</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstName LastName +    !@#$%^&amp;*()_+|}{:"?>&lt;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//   1 123 456 789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">anyOf</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retainFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// aaa1123456789</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CharMatcher<span class="token punctuation">.</span><span class="token function">inRange</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceFrom</span><span class="token punctuation">(</span>testStr<span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// FirstName LastName +* *** *** *** !@#$%^&amp;*()_+|}{:"?>&lt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：CharMatcher只处理char类型代表的字符；</strong></p><h3 id="四、字符集【Charsets】"><a href="#四、字符集【Charsets】" class="headerlink" title="四、字符集【Charsets】"></a>四、字符集【Charsets】</h3><p>Charsets针对所有Java平台都要保证支持的六种字符集提供了常量引用。尝试使用这些常量，而不是通过名称获取字符集实例。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p><code>bytes = string.getBytes(Charsets.UTF_8);</code></p><h3 id="五、大小写格式【CaseFormat】"><a href="#五、大小写格式【CaseFormat】" class="headerlink" title="五、大小写格式【CaseFormat】"></a>五、大小写格式【CaseFormat】</h3><p>CaseFormat被用来方便地在各种ASCII大小写规范间转换字符串——比如，编程语言的命名规范。CaseFormat支持的格式如下：<br></p><table><thead><tr><th>格式</th><th>范例</th></tr></thead><tbody><tr><td>LOWER_CAMEL</td><td>lowerCamel</td></tr><tr><td>LOWER_HYPHEN</td><td>lower-hyphen</td></tr><tr><td>LOWER_UNDERSCORE</td><td>lower_underscore</td></tr><tr><td>UPPER_CAMEL</td><td>UpperCamel</td></tr><tr><td>UPPER_UNDERSCORE</td><td>UPPER_UNDERSCORE</td></tr></tbody></table><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">caseFormatTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>UPPER_UNDERSCORE<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>CaseFormat<span class="token punctuation">.</span>LOWER_CAMEL<span class="token punctuation">,</span><span class="token string">"FIRSTNAME"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// firstname</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x20-总结"><a href="#x20-总结" class="headerlink" title="&#x20;总结"></a>&#x20;总结</h3><p>在使用Guava字符串处理工具时，性能是一个不可忽视的因素。Guava库经过精心设计，旨在提供高效的操作，但在一些特定场景下，合理的性能考虑仍然是必要的。</p><p>首先，Guava的字符串处理工具通常在处理大规模数据时表现出色。例如，在使用<code>Splitter</code>进行字符串拆分时，Guava能够更有效地处理大型字符串，相较于传统的字符串拆分方法，这将在处理大量文本数据时体现出明显的性能优势。</p><p>其次，Guava的一些设计目标是为了避免不必要的内存分配和拷贝，从而提高性能。例如，使用<code>Joiner</code>连接字符串时，Guava可以更智能地处理拼接过程，减少临时对象的创建，从而降低了内存开销。然而，在某些场景下，如果性能是关键问题，开发者仍需谨慎选择适当的方法和工具。Guava提供了丰富的选项，通过合理地选择工具和参数，可以使得性能得到最优化。</p><p>Guava字符串处理工具为Java开发者提供了强大而灵活的解决方案，能够简化日常的字符串操作，并在性能方面展现出色的表现。通过本文的介绍，我们深入了解了Guava中关于字符串的各种特性，从基础的判空和拆分，到高级的不可变字符串。</p><p>在使用Guava时，我们学习了如何利用<code>Splitter</code>和<code>Joiner</code>等工具执行各种字符串操作，以及如何通过<code>CharMatcher</code>处理字符匹配和替换。同时，我们也了解了不可变字符串的优势，以及在一些特定场景中的应用。</p><p>在选择使用Guava字符串处理工具时，我们需要根据具体的需求和场景来权衡灵活性和性能。Guava为我们提供了丰富的选择，让我们在处理字符串时更加便捷高效。</p><p>总的来说，Guava的字符串处理工具不仅为我们提供了更好的开发体验，同时也通过其高效的设计为项目性能提供了可靠的支持。在今后的Java开发中，深入了解并灵活应用Guava的字符串处理工具，将是提高代码质量和开发效率的不错选择。</p>]]></content>
      
      
      <categories>
          
          <category> Java工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java工具类 </tag>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
